/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:19:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-899);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1414));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "4Ic%)LFg{>I8!,", "", options0, 13, 32, "");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("*Dk`5nF.Kse35UB");
      helpFormatter0.defaultLeftPad = (-472);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", true, "-");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.findWrapPos(", ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = " ";
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PrintWriter printWriter0 = null;
      int int0 = (-2716);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 11;
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLeftPad = 11;
      helpFormatter0.defaultArgName = "kVF_";
      helpFormatter0.defaultDescPad = (-300);
      helpFormatter0.findWrapPos("arg", 1283, 1283);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("bs;ylq", 97, 1283);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, 9, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-633));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'f*8c5\"E", "'f*8c5\"E", (Options) null, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.setLongOptPrefix("*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tpsST8J9G}GY-1N`");
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 32, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-4344), (-2086), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "?Bl}muT-J\"Jr", "?Bl}muT-J\"Jr", (Options) null, "?Bl}muT-J\"Jr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(433, "org.apache.commons.cli.HelpFormatter", "ABa({Qg", options0, "org.apache.commons.cli.AlreadySelectedException", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("}Cc^NGH%;?wr}f<QD3", "}Cc^NGH%;?wr}f<QD3", options0, "}Cc^NGH%;?wr}f<QD3", false);
      String string0 = helpFormatter0.createPadding(1218);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oHR/(^cK(sloHV7e");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "}Cc^NGH%;?wr}f<QD3";
      objectArray0[4] = (Object) "}Cc^NGH%;?wr}f<QD3";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, string0, objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) string0;
      objectArray1[1] = (Object) "oHR/(^cK(sloHV7e";
      PrintWriter printWriter0 = mockPrintWriter0.format("[ option: ", objectArray1);
      helpFormatter0.printHelp(printWriter0, 417, "[ option: ", (String) null, options0, 1218, 1218, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("V", true, "\"VY$f6aJW*7sD+");
      helpFormatter0.printHelp("qO1p;U,7l5)_|H649T", options0, true);
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 13, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y]6it^O``og,s2W*0c", "", (Options) null, "-;}xj+u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", options0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("q8T m@!/:(6W4`'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "{uEK2Xe", (String) null, options0, (-689), 835, "{uEK2Xe", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(597, " ", "--", options0, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("Kxfbi");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BK@A@r@ca@");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, (String) null, "{uEK2Xe", options0, 835, 835, "{uEK2Xe", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockURI.URI("arg", "\n", "");
      MockFile mockFile0 = new MockFile("-");
      Options options0 = new Options();
      helpFormatter0.rtrim("]pb");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.GERMANY;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      mockPrintWriter0.print('_');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 25, ",nn`A{go NZ,3", (String) null, options0, (-2), (-2), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      options2.helpOptions();
      options2.hasOption("has already been selected: '");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      options2.hasShortOption("");
      Options options3 = options2.addOption((String) null, ", ", true, "+!'hb`[L");
      helpFormatter0.printHelp("x~~", options3, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      boolean boolean0 = false;
      options2.addOption("U", "7}U", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "--", "IBH1uP|`", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "", "Xr 9]", options0, 2455, 31, "pn1", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("&ZM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", " ", options0, 1, (-618), " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 0;
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      String string0 = "%ksdT\"G6SD<Gt,)";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "H$10YJ&f0Kv.EDXb", "H$10YJ&f0Kv.EDXb", options1, 0, 10, "%ksdT\"G6SD<Gt,)", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|/kx@B6I", "9QlXlA2GeMgNE", (Options) null, "|/kx@B6I", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "pn1", "pn1", options0, 0, 0, " ", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "d^Am~g7l.UF.&U:l";
      String string1 = "'2~'\\L%g`F";
      boolean boolean0 = true;
      options0.addOption("arg", "'2~'L%g`F", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockURI.URI("arg", "\n", "");
      MockFile mockFile0 = new MockFile("-");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "7}U", true, "M'mTa?");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "4A@[eARd]JwH ,n5-:");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-419), "arg", " ", options3, "' was specified but an option from this group ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 99;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T\"*;(|'Y6<f", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockURI.URI("arg", "\n", "");
      MockFile mockFile0 = new MockFile("-");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1580), options0, 2, 1798);
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options1 = new Options();
      Option option0 = new Option("", "arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 673, "xFDM", "xFDM", options2, (-2), 0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), (Options) null, 2469, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(44, "_Q.C#.Ph", "", options1, "", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1227, "S#B?IK", "arg", options1, 3, 731, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2542, ">@", ">@", options1, "_Q.C#.Ph", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1), "", "", options1, 2542, 2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2542, ">@", ">@", options1, "_Q.C#.Ph", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "-", (String) null, options1, 3, 731, "_Q.C#.Ph", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "\n");
      StringBuffer stringBuffer2 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3175), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "\n");
      helpFormatter1.rtrim("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 625, 1, "--");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      helpFormatter0.setWidth((-1));
      Options options3 = options2.addOption((String) null, ", ", true, "+!'hb`[L");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x~~", options3, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 3, options1, 1, 0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-1100), 74, "Kq0Hfeeate");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "--", false, "' n\">`:#z=qQWw</*");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "Y:jBu)WI<,}hW4R", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4165, "!+C7", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "AW-Qec>Q j }+d^", "AW-Qec>Q j }+d^", options0, "AW-Qec>Q j }+d^", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "\n");
      String string0 = "65`=z)r*^7:@+_Ga)3L";
      String string1 = "w_23";
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter1.rtrim("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "65`=z)r*^7:@+_Ga)3L";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "w_23";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringBuffer1;
      objectArray0[7] = (Object) "65`=z)r*^7:@+_Ga)3L";
      PrintWriter printWriter0 = mockPrintWriter0.format("'", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, 3, 3135, "65`=z)r*^7:@+_Ga)3L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2716), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "AmG&FBW";
      PrintWriter printWriter0 = mockPrintWriter0.format("AmG&FBW", objectArray0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, (String) null, "", options0, 1, 1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "\n");
      String string0 = "65`=z)r*^7:@+_Ga)3L";
      try { 
        MockURI.URI("65`=z)r*^7:@+_Ga)3L", "-", "w_23");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 65`=z)r*^7:@+_Ga)3L:-#w_23
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("='mBCs?tT0Dm_t\"'y}k");
      helpFormatter0.printHelp(46, "I2)0,zl)12hcxI", "", options0, "='mBCs?tT0Dm_t\"'y}k", false);
      StringBuffer stringBuffer0 = new StringBuffer(51);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 321, 46, "");
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 46, options1, 1043, 1920);
      helpFormatter0.renderWrappedText(stringBuffer2, 321, 2986, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      options0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "C", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "~mzV#y_K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.OptionValidator";
      int int0 = 1830;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1830, "org.apache.commons.cli.OptionValidator", "62\"5ui`t0>crFa~'", (Options) null, "org.apache.commons.cli.OptionValidator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "B$  w{LV(f@W", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("='mBCs?tT0Dm_t\"'y}k");
      helpFormatter0.printHelp(46, "I2)0,zl)12hcxI", "", options0, "='mBCs?tT0Dm_t\"'y}k", false);
      options0.getOption("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 46, "VtmZ'h'Ernx<<wzCeT%", "I2)0,zl)12hcxI", options0, (-3186), 26, "='mBCs?tT0Dm_t\"'y}k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("");
      Option option0 = new Option("L", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(";\"[aYZ6@xh.e6D", "}zaoygVbb.8<%", options1, "", false);
      boolean boolean0 = true;
      helpFormatter0.printHelp(828, "org.apache.commons.cli.OptionValidator", "k^7LBtB22G%>WNmP=", options0, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      int int0 = 31;
      // Undeclared exception!
      try { 
        options0.addOption("0cID( c.hUA", true, "Z[j+FP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0cID( c.hUA' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = new Options();
      options1.addOption("", true, (String) null);
      Options options2 = new Options();
      helpFormatter0.printHelp("+!'hb`\"L", options1, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      helpFormatter0.printHelp(46, ", ", ", ", options0, "FVD", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k(9kiK)");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 46, "I2)0,zl)12hcxI");
      helpFormatter0.findWrapPos("wrp", 36, 36);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 36, "P!v4Keo{{", "I2)0,zl)12hcxI", options0, 36, 46, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLongOptPrefix("p R2arzda/ZqR$/R{");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("JDrJ[?s");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 14, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("='mBCs?tT0Dm_t\"'y}k");
      helpFormatter0.printHelp(46, "I2)0,zl)12hcxI", "", options0, "='mBCs?tT0Dm_t\"'y}k", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".yg!K\"(b");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 46, ".yg!K\"(b");
      helpFormatter0.findWrapPos("arg", 46, 36);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 46, "ERmIA0", options0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      Locale locale0 = Locale.CANADA;
      locale0.stripExtensions();
      String string0 = "Z+I]}*u l>";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z+I]}*u l>");
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) " ", 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 346;
      options0.toString();
      options0.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5466), ")5mA", "03Y7v?", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.setLongOptPrefix("*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tpsST8J9G}GY-1N`");
      int int0 = 0;
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "\"C\".k$:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#3Iz";
      String string1 = "k^7LBtB22G%>WNmP=";
      Options options0 = new Options();
      options0.hasOption("\n");
      boolean boolean0 = true;
      int int0 = 34;
      helpFormatter0.setLongOptSeparator("w`-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "#3Iz";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "#3Iz";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "Z+I]}*u l>", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "h D", "Z+I]}*u l>", options0, (-4295), 31, "h D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[1];
      helpFormatter0.defaultLeftPad = (int) ':';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "");
      helpFormatter0.defaultDescPad = 9;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("-&<> QG(4e9Df,8AFqb");
      helpFormatter0.getDescPadding();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 346;
      options0.toString();
      options0.hasOption((String) null);
      options0.addOption("", "arg", false, "arg");
      helpFormatter0.printHelp(346, " ]", " ]", options0, " ]");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cm)v");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 346, 346, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      Options options1 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options1, 31, 374);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-682), "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      int int0 = (-874);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-874), options0, (-874), (-539));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      options2.helpOptions();
      Options options3 = options2.addOption((String) null, ", ", true, "+!'hb`[L");
      helpFormatter0.printHelp("x~~", options3, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultLeftPad = 512;
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "x~~";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "XID@4WoL", options0, "=5ixxP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 2661, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 277, options0, 1151, 2661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YGXC')~tO4[O", options0, false);
      options0.hasOption("*=}Y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(63, (String) null, "k", options0, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      helpFormatter1.renderWrappedText(stringBuffer0, 227, 0, "YGXC')~tO4[O");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Zn");
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) "x~~";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 69, "Zn");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.setWidth(1404);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1404, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-609), options1, (-609), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 3;
      options0.toString();
      options0.hasOption((String) null);
      Options options1 = options0.addOption("", "arg", false, "arg");
      helpFormatter0.printHelp(346, " ]", " ]", options0, " ]");
      options1.getOption("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("DdR8q7L49").when(comparator0).toString();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cm)v");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 346, 346, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 828, options1, 1722, (-383));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      String string0 = "";
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("[", options2);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "";
      int int0 = (-2825);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2825), (-2825));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "k^7LBtB22G%>WNmP=", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "+{0t7d_,AER\\";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "";
      helpFormatter0.defaultNewLine = "+{0t7d_,AER";
      String string3 = "'";
      boolean boolean0 = false;
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" :: ");
      helpFormatter0.findWrapPos("", 1680, 2679);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth((-1377));
      String string0 = "";
      String string1 = "v({-H43";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("v({-H43", "org.apache.commons.cli.Option", true, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v({-H43' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      options0.toString();
      options0.hasOption((String) null);
      helpFormatter0.printHelp(346, "[ option: ", "", options0, (String) null, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 35, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3117), "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "");
      helpFormatter0.defaultDescPad = 9;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = " ";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "");
      helpFormatter0.defaultDescPad = 9;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("_#[\"T");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = " | ";
      helpFormatter0.defaultOptPrefix = " | ";
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      int int0 = 1;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "g>@h:";
      options0.getOption("g>@h:");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setSyntaxPrefix(" | ");
      helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short ";
      int int0 = (-2);
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      String string3 = "g+|";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("");
      boolean boolean0 = true;
      helpFormatter0.printHelp(828, "org.apache.commons.cli.OptionValidator", "k^7LBtB22G%>WNmP=", options0, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 14;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "k^7LBtB22G%>WNmP=", "org.apache.commons.cli.OptionValidator", options0, 31, 828, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2661, "usage: ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim(" ");
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      Options options1 = options0.addOption("", "et1I-5L", false, " ");
      helpFormatter0.printHelp(1232, "[", "org.apache.commons.cli.HelpFormatter", options1, "[", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 346;
      options0.toString();
      options0.hasOption((String) null);
      helpFormatter0.defaultDescPad = 346;
      StringBuffer stringBuffer0 = new StringBuffer("`BC^F{");
      helpFormatter0.renderWrappedText(stringBuffer0, 1424, 13, " ");
      assertEquals(828, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "]";
      int int0 = (-1);
      String string1 = "!B4id-_6,";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(" ", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "asEJl5Z6u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 346;
      options0.toString();
      options0.hasOption((String) null);
      helpFormatter0.printHelp(346, "[ option: ", "", options0, (String) null, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 35, "");
      assertEquals(828, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YGXC')~tO4[O", options0, false);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.printHelp("mObJ", "mObJ", options0, "v]@CIS", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2661, "YGXC')~tO4[O");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      URI uRI0 = MockURI.URI("arg", "\n", "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("\n");
      options0.addOption("arg", "usage: ", false, "\n");
      int int0 = (-1312);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1312), "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      options0.getOptions();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "C", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1377, "cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "~mzV#y_K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(" :: ", " :: ", options0, "", false);
      helpFormatter0.getLongOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("6ygM]{ f>5\"H;hjb", "", options0, "pw&QxY%-yZ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 44, options0, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      Options options3 = options2.addOption((String) null, ", ", true, "+!'hb`[L");
      helpFormatter0.printHelp("x~~", options3, true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      String string0 = ",.ho>x-y}}@PT5";
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(828);
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 346;
      options0.toString();
      options0.hasOption((String) null);
      options0.addOption("", "arg", false, "arg");
      helpFormatter0.printHelp(346, " ]", " ]", options0, " ]");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cm)v");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 346, 346, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(" :: ", " :: ", options0, "", false);
      helpFormatter0.getLongOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("6ygM]{ f>5\"H;hjb", "", options0, "pw&QxY%-yZ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-3667);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3667), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YGXC')~tO4[O", options0, false);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2661, "YGXC')~tO4[O");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
