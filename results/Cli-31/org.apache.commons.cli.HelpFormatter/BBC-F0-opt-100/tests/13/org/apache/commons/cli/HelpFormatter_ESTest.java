/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:59:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 101;
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setSyntaxPrefix("',iYQ\"wzKY");
      helpFormatter0.renderWrappedText(stringBuffer0, 1197, 1064, "org.apache.commons.cli.Util");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "usage: ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("e7", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", true, "<");
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-4567);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", true, "-");
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp(74, ";Cj=}8", "", options0, "0<t");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, 1813, 1816);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1207));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "usage: ", "0{e2_t3&O|NU\"d", (Options) null, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Locale locale0 = new Locale("<");
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.printHelp("#aAmINGhd5f.!", options0, true);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.printHelp("usage: ", "--", options0, "&I-");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, 0, ".')@j-Xnh 'o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3791, "jnBolbZu\"N5@", "h0wfF>6+NH1LU", options0, 3791, 10, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultOptPrefix = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "-", true, "X8Iy-5jNyVbr~[;M^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fG");
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      Option option0 = new Option("N", "", false, "&\"b|]gIgo2");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "X8Iy-5jNyVbr~[;M^", "org.apache.commons.cli.ParseException", options2, 31, (-1), "N", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("-1 ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~C65zyq<-{H", "-1 ", options0, "-1 ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultOptPrefix = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", true, "X8Iy-5jNyVbr~[;M^");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options2, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "U:i}'7>/j{<cO-*ko_g", "nHJ4?'rGO^", options0, "nLbDW80o!{lb<", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "\n";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3755);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " :: ";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " :: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "O0Z,305Tf?h)X%1oGj*");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 64, 1, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1, "Kgm#vru?h42S}%qjhb");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultNewLine = " [ARG]";
      int int0 = (-328);
      String string0 = "--";
      helpFormatter0.setSyntaxPrefix("--");
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-328), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "-", "   ", options0, " ");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(" ", "y!!SB.LLT3C;[z", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "--", options2);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 7, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+OG-}QdxA*1$jzcecz", "+OG-}QdxA*1$jzcecz", (Options) null, "D)?|SN)y4", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultWidth = 58;
      helpFormatter0.createPadding(32);
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2315, "Fqnc)W2WQj|HP5D", "Fqnc)W2WQj|HP5D", options0, 0, (-137), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultOptPrefix = "Tc;BaZ5G)_jU9qbj?m#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = (-60);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", true, "X8Iy-5jNyVbr~[;M^");
      helpFormatter0.renderOptions(stringBuffer0, 2663, options2, 2663, 2663);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "6f@<0+");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (-1), "~GQk8CWe-XMU&j#jLV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xKW!\"bOW", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "-", "   ", options0, " ");
      helpFormatter1.printHelp("The option '", options0);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale(" ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "   ";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) " ";
      Object object1 = new Object();
      objectArray0[6] = object1;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      helpFormatter1.printOptions(printWriter1, 74, options0, 3209, 3);
      helpFormatter0.createPadding(1);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("   ", options1);
      MockFile mockFile0 = new MockFile("--", "--");
      options1.getMatchingOptions("-");
      String string1 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", " ,?Y6%C", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "y6M8CYLr]bq]DM,", "", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 285, "-", (String) null, options0, 11, 11, "-", true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 32, (Options) null, 74, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", false, "6f@<0+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "DRuOw1ab>;`FCn*n8l(", options1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("-");
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("0*T^P0h#2LJeG");
      options1.hasLongOption("UOn");
      helpFormatter0.printHelp("0*T^P0h#2LJeG", options1);
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.getLongOptPrefix();
      options1.hasLongOption("1`X`");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4034, "H_zg", "H_zg", (Options) null, 63, 13, " ]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=B)!kWLMqVq!q6 ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4053, "=B)!kWLMqVq!q6 ", "=B)!kWLMqVq!q6 ", options0, 41, 4053, "=B)!kWLMqVq!q6 ", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "jnBolbZu\"N5@";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "[", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter1.printHelp(printWriter0, 997, "jnBolbZu\"N5@", "", options1, 3, 32, "", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", ";GaL!t}oBGc:di9&P", (Options) null, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1161), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W0y=xJ;LM&");
      Options options0 = new Options();
      Option option0 = new Option("", false, "X#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1470, ", ", "", options0, 1365, (-1), "X#", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0vTR6|kB_o]1u(:5F", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultOptPrefix = "Tc;BaZ5G)_jU9]bj?m#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", "-", true, "X8Iy-5jNyVbr~[;M^");
      Option option0 = new Option("", "-");
      options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 2663, options2, 2663, 2663);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">Yk.BdO", "", options1, ">Yk.BdO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter0.setArgName("-");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options0, "[", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-3026));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "(J20oD?&", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultOptPrefix = "Tc;BaZ5G)_jU9]bj?m#";
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.renderWrappedText(stringBuffer0, 111, 1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = new Options();
      options2.hasLongOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1625, "r{?vk]enw-oq?04", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options2, 4178, 1, "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "6f@<0+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "DRuOw1ab>;`FCn*n8l(", options1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 683, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2537;
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 29, 2537);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println(false);
      int int1 = 14;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 3987, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 15, options0, 58, (-725));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "UDZ\")QS", "", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "~GQk8CWe-XMU&j#jLV", false, " ");
      optionGroup0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, " ", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.printHelp("UYAKDF/M2vl,[ve*", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-3164), "usage: ", "usage: ", options0, 3, 1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.printHelp("UYAKDF/M2vl,[ve*", options0, true);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " c1~+.2-q1@CE", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "6f@<0+");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 636, "}V/SHE|k9u<~", "vg1,Ts!FJ(](w;", options0, 662, (-3164), "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Locale locale0 = new Locale("<");
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.printHelp("#aAmINGhd5f.!", options0, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale1 = new Locale("*I1Q<{*1@!Uc*EBJ");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "3}QUfIGe^X", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-724), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[2] = (Object) "";
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "");
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 662, 790, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Locale locale0 = Locale.CHINESE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "}^51a9dUogfmt6", ")QA=Pq\"(~HZ0|Ih", (Options) null, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XM&j#jLV");
      Options options0 = new Options();
      mockPrintWriter0.println(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("--", 3, 1620);
      helpFormatter1.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Locale locale0 = new Locale("<");
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.printHelp("#aAmINGhd5f.!", options0, true);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Locale locale0 = new Locale("usage: ");
      helpFormatter0.setLongOptSeparator(">");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.printHelp("-", options0, false);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      Options options2 = options1.addOption("", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "g%", false, "org.apache.commons.cli.Util");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(false);
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "", options3, "wuA5");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2613, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("BW7j%");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D|H");
      mockPrintWriter0.println(" ");
      String string1 = "m1*}z";
      Options options0 = new Options();
      String string2 = "z$-*6:UVoi_;V5Ng";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1321, "D|H", "kBY q\":z@A{_4]4 29", options0, (-30), 3774, "z$-*6:UVoi_;V5Ng");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XMU&j#jLV");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "6f@<0+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(10, "~GQk8CWe-XMU&j#jLV", "", options1, "", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      int int0 = 33;
      stringWriter0.append('M');
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.println("usage: ");
      String string0 = "has already been selected: '";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 33, "has already been selected: '");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int1 = (-505);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-505));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "--", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, options2, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~GQk8CWe-XM&j#jLV");
      Options options0 = new Options();
      mockPrintWriter0.println(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "m1*}z", ".`zlhcoCeF<V", options0, 104, 0, "0nU&+6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("b-M5$lw$s<`u\"");
      Options options1 = options0.addOption("", true, " F {CnndqoB");
      options1.getOptions();
      helpFormatter0.printHelp("-", "usage: ", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "Qps0", options0, " F {CnndqoB", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "";
      options0.getMatchingOptions("b-M5$lw$s<`u\"");
      Options options1 = options0.addOption("", true, " F {CnndqoB");
      options1.getOptions();
      helpFormatter0.printHelp("-", "usage: ", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "Qps0", options0, " F {CnndqoB", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("7yS1'i", (-546), (-546));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "");
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1874, (-720), "z");
      int int0 = (-1);
      String string1 = "Ppe|~F zv5M-uqD:";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), (-1790), "Ppe|~F zv5M-uqD:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Locale locale0 = new Locale("<");
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      String string0 = ">";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      helpFormatter0.setLongOptSeparator(">");
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) ">";
      String string1 = "[";
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "g";
      helpFormatter0.setOptPrefix(")lUo}[D$");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "g", (String) null, (Options) null, "6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "i2U'  nEe(;", (Options) null, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(40);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^bGI3", "^bGI3", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultOptPrefix = "Tc;BaZ5G)_jU9qbj?m#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 2663, options0, 2663, 2663);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jnBolbZu\"N5@";
      String string1 = "org.apache.commons.cli.ParseException";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.ParseException");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(12, (String) null, " | ", (Options) null, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("<");
      String string0 = "*I1Q<{*1@!Uc*EBJ";
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      String string1 = ">";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      helpFormatter0.setLongOptSeparator(">");
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) ">";
      mockPrintWriter0.printf(locale0, ">", objectArray0);
      Options options0 = null;
      int int0 = (-38);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-38), "*I1Q<{*1@!Uc*EBJ", "n~f[qJ>$g(->", (Options) null, "*I1Q<{*1@!Uc*EBJ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter2.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, (String) null, "", (Options) null, (-2033), 1, "\"EImkxni+j'V}", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(10);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultSyntaxPrefix = "u7z;gxE/y";
      helpFormatter0.defaultNewLine = "|&7V~*B>=q<39}+";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim(">");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "|&7V~*B>=q<39}+");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 52, options2, 52, 52);
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'N';
      charArray0[2] = 'T';
      charArray0[3] = 'I';
      charArray0[4] = '>';
      charArray0[5] = 'D';
      charArray0[6] = '*';
      // Undeclared exception!
      try { 
        stringBuffer1.insert((-2), charArray0, 10, 431);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      Options options2 = options1.addOption("", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "g%", false, "org.apache.commons.cli.Util");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options0.getOptions();
      Option option1 = new Option("", true, "");
      Options options4 = options3.addOption(option1);
      helpFormatter0.printHelp(1083, "Pm", "", options4, (String) null);
      helpFormatter0.printHelp("Pm", options1);
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultOptPrefix = "Tc;BaZ5G)_jU9qbj?m#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", true, "X8Iy-5jNyVbr~[;M^");
      helpFormatter0.renderOptions(stringBuffer0, 2663, options2, 2663, 2663);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3774, " ", " ", (Options) null, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "P'S^.\"A";
      String string1 = "VU?";
      Options options0 = new Options();
      mockPrintWriter0.println("--");
      int int0 = (-1933);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "P'S^.\"A", "VU?", options0, 1514, (-1933), "P'S^.\"A");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "arg");
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(3);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.setLongOptSeparator("D9&[");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-770);
      helpFormatter0.defaultDescPad = (-770);
      String string0 = null;
      String string1 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Locale locale0 = Locale.GERMAN;
      locale0.stripExtensions();
      mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 32, 1506, "Jn2M");
      helpFormatter0.setArgName("9K'z09Y");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      int int0 = 2115;
      helpFormatter0.setDescPadding(2115);
      String string1 = "kK#U_pW$/?$a0M";
      MockFile mockFile0 = new MockFile("arg", "kK#U_pW$/?$a0M");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("<");
      helpFormatter0.defaultOptPrefix = "*I1Q<{*1@!Uc*EBJ";
      String string0 = ">";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) locale0;
      helpFormatter0.setLongOptSeparator(">");
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ">", objectArray0);
      String string1 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "[", options0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "Nb";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Nb";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("Nb", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-6427), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "");
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-720), "", "", options0, 790, 662, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.createPadding(4027);
      helpFormatter0.setSyntaxPrefix(".jl'`<+^,EMnQeeNn?");
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1565));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "i2U'  nEe(;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]EA`");
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Options options2 = options1.addOption((String) null, "-", false, "usage: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ")rto~[={C+#Bs";
      options0.addOption("arg", "", true, ")rto~[={C+#Bs");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "";
      String string1 = "VU?";
      Options options0 = new Options();
      mockPrintWriter0.println("--");
      int int0 = (-1933);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "VU?", options0, 1514, (-1933), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("U5sX$uO0NI", "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1999), "[ option: ", "U5sX$uO0NI", (Options) null, (-1999), (-1999), "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.defaultNewLine = "'sLB##b/P}/X(";
      Options options0 = new Options();
      options0.toString();
      String string0 = "";
      options0.getMatchingOptions("");
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "cmdLineSyntax not provided", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("u7z;gxE/y");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", " ", false, "0vt0o");
      options1.hasShortOption("--");
      String string1 = "t]MCLOON";
      // Undeclared exception!
      try { 
        options1.addOption("t]MCLOON", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't]MCLOON' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("' contains an illegal character : '");
      helpFormatter0.getNewLine();
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(10);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultSyntaxPrefix = "u7z;gxE/y";
      helpFormatter0.defaultNewLine = "|&7V~*B>=q<39}+";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim(">");
      helpFormatter0.getNewLine();
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2152);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2152), ".u4?zL/@ d6", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, ".u4?zL/@ d6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", false, "X8Iy-5jNyVbr~[;M^");
      helpFormatter0.renderOptions(stringBuffer0, 2663, options2, 2663, 2663);
      assertEquals(53, stringBuffer0.length());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = "The option '";
      String string1 = "K]Z$x[W";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "arg", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = "jnBolbZu\"N5@";
      String string1 = ")lUo}[D$";
      helpFormatter0.setOptPrefix(")lUo}[D$");
      String string2 = "6\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "jnBolbZu\"N5@", (String) null, (Options) null, "6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.setNewLine("]");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(">", "NO_ARGS_ALLOWED");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3774, " ", " ", (Options) null, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = "U8}dk9pjM)P?3AzvK";
      String string1 = "[]bQ|ztiN>&L>";
      Options options0 = new Options();
      String string2 = "l";
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
