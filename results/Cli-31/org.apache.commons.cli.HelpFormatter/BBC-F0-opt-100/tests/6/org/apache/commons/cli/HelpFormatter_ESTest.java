/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("53Z_P1JQq4EgK9 ^m", "A CloneNotSupportedException was thrown: ", options0, "DxAi;it5LEU4,0y<|_", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("\n");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      option0.setLongOpt(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "--", options1, "arg", true);
      helpFormatter0.createPadding(99);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-910), options1, 123, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      options0.addOption("", false, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp(" ", options0);
      int int0 = 0;
      helpFormatter0.findWrapPos(" ", 0, 0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "*";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "";
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1662);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1662, "a8", "a8", options0, 1662, 1662, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "arg";
      String string0 = "";
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, "Zw5_%bsS{=hDn&\"N-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt(" ");
      helpFormatter0.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "--", options2, "arg", true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 10;
      String string0 = "AVHRcwlbwVj^?/-=IyH";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "CeurTE.TQD", "#XUfgJVE{t^lo", (Options) null, "AVHRcwlbwVj^?/-=IyH", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "usage: ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("NO_ARGS_ALLOWED", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 4557, 117, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2120, (Options) null, 42, 2120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      String string0 = "DRMc_U^Y6FKgr~y,";
      String string1 = "usage: ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "org.apache.commons.cli.HelpFormatter", "%EBb2 tE}%-1O", (Options) null, 34, (-870), "%EBb2 tE}%-1O");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.defaultLeftPad = (-4);
      boolean boolean0 = true;
      options0.addOption(option0);
      option0.setLongOpt(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 0;
      int int0 = 9;
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.setDescPadding(2457);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(2266);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 2373, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2));
      options0.addOption("", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (String) null, options0, " [ARG]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.US;
      Option option0 = new Option("arg", true, "--");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) "arg";
      mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 422, "arg", " ", options1, 74, 74, "\n", true);
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.lookup(linkedList1, linkedList2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", true, "org.apache.commons.cli.ParseException");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1957), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 33, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp(" [ARG]", " [ARG]", options1, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "O,n4rUn6x\u0003-I03", true, "   ");
      option0.setLongOpt("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("gNOqCMM", "A CloneNotSupportedException was thrown: ", true, (String) null);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "org.apache.commons.cli.OptionGroup", options2, " ", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.US;
      Option option0 = new Option("arg", true, "--");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "arg", "-", options0, 1286, 74, "arg", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setWidth(31);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("c", "org.apache.commons.cli.Option", (Options) null, "org.apache.commons.cli.AlreadySelectedException", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-237));
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      int int0 = helpFormatter0.defaultDescPad;
      MockFile mockFile0 = new MockFile("a~B~3%wWB", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("pd9|0\\,VJ", (String) null, options0, "'", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter1.renderOptions((StringBuffer) null, 1085, options0, 0, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1177, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      Option option1 = new Option("arg", true, "arg");
      Options options3 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = new Options();
      Options options5 = options2.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) dataOutputStream0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options4;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 9, "   ", " ", options5, (-2429), 2154, "[", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1432, "t}%=Go|_\"4l_D_c9", (String) null, options2, (-2304), 3, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter1, 1848, "arg", "", options1, 1813, 1813, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.findWrapPos("arg", 1177, 1813);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 42, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = new Locale("-", "arg", "usage: ");
      helpFormatter0.defaultNewLine = "usage: ";
      PrintWriter printWriter0 = mockPrintWriter1.format("arg", (Object[]) null);
      printWriter0.close();
      helpFormatter0.printWrapped(printWriter0, 1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 42, "usage: ", "usage: ", (Options) null, 0, 1, "2|> mZ|tg7iK[)'b", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.US;
      helpFormatter0.defaultNewLine = "usage: ";
      mockPrintWriter1.format("arg", (Object[]) null);
      mockPrintWriter0.printf("--", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("k7+*#NXp?Bq(6f]U?,2", " ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k7+*#NXp?Bq(6f]U?,2' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('4');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 186, "v5M%OPkB2sf!3");
      helpFormatter0.getOptionComparator();
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2564, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      Option option0 = new Option("", true, "v5M%OPkB2sf!3");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "`)joUhLqUJ-]Zv^bC", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2564, "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(6'DNH\"o`c7P";
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("\n", 0, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.US;
      Option option0 = new Option("", true, "\n");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.toString();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.toString();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]", options0, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(6'DNH\"o`c7P";
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      boolean boolean0 = true;
      options0.addOption("F", true, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      String string1 = "";
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Object object0 = new Object();
      options0.addOption("", false, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      helpFormatter0.printHelp("HJa.", "ZXw[[\";)E", options0, "pIO34.$.,<x", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 114;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 114, (-4021), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3568, "zQ8$y7T,hd1v:8g", "zQ8$y7T,hd1v:8g", options0, "<");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 122, 115);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.defaultDescPad = (-924);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3536, "   ", "zQ8$y7T,hd1v:8g", options0, "   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("qGH>^+%w", "", options0, "M4HzN|JhZVJJOb0V", false);
      helpFormatter0.printHelp(64, ",e7CfQ@", "};", options0, ",e7CfQ@");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("};");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 31, "};");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", "", options2, "(6'DNH\"o`c7P", true);
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) option0;
      PrintStream printStream0 = mockPrintStream0.printf("3<n7[@#`/", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("qGH>^+%w", "", options0, "M4HzN|JhZVJJOb0V", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RRb1Qf");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(1364, "1.w/~/lP{", "", options2, " ");
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 308, options0, 10, (-447));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "arg", "&ic?", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("ye0R", (String) null, options0, " [ARG]", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("'", "", options0, "", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.US;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      PrintWriter printWriter0 = mockPrintWriter2.format("", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1814, "");
      helpFormatter0.printOptions(printWriter0, 1814, options0, 1, 1824);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 9;
      Options options0 = null;
      int int1 = 1832;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 9, (Options) null, 1, 1832);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "(6'DNH\"o`c7P", "};", (Options) null, "(6'DNH\"o`c7P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("arg");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(5120, "has already been selected: '", (String) null, options1, " c,");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "g*ch_i*n &\"CP(8Y");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(l'D\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      options0.addOption("", true, "--");
      option0.setOptionalArg(true);
      Options options1 = new Options();
      helpFormatter0.printHelp("' contains an illegal character : '", options1);
      helpFormatter0.findWrapPos("4=i6k*p", 10, (-2));
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      helpFormatter0.printHelp(20, " ] [ long ", "", options0, "' contains an illegal character : '", false);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption("", false, "--");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      option0.setLongOpt("");
      Options options3 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("\n", options4);
      Options options5 = new Options();
      options5.getOptionGroups();
      helpFormatter0.printHelp("k!*", "cmdLineSyntax not provided", options2, " c,", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.Option";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "(6'DNH\"o`c7P";
      mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-556), "A)HNfmVDWm)|y", "<", options1, (-2), 3, "(6'DNH\"o`c7P", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("'", "", options0, "", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "'";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, "GDTc");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1908, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("67+{9[[kcNIu7");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "' contains an illegal character : '", false, "cmdLineSyntax not provided");
      Options options2 = options1.addOption("", false, "D");
      Option option0 = new Option("", false, "has already been selected: '");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1426), options3, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(41, "-", "arg", options0, "<l;~h0}4/tai<xOqdi");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 2817, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1217, " c,", "", options1, (-1821), 74, "L/]Cjro%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "IZlN]i7H'S;lAG=_yC";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IZlN]i7H'S;lAG=_yC", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption("", false, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("(6'DNH\"o`c7P", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" c,", "[]", options0, "has already been selected: '", true);
      helpFormatter0.defaultDescPad = (-4009);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(3444);
      helpFormatter0.printUsage(printWriter0, 1432, "\n");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      Options options1 = options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      option0.setLongOpt("arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "l1p");
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("arg", "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, (-1), "!td@b*<w\"~E\"cPP+");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer0, 4, options0, 19, 3780);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      options0.addOption("", true, "--");
      option0.setOptionalArg(true);
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(" c,", "arg", options0, "|]<}", true);
      helpFormatter0.printHelp("`,0Y/m&V,bKG", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(105, "jC6_@", "jC6_@", (Options) null, "GJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "qL'=2jS";
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter1.printHelp(printWriter1, 74, "arg", "\n", options0, 2929, 9, " ", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Object object0 = new Object();
      option0.setType(object0);
      options0.addOption("", false, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("(6'DNH\"o`c7P", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter", 1474, 1763);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(l'D\"o`c7P";
      helpFormatter0.setArgName("(l'D\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      boolean boolean0 = true;
      options0.addOption("", true, "--");
      option0.setOptionalArg(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "' contains an illegal character : '", "", options0, "!:z(oR-i_*x", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4, "[ Options: [ short ", "", options1, 9, 2435, "[ Options: [ short ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "Dc0O";
      Options options0 = new Options();
      String string1 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Options options1 = options0.addOption("", true, "B\"9Bex");
      options1.getOptionGroups();
      helpFormatter0.printHelp("Dc0O", options1);
      helpFormatter0.setLongOptSeparator("B\"9Bex");
      String string2 = null;
      int int0 = 3458;
      int int1 = (-1108);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3458, (-1108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 38;
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      helpFormatter0.printHelp(" c,", "[]", options0, "has already been selected: '", true);
      helpFormatter0.printHelp("ezTDFmPti!M  5", options1, false);
      helpFormatter0.defaultDescPad = (-4009);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 38, "osat|?Qzh|5#59$|#,E");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "Y:`DieMP?=m^dJGS%", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      helpFormatter0.setNewLine("(6'DNH\"o`c7P");
      MockFile mockFile0 = new MockFile("kNlg$MWJts(Yz8Lm", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "Illegal option name '";
      Options options1 = new Options();
      options0.hasShortOption("");
      MockFile mockFile1 = new MockFile("*qr5", "has already been selected: '");
      mockFile0.renameTo(mockFile1);
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2002), "\"P", "\"P", options1, 13, 4000, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-694), (-1477), "T$`i6Py");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "--";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      int int0 = (-1444);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1444));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2130), "usage: ", "wM'+W", options1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = " | ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", "", (Options) null, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, options1, 63, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Option option0 = new Option("arg", false, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter1.printHelp(printWriter1, 74, "arg", "\n", options0, 32, 9, " ", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = helpFormatter0.defaultArgName;
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3485, ", ", "Z!8BA+Z9I2g.R+Xh", options0, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 38;
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[G", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("(^'P8{c");
      mockPrintWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "f _PTcI[NC4", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 32, " ]");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 38;
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      helpFormatter0.printHelp(" c,", "[]", options0, "has already been selected: '", true);
      helpFormatter0.printHelp("c)uXx9S<!=`$bw`.", " c,", options0, " c,", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("G5u~SCv");
      helpFormatter0.setSyntaxPrefix(" c,");
      helpFormatter0.printHelp(38, "[]", "   ", options0, " c,", false);
      helpFormatter0.createPadding(2159);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim(".g");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", (-1245), (-1245));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      mockPrintWriter1.println((String) null);
      mockPrintWriter1.append('C');
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) locale0;
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, " ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.defaultLongOptPrefix = "3gwVQoL+U]+";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      Options options0 = new Options();
      Option option0 = new Option("", true, "'");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", (String) null, options0, (-1), 60, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      mockPrintWriter1.append('C');
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) locale0;
      Option option0 = new Option("arg", false, "HHvr");
      Options options0 = new Options();
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", " ", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 12, (String) null, "HHvr", options1, 12, 1718, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JCJx:rN";
      String string1 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2452, options1, 2452, 2452);
      helpFormatter0.renderOptions(stringBuffer1, 13, options1, 2452, 63);
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "' was specified but an option from this group ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "   ", options1, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JCJx:rN";
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2968, 2968, "");
      helpFormatter0.setNewLine("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ">", (Options) null, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "HPc.~B";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.Option");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.Option
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5K7bd*zwvu0(r&T&";
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      String string1 = "";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter", 1474, 1763);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JCJx:rN";
      String string1 = "";
      helpFormatter0.setNewLine("");
      Options options0 = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(912);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ">", (Options) null, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      int int0 = 31;
      helpFormatter0.defaultWidth = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, (String) null, "d*G?P1n/odgu1GpS", (Options) null, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "", options1, (-2098), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1432, 1177);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      mockPrintWriter1.append('C');
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, " ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, " ");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-469), (-469), "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = (-528);
      helpFormatter0.setDescPadding((-528));
      int int1 = 74;
      helpFormatter0.setWidth(74);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Option option0 = new Option("", "31p4");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.toString();
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "!td@b*<w\"~E\"cPP+", "!td@b*<w\"~E\"cPP+", options3, "[");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = 120;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 120, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "A CloneNotSupportedException was thrown: ";
      int int0 = (-3239);
      int int1 = (-4688);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("wO?kd>WRlt", (-3239), (-4688));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "(6'DNH\"o`c7P");
      Options options1 = options0.addOption("", false, "usage: ");
      option0.setLongOpt("\"");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" [ARG]", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "", options3, "--", true);
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.defaultLongOptPrefix;
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" B=ENmqYlS\">");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("_`W+,/jc>GfsMPd@#@", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Option option0 = new Option("", "-", true, "{gkck~3G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(" ", "--", options2, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      options0.addOption("", true, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(" c,", "arg", options0, "|]<}", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3485, "5K7bd*zwvu0(r&T&", "Illegal option name '", options0, 3309, 3485, "");
      helpFormatter0.printHelp("Illegal option name '", options0, true);
      helpFormatter0.printHelp("R(3i%sdPS", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(6'DNH\"o`c7P");
      Options options0 = new Options();
      Option option0 = new Option("arg", "Mv1mW@WZRe 29\"");
      options0.addOption("", false, "--");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      helpFormatter0.printHelp("(6'DNH\"o`c7P", options0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("(6'DNH\"o`c7P", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("HPc.~B");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JCJx:rN";
      String string1 = "";
      helpFormatter0.setNewLine("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ">", (Options) null, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(32);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1217), "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JMcv>'((j+</!f&";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      options0.hasOption("--");
      helpFormatter0.setLeftPadding(1);
      Option option0 = new Option("", "--", false, "arg");
      options0.addOption(option0);
      String string1 = "k@.KRnT >JQ]";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "k@.KRnT >JQ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 38;
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      helpFormatter0.printHelp(" c,", "[]", options0, "has already been selected: '", true);
      helpFormatter0.defaultDescPad = (-4009);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) null, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "JX@TW*k}glm";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "usage: ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 9;
      stringBuffer0.append((StringBuffer) null);
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (-3468), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "1 zUZ&piyap", "GJ", options1, (-1), 1620, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5K7bd*zwvu0(r&T&";
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile((String) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3485, "5K7bd*zwvu0(r&T&", "", options0, 3309, 3485, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "31p4");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.toString();
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "!td@b*<w\"~E\"cPP+", "!td@b*<w\"~E\"cPP+", options3, "[");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!td@b*<w\"~E\"cPP+";
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "31p4");
      Options options1 = options0.addOption(option0);
      String string1 = "";
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.toString();
      Options options3 = options2.addOptionGroup(optionGroup1);
      String string2 = "[";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "!td@b*<w\"~E\"cPP+", "!td@b*<w\"~E\"cPP+", options3, "[");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$mhV%G\"y!4>z");
      assertEquals("$mhV%G\"y!4>z", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "'";
      String string1 = " ";
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.helpOptions();
      options0.hasOption("\n");
      Option option0 = null;
      try {
        option0 = new Option("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("|k`A0");
      String string0 = "4<{igGoh<?b?j0@";
      helpFormatter0.setLongOptSeparator("4<{igGoh<?b?j0@");
      int int0 = 2126;
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "4<{igGoh<?b?j0@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string0 = "lu~ctk':6MKWkc";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("lu~ctk':6MKWkc", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "lu~ctk':6MKWkc");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
