* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-100
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 18796
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 3911828313
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 08:27:11.144 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 603s and 613 generations, 208436 statements, best individual has fitness: 138.0
* Minimizing test suite
[MASTER] 08:38:34.256 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 205
* Number of covered goals: 204
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 154
* Number of covered goals: 139
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 514
* Number of covered goals: 476
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 46
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 154
* Number of covered goals: 139
* Generated 139 tests with total length 1931
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:39:17.897 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6732666666666667% of time used, but only 42/139 tests minimized), falling back to using all assertions
[MASTER] 08:39:38.362 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 08:40:06.052 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.407 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.538 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.608 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.667 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:06.980 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.536 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.611 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.778 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.814 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.939 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:07.995 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:08.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:08.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:08.187 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:08.246 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:08.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:16.601 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_221_1633682416601
[MASTER] 08:40:16.601 [logback-2] ERROR JUnitAnalyzer - Failed to create tmp dir
[MASTER] 08:40:24.659 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_242_tmp__ESTest.test0(HelpFormatter_242_tmp__ESTest.java:217)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:40:24.665 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertNotNull(helpFormatter0);

Option option0 = new Option("arg", true, "/[`x");
assertEquals(1, option0.getArgs());
assertTrue(option0.hasArg());
assertTrue(option0.hasArgName());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("/[`x", option0.getDescription());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getLongOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(option0);

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "(bK%t", true, "arg");
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

Options options2 = options1.addOption("ZK7I", true, "Iq)KD]Hjld");
assertNotNull(options2);
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options1, options0);
assertSame(options1, options2);
assertSame(options2, options1);
assertSame(options2, options0);

Options options3 = options2.addOption(option0);
assertEquals(1, option0.getArgs());
assertTrue(option0.hasArg());
assertTrue(option0.hasArgName());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("/[`x", option0.getDescription());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getLongOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(options3);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options2);
assertSame(options1, options0);
assertSame(options1, options2);
assertSame(options1, options3);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options0);
assertSame(options3, options0);
assertSame(options3, options1);
assertSame(options3, options2);

OptionGroup optionGroup0 = new OptionGroup();
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertNotNull(optionGroup0);

Options options4 = options3.addOptionGroup(optionGroup0);
assertEquals(1, option0.getArgs());
assertTrue(option0.hasArg());
assertTrue(option0.hasArgName());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("/[`x", option0.getDescription());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getLongOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(options4);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options1, options0);
assertSame(options1, options4);
assertSame(options1, options2);
assertSame(options1, options3);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options4);
assertSame(options2, options0);
assertSame(options3, options0);
assertSame(options3, options1);
assertSame(options3, options4);
assertSame(options3, options2);
assertSame(options4, options0);
assertSame(options4, options1);
assertSame(options4, options3);
assertSame(options4, options2);

Options options5 = options4.addOption(option0);
assertEquals(1, option0.getArgs());
assertTrue(option0.hasArg());
assertTrue(option0.hasArgName());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("/[`x", option0.getDescription());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getLongOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(options5);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options5);
assertSame(options1, options0);
assertSame(options1, options4);
assertSame(options1, options2);
assertSame(options1, options5);
assertSame(options1, options3);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options4);
assertSame(options2, options0);
assertSame(options2, options5);
assertSame(options3, options0);
assertSame(options3, options1);
assertSame(options3, options4);
assertSame(options3, options5);
assertSame(options3, options2);
assertSame(options4, options0);
assertSame(options4, options1);
assertSame(options4, options3);
assertSame(options4, options2);
assertSame(options4, options5);
assertSame(options5, options0);
assertSame(options5, options2);
assertSame(options5, options1);
assertSame(options5, options3);
assertSame(options5, options4);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, (String) null, options3);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, option0.getArgs());
assertTrue(option0.hasArg());
assertTrue(option0.hasArgName());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("/[`x", option0.getDescription());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getLongOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertFalse(fileDescriptor0.valid());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options5);
assertSame(options1, options0);
assertSame(options1, options4);
assertSame(options1, options2);
assertSame(options1, options5);
assertSame(options1, options3);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options4);
assertSame(options2, options0);
assertSame(options2, options5);
assertSame(options3, options0);
assertSame(options3, options1);
assertSame(options3, options4);
assertSame(options3, options5);
assertSame(options3, options2);

helpFormatter0.printHelp(64, "<", (String) null, options2, "<fy8AHe`M");
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options5);
assertSame(options1, options0);
assertSame(options1, options4);
assertSame(options1, options2);
assertSame(options1, options5);
assertSame(options1, options3);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options4);
assertSame(options2, options0);
assertSame(options2, options5);


[MASTER] 08:40:35.858 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-100/tests/10
* Done!

* Computation finished
