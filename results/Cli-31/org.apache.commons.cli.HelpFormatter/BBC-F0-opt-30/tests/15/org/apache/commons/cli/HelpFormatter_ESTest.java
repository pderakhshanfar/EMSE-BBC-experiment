/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:10:06 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "arg", "arg", options1, "T1W option '", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", "\n", options0, "-", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "oCV{V6^cp(m`}g`";
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      String string1 = "_/WLgW&XwB";
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String string2 = ">:6";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) ">:6";
      objectArray0[5] = (Object) mockPrintWriter1;
      PrintWriter printWriter1 = mockPrintWriter1.format(">:6", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, (-845), options1, 1, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(":TW]5=>", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      int int0 = 4862;
      Options options0 = null;
      int int1 = 339;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4862, "jZe", "jZe", (Options) null, 4862, 339, "jZe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 9, 9);
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 9, 894);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.OptionValidator";
      stringBuffer0.append(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.OptionValidator");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 2885);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(mD[M&");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2049), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      String string0 = "";
      Options options0 = new Options();
      String string1 = "ZIoQC99";
      Options options1 = options0.addOption("ZIoQC99", "ZIoQC99", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding((-593));
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOption("ZIoQC99");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(631, "nOW}n8|uTq", "", options2, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1556);
      helpFormatter0.defaultWidth = (-1556);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("~'I}\"N/4.`I", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "L[", "L[", (Options) null, "L[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "\"gDz:!> Oi!ge)";
      Options options1 = null;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 3042, "");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 4854, options0, 4854, 3042);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer2, 3042, options0, 2298, 1413);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "~o(x7{%W");
      helpFormatter0.printHelp(32, "79vAV", "EyHS3&6b7 K *x$x4x ", options1, "Bcb*o0(d;sD", true);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" [ARG]", 0, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp(55, "c>dLinSytx nGtprovided", "c>dLinSytx nGtprovided", options0, "c>dLinSytx nGtprovided", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 55, "c>dLinSytx nGtprovided", "-*P?Yj=~}jP", options0, 15, 55, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = null;
      String string0 = "(BNnYrV1RNLR#jeD=";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(BNnYrV1RNLR#jeD=", "", (Options) null, "(BNnYrV1RNLR#jeD=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 15, 74, "sV");
      helpFormatter0.renderOptions(stringBuffer1, 15, options0, 74, 15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringBuffer1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "sV";
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 208, "sV", (String) null, options0, (-524), (-2), "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option((String) null, false, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "", options1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, 585, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "-", " ", options0, "Illegal option name '", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-1094), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setDescPadding(84);
      helpFormatter0.defaultLeftPad = (-500);
      helpFormatter0.getLeftPadding();
      String string0 = "G -Z";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("<7]hr:FV4{[TFP|a99", "arg", false, "d#Q<'}bL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '<7]hr:FV4{[TFP|a99' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      int int0 = 7;
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 7, 7);
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      String string0 = "arg";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "\"";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.hasLongOption("r05kvy5LL");
      options0.addOption("", false, "arg");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 32;
      helpFormatter0.createPadding(32);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      options0.addOption("", true, "arg");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-zEr|x46ffZqzg?\"y=", "", options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('V');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp(105, "cmdLineSyntax not provided", "}73uLiL7<Pi[1dO'iD", options0, "}73uLiL7<Pi[1dO'iD", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 208, "}73uLiL7<Pi[1dO'iD", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2385, "org.apache.commons.cli.HelpFormatter", "usage: ", options0, (-469), 32, "Vx{W", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";OVm;E5cF'AK2s/";
      String string1 = null;
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.defaultSyntaxPrefix = ";OVm;E5cF'AK2s/";
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      int int0 = 616;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "_B{7[Yf2}R");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1989, "usage: ", " ", options0, " ", true);
      int int0 = 3109;
      String string0 = "usage: ";
      String string1 = "Q>ki[? _8f)>W";
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3875;
      String string0 = "x";
      String string1 = "^f<'Q7Z@";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^f<'Q7Z@");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "^f<'Q7Z@";
      objectArray0[2] = (Object) "^f<'Q7Z@";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('\\');
      helpFormatter0.printWrapped(printWriter1, 3875, "x");
      helpFormatter0.defaultNewLine = "x";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3875, 3875, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "&eE#X[6RrBGCv}9", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "arg";
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-577), (String) null, " ", options0, (-398), 64, "'l@#uU'TA", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "", options1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "", options1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("[ARG...]", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      Options options2 = options1.addOption("arg", "/;", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3780), "[ARG...]", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Pn5vWgCKi2JLz", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "<xGsa7f'`qmyb*IERD", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(74, "-", "arg", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 46, (Options) null, 46, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("C");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "-");
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3), "\n", "", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 2DBd:bt\"7$;8#,]hj");
      mockPrintWriter0.print(false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, " ");
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine(" ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" *4B*&]z8K");
      int int0 = (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "FT;@}&WfO'6$]", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(286);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(64);
      helpFormatter0.renderWrappedText(stringBuffer0, 2780, 2780, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(286, "", "", options0, "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter1.printHelp(1552, "\n", "-", options0, "-", true);
      helpFormatter1.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1552, "", options0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 22, "                      ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 1, 1);
      mockPrintWriter0.print((float) 3);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.Util", "\"", options0, 31, 1324, "fufZUxme4Y\".QulB3os", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.setLongOptPrefix("<NWM@ho`R- DP");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]moQ-;f[dDu'3\"F");
      helpFormatter0.printHelp("Zu7H", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("`");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.setLongOptPrefix("D2<");
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1782);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.createPadding(74);
      helpFormatter0.findWrapPos("", 64, 92);
      helpFormatter0.createPadding(92);
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 104, "", "                                                                          ", (Options) null, 92, 80, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "Jp,=7ZD_^[rG=mi";
      StringBuffer stringBuffer0 = new StringBuffer("Jp,=7ZD_^[rG=mi");
      int int0 = 1211;
      int int1 = 64;
      helpFormatter0.defaultLeftPad = 64;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "--", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      option0.setType("sQ");
      option0.setArgs(3198);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1244, "--", "3Yp!gP7Q", options0, "mp0", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      int int0 = 0;
      helpFormatter0.rtrim("L?/UZMlS,|");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      String string0 = "[ Options: [ short ";
      int int0 = (-278);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "L?/UZMlS,|", "[ Options: [ short ", options0, 0, (-278), "mRmCVy", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[ option: ";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptPrefix("<NWM@ho`R- DP");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      boolean boolean0 = true;
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      String string0 = "   ";
      options0.getOption("sS&AQC~*kqVAZN");
      String string1 = "%-Y%jH#%<]";
      helpFormatter0.printHelp(2351, "w", "   ", options0, "%-Y%jH#%<]", false);
      // Undeclared exception!
      helpFormatter0.printHelp("]", options0, false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("C");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "", options0, "org.apache.commons.cli.Util", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      String string0 = "[ Options: [ short ";
      int int0 = (-239);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1782, "L?/UZMlS,|", "[ Options: [ short ", options0, 1782, (-239), "mRmCVy", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3189;
      String string0 = "2Vs 46/^=^1%uw@";
      String string1 = "[";
      Options options0 = new Options();
      helpFormatter0.printHelp("[", ".+79Fd(wCqRx7!;TC\"", options0, ".+79Fd(wCqRx7!;TC\"", true);
      Option option0 = new Option("mp0", "[", false, "--");
      option0.setType(options0);
      option0.setArgs(3);
      options0.addOption(option0);
      boolean boolean0 = false;
      String string2 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "' was specified but an option from this group ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1897, "-", "6A)/8E##Uga&}]", options0, "arg");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      String string0 = "2P'+Aj%3yL_S";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ":X[|%Re8iJ{>{6";
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.format(locale1, "2P'+Aj%3yL_S", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'y'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      boolean boolean0 = false;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1930, "", "T\"V{wmc", options1, 1930, 64, "7o;N0X6Nm%^isnMLS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 22, 22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("neR1&+");
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print(1.0F);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "                      ", "                      ", options0, 105, 17, "                      ", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 22, options0, 1930, (-787));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 22, 22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("neR1&+");
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print(1.0F);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "                      ", "neR1&+", options0, 22, 17, "neR1&+", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      options0.getMatchingOptions(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2595, "\n", ">wHwEshf3$B`G,", options0, (-610), 0, "omdBA|oN");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("L?/UZMlS,|");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 732, options0, 11, 11);
      helpFormatter0.printHelp(11, "[2CP2Du05'", "[2CP2Du05'", options1, "   ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-114), options0, 184, 1503);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 22;
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, " ");
      String string0 = "   ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      PrintStream printStream0 = mockPrintStream0.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print((-1.0F));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "                      ", "fufZUxme4Y\".QulB3os", options0, 17, 22, "neR1&+", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 22, 22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      PrintStream printStream0 = mockPrintStream0.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "                      ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "811mL-=)SL", "org.apache.commons.cli.OptionGroup", options0, 0, 0, "811mL-=)SL");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.setNewLine("org.apache.commons.cli.Util");
      helpFormatter1.setSyntaxPrefix(" ");
      helpFormatter1.setLongOptPrefix("--");
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setNewLine("");
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(59, "", "Wl", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2678));
      Options options0 = new Options();
      Option option0 = new Option("", "[", false, "--");
      option0.setType(options0);
      option0.setArgs(3);
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "' was specified but an option from this group ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      helpFormatter0.getDescPadding();
      byteArray0[1] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option1 = new Option("", false, "' was specified but an option from this group ");
      Options options2 = options1.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3189, "2Vs 46/^=^1%uw@", "[", options2, "u4%}0L\u0001yBF8WG#NDlD", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2678));
      Options options0 = new Options();
      Option option0 = new Option("mp0", "[", false, "--");
      option0.setType(options0);
      option0.setArgs(1);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1897, "--", " D-R-bww$qB", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[ option: ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptPrefix("<NWM@ho`R- DP");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<NWM@ho`R- DP", options0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "   ", options0, "zb=_7'*", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(42);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.renderOptions(stringBuffer0, 42, options0, 271, 271);
      MockPrintStream mockPrintStream0 = new MockPrintStream("q6R;,G5%0nckha");
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.print(1.0F);
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "                                          ", "", options0, 63, 1245, "A CloneNotSupportedException was thrown: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", options0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("k");
      helpFormatter0.setLongOptPrefix("The option '");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<NgrZmEk7Jp%JdKa|R");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", false, "%~qmTi@,AzK\u0000L");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(805, "KvU`zk@7$`V#Svm8K", "OQ,6O0", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2678));
      Option option0 = new Option("mp0", "[", false, "--");
      option0.setArgs(3);
      Option option1 = new Option("", false, "' was specified but an option from this group ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\bDO$G~FKGr{Y:z@");
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 166, 166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-3413);
      String string0 = "L?q+HmNisLqrY";
      StringBuffer stringBuffer1 = new StringBuffer(1);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "L?q+HmNisLqrY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("[ option: ");
      Options options1 = new Options();
      helpFormatter0.printHelp(127, "DvYpd]OraN", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, " [ARG]", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?! ]]E~Nm");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "L?/UZMlS,|";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "   ";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "L?/UZMlS,|";
      objectArray0[5] = (Object) "L?/UZMlS,|";
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter1.format("<", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "33*#A";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("33*#A", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(93, "cmdLineSyntax not provided", "]1JhP]nlTk", (Options) null, "Wn+Mz(BEux* 7", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3189;
      helpFormatter0.setDescPadding((-2678));
      String string0 = "2Vs 46/^=^1%uw@";
      String string1 = "[";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", ".+79Fd(wCqRx7!;TC\"", options0, ".+79Fd(wCqRx7!;TC\"", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1014;
      helpFormatter0.renderWrappedText(stringBuffer0, 1014, 74, "usage: ");
      helpFormatter0.setLongOptSeparator("bIkK3u&%)vUgh7i!;D");
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "rw`<%Sssg2nI* iWfU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // rw`<%Sssg2nI* iWfU
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      int int0 = (-2437);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 177, options0, 0, (-2437));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "'@B7q#A:9-y>(VW", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "-", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 31, "*=u\"U@$#-zh}{)", "", options3, 0, 1809, "org.apache.commons.cli.Options");
      assertEquals(0, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L?/UZMlS,|";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 0, "@,=");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "L?/UZMlS,|", options0, "   ", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "'@B7q#A:9-y>(VW", true, "--");
      Options options1 = options0.addOption(option0);
      mockPrintWriter0.print((long) (-1));
      Options options2 = options1.addOption((String) null, "-", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 31, "*=u\"U@$#-zh}{)", "", options3, 0, 1809, "org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "33*#A";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("33*#A", objectArray0);
      mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      Options options0 = new Options();
      options0.addOption("", "L", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(493);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "33*#A";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("33*#A", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "L", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "VxK-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      String string0 = "org.apache.commons.cli.Util";
      helpFormatter1.setNewLine("org.apache.commons.cli.Util");
      helpFormatter1.setSyntaxPrefix(" ");
      helpFormatter1.setLongOptPrefix("--");
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      boolean boolean0 = true;
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "'@B7q#A:9-y>(VW", true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, "-", false, " ");
      PrintWriter printWriter1 = printWriter0.printf((Locale) null, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-2), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[ option: ";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptPrefix("<NWM@ho`R- DP");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<NWM@ho`R- DP", options0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      locale0.stripExtensions();
      mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2354), "org.apache.commons.cli.AlreadySelectedException", "", (Options) null, 0, (-2354), "g!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "--";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "6A)/8E##Uga&}]", "6A)/8E##Uga&}]", options0, "--");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "33*#A";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("33*#A", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.printf("cmdLineSyntax not provided", objectArray0);
      Options options0 = new Options();
      options0.getOption("");
      Options options1 = options0.addOption("", "L", false, "-");
      Option option0 = new Option("", true, "fc~Wm");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.format("-", (Object[]) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Locale locale0 = Locale.CANADA;
      printWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2878, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2223), options1, 2878, (-3837));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      options0.getMatchingOptions("");
      Option option0 = null;
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(22);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 22, 22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("neR1&+");
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print(1.0F);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "                      ", "neR1&+", options0, 22, 17, "neR1&+", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.renderOptions(stringBuffer1, 4, options0, 2595, 1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", (-966), 3844);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(980);
      helpFormatter0.getDescPadding();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.defaultOptPrefix = "cmdLineSyntax not provided";
      mockPrintWriter0.flush();
      mockPrintWriter0.print('o');
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", (-147), (-1052));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("No'4qIbqBg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim((String) null);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "dur6x[`H3{OdK/52O";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("org.apache.commons.cli.HelpFormatter", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L?/UZMlS,|";
      Options options0 = new Options();
      String string1 = "   ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "L?/UZMlS,|", options0, "   ", false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine(" ");
      assertEquals(" ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "yQrL`p6AE;`c";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "yQrL`p6AE;`c", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 815, (-1020), "[");
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter1 = mockPrintWriter0.printf("JKU\rg[qavi<nZB", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-1020), 815, "yQrL`p6AE;`c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}%t3-_R{mDVBm";
      helpFormatter0.setLongOptPrefix("}%t3-_R{mDVBm");
      int int0 = (-427);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("}%t3-_R{mDVBm", (-427), (-427));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-918);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-918));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("[U@J{ETy?~~-T`l+.");
      helpFormatter0.getNewLine();
      String string0 = "A%xq9*kK";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "A%xq9*kK");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A%xq9*kK
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1253;
      String string0 = "mV1(A#";
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'n';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 1253, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2678));
      Options options0 = new Options();
      Option option0 = new Option("mp0", "[", false, "--");
      option0.setType(options0);
      option0.setArgs(3);
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "' was specified but an option from this group ");
      Option option1 = new Option("", false, "' was specified but an option from this group ");
      Options options2 = options1.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3189, "2Vs 46/^=^1%uw@", "[", options2, "u4%}0L\u0001yBF8WG#NDlD", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "33*#A";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("33*#A", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.printf("cmdLineSyntax not provided", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "L", false, "-");
      Option option0 = new Option("", true, "fc~Wm");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption((String) null, false, " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, 1, "VxK-", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-3413);
      String string0 = "L?q+HmNisLqrY";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3413), "L?q+HmNisLqrY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 0;
      Options options0 = new Options();
      int int1 = 0;
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("W_\u0004r+pT", true, "t'06");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W_\u0004r+pT' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("//1F", "//1F", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "";
      MockFile mockFile0 = new MockFile("{vq");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "NO_ARGS_ALLOWED", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setWidth(3);
      helpFormatter0.defaultArgName = "\n";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        mockFileOutputStream0.write(byteArray0, (-2524), (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2524
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "line.separator";
      String string0 = "-";
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      helpFormatter0.setArgName("?(Ln3MHO=v[8h`W");
      // Undeclared exception!
      try { 
        options0.addOption("\n", "   ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Bxab2");
      helpFormatter0.setSyntaxPrefix("Bxab2");
      String string0 = "]";
      String string1 = "VQwR/ikr9uqCb)tF=";
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", false, "CH9%wZR}tt");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultArgName = "CH9%wZR}tt";
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "-", false, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        options3.addOption("]", "arg", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3432);
      int int0 = 0;
      String string0 = "[ARG...]";
      String string1 = "pY4Um";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("grTyBo?Yce", "", false, "tKcJht1wi3]||");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'grTyBo?Yce' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1014;
      String string0 = " qE&5V@*75m}CC";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1855), " qE&5V@*75m}CC", " qE&5V@*75m}CC", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "\n");
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("X,m+.9H'v", " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'X,m+.9H'v' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
