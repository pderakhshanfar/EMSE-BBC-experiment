/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:59:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-626));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((byte) (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Ar{D T?");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-694);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, ",", ",", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-324);
      Options options0 = null;
      int int1 = 1442;
      MockFile mockFile0 = new MockFile((File) null, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("[7-!c{G1TQt");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 63, "\n", "[7-!c{G1TQt", (Options) null, 21, 1442, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options1.getOptionGroups();
      helpFormatter0.printHelp("lf2Ts", "", options2, "arg", true);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      String string0 = "usage: ";
      helpFormatter0.printHelp("usage: ", "lf2Ts", options2, "lf2Ts", true);
      helpFormatter0.rtrim("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1), options1, 1635, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-122);
      helpFormatter0.setWidth((-122));
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      MockFile mockFile0 = new MockFile("r_nL=2MeV`G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((long) (-2));
      Option option1 = new Option("arg", "[t ");
      Options options2 = options1.addOption(option1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 43, "r_nL=2MeV`G", options2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "++$";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      String string0 = "ta:j-b^Y=hXB D.'c*";
      File file0 = MockFile.createTempFile("++$", "ta:j-b^Y=hXB D.'c*");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption(" ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2224, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("--", "--", options1, "lf\"Ts", true);
      helpFormatter0.rtrim("lf\"Ts");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, options0, 2744, 2744);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1900;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("", "Illegal option name '");
      mockFile0.setReadable(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setExecutable(true, false);
      mockPrintWriter0.println((long) 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 20, "");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(63);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 15, options0, 63, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 10, 10, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char char0 = 'B';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 32, "7Tr !)H.+Ik,x");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-2908), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xO[lB?S.oV";
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, (-405), "xO[lB?S.oV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 114, (Options) null, 15, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1249), (-954));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-933), (String) null, "Y3`k>/<l^PN%9", (Options) null, (-933), (-2), "org.apache.commons.cli.Options", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("-", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 648, "RwL)I7U-`U", ".8):gfz71<~|&SU", options0, 1329, 31, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ZV>P(7=VABD";
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "ZV>P(7=VABD";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[5] = (Object) "ZV>P(7=VABD";
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (-703), "ZV>P(7=VABD");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      String string0 = "lf\"Ts";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('B');
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omAT8ODG");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "Ee%7YXl`T", ".84-dU&X<\"i& wA", options0, 940, 74, ".84-dU&X<\"i& wA");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 18, 2, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("\n");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("ZV>P(7=VABD", "", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omA%T8ODG");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "sV");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Options options0 = new Options();
      Option option0 = new Option("", true, "|~E");
      Options options1 = options0.addOption(option0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "99+c\"`.";
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) ".8):gfz71<~|&SU";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1754, " | ", (String) null, options1, 2163, 1863, " :: ", true);
      helpFormatter0.printHelp(1863, "99+c\"`.", "99+c\"`.", options0, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), " :: ", " | ", options0, "|~E", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println(2022);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2022, "");
      mockPrintWriter0.print(false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 36, "");
      int int0 = 2;
      helpFormatter0.createPadding(2);
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3200, "O", "--", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<:");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 86, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, (-3358), options0, 1, 86);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "{7@V-?8py}ubf.", "ZV>P(7=VABD", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 116, "-", "-", options0, 116, 63, "99+c\"`.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(88);
      helpFormatter0.getNewLine();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "'|Dv-`>CL'\"e";
      Option option0 = null;
      try {
        option0 = new Option("?^*gKZB", "'|Dv-`>CL'\"e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?^*gKZB' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("b1Jw}m?e@i%nGynnk\"|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b1Jw}m?e@i%nGynnk\"|");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "' was specified but an option from this group ");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3643, "arg", "", (Options) null, "'", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "omAT8ODG";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omAT8ODG");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "ZV>P(7=VABD";
      objectArray0[4] = (Object) "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 15, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omAT8ODG");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.rtrim("_K?`Zfe/b,>.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "k", "arg", options0, ")sZJ7k( \"Y(.J[1", true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omAT8ODG");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.rtrim("_K?`Zfe/b,>.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "_K?`Zfe/b,>.", "-", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdirs();
      Options options0 = new Options();
      options0.addOption("arg", "~mg<u}CvM=A", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "-", "-", options1, 196, 3, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(filterOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 9, "~mg<u}CvM=A", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "KU", "", options0, (-2486), 4, "~k@-BE!l8*+", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('B');
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println(2022);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2022, "");
      mockPrintWriter0.print(false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 36, "");
      helpFormatter0.createPadding(2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "--", "U!BeX0Is9(!nJ|j'>vs", (Options) null, 1, 3, "  ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "$pM)T", "$pM)T", options3, 1147, (-2893), "/WXfB9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      int int0 = 529;
      int int1 = (-2881);
      String string1 = "LuhY|&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 529, "usage: ", "usage: ", options1, (-2881), 74, "LuhY|&", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      helpFormatter0.printHelp(69, "99+c\"`.", "arg", options0, "arg", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultDescPad = 3;
      int int0 = 34;
      helpFormatter0.createPadding(34);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      String string1 = "bXbaRJR/u";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "\n");
      boolean boolean0 = false;
      Options options2 = options1.addOption("arg", false, "Mi3Hi>aI/{qn&T'R<");
      // Undeclared exception!
      try { 
        options2.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":");
      Options options1 = new Options();
      options0.addOption("", true, "arg");
      int int0 = 622;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, "", "", options1, 75, 2855, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println(74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 75, "\n");
      mockPrintWriter0.print(true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 75, "");
      helpFormatter0.createPadding(110);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, "                                                                                                              ", "\"oO\"Tx$![DuL8vstqk", (Options) null, 1921, 529, "                                                                                                              ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "]", options0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      helpFormatter0.printHelp(13, "-", "", options1, "-", false);
      helpFormatter0.printHelp("]", options0, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "99+c\"`.", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=VABD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter1.rtrim("_K?`Zfe/b,>.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "_K?`Zfe/b,>.", "-", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l}[,-0TP(tF@ ]lL", "l}[,-0TP(tF@ ]lL", (Options) null, ".>5ZPtaG']k6cw=6{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFileOutputStream0.flush();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      options1.getOptionGroups();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 790, "LpCjhY>", "`Lc&ist2PiUI~E", options1, 953, 34, "LpCjhY>", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "`Lc&ist2PiUI~E");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 112, "]");
      helpFormatter0.setArgName(",]qV3fg^/uC/4");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "o'+Zn05k{S");
      helpFormatter0.printHelp("o'+Zn05k{S", "org.apache.commons.cli.HelpFormatter", options0, "t\"Ohe%4");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "t\"Ohe%4", options0, "' contains an illegal character : '", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdirs();
      Options options0 = new Options();
      options0.addOption("z$", "~mg<u}CvM=A", true, "cmdLineSyntax not provided");
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "-", "-", options1, 196, 3, "", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 196, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 196, "usage: ");
      helpFormatter0.setArgName("usage: ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "          ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 434, "          ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), " [ARG]", "3V;spcr{", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '-';
      charArray0[2] = '|';
      charArray0[3] = 'Q';
      charArray0[4] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      helpFormatter0.renderOptions(stringBuffer0, 1442, options0, 1442, 1442);
      helpFormatter0.printHelp("yJTz", "%uwHVlg jnZkv,c%i", options0, "-", false);
      helpFormatter0.printHelp(64, " ] [ long ", "yJTz", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "o'+Zn05k{S");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<rg.apache.commons.cli.HelpFormatter", "<rg.apache.commons.cli.HelpFormatter", options1, "yJTz", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "tMYtW", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CANADA;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "ibJ;,gUUup 6ld2");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(39);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 167, "org.apache.commons.cli.Option", "", options1, (-1209), 167, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("`)-9:+fX:^fubFm=:");
      helpFormatter0.setLongOptPrefix("`)-9:+fX:^fubFm=:");
      helpFormatter0.defaultLeftPad = (-1029);
      int int0 = 2666;
      helpFormatter0.findWrapPos("`)-9:+fX:^fubFm=:", 2666, 3);
      String string0 = "vh";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2663, "vh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-963), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2053;
      helpFormatter0.setLeftPadding(2053);
      int int1 = 1;
      File file0 = MockFile.createTempFile("   ", "+Df|N(8<^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "arg");
      String string0 = "jJ/v";
      String string1 = "hg`5-Ydsui,#|Y2ib";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "\n");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("   ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "L`e:";
      helpFormatter0.setLeftPadding(2094);
      File file0 = MockFile.createTempFile("usage: ", "x^'fsCA2I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALIAN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L`e:";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "L`e:";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "L`e:";
      mockPrintWriter0.printf("L`e:", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "fPN}lJ", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.println('2');
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(printWriter0, 104, options0, 104, 104);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(104);
      helpFormatter0.getArgName();
      String string0 = "OfY";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("fPN}lJ", "\n", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fPN}lJ' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "99+c\"`.", "-", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 434, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", false, "");
      helpFormatter0.printHelp("IP{m\"gOWEpR/K", "qO~>R,DHe84NGp", options1, "qO~>R,DHe84NGp");
      helpFormatter0.printHelp("usage: ", "-", options1, "1I", true);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.findWrapPos(" ", (-1), 1197);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdirs();
      Options options0 = new Options();
      options0.addOption("z$", "~mg<u}CvM=A", true, "z$");
      options0.addOption("", false, " ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 196, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 196, "");
      helpFormatter0.setArgName(" ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "          ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 434, "          ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1465), 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "o'+Zn05k{S");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "yJTz", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-23));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("O-ll|[", 0, (-3449));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Object[] objectArray0 = new Object[1];
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 167, "$pM)T", "$pM)T", options1, 622, 167, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp(printWriter0, 167, "$pM)T", "$pM)T", options1, 622, 167, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 167, "", options0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      options0.addOption("", false, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "-", false, "d{tx[(_~Tw7Hx}{_5,");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "+<jgA7f,\n", true, "usage: ");
      helpFormatter0.printHelp("\"", "\"", options3, (String) null);
      helpFormatter0.printHelp("usage: ", ">", options3, "\"", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "{j3;9S|/3", false, "{j3;9S|/3");
      Options options3 = options2.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "Z0K;{X:Z Of&Wn", "B%I<>4CDv", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "o'+Zn05k{S");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "yJTz", false);
      helpFormatter0.printHelp(12, "o'+Zn05k{S", "", options0, "99+c\"`.", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", false, "o'+Zn05k{S");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "yJTz", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "[", "[", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "          ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile1;
      Options options0 = new Options();
      helpFormatter0.printHelp(1468, "Pl<Tj9U0", "org.apache.commons.cli.HelpFormatter", options0, ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "          ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 167, options1, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5, "-");
      helpFormatter0.printHelp(1497, "-", "-", options0, "vbQ.>nE", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1497, (-274));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", false, "");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("line.separator", "", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "_:* 4eBGfa72yhm+e", options1, "`dm4/cIyC;]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, "?I@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = " {B:S0=";
      Options options0 = null;
      String string1 = "7<>|r[\\~kF=<h]^d";
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" {B:S0=", " {B:S0=", (Options) null, "?I@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "B%I<>4CDv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1904), options0, (-1904), (-895));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1801), 0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "Pa(:KX%y7,u^rb,YgU";
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultDescPad = 0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "Pa(:KX%y7,u^rb,YgU", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "fHw-D5)", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("vm", options2);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 1257;
      String string0 = "org.apache.commons.cli.Options";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "          ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 291, 10, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "o'+Zn05k{S");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "yJTz", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, ">jwp>~>H:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("ZV>P(7=V&BD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("omA%T8ODG");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.rtrim("_K?`Zfe/b,>.");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      options0.hasOption("\n");
      helpFormatter0.printHelp(1315, ">", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      Options options0 = null;
      String string1 = "7<>|r[\\~kF=<h]^d";
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "?I@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("48$yw$_}");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Options");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-283), "NO_ARGS_ALLOWED");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("arg");
      String string0 = ">";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, ">");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      try { 
        MockURI.URI("--", "--", "arg", "TY`nUgu}~=", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: --://--arg?TY%60nUgu%7D~=#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1159;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("usage: ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2319;
      int int0 = 825;
      helpFormatter0.createPadding(825);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "                                                                          ");
      stringWriter1.getBuffer();
      int int1 = 3714;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JZv@PZ\"!b]XrpGE4";
      helpFormatter0.setSyntaxPrefix("JZv@PZ\"!b]XrpGE4");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.AlreadySelectedException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/+Pr BmYi@OIO(jPy=";
      helpFormatter0.setNewLine("/+Pr BmYi@OIO(jPy=");
      helpFormatter0.getArgName();
      int int0 = 4096;
      helpFormatter0.setDescPadding(4096);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1581));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 196;
      String string0 = "";
      mockFile0.mkdirs();
      Options options0 = new Options();
      options0.addOption("z$", "~mg<u}CvM=A", true, "cmdLineSyntax not provided");
      String string1 = " ";
      Options options1 = options0.addOption("", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", "", options1, 196, 31, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1546, 1546, "");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" | ");
      options0.hasShortOption("--");
      Options options1 = options0.addOption("", false, "GJ_ODb");
      options1.helpOptions();
      options1.getOptionGroups();
      helpFormatter0.setOptPrefix("e>VP0C");
      options1.hasLongOption("");
      options1.getMatchingOptions((String) null);
      options0.hasShortOption("");
      helpFormatter0.printHelp("\"I}", "\"I}", options1, "lPQ8w");
      helpFormatter0.getDescPadding();
      options0.getOption("\"I}");
      String string0 = "7yP&b.QOAY(x2txi=";
      options0.hasOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "7yP&b.QOAY(x2txi=", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "'L,sY-FDz");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options1);
  }
}
