/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:17:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println(')');
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      options0.addOption("", false, "arg");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, (-950), "", "\n", options0, 74, 64, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      helpFormatter0.defaultDescPad = (-811);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", " ", options1, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-999));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "zQrG=_bhm) }8", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3018);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "-", options0, "vFA4]t24V5uz", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("Gma", (String) null, true, "UIRFdp");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 5944, options1, 5944, 58);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.defaultDescPad = (-1642);
      helpFormatter0.defaultWidth = (-1642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      String string0 = "r";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "r", "r", options1, "r");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "K5!a_.:cm";
      helpFormatter1.defaultSyntaxPrefix = "--";
      String string1 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, 1, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.printHelp(3, "\n", "--", options0, " ");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 410;
      Options options0 = new Options();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 410, "4_", "4_", options0, (-1), 410, "4_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      helpFormatter0.printHelp("usage: ", "", options1, " ", true);
      options0.getOptionGroups();
      helpFormatter1.printHelp(7, "\n", "iA", options0, "--");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      int int0 = 10;
      String string0 = "R$cb_~8^1\\Xil!j=*3";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "_x=RPMX3[Yyh", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) list1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) list0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 26, ", ", (String) null, options0, 1291, 3117, "[ option: ", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3225, "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      options0.addOption((String) null, "usage: ", true, "");
      helpFormatter1.printHelp(")G0_34jl", ")G0_34jl", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "c6O[#)Sk<rQggU@g", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      String string0 = "*Td9";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "*Td9");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "*Td9", "s<&3", options1, 0, 115, " ]", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.Options", false, "arg");
      options1.addOption("arg", false, "-");
      helpFormatter0.printHelp("KOs}\u0002", "t}", options0, "");
      String string0 = "?p<{bQu~CzvrM }q";
      int int0 = 1656;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "usage: ", options0, 1, 254, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1966, "usage: ", " | ", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 437, "arg", "arg", options0, 437, 437, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      helpFormatter0.setArgName(":7nrki#DSU>BEK-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix(" ");
      Options options1 = options0.addOption("arg", "arg", true, "--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      helpFormatter0.printHelp("#dyZT", "--", options1, "8R8gG;", true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1053), options1, 13, 1312);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m)yc+";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "EK*T!uNO<JPU");
      String string1 = "92u";
      Options options2 = options1.addOption("92u", true, "");
      options2.hasOption("H");
      options1.getMatchingOptions(">%3#[K)pxhN");
      helpFormatter0.setLongOptPrefix((String) null);
      String string2 = "./HIyeDV^DHn:W";
      helpFormatter0.printHelp("m)yc+", "dl72%YS*MIJCUy", options2, "./HIyeDV^DHn:W");
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix(" ");
      Options options1 = options0.addOption("arg", "arg", true, "--");
      helpFormatter1.printHelp("@zsSdj=3%MX&1m2", (String) null, options1, "zR", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter3.printHelp(" ", "", options2, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter1.printHelp("usage: ", "KOs}\u0002", options0, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1284, "-", "-", options1, 32, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("org.apache.commons.cli.HelpFormatter$1");
      Options options2 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "UUSgd~Kn7", false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      Options options3 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1124, (String) null, " | ", options3, 1124, (-1), "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println(')');
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, (-950), "", "\n", options0, 74, 64, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      mockPrintWriter0.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("UcC", (String) null, false, (String) null);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", (String) null, options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "by", "UcC", options0, 1, 9, "org.apache.commons.cli.OptionValidator", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(13, "v7)?zY<`l<eY<", "", options0, "GN?>RYt");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append(';');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3406, "VC`lVH", "-", options0, 1, 3415, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      // Undeclared exception!
      helpFormatter2.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", false, "--");
      helpFormatter2.printHelp("-", "has already been selected: '", options0, "@5");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 684, "", options0);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter1.printHelp("usage: ", "KOs}\u0002", options0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 32, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1161);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3571, "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("M", false, "D");
      helpFormatter2.printHelp("2i3r*ldR", "' was specified but an option from this group ", options0, "org.apache.commons.cli.HelpFormatter$1");
      options1.addOption((String) null, false, "isCXu*Lr3l1}n#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "-", options0, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      boolean boolean0 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 10, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 7, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 924, options0, 924, 924);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintWriter0.printf("usage: ", objectArray0);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "7}m?", "ukNg] @.", options2, 74, 3, "7}m?");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      String string0 = "RQNx*,tUvs";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "RQNx*,tUvs");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MPv0}");
      int int0 = 52;
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 52, 3440);
      helpFormatter1.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options1);
      int int1 = 0;
      String string0 = "O_\\e[RC\\^s\"";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1124, "-", "\n", options0, (-1), 1, " ] [ long ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 74;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 54, "xCx-LILyw7b-9(");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 74, 1);
      int int1 = 1549;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1549, (-2044), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      printWriter0.print(true);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "arg", options1, "arg", false);
      helpFormatter0.printHelp(printWriter0, 10, "org.apache.commons.cli.HelpFormatter$1", "arg", options1, 1507, 74, "by", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintWriter2.printf("FOk(!SjjcZM5mCu)5_", objectArray0);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, (-2822), "", "\n", options1, 1, 1087, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1102);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_", "", (Options) null, "%W>K'z4fTK5_]Z+", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 258, options0, 258, 11);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter1.printHelp(40, "\n", "", options0, "*o>dI<Y`");
      helpFormatter2.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter2;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf("Ul+6OU7Z*\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, (-2822), "Ul+6OU7Z*\"", "--", options0, 3, 74, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasOption("usage: ");
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "");
      helpFormatter1.getArgName();
      helpFormatter1.findWrapPos("\n", 74, (-375));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix(" ");
      Options options1 = options0.addOption("arg", "arg", true, "--");
      helpFormatter1.printHelp("@zsSdj=3%MX&1m2", (String) null, options1, ":1R", true);
      helpFormatter1.printHelp(674, "b 0o}", "b 0o}", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MPv0}");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 52, 3440);
      helpFormatter1.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-64), "xI&E)f%:Wn(bl;wz1bW", "arg", options0, 1, (-2), "xI&E)f%:Wn(bl;wz1bW", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$1", "-").when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options2, "e]ss)Rj(:6", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "org.apache.commons.cli.HelpFormatter$1", "", options1, 10, (-2), "e]ss)Rj(:6", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = new Options();
      helpFormatter1.defaultNewLine = "eH/VRJ<<%iVAl";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "   ", options1, "9]u|\"K", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Yno8~)rqj\\uu3";
      helpFormatter0.defaultArgName = string0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Aip\"jyx- !8'u,");
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-890));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "=ZU_o@G&qP!D-3'.3LW", " ] [ long ", options0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("1", true, "arg");
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "");
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "usage: ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@inNW4g", "@inNW4g", options0, "", false);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("a]sE 3");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "");
      helpFormatter0.getOptionComparator();
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "usage: ", (Options) null, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2465), "AbS0k1L,9J$wLd<", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 762, 3, "cmdLineSyntax not provided");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, (-2673), options0, 1, 1161);
      helpFormatter1.renderWrappedText(stringBuffer2, 10, 74, "usage: ");
      helpFormatter1.rtrim("=");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, false);
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 21, 74, "[ Options: [ short ");
      helpFormatter0.rtrim("8`(/^6 GX_GSR {[");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-1148);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1148), 54, "xCx-LILyw7b-9(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLeftPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("arg", 1070, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1083, 51, " ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 22, "c5`JAciO1n.j@7;K");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption("~_O(|ZG>", false, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~_O(|ZG>' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('[');
      Options options0 = new Options();
      helpFormatter2.printHelp(3, "-", "]", options0, "The option '");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$1", "r90Xxe/y~sHm", "Crj&`\u0002c71Jbs6", "").when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 3799, "", options3);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(1895, "   ", "", options1, "--");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultDescPad = 191;
      helpFormatter0.setArgName("-");
      String string0 = null;
      Options options0 = new Options();
      options0.toString();
      Option option0 = null;
      try {
        option0 = new Option(" ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p ]xc;e&hp)wu");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 74, "[ Options: [ short ");
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(100);
      helpFormatter0.findWrapPos("-", 100, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s%i$7E");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 44, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(518);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "-", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 518, options2, 63, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 1895;
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", options0);
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("coAe>5u^A-c$C9fo1m");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(100);
      helpFormatter0.findWrapPos("[ Options: [ short ", 100, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp(64, "EL", "V~fW,!~ar%QGos[<BS", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Option option1 = new Option("", "]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option1);
      options2.addOption(option1);
      helpFormatter0.printHelp(58, " [ARG]", "   ", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 34, options2, (-1), 2511);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$1", "r90Xxe/y~sHm", "Crj&`\u0002c71Jbs6", (String) null).when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 3799, "", options3);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(1895, "   ", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
      helpFormatter0.findWrapPos("--", 100, 100);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 63, 25, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(" Esvdg\"7");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("y)%+-_`/8s@'=b:,tP");
      mockPrintWriter0.println('x');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1895, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1361));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fqt9{o1{60U`S(,");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "],");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$1", "-").when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      optionGroup2.setRequired(false);
      OptionGroup optionGroup3 = new OptionGroup();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$1";
      optionGroup3.setSelected(option0);
      optionGroup3.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "", options1);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(100);
      int int0 = helpFormatter0.defaultDescPad;
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 44, "usage: ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("64)cs96bZ5#~Vg)Qn%");
      helpFormatter0.findWrapPos("", 0, 1895);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.append('');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "]", ";oxK7,`RN", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      int int0 = 1;
      stringWriter0.append((CharSequence) "\n");
      String string0 = "]";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 64, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      int int0 = 1;
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "", "MwyUuFAaSd-", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "QYRVr2GCS?HfTcMf]m");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "Illegal option name '");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = (-62);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-62));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MPv0}");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 52, 3440);
      helpFormatter1.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      Option option1 = new Option("arg", "-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("NO_ARGS_ALLOWED");
      helpFormatter0.printOptions(mockPrintWriter1, 74, options0, 74, 74);
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Option option2 = new Option("", (String) null, false, "arg");
      optionGroup0.addOption(option2);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 107, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "", false, (String) null);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, " | ");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-", options0);
      helpFormatter1.getArgName();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 100;
      helpFormatter0.setLeftPadding(100);
      String string0 = "[ Options: [ short ";
      int int1 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 100, "[ Options: [ short ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, ".", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MPv0}");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 52, 3440);
      helpFormatter1.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1436), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "");
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "bC15~o^b5g'E)d?,");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      OptionGroup optionGroup3 = new OptionGroup();
      OptionGroup optionGroup4 = new OptionGroup();
      options1.addOptionGroup(optionGroup4);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options2 = options0.addOption(option0);
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 74, "wXz}!P^60p", options2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$1", (String) null, (String) null).when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 3799, "", options3);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding((-2391));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "--");
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("M#@2", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "org.apache.commons.cli.Option";
      Options options1 = options0.addOption("arg", "arg", true, "org.apache.commons.cli.Option");
      String string2 = "]";
      Option option0 = new Option("", true, "]");
      Options options2 = options1.addOption(option0);
      options2.getOptionGroups();
      // Undeclared exception!
      try { 
        options2.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, " | ");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-1385), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      int int0 = helpFormatter0.defaultDescPad;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 44, "usage: ");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append('');
      Options options1 = new Options();
      helpFormatter0.printHelp(13, "org.apache.commons.cli.AlreadySelectedException", "]", options0, ";oxK7,`RN");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(3);
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("r9 % |_k=gs^YGzu,e");
      helpFormatter0.setArgName("");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "s%i$7E");
      helpFormatter0.rtrim(".Vj@d#ge]?M,RP;H");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1161, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(100);
      helpFormatter0.findWrapPos("[ Options: [ short ", 100, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 44, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      String string0 = "QYRVr2GCS?HfTcMf]m";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("-", "", false, "#U;[dGZQs*hu}vg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "-");
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      Options options1 = options0.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter1.print(false);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter1, 1895, options1, 1895, 0);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("64)cs96bZ5#~Vg)Qn%");
      helpFormatter0.findWrapPos("]", 0, 1895);
      helpFormatter0.setLongOptPrefix("The option '");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      assertEquals("The option '", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#U;[dGZQs*hu}vg", ";", (Options) null, "2#(/Meo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 31, 31, "ajBLH1uO$&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(44);
      assertEquals(44, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Canot add value, list full.";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("usage: ", "Canot add value, list full.");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "--");
      mockFile0.mkdir();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "[";
      helpFormatter0.setOptPrefix("[");
      int int1 = (-1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int2 = (-355);
      String string1 = "<";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("X6'?fo7Qqk(G_816", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'X6'?fo7Qqk(G_816' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "\n", "--", options0, " ");
      assertEquals(74, helpFormatter1.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3633);
      helpFormatter0.setDescPadding((-3633));
      helpFormatter0.getSyntaxPrefix();
      String string0 = "NVN";
      helpFormatter0.setOptPrefix("NVN");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "NVN");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3633), (-3633), "4ChKw4*!BE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "v*hP}vnuN|h";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      String string3 = "]nYY!AFWW-zG,o\"";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "]", options1, "]nYY!AFWW-zG,o\"", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(649);
      int int0 = (-1362);
      helpFormatter0.setWidth((-1362));
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      String string0 = "E^x;wPL-z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("Z9sXvRhMD!&V", objectArray0);
      int int0 = 3666;
      String string1 = "ad2,%j;#iN*;(|";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer(40);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 40, 44, "");
      assertEquals(0, stringBuffer1.length());
      
      String string0 = helpFormatter0.rtrim("zn?^ZP&Re-5OdXR");
      assertEquals("zn?^ZP&Re-5OdXR", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string1);
      
      String string2 = helpFormatter1.getLongOptPrefix();
      assertEquals("--", string2);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-165);
      helpFormatter0.defaultDescPad = (-165);
      helpFormatter0.getNewLine();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      options0.hasOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options0.hasOption(" ");
      options1.hasLongOption("NO_ARGS_ALLOWED");
      boolean boolean0 = false;
      Options options2 = options1.addOption("arg", "", false, "9h'g");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1161, options2, 74, 1161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("$&E[eDje4c{#=q) o", 0, (-3874));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d%i v>d";
      helpFormatter0.setSyntaxPrefix("d%i v>d");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "d%i v>d");
      stringBuffer0.append((float) 3);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuffer0.insert(2248, charArray0, 0, 386);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2248
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
