/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2774);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "JYb", "k", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      helpFormatter0.setLeftPadding(991);
      helpFormatter0.setWidth((-594));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append((-1));
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2593), "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 6, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultWidth = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-332), "'FGqre", "'FGqre", (Options) null, "'FGqre", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(482);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1797, "--", "", options0, 1456, 3, (String) null, true);
      int int0 = helpFormatter0.defaultDescPad;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2338, "usage: ", "usage: ", options0, 74, 3, "--", true);
      int int0 = helpFormatter0.defaultDescPad;
      int int1 = 2518;
      String string0 = helpFormatter0.createPadding(2518);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int2 = 66;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 66, options0, 529, 2338);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-761), string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(64);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "J.xYg-6'8h57$5PK<e\"");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.renderOptions(stringBuffer0, 2924, options1, 10, 64);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", true, " ");
      helpFormatter1.setLongOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-332), "=", "=", (Options) null, "=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.defaultLeftPad = (-1992);
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options0.getOptions();
      Options options2 = options1.addOption("", "x^*d3|VC$", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B", "", options2, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      option0.toString();
      option0.setRequired(true);
      options0.getOption("usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("'", options0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("!");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      helpFormatter0.printHelp("!", "", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("'");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "C";
      helpFormatter0.setWidth(1);
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "R|pO~@t P#T!@MM", options1, "Kd4/% B");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "Qsj@w4_u6SK.P\u0003'", "@Ea*Q-Oqn&WU", options0, "`?`v4lU>1!#@", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("='|Yx.PazQw&&H", "q.B]~*bl7Hp4tt$", options0, "='|Yx.PazQw&&H");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("='|Yx.PazQw&&H", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 947;
      helpFormatter0.setWidth(60);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3997, 3997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      Options options1 = options0.addOption("C", "usage: ", true, "Kd4/% B");
      // Undeclared exception!
      helpFormatter0.printHelp("--", "R|pO~@t P#T!@MM", options1, "Kd4/% B");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3513);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, (-2316), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.rtrim("FY:\"qViTS");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "FY:\"qViTS";
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Util", (-2127), (-2127));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", true, "arg");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.defaultSyntaxPrefix = "%n%lY)K>@7i R5h0";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-184), options1, 47, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      options0.getOption("usage: ");
      helpFormatter0.printHelp("'", options0);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&e1$_H");
      Locale locale0 = new Locale("}");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) "&e1$_H";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.append((CharSequence) "&e1$_H");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("}", "Cannot add value, list full.", options2, ";%^}x*8L#MDFDh^");
      helpFormatter0.printOptions(printWriter0, 9, options2, 55, 13);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", false, "arg");
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOption("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup1);
      options3.hasShortOption("--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "K", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", " ", options0, "Illegal option name '");
      helpFormatter1.printUsage(printWriter0, 1, "");
      helpFormatter1.createPadding(73);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Option option0 = new Option((String) null, "-", false, (String) null);
      options0.addOption(option0);
      Options options1 = options0.addOption("K", false, "arg");
      Option option1 = new Option("NO_ARGS_ALLOWED", "--");
      options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      optionGroup0.addOption(option1);
      Options options2 = options1.addOption("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options3 = options1.addOptionGroup(optionGroup1);
      options3.hasShortOption("--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", false, "arg");
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "K", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "K", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", false, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(2);
      helpFormatter2.printHelp("\n", "-", options1, "K:4% B");
      helpFormatter0.findWrapPos("\n", 74, 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption(" ");
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "b";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 67;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 67, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 74, "@I7$)", (String) null, options0, 1, 3, ", ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "\n", "\n", (Options) null, (-2431), 15, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "%WwX{SPG+F", " | ", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", false, "arg");
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOption("arg", false, " ");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 63, "D-T+}]G'~", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[zHG99_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, "[zHG99_", "[zHG99_", options0, (-2213), (-2213), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", true, "arg");
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "NO_ARGS_ALLOWED", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "u*{F)=bSATF2+");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "u*{F)=bSATF2+");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("", true, "--");
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      Option option1 = new Option("", "|k#xlW4S2Xo8:x", true, "--");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      options0.hasShortOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options1, true);
      helpFormatter0.getLeftPadding();
      helpFormatter1.createPadding(109);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "--", true, "--");
      Option option0 = new Option("NO_ARGS_ALLOWED", "P/[~q2");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options4 = options1.addOptionGroup(optionGroup2);
      options4.hasShortOption("--");
      options2.addOption("", "P/[~q2", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options3, true);
      int int0 = (-902);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-902));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      helpFormatter0.setArgName("usage: ");
      option0.toString();
      option0.setRequired(true);
      options0.getOption("usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("'", options0);
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("!");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      helpFormatter0.printHelp("!", "", options1, "cmdLineSyntax not provided", false);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 101, "j8\"ulo(#ZDeE]4cS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.defaultArgName = "2HWsCkof&<WtUaIz";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, "0N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      printWriter0.flush();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append('Y');
      helpFormatter1.printHelp(printWriter0, 74, "?P}]S_9Wk}", " ", options0, 1, 74, "\n", false);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 12, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.printHelp(printWriter0, 56, " ", " ", options0, 34, 56, " ");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2431));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 44, "]e!2o/3F", "-", (Options) null, 74, 74, "P'w3d7`[`g", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim(" ");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1000), (String) null, (String) null, options0, "'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1734, options0, 26, (-1162));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, " ", " ", (Options) null, (-2431), 0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "JYb", "k", options0, "");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1271, " ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      int int1 = 6603;
      Options options0 = new Options();
      String string0 = "]";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "P9lpz2@r*-";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "P9lpz2@r*-";
      objectArray0[4] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "P9lpz2@r*-", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 0;
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1QMThD:q cOy", " ", (Options) null, "y_&gz(e", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      String string0 = "F*YT:i\"B@i";
      MockFile mockFile0 = new MockFile("", "F*YT:i\"B@i");
      mockFile0.setWritable(false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      int int0 = 6603;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 74, "?P}]S_9Wk}", " ", options0, 1, 74, "tX", false);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getLeftPadding();
      helpFormatter1.createPadding(74);
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 12, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.renderOptions((StringBuffer) null, 745, options0, 745, 745);
      helpFormatter0.printHelp(6, "k", "usage: ", options0, "k");
      helpFormatter0.setDescPadding(745);
      int int0 = 487;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 487, options0, 487, 487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "--", "w-Xbi", options0, 1433, 17, "--", false);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3833, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5379, 5379, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2309, "usage: ", "usage: ", options0, 10, 3, "--", true);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.getLeftPadding();
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1962), (String) null, "", options1, (-1962), 0, "A6 ~7P", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = (-230);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ", " ", (Options) null, (-2431), 0, " ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      int int0 = 697;
      int int1 = 0;
      PrintWriter printWriter0 = null;
      Options options1 = options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp("--", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 697, " ", "--", options1, 0, 697, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", true, "Xt[:<i<(`*hq`L}Pk");
      helpFormatter0.printUsage(printWriter0, 1539, "`Oq;,", options0);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("H", "P/[~q2");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 8, 8);
      helpFormatter0.printHelp(8, "KM~b5^GU}w+Esw/", ".Z", options0, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 6, (-609), "|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("K", true, "arg");
      Option option0 = new Option("NO_ARGS_ALLOWED", "P/[~q2");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options4 = options1.addOptionGroup(optionGroup2);
      options4.hasShortOption("--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options3, true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "--", true, "--");
      Option option0 = new Option("NO_ARGS_ALLOWED", "P/[~q2");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup0.addOption(option0);
      options0.hasShortOption("--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options3, true);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "C";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = (-1749);
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 22
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/RM1k`A_R,KZ");
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp(22, "/RM1k`A_R,KZ", "", options0, "", false);
      options0.hasLongOption((String) null);
      helpFormatter0.setWidth((-875));
      options0.addOption("", false, "");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(147, "", "nxX7>i1)T ;}r~Dvd&W", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 697, "", "-", options0, (-230), 0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1341), "The option '", "", options0, (-1341), (-1341), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "line.separator", true, "' was specified but an option from this group ");
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("1jS'#E!i%|pw{", "usage: ", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      String string0 = " ";
      String string1 = "WdZHG*Qc&!](pjNZyf";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-230), " ", "WdZHG*Qc&!](pjNZyf", options0, 127, 0, "R.pTq) ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 1074, 34);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "lnM0|", "J//.e#?>02bCSxkq", options0, "J//.e#?>02bCSxkq");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "--", true, "--");
      Option option0 = new Option("NO_ARGS_ALLOWED", "P/[~q");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup2);
      options3.hasShortOption("--");
      options2.addOption("", "P/[~q", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options3, 74, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 32, 74);
      helpFormatter0.setDescPadding((-1336));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = (-234);
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 697, " ", "R.pTq) ", options0, (-230), 0, "R.pTq) ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "<";
      Option option0 = new Option("arg", ".KO\"bK.u`e?As6f$");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("fgVMj3f", "&6'2PoD+R$skK", options1, ".KO\"bK.u`e?As6f$");
      option0.clone();
      helpFormatter0.findWrapPos("fgVMj3f", (-2), 34);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      int int0 = 0;
      helpFormatter0.printHelp(6, "lnM0|", "", options0, "");
      helpFormatter0.setDescPadding((-3345));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2839), ".*!&75s?6'*WE7", "\"", options0, "WPig=XG(z/dZ3F=x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("C", "usage: ", true, "K:4% B");
      helpFormatter1.printHelp("--", "R|pO~@t P#T!@MM", options1, "K:4% B");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "line.separator", false, "' was specified but an option from this group ");
      helpFormatter0.printHelp("1jS'#E!i%|pw{", "usage: ", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)11;
      byte byte0 = (byte)63;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1893), "", "\"pDxUzOG7_$eA", options2, 1120, 314, "M)@W (\"17(t\"=\"t@Fe2", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 33;
      stringBuffer0.codePoints();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      mockFile0.setWritable(true, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 6603, "P9lpz2@r*-", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 33, (Options) null, 33, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setDescPadding(9);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int1 = 431;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 697, options0, 697, 697);
      String string0 = "lnM0|";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "DM{OU^DaTm{", options0, "lnM0|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("K");
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "--", true, "--");
      Option option0 = new Option("NO_ARGS_ALLOWED", "P/[~q2");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options4 = options1.addOptionGroup(optionGroup2);
      options4.hasShortOption("--");
      options2.addOption("", "P/[~q2", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options3, true);
      int int0 = (-902);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-902));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      helpFormatter0.setLeftPadding(991);
      helpFormatter0.setWidth((-594));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append((-1));
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2593), "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 6, "");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("usage: ");
      helpFormatter1.setSyntaxPrefix("org.apache.commons.cli.Option");
      helpFormatter1.setLongOptSeparator("--");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      option0.toString();
      option0.setRequired(true);
      options0.getOption("usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("'", options0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("!");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      helpFormatter0.printHelp("!", "", options1, "cmdLineSyntax not provided", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, (-1), 29);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      option0.toString();
      option0.setRequired(true);
      options0.getOption("usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("'", options0);
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("!");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      helpFormatter0.printHelp("!", "", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("'");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 101, "j8\"ulo(#ZDeE]4cS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, "h[9>V}=p5y[=FC", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("c", " ", false, "");
      option0.clone();
      helpFormatter0.printHelp("eM!", "/,%Q}h58'F$/%H|N", options2, "", true);
      helpFormatter0.rtrim("/WtaZi)=X5(<");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", ".KO\"bK.u`e?As6f$");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("fgVMj3f", "&6'2PoD+R$skK", options1, ".KO\"bK.u`e?As6f$");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1306);
      int int0 = (-1978);
      helpFormatter0.setWidth(223);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("qvhL_c");
      stringBuffer0.append(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, (-1284), options0, 1, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-2053), 209, "NJE/-PRF0Un)/YXFxc");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-251);
      String string0 = "@2igW@Vq=A#2pAwh\"vH";
      Options options0 = new Options();
      String string1 = "";
      options0.hasShortOption(" :: ");
      String string2 = ">";
      helpFormatter0.defaultLeftPad = 44;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-251), 1791, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-251);
      helpFormatter0.defaultWidth = (-251);
      String string0 = " :: ";
      String string1 = "@2igW@Vq=A#2pAwh\"vH";
      Options options0 = new Options();
      String string2 = "";
      options0.hasShortOption(" :: ");
      String string3 = ">";
      helpFormatter0.defaultLeftPad = 44;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-251), 1791, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("", "--", true, "arg");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup2);
      options3.hasShortOption("arg");
      options1.addOption("arg", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-1);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-504), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "O?:B'[.|", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("The option '");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "");
      helpFormatter0.setArgName("");
      option0.toString();
      option0.setRequired(true);
      options0.getOption("usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("'", options0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("!");
      helpFormatter0.createPadding(235);
      try { 
        MockURI.URI(" ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0:  
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("c", " ", false, "");
      helpFormatter0.printHelp("eM!", "/,%Q}h58'F$/%H|N", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3362);
      String string0 = "7cfh`T";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-3362), (-3362), "7cfh`T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.defaultSyntaxPrefix = "A CloneNotSupportedException was thrown: ";
      int int0 = 1517;
      helpFormatter0.setWidth(1517);
      String string1 = "$'}c|xw3u+nWOBDs";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, " ?D&> -@7a)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = (-1209);
      int int1 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1209), options1, (-1209), 4577);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gT(|6,.UEG";
      int int0 = 0;
      helpFormatter0.findWrapPos("gT(|6,.UEG", 2009, 0);
      StringBuffer stringBuffer0 = new StringBuffer("gT(|6,.UEG");
      String string1 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("[", "", true, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '}';
      charArray0[2] = 'T';
      charArray0[3] = 'd';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.setSyntaxPrefix("");
      try { 
        byteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      mockPrintWriter0.println((long) 3);
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "The option '", (String) null, (Options) null, (-3069), 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-1);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      String string1 = ",Z7#(a) /\"]Gc$_";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "<2ZnB@W(F)Ae;4e";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<2ZnB@W(F)Ae;4e");
      PrintStream printStream0 = mockPrintStream0.append('U');
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 0;
      String string0 = " ]";
      mockPrintStream0.print("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "\n", true, "WjJLR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":pV%09m*s3[wy3hj>J~";
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        options0.addOption(":pV%09m*s3[wy3hj>J~", "d", true, "z;sGFL[ 1??[UW`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':pV%09m*s3[wy3hj>J~' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
