/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:42:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("QmGn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options0, "arg", true);
      helpFormatter0.setWidth((-133));
      helpFormatter1.printHelp("n) PXP&m'jSGq]@", "QmGn", options0, " ");
      helpFormatter0.getWidth();
      helpFormatter1.getDescPadding();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(13, "usage: ", "", options0, "usage: ");
      helpFormatter0.findWrapPos("\n", 307, (-245));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(580);
      helpFormatter0.setLongOptSeparator("0zF%H<mB;Wj[_Av");
      helpFormatter0.defaultLongOptPrefix = "w";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("mIbtn8", true, "4pD");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "org.apache.commons.cli.Util", false, "--");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("cl", "", options0, "[", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", " pB2lO{w1c|Y*Q&T", false, (String) null);
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "-", options0, "", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("mIbtn8", true, "4pD");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setWidth((-2241));
      options1.getMatchingOptions(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cl", "org.apache.commons.cli.Options", options0, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("mIbtn8", true, "4pD");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("4pD", "--", false, " ");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "mIbtn8";
      objectArray0[1] = (Object) optionGroup1;
      objectArray0[2] = (Object) "rDi?4Iqc";
      objectArray0[3] = (Object) "<(&";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter1.printUsage(printWriter0, 249, "3.4jve.]c?go]", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1378), (-1), "mIbtn8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = (-159);
      helpFormatter0.defaultLeftPad = (-159);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2928, "'", "'", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string0 = "";
      helpFormatter0.defaultWidth = (-1);
      options2.addOption("", (String) null, false, "Kq;`/#|a");
      options2.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "*", options2, "A CloneNotSupportedException was thrown: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("", (String) null, false, "Kq;`/#|a");
      options2.getMatchingOptions("");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "*", options2, "A CloneNotSupportedException was thrown: ", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "{.&Oz6ppFobp?;il ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-1449), "{.&Oz6ppFobp?;il ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3136, "uhT~<QvW,Mtz", "", options0, "", false);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, " ");
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("Hl", "F9)$9+G", options1, "r02?]$zed5AwNFactK", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2846, "]", "r02?]$zed5AwNFactK", options0, (-2013), (-2013), "GdEk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", " ", true, " ");
      options0.getMatchingOptions("usage: ");
      options1.addOption("", "", true, ", ");
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "):+cA8", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options0.hasOption("--");
      String string0 = "-tlt v!0TE_wBHm";
      int int0 = 13;
      StringBuffer stringBuffer0 = new StringBuffer(119);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1270, options0, 119, 2077);
      helpFormatter0.renderWrappedText(stringBuffer1, 763, (-1), "-tlt v!0TE_wBHm");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "-tlt v!0TE_wBHm", "-tlt v!0TE_wBHm", options0, (-1), 2077, "-tlt v!0TE_wBHm", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3216, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.format((Locale) null, "usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-2050), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("-tlt v!0TE_wBHm", "arg", options0, "[ Options: [ short ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      options0.addOption("arg", "arg", false, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 13, 3, "\n");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, " ", "org.apache.commons.cli.HelpFormatter$1", options0, 74, 63, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(7);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasOption("7`JQA^");
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-tlt v!0TE_wBHm", "-tlt v!0TE_wBHm", options1, "-tlt v!0TE_wBHm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", " ", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("{a2y6o>Ih[~)SkH*G", "{a2y6o>Ih[~)SkH*G", options1, "{a2y6o>Ih[~)SkH*G");
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "--", (Object[]) null);
      int int0 = 13;
      helpFormatter0.printWrapped(printWriter0, 13, 13, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "dT@|%%qOkDunfT", false, "!^cK)t&NhIT7O,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      int int0 = 2070;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, (Options) null, 2070, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      options0.addOption("arg", " ", true, " ");
      String string0 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "usage: ", options0, "Db P6EKB/[", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options1 = options0.addOption((String) null, "usage: ", true, "");
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", (String) null, options1, 3, 1315, "arg", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options1 = options0.addOption((String) null, "usage: ", true, "");
      MockFile mockFile0 = new MockFile("--", "arg");
      helpFormatter3.printHelp(31, "arg", "~aFoSZ}h(X", options0, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions(mockPrintWriter0, 3, options1, 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(10);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage(printWriter0, 74, ", ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1883);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "[", "", options1, 2429, 4, "", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 34;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("{a2y6o>Ih[~)SkH*G", "{a2y6o>Ih[~)SkH*G", options0, "   ");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2876), options0, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options0.getOptionGroups();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2077, "-", " ", options0, 2077, 1, "-", false);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 588, options0, 10, 588);
      int int0 = 13;
      Option option0 = null;
      try {
        option0 = new Option("\n", "1839>eiuh,VQ$F", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(2294, "-tlt v!0TE_wBHm", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2294, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "usage: ", options0, "Db P6EKB/[", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Whp-%;Z~P?DiCwK&");
      int int0 = 2938;
      int int1 = (-1219);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2938, "org.apache.commons.cli.OptionValidator", " ", options0, (-1219), (-3112), "The option '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuffer0.append(stringBuffer1);
      int int0 = (-382);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 63, (-382), "");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      // Undeclared exception!
      try { 
        stringBuffer2.insert(63, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 63
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", " ", true, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "usage: ", options0, "Db P6EKB/[", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/u ]I#Q~_BYXMoY");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "usage: ", options1, 1425, 1425, "\n", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options2 = options1.addOption((String) null, "--", true, "");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 1, options2, 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, "--");
      List list0 = new LinkedList<Object>();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 839, " `6", "   ", options0, 3, 269, "c(V c:{n;\"T^!5wU");
      helpFormatter1.getArgName();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.setDescPadding(74);
      options0.getMatchingOptions("arg");
      helpFormatter1.printHelp("\n", "org.apache.commons.cli.HelpFormatter", options0, " [ARG]", false);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", " ", true, " ");
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 83;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "&(;M=", "", options1, 83, (-1120), "V(FMYvG28n8~");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "arg", options1, 2077, (-446), "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("n1", "-tlt v!0TE_wBHm", options0, (String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, (-2), options0, 64, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2061, 1455, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">w";
      helpFormatter0.setArgName(">w");
      MockFile mockFile0 = new MockFile("dyB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 592;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 592, "dyB");
      helpFormatter0.defaultLongOptPrefix = ">w";
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter1.append((CharSequence) "usage: ", 1, 3);
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "YH", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.getMatchingOptions(" :: ");
      helpFormatter0.printHelp("[", "arg", options0, "arg", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1777), options1, 74, 74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options2 = options1.addOption((String) null, "({#g", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printHelp("-", "", options2, "d9pJt}\"^.L", true);
      helpFormatter3.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3192, (String) null, "", options1, (-1008), 3, "|lX4f><^6ZIRl.@", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      options1.addOption((String) null, "({#g", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", (Object[]) null);
      helpFormatter2.printWrapped(printWriter0, 11, 74, " ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "EXCk2gz{1so|");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "", "V(FMYvG28n8~", options0, (-190), 3, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", " ", true, " ");
      options0.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", " ", options0, "Db P6EKB/[", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1555, 1555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2077, "-", "-tlt v!0TE_wBHm", options1, 2077, 2, "-", false);
      helpFormatter0.findWrapPos("-tlt v!0TE_wBHm", 2077, 17);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3839), "-tlt v!0TE_wBHm", "", options1, 2077, 1863, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "arg";
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      File file0 = MockFile.createTempFile("usage: ", "--", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1138));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "arg";
      options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding((-2883));
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("usage: ", "]", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      int int0 = 31;
      helpFormatter0.setDescPadding(31);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      options0.getMatchingOptions("");
      String string1 = "xnT|$>d";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", (Options) null, "xnT|$>d", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      helpFormatter0.setDescPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "org.apache.commons.cli.HelpFormatter$1", (String) null, (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      Options options1 = options0.addOption("arg", "8/_8# ]F0#QW", false, "");
      options1.helpOptions();
      helpFormatter0.printHelp("8/_8# ]F0#QW", "", options1, "Cannot add value, list full.");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(932, "arg", "", options0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printOptions(mockPrintWriter0, 1550, options1, 63, 1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      options1.addOption((String) null, "({#g", true, "");
      MockFile mockFile0 = new MockFile("--", "arg");
      helpFormatter3.printHelp(31, "arg", "~aFoSZ}h({", options1, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter0, 0, options0, 41, 31);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "31DG00?", true, "&`YkH{-iA&");
      options0.helpOptions();
      helpFormatter1.printHelp("Z5L#un", "-", options1, "usage: ");
      options1.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, ">", "arg", options1, 1338, 1, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "]", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      options1.addOption((String) null, "", true, "");
      MockFile mockFile0 = new MockFile("--", "arg");
      helpFormatter3.printHelp(31, "arg", "~aFoSZ}h({", options1, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter0, 0, options0, 41, 31);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      Options options1 = options0.addOption("arg", "8/_8# ]F0#QW", false, "");
      options1.helpOptions();
      helpFormatter0.printHelp("8/_8# ]F0#QW", "", options1, "Cannot add value, list full.");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("_P'y3P");
      helpFormatter0.printHelp("\n", "", options0, "--");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      helpFormatter0.setDescPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-478), "org.apache.commons.cli.HelpFormatter$1", "},uY+6RXwsI%kls*u", (Options) null, (-478), (-478), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.format("-", (Object[]) null);
      int int0 = 99;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "31DG00?", true, "&`YkH{-iA&");
      options0.helpOptions();
      helpFormatter1.printHelp("Z5L#un", "-", options1, "usage: ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.setDescPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1405, "", (String) null, options0, 3973, (-478), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "p5W3):", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1121, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-868), 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      Options options1 = options0.addOption("arg", "8/_8# ]F0#QW", false, "");
      options1.helpOptions();
      helpFormatter0.printHelp("8/_8# ]F0#QW", "", options1, "Cannot add value, list full.");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("_P'y3P");
      MockFile mockFile1 = new MockFile(mockFile0, "7ksP2Hw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "_P'y3P", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = 1766;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions(mockPrintWriter0, (-1243), options0, (-1), (-4160));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("&.V[=[n<$QX&pW");
      helpFormatter0.defaultWidth = 32;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", "", true, "");
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "V", "igR1lqa}xQO2W", options1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "-tlt v!0TE_wBHm", "-", options1, "eaBz1!}5rF|ng{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(115);
      options0.addOption((String) null, " ", false, "arg");
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(115);
      helpFormatter0.printHelp(1935, "org.apache.commons.cli.OptionValidator", "mZ_;", options0, "Ta7g/Lgr#B");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("@lzU0ru0yH");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1306, "@lzU0ru0yH", "usage: ", (Options) null, "&c~}sH_^}ai]`uAkCf", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(30);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setOptionComparator((Comparator) null);
      String string0 = "";
      helpFormatter1.printHelp("arg", "--", options0, "", false);
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", false, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", (Options) null, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(115);
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      helpFormatter1.printHelp(74, "--", "V", options1, "");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "P#kpYH@%I", (Options) null, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("QmGn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options0, "arg", true);
      helpFormatter1.printHelp("n) PXP&m'jSGq]@", "QmGn", options0, " ");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 34, "--", options0);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "--", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(31, "-", (String) null, options1, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("fj~-k~0r");
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptPrefix((String) null);
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      options0.addOption("", "", false, " ");
      helpFormatter1.findWrapPos("arg", 10, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4155), "`?'Y9|", "6", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "QmGn", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1791, "IZ(?/-P+j", "IZ(?/-P+j", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("&.V[=[n<$QX&pW");
      helpFormatter0.defaultWidth = 32;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp(32, "Q=~e:_}ElRei", "&.V[=[n<$QX&pW", options0, "&.V[=[n<$QX&pW", true);
      helpFormatter0.printHelp("Q=~e:_}ElRei", "Q=~e:_}ElRei", options0, "Q=~e:_}ElRei", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "&.V[=[n<$QX&pW");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2572), (-2572), "t*WX\"'GWN-p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("QmGn", "-", options0, "--", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "IZ(?/-P+j", "QmGn", options0, "IZ(?/-P+j");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('~');
      stringWriter1.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1587), (Options) null, (-1587), (-1587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      options0.getOptions();
      helpFormatter0.printHelp("--", "", options0, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2911), "IZ(?/-P+j", (String) null, options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "QmGn";
      Options options0 = new Options();
      String string1 = " !X*B4Jd)}dBYW";
      helpFormatter0.printHelp(80, " !X*B4Jd)}dBYW", "--", options0, "60iVmmM\rN@rb+pz");
      helpFormatter0.setNewLine("WJUU_.");
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      String string2 = "`?'Y9|";
      // Undeclared exception!
      try { 
        options0.addOption(" !X*B4Jd)}dBYW", "", false, "QmGn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' !X*B4Jd)}dBYW' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(31, "-", (String) null, options1, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("fj~-k~0r");
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptPrefix((String) null);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      options0.addOption("", "", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4155), "`?'Y9|", "6", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("trX?)vDw|%[ycXw");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("trX?)vDw|%[ycXw", "trX?)vDw|%[ycXw", (Options) null, "~!mE72J;]Q?y) h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "QmGn", options0, "0 9", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "{PK!>7}[T1O'*y2cC", (String) null, options0, "DDdCNj&;Hdix", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string1 = "@lqHC]SIWn";
      helpFormatter0.getDescPadding();
      int int0 = 0;
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.defaultArgName = "k*aW(q";
      // Undeclared exception!
      try { 
        options1.addOption("\n", "-", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("QmGn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options0, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "--", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "has already been selected: '";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 27, (-1996), "");
      helpFormatter0.printWrapped(printWriter0, 74, 1287, "i");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.hasLongOption("\n");
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", false, (String) null);
      options0.addOption(option0);
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string0 = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionGroup", ", ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.commons.cli.OptionGroup", 1, 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-3311), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2911);
      String string0 = "k`";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2911), "k`", "-", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = (-406);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "[", false, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("", 0, 0);
      String string0 = "w7o9mX%5YB'RMV!g";
      String string1 = "";
      try { 
        MockURI.URI("", "'Ru;Z`g:xK", "", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://['Ru;Z`g:xK]#usage:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      String string0 = "@lqHC]SIWn";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "@lqHC]SIWn");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "\\F";
      helpFormatter0.setLongOptSeparator("F");
      String string1 = "oJn|T|MX+n*pC.p)VE";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = true;
      options0.addOption((String) null, (String) null, true, "?2Oy*~=");
      String string3 = "org.apache.commons.cli.HelpFormatter$1";
      options0.hasOption("org.apache.commons.cli.HelpFormatter$1");
      String string4 = "' was specified but an option from this group ";
      helpFormatter0.setOptPrefix("' was specified but an option from this group ");
      String string5 = "-";
      Option option0 = null;
      try {
        option0 = new Option("\n", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 1729;
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1729, "");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[QB!65VsT&$C\\?eS";
      helpFormatter0.setNewLine("[QB!65VsT&$C?eS");
      String string1 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setDescPadding(1);
      int int0 = 521;
      String string2 = "^0xHay9-[.N!X!";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string3 = "]A64r %5.{Uc";
      Option option0 = null;
      try {
        option0 = new Option("]A64r %5.{Uc", "*;-|_S:+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']A64r %5.{Uc' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("H|2Sr:f");
      assertEquals("H|2Sr:f", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("trX?)vDw|%[ycXw");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "trX?)vDw|%[ycXw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.rtrim(">");
      MockFile mockFile0 = new MockFile(">", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "arg", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("&.V[=[n<$QX&pW");
      int int0 = 32;
      helpFormatter0.defaultWidth = 32;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp(32, "Q=~e:_}ElRei", "&.V[=[n<$QX&pW", options0, "&.V[=[n<$QX&pW", true);
      helpFormatter0.printHelp("Q=~e:_}ElRei", "Q=~e:_}ElRei", options0, "Q=~e:_}ElRei", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("= t&vc", false, "= t&vc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '= t&vc' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("QY:O RQfG[!");
      assertEquals("QY:O RQfG[!", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<\\%\\liQxQ|KjO/";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "+w_/sT AuMJ=H\\Z5";
      Option option0 = null;
      try {
        option0 = new Option("+w_/sT AuMJ=HZ5", false, "+w_/sT AuMJ=HZ5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+w_/sT AuMJ=HZ5' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
