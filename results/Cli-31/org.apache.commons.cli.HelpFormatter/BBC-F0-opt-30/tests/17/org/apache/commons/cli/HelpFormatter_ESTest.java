/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:24:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-4316);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I+VvZw rMY", "I+VvZw rMY", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "--");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "0QDXRV 2RB$");
      helpFormatter0.printHelp(printWriter0, 1494, " | ", "pyMYmUXBh)v*b^;i", options1, 0, 0, "0QDXRV 2RB$", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 23, "pyMYmUXBh)v*b^;i", "!Ywos", options2, 1, 1933, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "(+`NOUR";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "(+`NOUR";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "(+`NOUR");
      int int0 = 0;
      String string0 = "4={";
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter1, 0, "4={", "s=bL4ZsQ", options0, 0, 1, "");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3698);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "usage: ", "u7lpyVih", options0, "u7lpyVih", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".8$T\"m/,M6Sr|,", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-4316);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-4316), "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.createPadding(228);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-c;j`e}HX??w", "tYe/R5LVT}lg\"Z~k(Fz", options0, "UBV9S7F>ZNb+j}", true);
      helpFormatter0.defaultSyntaxPrefix = "tYe/R5LVT}lg\"Z~k(Fz";
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options1, "--");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.defaultArgName = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      String string2 = null;
      Options options0 = new Options();
      String string3 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1303);
      helpFormatter0.defaultOptPrefix = "~_A[[DBC%B^E,GH";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!Aw>_5b8", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "--", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "cmdLineSyntax not provided");
      Option option0 = new Option("dEG", ", ", true, "]");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "y!WN^VIu:5k|8[/c", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      int int1 = 1146;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "--", 13, 1146);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-547);
      Options options0 = new Options();
      options0.getOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "\n", "--", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-sl^a?,)NO>5");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.write("usage: ");
      helpFormatter0.printWrapped(printWriter0, 1652, "-");
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("OA'Ia *e4@3A", "A=%g*#.:=e#Gu?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 84, "usage: ", "usage: ", options0, 84, (-243), "8B9')");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("NO_ARGS_ALLOWED", "usage: ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.setDescPadding((-2));
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|1/ds%cQ/~=BF%oGFDW", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Q:Sw<kv>%NhJ#", true, "arg");
      Option option0 = new Option("", "C)G<,Wf$`QGj");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      Options options3 = options1.addOption(option0);
      helpFormatter0.printHelp(3367, "X;4Pgtv=UprqU[4wtM", (String) null, options3, "C)G<,Wf$`QGj");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 4663, options0, 3367, 3367);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&94}}S*Wh~]b{@`", "&94}}S*Wh~]b{@`", (Options) null, "&94}}S*Wh~]b{@`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Tpn9oT7L,iy8I0", "", (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 3, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "1(&/NnjrB{76HMN");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "usage: ", objectArray0);
      printWriter0.format(" ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1494, "usage: ", "pyMYmUXBh)v*b^;i", options0, 0, 0, "0QDXRV 2RB$", false);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " 7f\"DhQXdRO<jc");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iKN62YHZlI?}");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 1, (-208), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 3, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "\n");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      mockPrintWriter0.print((double) 1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 77, "pyMYmUXBh)v*b^;i", options1);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-1);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 3, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "\n");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      mockPrintWriter0.print((double) 1);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 1494, "usage: ", "pyMYmUXBh)v*b^;i", options1, 0, 0, "0QDXRV 2RB$", false);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printHelp(125, "pyMYmUXBh)v*b^;i", "pyMYmUXBh)v*b^;i", options2, "pyMYmUXBh)v*b^;i", false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Oou!3j_S+ewiK)7h", "?T]baS(gOeB;:=&l]YJ", options2, 2817, 0, "pyMYmUXBh)v*b^;i", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setWidth(3);
      helpFormatter0.rtrim(" ");
      Option option1 = new Option((String) null, "~{/X-UR}", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option1);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(32, "-", "--", options1, "}hoKYu", true);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 16;
      int int1 = 4559;
      helpFormatter0.createPadding(4559);
      Options options0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, "--", "--", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = " ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1096, 1096, " ");
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(1096);
      MockFile mockFile0 = new MockFile("?%SU]B}4W", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 2201;
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      helpFormatter0.setWidth((-1426));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "nHj^>vacp]5pBmx", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(40, "-", "-", options1, "dOKp5", true);
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "usage: ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "-", "\n", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(183);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 56;
      helpFormatter0.renderWrappedText(stringBuffer0, 56, 183, "EWbvm]~:](`");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(73);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 73, (Options) null, 33, 73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "~%M`rCkn7";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vAv6RH[37");
      String string1 = ">zW";
      Object[] objectArray0 = new Object[2];
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 32, options1, 16, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 14, 1969, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      Option option0 = new Option((String) null, false, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2817, "Kn-w=^-#.6/!Ec,T", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "-");
      options0.addOption(option0);
      helpFormatter0.setWidth(3);
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), ";[{_POW/&", "", (Options) null, "_aqBnt{!+ah!@D6", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setDescPadding((-1244));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("K~U", options0, true);
      helpFormatter0.setWidth((-1426));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("F", "\n", true, "usage: ");
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1056, "arg", "VzLw]", options2, "G&T71UQ.`xJ?Gq", true);
      helpFormatter1.setOptPrefix("\n");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "{");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      mockPrintWriter0.print((double) 1);
      options0.hasLongOption("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "{";
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.format((Locale) null, "org.apache.commons.cli.HelpFormatter$1", objectArray0);
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "-", options1, 1, 1, " ", true);
      helpFormatter2.printHelp(28, "The option '", "\n", options1, "arg", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = true;
      helpFormatter0.setWidth((-93));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(64, "1Gi)IA.", "5GCnYc{`", options2, "1Gi)IA.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("-");
      Options options3 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter3.printHelp("arg", options1);
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 3744, "", "1n').s.Uc0\"}Ha{2*?)", options2, (-1231), 3030, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "usage: ", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1483, "<D8:W6", (String) null, options1, 97, (-3504), "x]a4a^Dk/}fP", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(10, "--", "~%M`rCkn7", options0, "{", true);
      helpFormatter0.renderOptions((StringBuffer) null, 738, options1, 39, 2616);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFileOutputStream0;
      mockPrintStream0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "yep:1Q#YjaC'u^>K", options1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "]", false, "!(JK'{CXzg!a");
      int int0 = (-1215);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1215), options0, 34, 1650);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("d/$s", 3, 3);
      helpFormatter0.setWidth(5);
      helpFormatter0.rtrim("EB%1eaLZ0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 5, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "{");
      helpFormatter0.printHelp(1553, "@hC CAG*jLIeW^L", "zs;XMz6`*hp#v", options0, (String) null);
      MockFile mockFile0 = new MockFile("usage: ", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 1594, options0, 1594, 1553);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("r&p9GE7W", "-", options1, "{");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter1.findWrapPos("usage: ", 1, 103);
      helpFormatter0.setWidth(1608);
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2098);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-1), options0, 103, (-2098));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "rnI_!(q~4", "usage: ", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 74, 0);
      helpFormatter0.setWidth(74);
      Options options1 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 118;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 734, 74, ";>^`*[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1376;
      String string0 = "";
      String string1 = "'ph@ubjL";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1376, "'ph@ubjL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "wlpbg>~g", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "wlpbg>~g");
      Options options2 = options1.addOption("", "", false, "+8OQ#mDRb");
      helpFormatter1.printHelp("{?3'", "", options2, "");
      helpFormatter1.findWrapPos("+8OQ#mDRb", 40, 3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) options0;
      mockPrintStream0.format("o,- ,w", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp("0QDXRV 2RB$", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth((-10));
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "\n", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1349;
      PrintWriter printWriter0 = null;
      int int1 = 3525;
      Options options0 = new Options();
      int int2 = (-1349);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1349, options0, (-1349), 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "M{Uf!|", "", options1, ">{h^rx", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "{");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(184, "!Ywos", "i-KlI*E0", options2, "fK?ERbsQ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.rtrim(" ");
      helpFormatter1.setWidth(1);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "yep:1Q#YjaC'u^>K";
      mockPrintWriter0.format((Locale) null, " ", objectArray0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "Bx}FqEK`Y-R]l@1", "Cannot add value, list full.", options2, (-1), (-1), "!Ywos", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "", false, "`92xK697\"");
      Options options1 = new Options();
      Option option0 = new Option("arg", false, "");
      options1.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0t].W(2uC[8zXPoPH", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "0t].W(2uC[8zXPoPH";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-885), options1, 117, 1092);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1092;
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      mockFileOutputStream0.release();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      String string0 = "o,- ,w";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      // Undeclared exception!
      helpFormatter0.printHelp("o,- ,w", options0, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".6DM4*j[:%gp");
      String string0 = null;
      String string1 = "0[{Sw+Mk";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "0[{Sw+Mk", (Options) null, (-1426), (-1783), "[ARG...]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      helpFormatter0.findWrapPos("Gq^mKcjTFdK/GYl9", 1344, 1084);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 2, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 1, 1);
      helpFormatter0.setWidth((-1));
      helpFormatter1.rtrim("?*;%[Y,dw;~w{ +jn");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 82, 1488);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "{");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(184, "!Ywos", "i-KlI*E0", options2, "fK?ERbsQ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.rtrim(" ");
      Options options3 = new Options();
      helpFormatter1.printHelp("arg", options3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockFileOutputStream0.close();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) options0;
      mockPrintStream0.format("o,- ,w", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1092, "", options1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 995;
      helpFormatter0.defaultWidth = 995;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 31, options1, 31, 31);
      String string0 = "`UEo_`-qUh";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("[", "`UEo_`-qUh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      options1.hasLongOption((String) null);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 1494, " | ", "pyMYmUXBh)v*b^;i", options1, 0, 0, "0QDXRV 2RB$", false);
      String string0 = helpFormatter0.createPadding(1092);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "!Ywos", string0, options2, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:1Q#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) options0;
      mockPrintStream0.format("o,- ,w", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1092, "", options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "pyMYmUXBh)v*b\\^;i";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      boolean boolean0 = false;
      String string1 = "yep:#YjaC'u^>K";
      String string2 = "d3RLSo5^`k&Hx";
      Option option0 = null;
      try {
        option0 = new Option("d3RLSo5^`k&Hx", "d3RLSo5^`k&Hx", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'd3RLSo5^`k&Hx' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`92xK697\"";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      options0.addOption("", "", false, "`92xK697\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(392);
      helpFormatter1.rtrim("");
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(22, "dG4Rkv#F(.LYWP[YfY,", "Cannot add value, list full.", options0, "i^q]_~6l16[st");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("usage: ", 20, 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(5);
      String string0 = helpFormatter2.defaultOptPrefix;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 35;
      helpFormatter0.findWrapPos("\n", 35, 1130);
      helpFormatter1.setWidth(1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("Sl7DSXI/.DrZhcDdN", "", options0, "Sl7DSXI/.DrZhcDdN", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string0 = "yep:#YjaC'u^>K";
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) "yep:#YjaC'u^>K";
      objectArray0[5] = (Object) "pyMYmUXBh)v*b^;i";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) option0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp("0QDXRV 2RB$", (String) null, options0, "S'2+*Ys@MC|", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      helpFormatter0.setWidth((-1426));
      helpFormatter0.getSyntaxPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getWidth();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "Gr}6~=5|";
      objectArray0[5] = (Object) "B,J^J?^Gj5e{m";
      PrintStream printStream0 = mockPrintStream0.format("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1426), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "pyMYmUXBh)v*b^;i", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "7F?", "k$=#5z", options0, 74, (-2), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "", false, "`92xK697\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(126);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter2.findWrapPos("", 1, 74);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-904), "usage: ", (String) null, options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-sl^a?,)NO>5");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.write("usage: ");
      helpFormatter0.printWrapped(printWriter0, 1652, "-");
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "].U})6", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-sl^a?,)NO>5");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.write("usage: ");
      helpFormatter0.printWrapped(printWriter0, 1652, "-");
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockFile mockFile0 = new MockFile("OA'Ia *e4@3A", "A=%g*#.:=e#Gu?");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      int int0 = (-1426);
      helpFormatter0.setWidth((-1426));
      helpFormatter0.rtrim("Gr}6~=5|");
      String string0 = "2[}&a|n:sIU";
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "nHj^>vacp]5pBmx";
      Option option0 = new Option("", "nHj^>vacp]5pBmx", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setDescription("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "Gr}6~=5|", "Gr}6~=5|", options1, "dOKp5", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = " ]";
      Options options1 = options0.addOption("", "arg", true, " ]");
      Options options2 = options1.addOption("arg", false, "pyMYmUXBh)v*b^;i");
      helpFormatter0.printHelp(1092, "pyMYmUXBh)v*b^;i", "!Ywos", options2, "i}Vn@g<el0fZ%*[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(2595);
      helpFormatter0.rtrim((String) null);
      String string1 = " @bq AA";
      Option option0 = null;
      try {
        option0 = new Option(" ", "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1494, "0QDXRV 2RB$", "  ", options1, 1092, 1494, "yep:#YjaC'u^>K", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 4;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 4, options0, 4, (-1106));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v1{");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[9];
      Locale.getISOLanguages();
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "v1{";
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) fileSystemHandling0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      int int0 = 10;
      helpFormatter0.printUsage(printWriter0, 10, "v1{");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "arg";
      Options options0 = new Options();
      Option option0 = new Option("NwHWMxIp", "usage: ", false, "tWsoN");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "]", false, "!(JK'{CXzg!a");
      helpFormatter0.printHelp("5GCnYc{`", "`92xK697\"", options0, "", false);
      helpFormatter0.printHelp("5GCnYc{`", options0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 1494, " | ", "pyMYmUXBh)v*b^;i", options1, 0, 0, "0QDXRV 2RB$", true);
      helpFormatter0.printHelp(printWriter0, 2279, "yep:#YjaC'u^>K", "A CloneNotSupportedException was thrown: ", options2, 1110, 1128, "yep:#YjaC'u^>K");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      helpFormatter0.setWidth((-1426));
      helpFormatter0.getSyntaxPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "nHj^>vacp]5pBmx", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(40, "usage: ", "usage: ", options1, "dOKp5", true);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1426), "nHj^>vacp]5pBmx", "2[}&a|n:sIU", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "7{";
      options0.hasShortOption("usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.printHelp("^GP@AO<@ZY+5", (String) null, options0, "org.apache.commons.cli.OptionValidator", false);
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append((CharSequence) "^GP@AO<@ZY+5");
      int int0 = 1;
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "7{", (String) null, options0, 1, 2317, "wGe+'}B)`.&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "", options0, "o");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "4kj~)Ymw";
      String string1 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "!>`Ij,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp(74, "4kj~)Ymw", "", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.rtrim("arg");
      String string0 = "]";
      Option option0 = null;
      try {
        option0 = new Option("-", " @bq AA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "\n");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0QDXRV 2RB$");
      mockPrintWriter0.print(2147.097);
      options1.hasLongOption("arg");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 1494, " | ", "pyMYmUXBh)v*b^;i", options1, 0, 0, "0QDXRV 2RB$", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasShortOption("7{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, ";lO2F/k?", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      helpFormatter0.setWidth((-1426));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "B,J^J?^Gj5e{m";
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "org.apache.commons.cli.HelpFormatter", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1494, "", "", options1, 1494, (-1426), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.getNewLine();
      String string1 = null;
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("--");
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string2 = " ";
      // Undeclared exception!
      try { 
        options1.addOption(" ", " ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "\"[h(kvLH7R";
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, ", ", ", ", options0, 1401, 1401, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-sl^a?,)NO>5");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.write("usage: ");
      helpFormatter0.printWrapped(printWriter0, 1652, "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 63, (-1424));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("B,J^J?^Gj5e{m", options0, true);
      helpFormatter0.setWidth((-1426));
      helpFormatter0.rtrim("Gr}6~=5|");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "nHj^>vacp]5pBmx", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(40, "Gr}6~=5|", "Gr}6~=5|", options1, "dOKp5", true);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1426), "nHj^>vacp]5pBmx", "2[}&a|n:sIU", options1, "Gr}6~=5|", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("'QH[HM_J`[$");
      String string0 = "";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = ":O1]\"*XPTrgrY#JC>";
      helpFormatter0.setWidth(34);
      helpFormatter0.rtrim("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1843;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1843, (String) null, "", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("[ARG...]", 393, 1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", "", options0, 3, 3, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.checkError();
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      mockPrintWriter0.print(false);
      mockPrintWriter0.print((-1));
      helpFormatter0.printWrapped(printWriter0, 6391, 6391, "eNg,Jdz@RYlh<o");
      helpFormatter0.setLeftPadding(6391);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 539;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 539, "--", "", options0, 539, 539, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")%dZRM@|";
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = true;
      helpFormatter0.printHelp(")%dZRM@|", options0, true);
      helpFormatter0.setWidth((-2384));
      helpFormatter0.rtrim("Gr}6~=5|");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2384), "2[}&a|n:sIU", "", options0, "Gr}6~=5|", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("~@N#w$(Cd~_");
      File file0 = MockFile.createTempFile(";yMsq`", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = (-41);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-41), "E/6h:DKO*HTB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, "dG4Rkv#F(.LYWP[YfY,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dG4Rkv#F(.LYWP[YfY,";
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, "dG4Rkv#F(.LYWP[YfY,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 1841;
      byteArrayOutputStream0.write(9);
      mockPrintWriter0.println('o');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1841, "line.separator");
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      String string1 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "[", false, "usage: ");
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-384));
      String string0 = "-r;uEFD2I`;E=|DA?{";
      MockFile mockFile0 = new MockFile((File) null, "--");
      mockFile0.setExecutable(false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "-r;uEFD2I`;E=|DA?{", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m\\\"sXs";
      Options options0 = new Options();
      String string1 = "X ";
      Options options1 = options0.addOption("arg", "X ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "m\"sXs", options3, "[_1|PAx.dT7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFile0.deleteOnExit();
      int int0 = (-1394);
      mockFileOutputStream0.write((-1394));
      String string0 = "z$>O.94P<5Y";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "z$>O.94P<5Y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "\"[h(kvLH7R";
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(12);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("8]S>Q~_&");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!Ywos";
      helpFormatter0.findWrapPos("!Ywos", 1092, 0);
      helpFormatter0.setLongOptSeparator("pyMYmUXBh)v*b^;i");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(0);
      String string1 = "ZS:>z> DIO";
      Options options0 = new Options();
      String string2 = "yep:#YjaC'u^>K";
      Option option0 = new Option("arg", "--", false, "yep:#YjaC'u^>K");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("ZS:>z> DIO", "pyMYmUXBh)v*b^;i", options1, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2055);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultDescPad = (-2055);
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding((-2055));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1283);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3178), (-3178), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultDescPad = 3;
      String string0 = "arg";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "--", true, "6F(>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "4kj~)Ymw", "", options0, "[");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 74;
      String string0 = "YM%>hA";
      String string1 = "y";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix(".8T%(");
      int int0 = (-240);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-240));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "\"[h(kvLH7R";
      String string0 = ", ";
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3023), ", ", ", ", options1, 1401, 1401, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      assertEquals(" ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-sl^a?,)NO>5");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.write("usage: ");
      int int0 = 1652;
      String string0 = "-";
      helpFormatter0.printWrapped(printWriter0, 1652, "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, "--", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.getMatchingOptions("arg");
      options0.getMatchingOptions("--");
      Option option0 = null;
      try {
        option0 = new Option("HAZXh}X)Z-oQ+", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'HAZXh}X)Z-oQ+' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-560);
      int int1 = (-1);
      String string0 = "@1O";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-560), (-1), "@1O");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setNewLine("'QH[HM_J`[$");
      int int0 = (-109);
      String string0 = null;
      String string1 = "";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = ":O1]\"*XPTrgrY#JC>";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-109), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setArgName("[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 1;
      String string0 = null;
      int int1 = 31;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 31, 1290);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
