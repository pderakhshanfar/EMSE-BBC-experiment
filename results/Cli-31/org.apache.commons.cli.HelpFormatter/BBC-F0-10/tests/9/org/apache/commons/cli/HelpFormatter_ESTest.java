/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:39:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('p');
      helpFormatter0.printWrapped(printWriter0, 1085, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", " ", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("]");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp(3, "\n", "-", options0, "usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Option option0 = new Option((String) null, true, "s*q6B~{\"\"cHF=+*GH4a");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3349, 3349);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("h", (String) null, true, ":fDzxY'&:,]Q<Dl!V");
      Options options1 = options0.addOption(option0);
      option0.setArgName((String) null);
      helpFormatter0.printHelp(103, ":fDzxY'&:,]Q<Dl!V", "h", options1, (String) null);
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 103, "h", ":fDzxY'&:,]Q<Dl!V", options1, 103, (-4040), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1187);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLeftPad = (-1177);
      String string0 = "'O@<{N5Xu";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1123), "'O@<{N5Xu", "", options0, "vfb3G6?z0hs*H&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      helpFormatter0.printHelp(10, ":fDzxY'&:,]Q<Dl!V", "--", options0, "--");
      StringBuffer stringBuffer0 = new StringBuffer(" ]");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-5290);
      helpFormatter0.defaultDescPad = (-5290);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-5290), (-5290));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-380);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      options0.addOption("", "0DlQD^=n]0CB}A0 V", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("5", "5", false, " ");
      options0.addOption("arg", false, "1");
      helpFormatter0.printHelp(459, "1", (String) null, options0, "1");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "'";
      helpFormatter0.defaultSyntaxPrefix = "tr=Y=d I+WN{\u0006K-fEY";
      helpFormatter0.defaultSyntaxPrefix = "Illegal option name '";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "{|+vP:uIoVkWys";
      helpFormatter0.defaultSyntaxPrefix = "{|+vP:uIoVkWys";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptionComparator();
      int int0 = 1271;
      helpFormatter0.createPadding(1271);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-491);
      helpFormatter0.rtrim("--");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1216));
      helpFormatter0.defaultDescPad = 8;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(562);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "ntee?-|;m\u0002w4xW-V4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ntee?-|;m\u0002w4xW-V4
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 496, options0, 496, 496);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, ":>PVhl5", "", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "arg", "usage: ", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7O");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "7O";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "7O";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 60, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Option option0 = new Option("", "arg", true, "");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "usage: ", "C/*z", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("", "arg", true, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "X\\u5BS8}Er0;5>8";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1371), string0, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ntB#=e'I+:Y(/a*qY");
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.findWrapPos("\n", 403, (-616));
      helpFormatter0.printHelp(34, "ISKF~\"<W)b])[4k=S=", "org.apache.commons.cli.Options", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.US;
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "adikA<lmeJ[,u7+_GTG", "xe-QWBIxgF'29T", options1, 1, 107, " ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(1L);
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1547, "QCw*'?u}\"f:N}L#24 ", (String) null, options0, 1547, 1282, "G}]H", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1282, "Wit(8ciPp\"1s?xb");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1010), options2, 2602, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("_.L");
      helpFormatter2.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions((PrintWriter) null, (-560), options1, 3, 3291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ Options: [ short ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1558, "", "usage: ", options3, 1, (-2), " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, (-959), "");
      helpFormatter0.renderWrappedText(stringBuffer1, 2350, (-959), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2044), "yVzOIKzGZ)", "yVzOIKzGZ)", (Options) null, "[ Options: [ short ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "8{=mstIR_<t!`#Svd>", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-9));
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "y =*6zjyc`y_*u&3`@", (Options) null, "y =*6zjyc`y_*u&3`@");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = null;
      String string0 = "qc\"x1";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("qc\"x1", "qc\"x1", (Options) null, "yI}>d", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, " :: ", " ", options0, (-2236), (-2), "w");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "^=Q+;1*Xa}'-0#P0LQk", "\"MXyCp>`B&B", (Options) null, 3303, 1, "lmN<E^W{Mk8r(MKkq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter1.rtrim((String) null);
      MockFile mockFile0 = new MockFile("osr", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "--", "arg", options0, 73, 73, ">$K*:S\"F.CRi", false);
      helpFormatter2.printOptions(mockPrintWriter0, 3, options0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      helpFormatter1.rtrim((String) null);
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1686, "<>0;W", "usage: ", options0, 1344, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "=>1Fmyt<8C0yt", "=>1Fmyt<8C0yt", options1, 0, 0, "=>1Fmyt<8C0yt", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 2559, 2559);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(232);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 232, (-3801));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      mockPrintWriter0.format("-", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, (String) null, "R", (Options) null, 63, 13, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      helpFormatter1.rtrim((String) null);
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, "<>0;W", "nt?<LYFl0f", options0, 74, 74, " ", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-3173), 228, "},>Q,CckP`d+O wX|x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      helpFormatter1.rtrim((String) null);
      MockFile mockFile0 = new MockFile(" yaavmoXU#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "]", "--", options0, 123, 123, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      helpFormatter1.rtrim((String) null);
      MockFile mockFile0 = new MockFile(" yaavmoXU#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 74, 3, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1445, "qc\"x1", "y =*6zjyc`y_*u&3`@", (Options) null, "y =*6zjyc`y_*u&3`@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "@-&{sP7?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "Xfkl%y@m;E0XpEsV2a", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.rtrim(" ");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      String string1 = null;
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator0);
      Options options2 = new Options();
      Option option1 = new Option("arg", "--");
      Options options3 = options1.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("\"", options3);
      helpFormatter1.rtrim("<NZ#IA/48GM.wB1)");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "", options3, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(33, "-", " | ", options1, "-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 33, " | ", options1);
      Option option0 = new Option("", "org.apache.commons.cli.Options", false, "RGv62Kv");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(33, " |", ")2,URUq6z/!SA[bK", options2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, false);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOption("arg", "?G", false, "arg");
      helpFormatter1.printHelp(63, "NO_ARGS_ALLOWED", " ", options2, "", false);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      helpFormatter0.setDescPadding((-887));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", false, (String) null);
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$1", options1);
      helpFormatter0.rtrim("--");
      helpFormatter1.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "=LaM5o*!csc");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, (String) null);
      options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "usage: ", "\n", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2));
      options0.hasLongOption(":C`(_");
      options0.hasOption("arg");
      helpFormatter0.rtrim("r6V%a#-A]'UYVW\"q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", (String) null, options0, "+5i})UN:NLaQQ!\t");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-", true, "");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption(" ] [ long ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("},>Q,CckP`d+O wX|x", options1);
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 299, "arg", "usage: ", options1, 901, (-4175), "I@1b$?,q", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      mockPrintWriter0.format("^=Q+;1*Xa}'-0#P0LQk", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3303, "'O!ZtTBJi4(Bf1*&_Fw", "^=Q+;1*Xa}'-0#P0LQk", (Options) null, 1, 31, "3*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "l8pt3/\"m;_F", "7wn'3Vdhuz^b`<f3@", (Options) null, (-2), (-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2348);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2348, "", "", (Options) null, 2348, 2348, "'O!ZtTBJi4(Bf1*&_Fw", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.printHelp(1, "\n", " ", options0, "usage: ");
      helpFormatter2.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = ')';
      Option option0 = new Option((String) null, "\n");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, 4874, "\n", (String) null, options1, 1848, 34, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, false);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 2242, "arg", "[F7M5th_", options0, 0, 3, "\"MXyCp>`B&B");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      helpFormatter0.setDescPadding((-887));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(4326, "--", "arg", options2, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2999, "--", "\n", options1, 74, 1, "org.apache.commons.cli.Options");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption("--");
      helpFormatter0.defaultLongOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.setDescPadding((-401));
      helpFormatter0.setOptionComparator((Comparator) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-691), "\n", "usage: ", options3, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp(32, " ", " ", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultNewLine = "ArEl[(TZ";
          int int0 = 0;
          helpFormatter0.setWidth(0);
          String string0 = "";
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp("ArEl[(TZ", options0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      helpFormatter1.rtrim(" ");
      helpFormatter1.getDescPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "[glvJMXp&?Ho;m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2115, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "-");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption("--");
      helpFormatter0.setDescPadding((-384));
      helpFormatter0.setOptionComparator((Comparator) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "C/*z", "/%<u", options2, "q:}rpWam{@x2T08Fd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(13);
      Options options0 = new Options();
      Option option0 = new Option("", "[ option: ", true, "usage: ");
      option0.setLongOpt("");
      options0.addOption(option0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.printHelp(12, "lK(ap61X^", "", options0, "35tda5l^dWz", true);
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", (-2), (-4142));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-3403));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      helpFormatter1.printHelp("\n", "arg", options0, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getDescPadding();
      helpFormatter2.getWidth();
      MockFile mockFile0 = new MockFile("187yLaz8k6Po4!=x7p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 37, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter1.getNewLine();
      Options options2 = options0.addOption((String) null, "arg", false, "arg");
      helpFormatter0.printHelp(" ", options2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "bd,!?1GXkK", "N :cum[FvsQSe#0G", options0, "--");
      helpFormatter2.printHelp("   ", options2);
      helpFormatter2.printHelp("-", "k", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      helpFormatter1.setLeftPadding(2091);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(2, "Cannot add value, list full.", "", (Options) null, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getDescPadding();
      helpFormatter2.getWidth();
      MockFile mockFile0 = new MockFile("187yLaz8k6Po4!=x7p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg");
      Options options0 = new Options();
      helpFormatter1.printHelp(106, "arg", (String) null, options0, "");
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      String string0 = "";
      helpFormatter0.printHelp("'<R7;,<>6x/>0)49", "", options0, "bd,!?1GXkK");
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2025
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(13);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "--", options0, "");
      helpFormatter0.printHelp("usage: ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      helpFormatter0.setDescPadding(1);
      helpFormatter1.setOptionComparator(comparator1);
      helpFormatter0.printHelp(2106, "^M", "", options0, "/%<u", false);
      helpFormatter1.setLongOptPrefix("<xY<+xeRFe#E-z\".aA");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      helpFormatter0.printHelp(" ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      helpFormatter0.setDescPadding((-887));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "\n", "usage: ", options2, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Option option0 = new Option("", "R");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "R", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "\n", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6R^9J$b,I.35";
      helpFormatter0.setDescPadding((-382));
      Options options0 = null;
      String string1 = "mNTO?oAC_*A";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6R^9J$b,I.35", (String) null, (Options) null, "mNTO?oAC_*A");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 1085;
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      String string1 = null;
      String string2 = "";
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1085, (Options) null, 91, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(1913);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "NnqO/&`(", options0, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(57);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", "", options0, "By5|EB1W)Qe[Hjzy");
      helpFormatter0.printHelp("a ", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("By5|EB1W)Qe[Hjzy", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'By5|EB1W)Qe[Hjzy' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLeftPad = (-1177);
      String string0 = "'O@<{N5Xu";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", " [ARG]", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 1085;
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      boolean boolean0 = true;
      String string1 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.findWrapPos("", 1, 1692);
      helpFormatter0.setLeftPadding(1692);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", "1F", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.setWidth((-4712));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(13);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      Options options0 = new Options();
      Option option0 = new Option("", "[ option: ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("v1cs7_o", options1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      Options options3 = options2.addOption("", "uRkrfR/HHM", true, "usage: ");
      Options options4 = options3.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-1453), " ", "[", options4, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, ":fDzxY'&:,]Q<Dl!V");
      Options options1 = options0.addOption(option0);
      option0.setArgName((String) null);
      helpFormatter0.printHelp(103, ":fDzxY'&:,]Q<Dl!V", "", options1, (String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      Option option0 = new Option((String) null, "-", true, "");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption(" ] [ long ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("},>Q,CckP`d+O wX|x", options1);
      helpFormatter0.rtrim("!xGgIrV5{3]g");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), " ] [ long ", "", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      helpFormatter0.setWidth(3);
      String string0 = "7-q-QJ;[sNSN";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[ Options: [ short ";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("The option '", 17, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 64, options0, 44, 10);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, 3, (-589), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "usage: ";
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("ArEl[(TZ", 2530, (-869));
      helpFormatter0.setLeftPadding((-869));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3300), "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", (Options) null, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter1.getNewLine();
      Options options2 = options0.addOption((String) null, "arg", false, "arg");
      helpFormatter0.printHelp(" ", options2);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = null;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1490), options1, 427, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 34;
      helpFormatter0.setDescPadding(34);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      String string0 = "]";
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option("]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption("--");
      helpFormatter0.setDescPadding((-401));
      helpFormatter0.setOptionComparator((Comparator) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "C/*z", "/%<u", options2, "q:}rpWam{@x2T08Fd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", (String) null, options1, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ArEl[(TZ";
      helpFormatter0.defaultNewLine = "ArEl[(TZ";
      helpFormatter0.setWidth(3);
      String string1 = "7-q-QJ;[sNSN";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7-q-QJ;[sNSN", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, (-259), "--");
      MockFile mockFile0 = new MockFile("-", "; T`xy<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) byteArrayOutputStream0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "-";
      Options options0 = new Options();
      String string1 = "bd,!?1GXkK";
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.getLeftPadding();
      Option option0 = null;
      try {
        option0 = new Option("bd,!?1GXkK", "NO_ARGS_ALLOWED", false, "bd,!?1GXkK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bd,!?1GXkK' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.println(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1);
      int int1 = (-1935);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("#4be~4sr4R$'\fMoaO", (-1935), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      helpFormatter0.defaultOptPrefix = "[ Options: [ short ";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("The option '", 17, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(63);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(22, "org.apache.commons.cli.Options", "arg", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      options0.addOption(option0);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", "", options1, "T,6E96 ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("", 20, (-1));
      helpFormatter0.setLeftPadding((-1019));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = null;
      String string1 = "\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "\"", (String) null, (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, ":p+`f[+]\"'j@B|", false, "-");
      options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, ":p+`f[+]\"'j@B|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2077), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ArEl[(TZ";
      helpFormatter0.defaultNewLine = "ArEl[(TZ";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string1 = "7-q/-QJ;[s'NSN";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("7-q/-QJ;[s'NSN", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(13);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "&32/-ej_x*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("6sF358r^9pa\"j");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptPrefix("^p|kkwNLH");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "C";
      helpFormatter0.defaultNewLine = "k;az&Hc)6FE<`0^Qr90";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f1;");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "k;az&Hc)6FE<`0^Qr90";
      objectArray0[2] = (Object) "C";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "C";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "f1;";
      objectArray0[7] = (Object) "*i6pSk/)";
      PrintWriter printWriter0 = mockPrintWriter0.format("*i6pSk/)", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 110, "");
      assertEquals(" ", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/$K@Xb\"zS";
      helpFormatter0.setArgName("/$K@Xb\"zS");
      String string1 = "";
      int int0 = 2288;
      helpFormatter0.createPadding(2288);
      String string2 = "}'i2R<\"x\"";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}'i2R<\"x\"");
      String string3 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "}'i2R<\"x\"";
      objectArray0[1] = (Object) "}'i2R<\"x\"";
      objectArray0[2] = (Object) "}'i2R<\"x\"";
      objectArray0[3] = (Object) "}'i2R<\"x\"";
      objectArray0[4] = (Object) "}'i2R<\"x\"";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "/$K@Xb\"zS";
      objectArray0[8] = (Object) "}'i2R<\"x\"";
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("S=T`rU@YXHuwI}^)!", "A CloneNotSupportedException was thrown: ", true, "KQB dT9la AS^e_(b}n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'S=T`rU@YXHuwI}^)!' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("<", 0, 3757);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      options0.addOption(option0);
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.rtrim(" ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "-";
      Options options0 = new Options();
      String string1 = "bd,!?1GXkK";
      helpFormatter0.printHelp("bd,!?1GXkK", options0, true);
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("bd,!?1GXkK", "NO_ARGS_ALLOWED", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bd,!?1GXkK' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X_lJOdNRg+8)'", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLeftPad = (-1177);
      String string0 = "'O@<{N5Xu";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1123), "'O@<{N5Xu", "", options0, "vfb3G6?z0hs*H&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~TV?QOs");
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      mockPrintWriter0.flush();
      helpFormatter0.printWrapped(printWriter0, 10, 0, "~TV?QOs");
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultArgName = "uY#DI`V'wB.u!$";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("o_gHQvbt`!wsMD7");
      helpFormatter0.rtrim("o_gHQvbt`!wsMD7");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("o_gHQvbt`!wsMD7");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix(".X~81A02k)Tr>n`>]");
      assertEquals("o_gHQvbt`!wsMD7", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("C]*ou<r^~)n&");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("YZ:tqI?2\"4B-Zc3N");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("");
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("C]*ou<r^~)n&", "g:],XgFb@5x]H", true, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'C]*ou<r^~)n&' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 459, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(2287);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "--";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[ Options: [ short ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      helpFormatter0.printHelp("[ Options: [ short ", options1);
      helpFormatter0.setWidth(683);
      assertEquals(683, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "Kd>~6";
      Options options0 = new Options();
      options0.hasShortOption("Kd>~6");
      StringWriter stringWriter0 = new StringWriter(3);
      options0.hasShortOption("Kd>~6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print("-");
      stringWriter0.write("XOLC");
      stringWriter0.write("W>g");
      int int1 = 1;
      helpFormatter0.setNewLine("1(+,");
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      options0.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1085;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "", (Options) null, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 4879;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 4879, "8Y0xUL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.createPadding(0);
      helpFormatter0.setNewLine("");
      String string1 = "l4fq|-w~\"j>}P@ni";
      helpFormatter0.setSyntaxPrefix("l4fq|-w~\"j>}P@ni");
      helpFormatter0.getWidth();
      String string2 = "";
      Options options0 = new Options();
      Option option0 = new Option("", " ", true, "-");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2039;
      String string0 = "";
      String string1 = "0{";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "\n", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
