/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:38:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 44, 44, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 1053;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "C ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-5374);
      helpFormatter0.defaultLeftPad = (-5374);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "t#^77 Gk5.!J", "t#^77 Gk5.!J", options0, "t#^77 Gk5.!J");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderOptions(stringBuffer0, 3318, options0, 3318, 3318);
      // Undeclared exception!
      helpFormatter0.createPadding(3749);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", options0);
      helpFormatter0.findWrapPos(" ] [ long ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(13);
      helpFormatter0.getNewLine();
      int int0 = (-1352);
      helpFormatter0.findWrapPos("\n", 44, (-1352));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.createPadding(3489);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((int) (byte) (-88), "dGg*$'jmS&f-t\".ANbN", "dGg*$'jmS&f-t\".ANbN", options1, "zK+ _^hB[SN", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-972);
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "arg");
      helpFormatter0.rtrim("bc^D&*`9'B");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 3, 627);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 728;
      helpFormatter0.createPadding(48);
      helpFormatter0.setLeftPadding(48);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("6yts~");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      Options options0 = new Options();
      options0.hasShortOption("arg");
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("N");
      helpFormatter0.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      stringBuffer0.insert(1, (-684.7377F));
      helpFormatter0.defaultSyntaxPrefix = "   ";
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      options0.hasOption("");
      options0.getMatchingOptions("--");
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "&U!P@mPCsO%L,", "   ", options0, "N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1468, "?", "The option '", options0, "v-M?ptNJyl_@Loqn#");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "?", "v-M?ptNJyl_@Loqn#", options0, "The option '", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 18;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "8rcxUF LxQOm\"{i$");
      int int1 = (-722);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 18, options1, (-722), (-722));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultDescPad = (-237);
      String string0 = "-";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("L)RC*@^\"NBt", ")3SEb", options1, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      options1.addOption("", "usage: ", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "H", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "mK7eOH2h]`gSLrBfj";
      PrintWriter printWriter0 = mockPrintWriter1.printf("          ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 44, "          ");
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(32);
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options1, "usage: ", true);
      helpFormatter1.getDescPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter1.setSyntaxPrefix("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options2 = options1.addOption("", " | ", true, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      option0.clearValues();
      helpFormatter0.printHelp("-", "-", options1, "usage: ", true);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      options0.addOption((String) null, "gms", true, "--");
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 17, "'z_F]'V(|o{Z=Kz");
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 81, options0, 1188, 3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      helpFormatter0.printHelp("--", options1);
      int int0 = 0;
      String string0 = " | ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, " | ", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp(">", options0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 41, "Illegal option name '", "XgA+YT912wcO.$dN~", options0, 0, 28, (String) null, true);
      helpFormatter0.printHelp(60, "                                                                          ", "", options0, "XgA+YT912wcO.$dN~");
      helpFormatter0.rtrim("uF");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 918, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("N");
      helpFormatter0.createPadding(6);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockFile.createTempFile("$eR~<-Eh", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2377);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "N");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 53, "", options2);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer2 = new StringBuffer("M\"5^opZT1}c5");
      helpFormatter0.printHelp(730, "--", "", options0, "M\"5^opZT1}c5", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I%n~\\vtS:";
      Options options0 = null;
      helpFormatter0.setDescPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "]", "qm'2", (Options) null, "I%n~vtS:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XgA+YT912wcO.$dN~");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "                                                                          ";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "                                                                          ";
      objectArray0[3] = (Object) "XgA+YT912wcO.$dN~";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      String string0 = null;
      String string1 = "]B;aboEd;v67>6f7-";
      helpFormatter0.printHelp(printWriter0, 2802, "XgA+YT912wcO.$dN~", (String) null, options0, 74, 1273, "]B;aboEd;v67>6f7-", false);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "v@^eO:]]FNIv^ SR+$";
      helpFormatter0.setLongOptSeparator("N");
      helpFormatter0.createPadding(6);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[2];
      helpFormatter0.defaultSyntaxPrefix = "--";
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 6, (-787), "v@^eO:]]FNIv^ SR+$");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = objectArray0[0];
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) pipedOutputStream0;
      mockPrintWriter0.format("\n", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "jdQnKnHL@b|,Gk<k";
      int int0 = 104;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 39, "jdQnKnHL@b|,Gk<k", "jdQnKnHL@b|,Gk<k", options0, 104, (-1816), "/o7pTGWw?", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      Options options2 = new Options();
      File file0 = MockFile.createTempFile("42w", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 129);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, "Q9F(M+Q:d#", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 139, 129, "42w");
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("*Dk%/,6?<aTxq8dI");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("D9sv", "   ", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "1y:>]_hbk*,VsLu", false, "q0-rpn(y1[R]FN(");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3046, options2, 3046, 3046);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 40;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 31, (-1170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 69, "XgA+YT912wcO.$dN~", options0);
      helpFormatter0.printOptions(mockPrintWriter0, 69, options0, 69, 69);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(3574);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options1, "usage: ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      helpFormatter0.getOptPrefix();
      helpFormatter1.getArgName();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), string0, "", options1, 3, 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("N");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultSyntaxPrefix = "--";
      charArray0[0] = '#';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(">", ".De", (Options) null, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = 612;
      String string1 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(30);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int1 = 0;
      // Undeclared exception!
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter1, 0, "usage: ", "xk.<j=Tx'dFY${]y", options0, 1, 3, "pf3$:3)P;hIKR?<{", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, false, "line.separator");
      options0.helpOptions();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(", ", options2, true);
      helpFormatter0.rtrim("' was specified but an option from this group ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 10, 3563);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("N");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultSyntaxPrefix = "--";
      charArray0[0] = '#';
      charArray0[1] = '+';
      stringBuffer0.append(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "\n");
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "^.btptlr.~)\"2z06oW", (Options) null, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XgA+YT912wcO.$dN~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "XgA+YT912wcO.$dN~", options0);
      mockFileOutputStream0.release();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "--");
      mockFileOutputStream0.flush();
      options0.getOptions();
      mockPrintWriter0.close();
      helpFormatter0.createPadding(74);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "usage: ", options0, 74, 74, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "TF");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(3, ">ZEWQ.[T$h f|", "P", options0, "                                                                          ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '+';
      stringBuffer0.append(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "^&U!P@mZPCsO%L,", "\n", (Options) null, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XgA+YT912wcO.$dN~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "XgA+YT912wcO.$dN~", options0);
      mockFileOutputStream0.release();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "--");
      mockFileOutputStream0.flush();
      options0.getOptions();
      mockPrintWriter0.close();
      helpFormatter0.createPadding(74);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "usage: ", options0, 74, 74, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "TF");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("-", " k.'n$vZG(w3d", options0, "TF");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      options1.addOption("", false, (String) null);
      helpFormatter0.printHelp("--", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 17, "S", "-", options0, 17, (-2237), "S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 39, ", ", ", ", options1, 39, 2802, ", ", false);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 141;
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      helpFormatter0.defaultNewLine = "1O";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "O~3B=[ SVf;slN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, (byte)85, 141);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "ZHvVzca3LhW", "@]@vJjLj;dy8U +#|", options1, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '+';
      stringBuffer0.append(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 2724, "\n");
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("-", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '+';
      stringBuffer0.append(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 2724, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(758, "f", (String) null, options0, "Kw7MmK]");
      String string0 = "";
      Option option0 = null;
      try {
        option0 = new Option(" ", ";/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'pn");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.optionComparator = comparator0;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("arg");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Option option0 = new Option((String) null, "--");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("NMY7JCC", " ", true, "has already been selected: '");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setDescPadding((-3623));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("H\"m}E1)wZA(");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, "arg", "X", options0, (-1532), (-1532), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("          ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 141;
      helpFormatter0.findWrapPos("O~3B=[ SVf;slN", 44, 44);
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "<\"^/nm+1B}", true, "");
      optionGroup0.setRequired(false);
      helpFormatter0.defaultNewLine = "1O";
      options3.getOption("arg");
      helpFormatter0.printHelp("O~3B=[ SVf;slN", options3, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "O~3B=[ SVf;slN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 44, options0, (-1), 33);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-1), 4302);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "IV<j3%)bo#yC";
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2775, options1, 4105, 3500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "The option '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1437), (String) null, "Z4%/YlH", options0, (-2), 1697, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 3, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", "HS<?xkIbE", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1025);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setLongOptSeparator("f#m5d1+ly");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-1166), "I");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("-");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 31, (-2), "mP#4");
      helpFormatter0.renderOptions(stringBuffer2, (-1995), options0, 3, 31);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.printHelp(">Q]", options1);
      Options options2 = options0.addOption((String) null, true, ">Q]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XgA+YT912wcO.$dN~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "XgA+YT912wcO.$dN~", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XgA+YT912wcO.$dN~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "XgA+YT912wcO.$dN~", options0);
      mockFileOutputStream0.release();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, (String) null);
      mockPrintWriter0.close();
      helpFormatter0.createPadding(74);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "usage: ", options0, 74, 74, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">Q]";
      Options options0 = new Options();
      helpFormatter0.printHelp(">Q]", options0, false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), ">Q]", "--", options1, (-2), 44, ">Q]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "--", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 108, options0, 108, 13);
      helpFormatter0.renderWrappedText(stringBuffer1, 108, 861, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(861, "'pR$", "org.apache.commons.cli.HelpFormatter", options0, "!rw>]4IaQ(M$)");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(101);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1686, 1, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", (String) null, options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("w>X:DONt3)DOgkvCTJ>");
      helpFormatter0.setLongOptSeparator("w>X:DONt3)DOgkvCTJ>");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1307));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "The option '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1437), "Z4%/YlH", "The option '", options0, (-1437), (-2), "The option '", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "", "", options0, (-2), (-3055), "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1025);
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.JAPAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "![Lr_";
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1025), (-2353), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-653), "mK7eOH2h]`gSLrBfj", "mK7eOH2h]`gSLrBfj", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp(569, "E,irLb", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-558), "");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption(";'vB", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';'vB' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) "\n";
      mockPrintWriter0.format("", objectArray0);
      int int0 = 2787;
      mockPrintWriter0.write("--");
      String string1 = "+";
      String string2 = "oNUK)pB8wW@iH8k";
      helpFormatter0.defaultArgName = "oNUK)pB8wW@iH8k";
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.print(',');
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2787, "+", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      option0.clearValues();
      options0.addOption((String) null, false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@?i", options1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1852), (-1852));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", (String) null, true, "usage: ");
      PrintWriter printWriter0 = null;
      int int0 = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 15, 717, ">Q]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(63);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "--", options0, ", ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.printf("71JJ8z", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "mK7eOH2h]`gSLrBfj";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "H", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "mK7eOH2h]`gSLrBfj";
      PrintWriter printWriter0 = mockPrintWriter1.printf("          ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 44, "          ");
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(32);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "mK7eOH2h]`gSLrBfj";
      PrintWriter printWriter0 = mockPrintWriter1.printf("          ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 44, "          ");
      helpFormatter0.setWidth(0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 44, "nC@\"*JUge:`\",.");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[1];
      String string0 = "2'16ch-";
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2953), (Options) null, 9, (-3241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'4][96fxoso`}yf";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1345, 31, "org.apache.commons.cli.HelpFormatter");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      mockPrintWriter0.println((float) 74);
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-147), "", "f9`_+70:7'v[m7", options1, 1345, 101, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1345, 31, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5487, "'4][96fxoso`}yf", "", (Options) null, "^&U!P@mZPCsO%L,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2;
      String string0 = "wuJ-8yTb-?PVB8%yk";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "ZV>%drzg7Q%@");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "YDa@[`nw@;y`6C}";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YDa@[`nw@;y`6C}");
      helpFormatter0.setWidth((-221));
      int int1 = 0;
      mockPrintWriter0.print((long) 74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string1 = "OO/:fq$7h#]M 'u]fz";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "OO/:fq$7h#]M 'u]fz");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.defaultOptPrefix = null;
      StringBuffer stringBuffer0 = new StringBuffer("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4?(:PA=4#unVc");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "![Lr_", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 200, (-3210), "");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(kO3`^";
      Options options0 = new Options();
      helpFormatter0.printHelp("(kO3`^", "(kO3`^", options0, "(kO3`^", true);
      helpFormatter0.rtrim("Gq{%@Z/");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("--");
      String string1 = ",m{;!?Ih^4DeV[g%<y";
      MockFile mockFile1 = new MockFile(mockFile0, ",m{;!?Ih^4DeV[g%<y");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "(kO3`^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (kO3`^
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      int int0 = 0;
      String string0 = "~";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      int int1 = 0;
      String string1 = "#\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "~", "~", options0, (-1198), 0, "#", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[1];
      String string0 = "2'16ch-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("2'16ch-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "cW>bSX#>9D$oHN";
      helpFormatter0.setLongOptSeparator("cW>bSX#>9D$oHN");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim("\u0002^f2");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "\u0002^f2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("   ");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-334));
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 1805, 1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-944));
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "mK7eOH2h]`gSLrBfj";
      PrintWriter printWriter0 = mockPrintWriter1.printf("          ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 44, "          ");
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("mK7eOH2h]`gSLrBfj", "", options0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(", ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine(", ");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = "";
      String string2 = ",c:oXUcc=Epg^##";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("fp->Q", " ", true, "Z-EBw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fp->Q' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "^ef";
      helpFormatter0.setArgName("^ef");
      helpFormatter0.setOptPrefix((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 4663, "");
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "/&3^JL#'n<", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "&!n6t`UtZg{f";
      helpFormatter0.setLongOptPrefix("&!n6t`UtZg{f");
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1025);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setLongOptSeparator("f#m5d1+ly");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "I";
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-1166), "I");
      String string1 = "}E93;tp&a!-cg/";
      helpFormatter0.setLongOptPrefix("}E93;tp&a!-cg/");
      helpFormatter0.setWidth(883);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("}E93;tp&a!-cg/", "UDFHYtHLd3Eqt", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}E93;tp&a!-cg/' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "jEKNDukx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      String string0 = "usage: ";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.printHelp(">Q]", options1);
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setDescPadding(32);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(3, "\n", "arg", options0, " ");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#6+~Yg,USE(~4O&i|H";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/deO(@");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      assertEquals("org.apache.commons.cli.HelpFormatter$1", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2244), "T90BV`kil~u16J", ">eDAkI", options0, "T90BV`kil~u16J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Ym>*i,P.e!&v}b>p]n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding((-53));
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1968);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1968), (-1968), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
