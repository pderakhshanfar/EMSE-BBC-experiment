/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:44:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "arg", true, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp("]", "]", options1, "]", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = false;
      helpFormatter0.printHelp("]", "]", options0, "]", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "0", "", options0, 13, 817, (String) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(5272, "cmdLineSyntax not provided", "^-mD.!?m)~pP\"z.", options0, "-");
      helpFormatter0.getOptionComparator();
      helpFormatter1.getArgName();
      helpFormatter0.findWrapPos(" ", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(190, "obS%!", "obS%!", options1, "obS%!", false);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp(2510, "C5BNn", "R~uJ", options0, ".B)Dz%$u~");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.printHelp(974, "--", "s,x,;!3ewrW^R", options0, "", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2117));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "\n", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1446);
      String string1 = "2Nr]]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "pa9i>Q('`w\"*UJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "-", "arg", options0, "arg", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "-", options0, " ", false);
      StringBuffer stringBuffer0 = new StringBuffer("#.}zv.oDZj]k`9k#");
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 3, (-730), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(">G-+*Qxdk8L9mmZq<#T", "--", options1, "\n", true);
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("CelSf=(Fw%;uNMh[{k", "' was specified but an option from this group ", options0, "has already been selected: '", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("I4OK", "usage: ", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1619));
      Option option0 = new Option("arg", true, ",J)Yk:jfZ.<wsb*");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",J)Yk:jfZ.<wsb*", ",J)Yk:jfZ.<wsb*", options1, ", ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("z");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "z";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.print((Object) "z");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2533, "q[EPT@z", "", (Options) null, 1, 3036, "q[EPT@z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "arg", true, "\n");
      helpFormatter0.printHelp("]", "]", options1, "]", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "Hg#[/", "arg", options0, "arg", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(7, "\n", "Hg#[/", options0, " ", false);
      StringBuffer stringBuffer0 = new StringBuffer("#.}zv.oDZj]k`9k#");
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-2448), (-730), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1587, "T~IP>nl!VoK3y+", "Q}y 8hufbA3,D,Ph6K", options0, 13, 1587, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "org.apache.commons.cli.HelpFormatter$1", "7wnnIm\nG!Sua#z_6", options0, "7wnnIm\nG!Sua#z_6", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(862);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0qk,*g0/", " ", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 43, "v[eC84Re4;O", (String) null, options0, 22, 63, "v[eC84Re4;O", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-859));
      helpFormatter0.defaultLongOptPrefix = "'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?:]`ie[D);", "line.separator", options0, "org.apache.commons.cli.elpFormatter$OptionCoparator", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "D", "arg", options0, "arg", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(8, "791G9-tPz", "`Tbz3", options0, "usage: ", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderOptions((StringBuffer) null, 74, options0, 848, 1292);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-633), 3, "88Y?aG1Bg0;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "0*Xpn";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 867, ";$?", "0*Xpn", options0, 884, (-2), "0*Xpn", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      int int0 = 683;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, (-1), 683);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 2226;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, (Options) null, 2226, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      int int0 = 3;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "T`", "", options0, 3, 0, "W,@J7FV", false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setWidth(2234);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 109, ";$?", ":*Xlpn", options0, 109, 34, ";$?", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      helpFormatter0.rtrim(" ");
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "?2^E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 34, "arg", " ", options0, 34, 24, "", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1653);
      helpFormatter0.setArgName("-");
      Options options0 = null;
      PrintWriter printWriter0 = null;
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "Lo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "e\"!+_nzi\"iwF";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "Hg#[/", "arg", options0, "arg", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "Hg#[/", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      Option option0 = new Option("arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "", false, "-");
      helpFormatter0.printHelp("xy`q;>27", "", options0, "", true);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3420, options2, 3420, 3420);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      Option option0 = new Option("arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer(44);
      helpFormatter0.renderWrappedText(stringBuffer0, 2640, 2640, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("zydHN@dO+@HJR {Q:<", options2);
      helpFormatter0.setArgName("--");
      Object object0 = new Object();
      Options options3 = new Options();
      Object object1 = new Object();
      helpFormatter0.printHelp("zydHN@dO+@HJR {Q:<", "zydHN@dO+@HJR {Q:<", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 72, (-1518), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setWidth(144);
      helpFormatter0.setLeftPadding(144);
      Options options0 = new Options();
      options0.toString();
      options0.getOptionGroups();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.setSyntaxPrefix("o");
      options0.toString();
      options0.addOption("", "3Ph5)<;H+y'*?", true, " ]");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "o", false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2452), 144, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1583);
      helpFormatter0.renderOptions(stringBuffer0, 1583, options0, 1078, 1583);
      helpFormatter0.rtrim("");
      Object object0 = new Object();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      helpFormatter0.setWidth(144);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("2i>.]<X@mb)x~", options0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 144, 144, "C]X kUq!Ng6");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options2.addOption("arg", true, "7~u{v,VL");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      Object object0 = new Object();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("7wEj?@9`{9", (-2648), 2486);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("<");
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printOptions(mockPrintWriter1, 69, options0, 63, 63);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(84, "HsOr[/zem`Rg", "ct~IyL+[Q2[", options1, "-", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(44, "*whiov", "I@(01usAl2KCl6HUN", options0, "");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yI)t;f```V-";
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      helpFormatter0.defaultOptPrefix = "arg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IUF'#2p");
      String string1 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yI)t;f```V-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 97, (Options) null, 1, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";MM\"79:lH!f<1cp");
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = 96;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 96, "1KY/@iD!`w");
      helpFormatter0.rtrim("feNbb");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("1KY/@iD!`w", "-", false, "8Am^=&?T6;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1KY/@iD!`w' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8j2YCH4jdBni", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, options0, 16, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      helpFormatter0.rtrim("'");
      helpFormatter0.findWrapPos("--", 109, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3157), 109, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("yTQ)", "w 0#o9+i", options0, "BdEqD");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "`=H*I,4R");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MArA>jm*D[B*1,i`:=<";
      MockFile mockFile0 = new MockFile("tsD:o=Ux7sOF>syx", "MArA>jm*D[B*1,i`:=<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 254;
      mockFile0.getAbsoluteFile();
      mockPrintWriter0.print(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 254, "-");
      mockFile0.setReadOnly();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 254, "-");
      helpFormatter0.findWrapPos("\n", 254, (-345));
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      option0.getValues();
      option0.setArgs(13);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      helpFormatter0.setWidth(144);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("2i>.]<X@mb)x~", options0, false);
      helpFormatter0.setSyntaxPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      options0.toString();
      Options options1 = options0.addOption("arg", "", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "\n", options0, "a7=TJg:n(Xq{|0N%", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("2i>.]<X@mb)x~", options1);
      helpFormatter1.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.rtrim("org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setArgName(" ");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.setSyntaxPrefix("o");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      options0.toString();
      Options options1 = options0.addOption((String) null, "", true, "has already been selected: '");
      helpFormatter0.printHelp("gFWwa`aF]i;riYXP", (String) null, options1, "usage: ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options1.hasLongOption("usage: ");
      helpFormatter0.printHelp(64, " [ARG]", (String) null, options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("KcmGU4 blw-");
      options1.addOption((String) null, false, " [ARG]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 166;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 175, 181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yI)t;f```V-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderOptions(stringBuffer0, 1646, options0, 1646, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1728), "arg", "arg", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "wu#+> q. N(@CvQ", false, "-");
      option0.setArgName("-");
      options1.addOption(option0);
      Options options2 = options1.addOption((String) null, false, " [ARG]");
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "wu#+> q. N(@CvQ", "]", options2, " pj]C|g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IUF'#2p");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "yI)t;f```V-";
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("yI)t;f```V-", 52, 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "-", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("{P?apI9'Zw%");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "eB>HHSB[Ki{gx^EA\"", "org.apache.commons.cli.Options", options0, 1744, (-1), "3PA!|:v2xmBf0lG", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.hasShortOption("j4`NH{`@o-Q]L(}>");
      options0.toString();
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      options0.toString();
      options0.addOption((String) null, "da2uQ@dZ", false, "7|+|gzmom");
      helpFormatter0.printHelp("arg", "arg", options0, "lmhy$!ZQy-\"", false);
      helpFormatter0.printHelp("lmhy$!ZQy-\"", options0);
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "lmhy$!ZQy-\"", (String) null, options0, 2525, 31, "7|+|gzmom", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "wu#+> q. N(@CvQ", false, "\n");
      option0.setArgName("-");
      options1.addOption(option0);
      Options options2 = options1.addOption((String) null, false, " [ARG]");
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "wu#+> q. N(@CvQ", "]", options2, " pj]C|g");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "TS~IP>SEnl!VoK3+Y+", "", options1, "TS~IP>SEnl!VoK3+Y+", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      helpFormatter0.setWidth(144);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("2i>.]<X@mb)x~", options0, true);
      helpFormatter0.setSyntaxPrefix("o");
      options0.toString();
      Options options1 = options0.addOption("", "3Ph5)<;H+y'*?", true, " ]");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options1, "da2uQ@dZ", false);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(191);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(13);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionValidator");
      helpFormatter0.setArgName("yI)t;f```V-");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionValidator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      printWriter0.print(74);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options1, 0, 0, " | ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1619, "8z-%6gQ)z Wp`[3vl", "8z-%6gQ)z Wp`[3vl", options2, 1619, 1, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.getOptionComparator();
      helpFormatter0.createPadding(628);
      helpFormatter0.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(13);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IUF'#2p");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "yI)t;f```V-";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "yI)t;f```V-";
      objectArray0[6] = (Object) "yI)t;f```V-";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "IUF'#2p", options0, 0, 0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CHINESE;
      String string0 = "";
      Options options0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1312), "", ", ", (Options) null, (-1312), 64, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      String string0 = "'jfxdySI?w&-[3ir|6";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 628, "5K$", " ", options0, 52, 96, "'jfxdySI?w&-[3ir|6");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "A CloneNotSupportedException was thrown: ", (Options) null, "wu#+> q. N(@CvQ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, true, "");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1828);
      helpFormatter0.printHelp(1, " ", "usage: ", options1, "'", true);
      helpFormatter1.printHelp("--", "-", options0, "FG292?8yXNI");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.hasShortOption("j4`NH{`@o-Q]L(}>");
      options0.toString();
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      options0.toString();
      options0.addOption((String) null, "da2uQ@dZ", false, "7|+|gzmom");
      helpFormatter0.printHelp("arg", "arg", options0, "lmhy$!ZQy-\"", false);
      helpFormatter0.printHelp("lmhy$!ZQy-\"", options0);
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      helpFormatter0.setWidth(144);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("2i>.]<X@mb)x~", options0, true);
      helpFormatter0.setSyntaxPrefix("o");
      options0.toString();
      options0.addOption("", "3Ph5)<;H+y'*?", true, " ]");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "o", true);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("S", options0);
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "`=H*I,4R");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "-");
      boolean boolean0 = false;
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options2, false);
      helpFormatter0.setSyntaxPrefix("[");
      options2.toString();
      // Undeclared exception!
      try { 
        options0.addOption("Yd PQ`y:z\bVDEU<&T", "-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Yd PQ`y:z\bVDEU<&T' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 31;
      Options options0 = new Options();
      options0.getOption("usage: ");
      String string0 = "j4`NH{`@o-Q]L(}>\\";
      options0.hasShortOption("j4`NH{`@o-Q]L(}>");
      options0.toString();
      helpFormatter0.printHelp("--", options0, false);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IUF'#2p");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "yI)t;f```V-";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("yI)t;f```V-");
      helpFormatter0.setOptPrefix("");
      Object object0 = new Object();
      mockPrintWriter0.format("mup9ShLf&Y1S)W", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2619, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("q6Eij/-,");
      helpFormatter0.setArgName("org.apache.commons.cli.OptionValidator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Yt4goB7y");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) "2i>.<X@mb)x~";
      objectArray0[4] = (Object) "q6Eij/-,";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("<", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 929, "2i>.<X@mb)x~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "";
      Options options0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 61, "yI)t;f```V-", "", (Options) null, (-128), 57, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1316);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1316), 8, "X.'Ztk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.rtrim("-");
      String string1 = null;
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1316), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1648);
      helpFormatter0.setLeftPadding(1108);
      helpFormatter0.defaultWidth = 2360;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      optionGroup0.toString();
      options1.getMatchingOptions("");
      options0.getOptionGroups();
      optionGroup0.setRequired(false);
      helpFormatter0.setLongOptPrefix((String) null);
      options1.hasLongOption("-");
      options0.hasLongOption("|.nR,/7");
      optionGroup0.toString();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1316);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3329, 8, "X.'Ztk");
      stringBuffer0.chars();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1316), 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      options1.addOption("arg", "", false, "cs\"!X*^S(X9\tW2R");
      helpFormatter0.printHelp("xy`q;>27", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\n");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "xy`q;>27", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(862);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0qk,*g0/", (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2i\\>.]<X@mb)x~";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      Options options0 = new Options();
      options0.addOption("", true, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "v_P{]nxXaO", options0, "NO_ARGS_ALLOWED", true);
      mockPrintWriter0.print("");
      try { 
        MockURI.URI(" ", "\n", "2i>.]<X@mb)x~", "arg", "-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  ://%0A2i%3E.%5D%3CX@mb)x~?arg#-
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      helpFormatter0.setWidth(110);
      Options options0 = new Options();
      options0.addOption("", true, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "org.apache.commons.cli.OptionValidator", "l(R+phE'P", options0, "2i>.]<X@mb)x~", true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1648);
      helpFormatter0.setLeftPadding(1108);
      int int0 = 2360;
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("A&Gw/=<Q_'6%Tx^b9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "wK&oK2r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // wK&oK2r
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "arg";
      helpFormatter0.setSyntaxPrefix("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options2.getMatchingOptions("--");
      options0.getOptionGroups();
      optionGroup0.setRequired(false);
      options2.hasLongOption("arg");
      options1.hasLongOption("|.nR,/7");
      optionGroup0.toString();
      int int0 = (-1134);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1134), "[]", "2i>.]<X@mb)x~", options0, "*L'ncpexfK`.ZFv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      String string0 = "<";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.hasShortOption("arg");
      // Undeclared exception!
      try { 
        options0.addOption("--", "hL}=MQ,5pk,0/p/", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = " ] [ long ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("}yG#89YpNOXY_k!|m@", "usage: ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}yG#89YpNOXY_k!|m@' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1210), "]", "]", options0, (-1210), (-3432), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1648);
      int int0 = 1108;
      helpFormatter0.setLeftPadding(1108);
      helpFormatter0.defaultWidth = 2360;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options1.getMatchingOptions("");
      options0.getOptionGroups();
      optionGroup0.setRequired(false);
      options1.hasLongOption("-");
      options0.hasLongOption("|.nR,/7");
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1648, "", "org.apache.commons.cli.HelpFormatter$1", options1, "`ND FBarf:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultWidth = 31;
      Options options0 = new Options();
      options0.getOption("usage: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2i>.]<X@mb)x~");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "<");
      Option option0 = new Option((String) null, "", false, "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 773, "2i>.]<X@mb)x~", options2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "}p#Ezk3[*g|(@";
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "3L4N$";
      options0.addOption("3L4N$", false, "");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("}p#Ezk3[*g|(@", "-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}p#Ezk3[*g|(@' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("\n");
      Object object0 = new Object();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setNewLine("UDZLS\"*-b[");
      Options options0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "&~o6)r/m2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &~o6)r/m2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print(false);
      Object object0 = new Object();
      mockPrintWriter0.append('&');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = object0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2597, "arg");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter0.createPadding(628);
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      String string0 = "Zwy]y93~t%npV";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "Zwy]y93~t%npV", " | ", (Options) null, " | ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!E", "org.apache.commons.cli.HelpFormatter$1", (Options) null, "EO?r4-f?+&zET");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("\n");
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, "EO?r4-f?+&zET");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.rtrim("-");
      String string1 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1316), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(887);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.PRC;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "The option '", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 1839, "The option '");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+XNu}m+!yxrU";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('\"');
      helpFormatter0.printWrapped(printWriter0, 1, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      String string2 = "2wpKPoNI\\Js:.";
      Option option0 = null;
      try {
        option0 = new Option("+XNu}m+!yxrU", "", true, "2wpKPoNIJs:.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+XNu}m+!yxrU' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "wu#+> q. N(@CvQ", false, " ] [ long ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "eH~f?hLmgx!P\"-s", false, "usage: ");
      Options options4 = options3.addOption((String) null, false, " [ARG]");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "wu#+> q. N(@CvQ", "]", options4, " pj]C|g");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      Option option0 = null;
      try {
        option0 = new Option("t27L]r}TS", "arg", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't27L]r}TS' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("EO?r4-f?+&zET", (String) null, (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      String string0 = "Zwy]y93~t%npV";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "Zwy]y93~t%npV", " | ", (Options) null, " | ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("yI)t;f```V-");
      helpFormatter0.setArgName("yI)t;f```V-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IUF'#2p");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "yI)t;f```V-";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "yI)t;f```V-";
      objectArray0[6] = (Object) "yI)t;f```V-";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
