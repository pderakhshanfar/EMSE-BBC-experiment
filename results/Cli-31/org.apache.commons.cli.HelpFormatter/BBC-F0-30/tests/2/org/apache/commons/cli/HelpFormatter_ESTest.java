/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:37:59 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(".lUHC;");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printHelp(288, ".lUHC;", "org.apache.commons.cli.HelpFormatter$1", options0, "Ve");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "usage: ", true, "-");
      optionGroup0.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N#,'W*j7PT1RK}");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1775));
      helpFormatter0.setArgName("");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.println(' ');
      char[] charArray0 = new char[0];
      mockPrintWriter1.println(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1088), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("--", "--", (Options) null, "usage: ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option0 = new Option("arg", true, "-");
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setSyntaxPrefix("lUHC;");
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      option0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "--", options1, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-2), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("lUHC;");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      int int0 = 44;
      String string0 = null;
      String string1 = "p^-t";
      Options options0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, (String) null, "p^-t", (Options) null, "p^-t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-318);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultArgName = " ]";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(1439);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(20);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2539);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      int int0 = 4;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      helpFormatter0.defaultLeftPad = (-3059);
      Option option0 = new Option("arg", "arg", true, " ");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "rv:";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", "rv:", options0, "rv:", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Illegal option name '", "rv:", options0, "rv:", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      helpFormatter0.rtrim((String) null);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      helpFormatter0.printOptions(printWriter0, 20, options0, 20, 15);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "d}!Lm^H1-7{2aTc", "c6}6E;,O:V'osHR!f", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-2);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator((String) null);
      Options options2 = options1.addOption("", "-", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2907), options2, 306, (byte)2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, " ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      options0.hasLongOption("jM;C[");
      helpFormatter0.printHelp("Illegal option name '", "rv:", options0, "rv:", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('y');
      int int0 = 0;
      String string1 = "arg";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("y", "y", true, " ");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0eQl0");
      Options options1 = options0.addOption("Qo_jXOre2v", "", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "y", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("y", "y", true, " ");
      optionGroup0.addOption(option0);
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 100, "[", (String) null, options0, 101, 101, "-", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "y";
      Option option0 = new Option("y", "y", true, " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2), (-1), "y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 31, "L;", options1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2539);
      helpFormatter0.defaultLeftPad = (-2539);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "\n", "\n", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 1441;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {=[ option:    [ARG] :: -- ]} ]", options1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 1441;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3009, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {=[ option:    [ARG] :: -- ]} ]", "", options0, 3009, 871, ">", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 318, options1, 14, 57);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 3009, 318);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "CNGOHDCP]vUlN`*ao", true, "CNGOHDCP]vUlN`*ao");
      helpFormatter0.printHelp(63, " ", "", options1, "M%,W!1nn1Iqpzu", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.print((Object) "");
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      mockPrintWriter0.printf("t+~-sU+*u~_]'H", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 26, "t+~-sU+*u~_]'H", options0);
      options0.addOption("arg", "", true, "k1<F0j5-?VG)ff6)h");
      options0.hasLongOption("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 871, "k1<F0j5-?VG)ff6)h", "J,S9I'Z]Z*IFh_/^-| ", options0, 37, 37, "", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 1441;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3009, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {=[ option:    [ARG] :: -- ]} ]", "", options0, 3009, 871, ">", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.print((Object) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2024, "t+~-sU+*u~_]'H", "", options0, 2010, 2, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", false, " ");
      Options options1 = options0.addOption(option0);
      options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "@L_O?zPgC%'", true);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1882), "@L_O?zPgC%'", "", options1, "iF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2976, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "", options0, 2976, 871, ">", true);
      helpFormatter0.printHelp(">", "", options0, "\"", false);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2127), "f<;Ewl", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-476), "}Q&bryfQhG?W9:V", "/", (Options) null, (-476), (-476), "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 855, ", ");
      helpFormatter0.rtrim(", ");
      helpFormatter0.createPadding(855);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      int int0 = 13;
      helpFormatter0.renderOptions((StringBuffer) null, (-305), options0, 13, 14);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "c6}6E;,O:V'osHR!f", "$dFb0Q^ExfF0rX/C=$", options0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setNewLine("L]A.357}_UOI;5$");
      helpFormatter0.printHelp(3, "Illega optio xname '", "\n", options0, "\n", false);
      options0.toString();
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp(119, ")|w5!lYymkzDrv5}|$B", "`GOquc#gqqMk>Yk\"I*", options0, ")|w5!lYymkzDrv5}|$B");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5(yMK9T");
      helpFormatter0.printHelp(1, "\n", "", options0, "Illega optio xname '", false);
      helpFormatter0.defaultLongOptPrefix = "cmdLineSyntax not provided";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1701, "A CloneNotSupportedException was thrown: ", "", options0, " ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 63, options2, 63, 13);
      helpFormatter0.renderWrappedText(stringBuffer1, 13, 64, "-bOsk52 h>!=?I_&Q");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cM");
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "org.apache.commons.cli.HelpFormatter", "", options0, 0, 0, "cM", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      String string0 = "' was specified but an option from this group ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", "' was specified but an option from this group ", (Options) null, 2976, 9, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("5", "-", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      String string0 = "z#;Jsw]";
      String string1 = "@q~R";
      Options options1 = new Options();
      int int0 = (-959);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2795), "@q~R", "@q~R", options1, 64, (-959), "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(675, "usage: ", "Illegal option name '", options0, (String) null, true);
      int int0 = 119;
      String string0 = "`GOquc#gqqMk>Yk\"I*";
      helpFormatter0.setArgName("usage: ");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y@8&m(h>oj[x");
      int int1 = 1947;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 675, (String) null, ")|w5!lYymkzDrv5}|$B", options0, 1947, 74, "wR*0f>4aD#", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      String string0 = "z#;Jsw]";
      int int0 = 2976;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string1 = "cmdLineSyntax not provided";
      int int1 = (-2902);
      String string2 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2976, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, 2976, (-2902), "' was specified but an option from this group ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "zuT\"Yv]4]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "-");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(121, "?[C>*QmhO;Pp% nx", (String) null, options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setNewLine("L]A.357}_UOI;5$");
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      options0.toString();
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp(119, "\n", "`GOquc#gqqMk>Yk\"I*", options0, "\n");
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5(yMK9T");
      helpFormatter0.printHelp(18, "\n", "", options0, "Illegal option name '", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1701, "A CloneNotSupportedException was thrown: ", "", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      int int0 = 0;
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2976, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "", options0, 2976, 0, ">", true);
      String string1 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2920), "--", "", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "e7:T7X|;-Y");
      helpFormatter0.printHelp(">", options1);
      Options options2 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("k}]OT5v&w;", "'7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k}]OT5v&w;' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = helpFormatter0.defaultLeftPad;
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((int) (byte)32, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", (Options) null, "org.apache.commons.cli.Options");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&eQQBrU'0", options0);
      Options options1 = new Options();
      Option option0 = new Option("arg", "J");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(23, "J", "8m%>", options2, "8m%>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2899), "J", "&eQQBrU'0", options0, "axu", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 14, 1480);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(" | ", options0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t=x2WAw<rDf&w;^0oT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1507, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1507, options0, 1507, 1507);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1507, 1507, "t=x2WAw<rDf&w;^0oT");
      helpFormatter0.renderWrappedText(stringBuffer2, 1507, 313, "");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      helpFormatter0.setArgName("Illegal option name '");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "z#;Jsw]", "R9C@GL[lg[wRFz;$n#\"", options0, 64, 2976, "R9C@GL[lg[wRFz;$n#\"", false);
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp(119, ")|w5!lYymkzDrv5}|$B", "`GOquc#gqqMk>Yk\"I*", options0, ")|w5!lYymkzDrv5}|$B");
      options0.toString();
      helpFormatter0.defaultArgName = ">h&V1\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5(yMK9T");
      helpFormatter0.printHelp(18, "\n", "", options0, "Illegal option name '", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printHelp(119, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "`GOquc#gqqMk>Yk\"I*", options0, "R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 76, "&5(yMK9T", "R9C@GL[lg[wRFz;$n#\"", options0, 55, 25, "R9C@GL[lg[wRFz;$n#\"");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      PrintWriter printWriter0 = null;
      int int0 = 26;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 26, 26, "[ option: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "-");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.setWidth(32);
      MockFile mockFile0 = new MockFile("J4I9", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "5";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "5";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 32, "5", options0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setWidth(1);
      Option option0 = new Option((String) null, "usage: ", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "Illegal option name '", "0", options1, "M_h%,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      options0.toString();
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp(119, ")|w5!lYymkzDrv5}|$B", "`GOquc#gqqMk>Yk\"I*", options0, ")|w5!lYymkzDrv5}|$B");
      options0.toString();
      Options options1 = new Options();
      Option option0 = new Option("arg", "\n");
      option0.setLongOpt("arg");
      options0.addOption(option0);
      helpFormatter0.printHelp(63, "cmdLineSyntax not provided", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-2839), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Illegal option name '";
      objectArray0[2] = (Object) "Illegal option name '";
      objectArray0[3] = (Object) "Illegal option name '";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "C", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 119, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      options0.toString();
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5(yMK9T");
      helpFormatter0.printHelp(18, "\n", "", options0, "Illegal option name '", false);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '~';
      charArray0[2] = 'a';
      charArray0[3] = 'k';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "c=C1Lbv6HB,>dQhAf>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "Illegal option name '", "\n", options0, "\n", false);
      options0.toString();
      helpFormatter0.setLongOptSeparator("R9C@GL[lg[wRFz;$n#\"");
      helpFormatter0.printHelp(119, ")|w5!lYymkzDrv5}|$B", "`GOquc#gqqMk>Yk\"I*", options0, ")|w5!lYymkzDrv5}|$B");
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5(yMK9T");
      helpFormatter0.printHelp(18, "\n", "", options0, "Illegal option name '", false);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("`GOquc#gqqMk>Yk\"I*", 18, 109);
      MockPrintStream mockPrintStream0 = new MockPrintStream("p{lg)$6BGv<S[y");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "R9C@GL[lg[wRFz;$n#\"";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[ARG...]", objectArray0);
      helpFormatter0.printOptions(printWriter0, (-1), options0, 3, 74);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      int int0 = (-839);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", "`Tf(*O%D,!9oc=OWH$*", false, "`Tf(*O%D,!9oc=OWH$*");
      Options options1 = options0.addOption(option0);
      option0.setType(object0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = (-910);
      option0.clearValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-839), options2, (-2), (-910));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth(32);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("g'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, " ");
      helpFormatter1.printHelp("--", options0);
      options0.addOption("", "-", true, "-");
      helpFormatter1.printHelp("usage: ", "--", options0, "t", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 75, 61, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "", "arg", options0, 74, 3, "-$%[3#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      helpFormatter0.setDescPadding(64);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "r5!7eeambB[ca%%1Tg";
      options0.addOption("5", "r5!7eeambB[ca%%1Tg", true, "");
      String string3 = "[";
      helpFormatter0.printHelp("5", "[", options0, "5", true);
      int int0 = 1275;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2), options0, 1275, 111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 26, " ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("g'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, " ");
      helpFormatter1.printHelp("--", options0);
      Options options1 = options0.addOption("", "-", true, "-");
      helpFormatter1.printHelp("usage: ", "--", options0, "[", true);
      PrintWriter printWriter0 = null;
      String string0 = "<";
      int int0 = 111;
      int int1 = 1275;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 111, options1, 1275, 1275);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "@L_O?zPgC%'", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultArgName = " Z`-#66T8Lvk*6(";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp(1483, " Z`-#66T8Lvk*6(", "1#c{6yallgWrvB[t", options0, "1#c{6yallgWrvB[t", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth(32);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options2, "5", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}cum##w<JqD@kUF;";
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}cum##w<JqD@kUF;", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&eQQBrU'0", options0);
      helpFormatter0.printHelp("The option '", "&eQQBrU'0", options0, "The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("'", 37, 3192);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('(');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 23, "<", "<", options0, 3192, (-2246), "<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", "J", options0, " ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-1306));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|3Q`qM[U", "H", options1, "|3Q`qM[U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      Options options1 = options0.addOption("", "-", true, "-");
      helpFormatter1.printHelp("usage: ", "--", options0, "?fdWat", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 111, "<", "arg", options1, 1275, (-1), "z\"o9m42ToZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", "The option '", options0, "}cum##w<JqD@kUF;");
      helpFormatter0.findWrapPos("", 13, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "<", "", options0, 2, 45, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth(32);
      helpFormatter0.printHelp("W09yGm{v{", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", false, (String) null);
      helpFormatter0.printHelp("rBI00{y%6A<*x&[LcUB", (String) null, options1, "arg", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      options0.addOption((String) null, "s|fvLN( /4ggT{MU", false, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7t:-,}V_o", "org.apache.commons.cli.Util", (Options) null, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "-", options0, "");
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 6, 1321);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(111, "+[1`n", "+[1`n", options0, "+[1`n");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      options0.addOption("", "-", true, "-");
      helpFormatter1.printHelp("usage: ", "--", options0, "?fdWat", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getOptionComparator();
      String string0 = "$17j1y,NV6(";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "-", "-", options0, "$17j1y,NV6(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(5072);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.AlreadySelectedException");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      options0.addOption((String) null, "s|fvLN( /4ggT{MU", false, "");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasLongOption("H;c");
      helpFormatter0.printHelp(2688, "}cum##w<JqD@kUF;", "", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "o_", options1, "J");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      options0.addOption("", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp("\"z3R0u^.O", "}cum##w<JqD@kUF;", options1, "h$", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&eQQBrU'0", options0);
      helpFormatter0.setWidth(13);
      helpFormatter0.printHelp("usage: ", "&eQQBrU'0", options0, "(fb@Vg7n<io");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "", false, "");
      options1.addOption(option0);
      options1.hasOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "^\"c", options0, "}cum##w<JqD@kUF;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b", "b", (Options) null, "The option '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "usage: ", "Vp;h.#gEu>8Xxr:a", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "[:4d*oUF";
      int int0 = 909;
      int int1 = 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 909, 1, "[:4d*oUF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-585), "Diu]%$Z4-2T=3xROF", "\"xPG$`z?O3&E'Y", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 634, "");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      int int0 = (-1047);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1047), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1576);
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "-");
      StringBuffer stringBuffer2 = new StringBuffer();
      stringBuffer1.codePoints();
      stringBuffer0.append(stringBuffer2);
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 1576, "LNxBo|C<zC0");
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided");
      File file0 = MockFile.createTempFile("arg", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 44, "cmdLineSyntax not provided");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("LNxBo|C<zC0");
      helpFormatter0.setLeftPadding(1576);
      helpFormatter0.setArgName("LNxBo|C<zC0");
      helpFormatter0.setLeftPadding(1576);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.renderWrappedText(stringBuffer1, 44, 1264, "");
      helpFormatter0.setLeftPadding(1576);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "[:4d*oUF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "+[1`n\\";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "+[1`n", "", options0, "+[1`n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1055);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1055));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      String string1 = ";!}/,k)X";
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-1393);
      Options options0 = new Options();
      String string0 = "j0EK(zZ2D;";
      options0.hasOption("j0EK(zZ2D;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1393), "", "4!M", options0, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "usage: ", true, "--");
      String string1 = "\"7b\"U";
      String string2 = "kx{/y9YBoF,bC,";
      // Undeclared exception!
      try { 
        options1.addOption("kx{/y9YBoF,bC,", "kx{/y9YBoF,bC,", true, "~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'kx{/y9YBoF,bC,' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      Options options1 = options0.addOption((String) null, "s|fvLN( /4ggT{MU", false, "");
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", "usage: ", options1, "rBI00{y%6A<*x&[LcUB", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      Options options0 = new Options();
      String string1 = "wmO{u";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasOption("wmO{u");
      helpFormatter0.printHelp("The option '", "&eQQBrU'0", options0, (String) null);
      int int0 = (-1064);
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" | ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "p-e");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.setWidth(719);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 31, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "x+Yn-:WBL");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // x+Yn-:WBL
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(">");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      String string0 = null;
      String string1 = "org.apache.commons.cli.OptionGroup";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "org.apache.commons.cli.OptionGroup", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "[ARG...]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ARG...]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("5", "-", true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(3156, "5", "", options0, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 3156, 3156);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth(551);
      helpFormatter0.printHelp("usage: ", "", options0, "}cum##w<JqD@kUF;");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_Z";
      helpFormatter0.defaultLongOptPrefix = "_Z";
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(896);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((CharSequence) "-");
      stringBuffer0.append((CharSequence) "arg");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 896, (Options) null, 896, 896);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}cum##w<JqD@kUF;";
      Options options0 = new Options();
      helpFormatter0.printHelp("}cum##w<JqD@kUF;", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "}cum##w<JqD@kUF;", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " h6om~B";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" h6om~B");
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String string1 = "HBOCGvmnJXFRMy";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-900), "HBOCGvmnJXFRMy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "";
      helpFormatter0.defaultDescPad = 551;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "[U#Ii4aywk";
      helpFormatter0.setLongOptSeparator("[U#Ii4aywk");
      String string1 = "_Fp";
      String string2 = "The option '";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-279);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2259));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "eL", options0, "\"z3R0u^.O", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
