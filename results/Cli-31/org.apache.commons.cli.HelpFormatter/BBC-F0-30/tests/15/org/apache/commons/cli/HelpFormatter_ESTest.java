/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:41:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option("2mZ2k", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.getOptionGroups();
      mockPrintWriter0.print(1L);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2mZ2k", "[=", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Option option1 = new Option("arg", "usage: ", true, "");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup3 = new OptionGroup();
      optionGroup3.addOption(option0);
      optionGroup3.addOption(option1);
      options2.addOptionGroup(optionGroup3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[=", "-@<6JQGf_`3@o.", options2, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setArgName(" ");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("\"s2+Z!4");
      helpFormatter0.findWrapPos("=v-6gj'J~DR.$r", 63, 74);
      helpFormatter0.getLongOptSeparator();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "~i3sR\"1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2mZ2k", "[=", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Option option1 = new Option("arg", "usage: ", true, "");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup3 = new OptionGroup();
      optionGroup3.addOption(option1);
      options2.addOptionGroup(optionGroup3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[=", "-@<6JQGf_`3@o.", options2, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "]", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 14, (-1233), "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 948, 14, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MD5!l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Option option0 = new Option("", " ]", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "##Mf9wm>&~<OyE4LF7-", options3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 4090, options0, 1, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("f62`XAYf ");
      helpFormatter1.defaultArgName = "D";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "dh\"XDuc5Ec=3cW{&N<", "usage: ", options1, 3846, 4090, "--", true);
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter0, 3, options0, 0, 3777);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      options0.addOption((String) null, true, "[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-805), "[", (String) null, options0, (-1063), 64, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.defaultWidth = 1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.JAPANESE;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=$~hYyI3.|QS0(", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("u", "-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "line.separator", false, "\n");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("pN[@?;\"", options2);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("AqO5F_*kuV", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "line.separator", false, "\n");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("pN[@?;\"", options2);
      helpFormatter0.getSyntaxPrefix();
      Options options3 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), ">", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("n", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options2 = options1.addOption(option0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 12, options2, (-2361), 386);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "]";
      int int0 = (-627);
      helpFormatter0.setLeftPadding((-627));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(40, "M5!l", "HxqF_lNNO", (Options) null, "HxqF_lNNO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append('+');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.AlreadySelectedException", "", options2, 0, 0, " ", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, " ");
      Options options0 = new Options();
      helpFormatter0.setWidth(3031);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('L');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 0, 2931, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "line.separator";
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      option0.getValues();
      Options options1 = options0.addOption(option0);
      option0.setRequired(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(908, "line.separator", " ]", options1, "cmdLineSyntax not provided", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 105, (Options) null, 1, 5022);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.trimToSize();
      helpFormatter1.renderWrappedText(stringBuffer0, 18, 3, "--");
      helpFormatter0.findWrapPos("\n", 1, (-1774));
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPANESE;
      options0.addOption("arg", true, "\n");
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 6137, 2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = ';';
      mockPrintWriter0.print(charArray0);
      StringBuffer stringBuffer1 = stringBuffer0.append(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "| ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter2.renderOptions(stringBuffer0, 334, options0, 0, 64);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 103, "-", (String) null, options0, (-1462), 10, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale.forLanguageTag("--");
      options0.addOption("arg", true, "\n");
      int int0 = 32;
      helpFormatter0.createPadding(32);
      Options options1 = options0.addOption((String) null, "(C", false, "~J>");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "                                ", "                                ", options1, 32, 72, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "k`r^#>aj:9s";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2721, 59, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Options options1 = options0.addOption("arg", "--", true, "arg");
      helpFormatter0.createPadding(32);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1953, options1, 32, 795);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.createPadding(32);
      Object object0 = new Object();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "                                ", "                                ", options1, 795, 1, "                                ", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 45, "$<T]q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      String string0 = helpFormatter0.createPadding(2896);
      helpFormatter0.setLongOptPrefix(string0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "--", true, "arg");
      options2.toString();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 13, "dmhXob5?Zl6%!1", helpFormatter0.defaultLongOptPrefix, options2, 103, 3, "Fz]6C<yXMb9h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.createPadding(32);
      Object object0 = new Object();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "                                ", "                                ", options1, 795, 1, "                                ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(14, "usage: ", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("T%!f{~l=`Q$NuF");
      int int0 = 533;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 533);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      int int1 = 525;
      bufferedOutputStream0.flush();
      bufferedOutputStream0.write(10);
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 525, 533, "");
      mockPrintWriter0.println(530);
      helpFormatter0.printHelp("--", "--", options0, "{RD'^@E_");
      helpFormatter0.createPadding(17);
      int int2 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "--", "                 ", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, (-3401), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("{MM.:RdC5G0>twz", options0);
      helpFormatter0.createPadding(72);
      helpFormatter0.setLongOptPrefix("[");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("@Cl.I8pvhhx-jn%#y!f");
      helpFormatter0.getOptionComparator();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1683, 1683);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) locale0;
      mockFileOutputStream0.flush();
      objectArray0[3] = objectArray0[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 83, "usage: ", "usage: ", options0, 74, 83, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 3, options1, 2763, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 83, "usage: ", "usage: ", options0, 74, 83, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, (String) null, (String) null, options0, 115, 115, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "C-");
      mockPrintWriter0.append('+');
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptPrefix("#TdNo2(");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "Y8S-+[u0FY", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-2271);
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2271), "[ Options: [ short ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.createPadding(63);
      helpFormatter0.setLongOptPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1035, "usage: ", "org.apache.commons.cli.Util", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('h');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter1;
      mockPrintWriter0.printf(locale0, "|_yY9'r}hl@#8", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "org.apache.commons.cli.Option", "M~#ym!HZw", options0, 5633, 4098, "has already been selected: '", true);
      helpFormatter0.findWrapPos("M7m~u", 70, 83);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.createPadding(3);
      helpFormatter0.setLongOptPrefix("Rw-M(rDrk,8HU@mG9Z!");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "arg", "usage: ", options0, 1, 3, "--");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) options0;
      mockPrintWriter0.println('T');
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 83, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, 70, 83, "", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "d5bjUH9 \"Ce", "", options0, 1, 70, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("5'U@)IEuF&kU+-OP", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      mockPrintWriter0.append('+');
      String string0 = helpFormatter0.createPadding(2896);
      helpFormatter0.setLongOptPrefix(string0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 629, 48, "' contains an illegal character : '");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasShortOption("--");
      helpFormatter0.printHelp("5P#[=*8qX=dkjMi XF&", options0);
      helpFormatter0.setLongOptPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptPrefix("' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 130, options0, 1, 130);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("-");
      options0.hasShortOption("--");
      helpFormatter0.printHelp("3/\"xvSHy^ksX!", options0);
      helpFormatter0.createPadding(83);
      helpFormatter0.setLongOptPrefix("3/\"xvSHy^ksX!");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1860), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal charatr : '");
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      int int0 = 1;
      helpFormatter0.printUsage(printWriter0, 1, "");
      Object object0 = new Object();
      mockPrintWriter0.print((Object) "");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      String string0 = "NO_ARGS_ALLOWED";
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      String string0 = helpFormatter0.createPadding(2896);
      helpFormatter0.setLongOptPrefix(string0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 74, helpFormatter0.defaultLongOptPrefix);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 83, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, 70, 83, "", true);
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(">O;LPQiyI$BB]>1gg", ">O;LPQiyI$BB]>1gg", options0, (String) null, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) " ", 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      String string0 = "P4q$|vX4M3";
      options0.getMatchingOptions("usage: ");
      options0.toString();
      helpFormatter0.setWidth(4090);
      options0.getMatchingOptions("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2195), "6LB;cJ)ao<L(", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "P4q$|vX4M3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("\n");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp(1345, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", (String) null, options0, "a");
      StringBuffer stringBuffer1 = new StringBuffer("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer0, 105, 3235, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer3, 6, options0, 595, (-935));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      helpFormatter0.createPadding(2049);
      helpFormatter0.setLongOptPrefix("Rw-M(rDrk,8HU@mG9Z!");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("\n", options0);
      StringWriter stringWriter0 = new StringWriter(248);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.format((Locale) null, "", (Object[]) null);
      helpFormatter0.printUsage(printWriter1, 105, "");
      Object object0 = new Object();
      helpFormatter0.setNewLine("s6vV!$cmz/{HQZ/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 105, "", "mpc", options0, 1147, 248, "s6vV!$cmz/{HQZ/", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp(4090, "usage: ", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 207, "`$RPMkr+x>!`'3<=}", "", options0, 13, 13, ">", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      options0.hasLongOption("B16=ZA5mU7,'XzIC");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, "\n", false, " ");
      options1.toString();
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("=", options1);
      helpFormatter0.setDescPadding((-623));
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 0, 74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4090;
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 4090, options0, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("arg");
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-628));
      options0.getMatchingOptions("arg");
      String string0 = "-\\uHpf8~OSRx/ ";
      helpFormatter0.printHelp(3759, string0, "arg", options0, "De.0I 4gmde");
      String string1 = "-2FQp7\\*52v";
      StringBuffer stringBuffer0 = new StringBuffer("-2FQp7*52v");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1345, (-628), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 1;
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      options0.addOption(option0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 3785, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption(" ");
      helpFormatter0.printHelp("]", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 0, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.printHelp("--", options0, true);
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      helpFormatter0.printHelp(4090, "LmqV]KpEN\"", " ", options0, " ");
      helpFormatter0.setSyntaxPrefix("\u0002R:E$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp(4090, "LmqV]KpEN\"", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3235, 63, " ");
      helpFormatter0.renderWrappedText(stringBuffer2, 35, 2326, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "f";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "f";
      objectArray0[7] = (Object) "f";
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("f", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), " [ARG]", " ", options2, (-2), (-1), "-#aO$}~?vC<|cZf", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 3785, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "--", "mpc", options0, 1, (-616), "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 74;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 784, 74, "l@K3");
      String string0 = "FrbClIm!6";
      int int1 = 54;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-7587), 54, "l@K3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "f";
      PrintStream printStream0 = mockPrintStream0.format("NO_ARGS_ALLOWED", objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.addOption("", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", (String) null, false, "-");
      Option option1 = new Option("", false, "line.separator");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOption("", false, "");
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1197), "2@hlSa$J*byw4npkiY", " ] [ long ", options1, (-1), (-2), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp(4090, "LmqV]KpEN\"", " ", options0, " ");
      helpFormatter0.setSyntaxPrefix("\u0002R:E$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 784, options1, 784, 2);
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) stringBuffer0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), "-u '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      helpFormatter0.printUsage(printWriter0, 1, "");
      Object object0 = new Object();
      mockPrintWriter0.print((Object) "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.createPadding(248);
      helpFormatter0.setLongOptPrefix("Rw-M(rDrk,8HU@mG9Z!");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "f";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "f";
      objectArray0[7] = (Object) "f";
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("f", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "/wN~3^Z/k^k$l9w");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator("Rr[");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", ">", false, "'E2o5Fa");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", false, "(zR`d)sI#xl;}ca;`I");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, ">", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2171);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultWidth = 2171;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("F'Uib7I-cwZ,sN");
      Options options0 = new Options();
      String string0 = helpFormatter0.createPadding(3341);
      helpFormatter0.setLongOptPrefix(string0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Rw-M(rDrk,8HU@mG9Z!", (-2), (-594));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1906, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append('+');
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 1906, "zt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ", 1, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-5419), options1, 3349, 3349);
      helpFormatter0.renderWrappedText(stringBuffer1, 52, (-295), "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 784, options1, 784, 2);
      helpFormatter0.setNewLine("-u '");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "-u '", "-u '", options1, (-2), 56, "-u '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1681), "?*Ky0DG~vugQJG$6_Q", "?*Ky0DG~vugQJG$6_Q", options0, "vv@o1BD6-BtjVJk}W7s", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("");
      helpFormatter0.printHelp("(wE_J", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(248);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("                                                                                                                                                                                                                                                        ", (-1501), (-1501));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "yb";
      Options options0 = null;
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2171;
      helpFormatter0.setLeftPadding(2171);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultWidth = 2171;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "F'Uib7I-cwZ,sN";
      helpFormatter0.setLongOptPrefix("F'Uib7I-cwZ,sN");
      String string1 = "=GIQ)fO";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-514), "F'Uib7I-cwZ,sN", "':S)VOJ;,l~(=$JPd!", options0, ">", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      String string0 = "7fSvDZ-*.x";
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      stringWriter0.append((CharSequence) "-");
      objectArray0[1] = (Object) "eeMrz";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "eeMrz";
      PrintWriter printWriter0 = mockPrintWriter0.printf("eeMrz", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1677, "-");
      Options options0 = null;
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "7fSvDZ-*.x", ", ", (Options) null, 0, 0, "7fSvDZ-*.x");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "f";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "f";
      objectArray0[7] = (Object) "f";
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("f", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "/wN~3^Z/k^k$l9w");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, " ", options2, (-1), (-2512), "/wN~3^Z/k^k$l9w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp(4090, "LmqV]KpEN\"", " ", options0, " ");
      helpFormatter0.setSyntaxPrefix("\u0002R:E$1");
      options0.hasLongOption("--");
      options0.toString();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("LmqV]KpEN\"", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "[ARG...]");
      helpFormatter0.getDescPadding();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "LmqV]KpEN\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LmqV]KpEN\"
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("", "", options0, "");
      helpFormatter0.optionComparator = comparator0;
      String string0 = "";
      Options options1 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "hgsX4]?q*bb2z{i7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-695);
      String string0 = "k3y{,WHJ8w)#SiE";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "/G";
      helpFormatter0.printHelp("The option '", "/G", options0, (String) null);
      Option option0 = null;
      try {
        option0 = new Option("!S>1I,HO0P=rh%q", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '!S>1I,HO0P=rh%q' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "-");
      options0.getMatchingOptions("7_Z");
      Options options2 = options1.addOption(option0);
      options2.toString();
      options0.hasShortOption("$WI{$M");
      Options options3 = options2.addOption("SbVbg", "SbVbg", true, "-");
      option0.setArgs(2188);
      options2.helpOptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2157), (String) null, "Im(T0Y`yr", options3, "Im(T0Y`yr", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1906, "--");
      mockPrintWriter0.append('+');
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LmqV]KpEN\"";
      String string1 = " ";
      Options options0 = new Options();
      options0.toString();
      int int0 = 1345;
      options0.getMatchingOptions("P4q$|vX4M3");
      options0.toString();
      helpFormatter0.setWidth(1345);
      options0.getMatchingOptions((String) null);
      helpFormatter0.printHelp(4090, "LmqV]KpEN\"", " ", options0, " ");
      String string2 = "\\2R:E$1";
      helpFormatter0.setSyntaxPrefix("\u0002R:E$1");
      options0.hasLongOption("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setOptPrefix("");
      options0.addOption("arg", true, "=#2xP0?1E\"`VnNev:o/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "f";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "f";
      objectArray0[7] = (Object) "f";
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("f", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      helpFormatter0.setArgName("f");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setNewLine("17~uZ}_N-@|C");
      int int0 = 1921;
      helpFormatter0.renderWrappedText(stringBuffer0, 1921, 1921, "[ option: ");
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      options0.addOption("", "]NZd#5Z", true, "<-ychTEgsqU");
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "yb";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yb", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("arg", ", ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = (-635);
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter$1", " ]", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1199;
      String string0 = "NV";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1199, 1199, "NV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2630), "Qg>kvGRS;b44");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1354);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      String string0 = "qi]kKnlbnoQ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("arg", "--", false, "usage: ");
      options0.toString();
      option0.setDescription("B16=ZA5mU7,'XzIC");
      options0.hasLongOption("B16=ZA5mU7,'XzIC");
      option0.setType("=");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, "\n", false, " ");
      options1.toString();
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("=", options1);
      helpFormatter0.setDescPadding((-623));
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 0, 74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 784, options1, 784, 10);
      helpFormatter0.setNewLine("-u '");
      assertEquals("-u '", helpFormatter0.getNewLine());
  }
}
