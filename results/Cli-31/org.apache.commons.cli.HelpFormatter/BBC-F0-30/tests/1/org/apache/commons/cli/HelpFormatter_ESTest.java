/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:38:06 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[", options2, true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      Option option0 = new Option("", "", true, "_E%xAo@h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, "[J&Tw/,^;eiWoo", true, "--");
      helpFormatter0.printHelp("_E%xAo@h", options1, true);
      options0.getOption((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(11);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NGDZ?K}PW|vqkI", "NGDZ?K}PW|vqkI", options0, "NGDZ?K}PW|vqkI", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("8p8_vc%OjF!^]~6!", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "ZZm3zaK", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "cqsH>!.<y68";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "ZZm3zaK";
      mockPrintWriter0.printf(locale0, "cqsH>!.<y68", objectArray0);
      int int0 = (-1921);
      String string0 = "#EMY";
      Options options0 = new Options();
      String string1 = "]v0e2,( GAbre";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "]v0e2,( GAbre", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultLongOptPrefix = "";
          Options options0 = new Options();
          helpFormatter0.printHelp("usage: ", "usage: ", options0, " ");
          helpFormatter0.getLongOptPrefix();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor74.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setLeftPadding(1);
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          helpFormatter0.setOptionComparator(comparator0);
          helpFormatter0.setDescPadding((-4493));
          helpFormatter0.getOptPrefix();
          helpFormatter0.getDescPadding();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor74.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "5nX!._'W1}";
          HelpFormatter helpFormatter0 = new HelpFormatter();
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y?lxo!~.S)qNvWG");
          int int0 = 0;
          String string1 = "' was specified but an option from this group ";
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, (String) null);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", "[J&Tw/,^;eiWoo", true, "--");
      helpFormatter0.printHelp("usage: ", options1, true);
      optionGroup1.setRequired(true);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 14, "C=EpzJ<[6A$@", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1943);
      Options options1 = options0.addOption("", "--", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("k2q[Qfu\"B");
      helpFormatter0.renderWrappedText(stringBuffer0, 40, 604, "k2q[Qfu\"B");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "_E%xAo@h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "[J&Tw/,^;eiWoo", true, "--");
      helpFormatter0.printHelp("_E%xAo@h", options1, true);
      options0.getOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-2), "[", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "", (Options) null, "<", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 528, (-1190), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("[ Options: [ short ", 2, 2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "--", false, "DtB#<!m(y'3<k");
      Options options3 = options2.addOption("arg", false, "");
      helpFormatter1.printHelp("QijkZe|CHiB53VY", "usage: ", options3, "-");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1948, options0, 1948, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 1683, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T\"Uc^gtztKx-4 ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("v<3,A\"bu");
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.setWidth(0);
      options0.getOption("\n");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options1 = new Options();
      helpFormatter0.printHelp("n+B", "", options0, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(4422);
      helpFormatter0.renderOptions((StringBuffer) null, 13, options0, 13, 4422);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("]");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("0i[8", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter4.getLongOptPrefix();
      helpFormatter3.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0NS(@Ds?-71(_8J7I ");
      helpFormatter4.renderWrappedText(stringBuffer0, 3, 1068, " ");
      Options options1 = options0.addOption("arg", "usage: ", true, "\n");
      helpFormatter4.printHelp((PrintWriter) mockPrintWriter0, 44, "jgcVU,2g8f:*]Eo`C2~", "--", options1, 74, 44, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", "usage: ", options0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printHelp("hb", "hb", options0, " ");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2476), 7428);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 11, (-1135), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}(b", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("gIjyg>3X-@", "lSk|o", options1, "lSk|o");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter1.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("]");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("0i[8", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
      helpFormatter3.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp("--", "\n", (Options) null, ", ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.addOption((String) null, "org.apache.commons.cli.Util", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 43, "cmdLineSyntax not provided", "", options0, 74, (-305), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "Illegal option name '", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", (String) null, options1, (-3368), 100, "{UNORw", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", false, "-");
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 15, "The option '");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 507;
      options0.hasOption("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 11, (String) null, "--", options0, 41, 507, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("arg", false, "");
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.setWidth(0);
      options0.getOption("\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]\"_@qZoDa?|4O~");
      Options options1 = options0.addOption((String) null, "", false, "");
      helpFormatter0.setLongOptPrefix("s-<*q");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "", options1, (-1), (-2), "0NS(@Ds?-71(_8J7I ", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("]");
      StringBuffer stringBuffer0 = new StringBuffer("NO_ARGS_ALLOWED");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter2.printHelp("--", options1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options2 = options0.addOption((String) null, (String) null, false, "usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "\n", options2, 117, 1, "usage: ", false);
      helpFormatter4.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0");
      options0.addOption("", "usage: ", false, "(I5)");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "--", (String) null, options0, 101, 63, "]", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.printHelp("xwc_|h]", "xwc_|h]", options0, (String) null);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "xwc_|h]", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRg)", true);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer("Yu~J");
      helpFormatter0.printHelp(">", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "' contains an illegal character : '";
      helpFormatter0.getOptionComparator();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printHelp("-", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "cmdLineSyntax not provided", "arg", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 108, "]", "", options0, 0, 1456, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      int int0 = 6;
      StringWriter stringWriter0 = new StringWriter(13);
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      stringWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2316), options1, 0, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      mockPrintWriter0.printf("arg", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-933);
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'n';
      charArray0[2] = 'v';
      charArray0[3] = 'U';
      charArray0[4] = 'W';
      charArray0[5] = 'S';
      charArray0[6] = 'r';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2029, " ", "usage: ", (Options) null, 74, (-933), ",WJ5\"kWS}3CaSU", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("}$'+(#A");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.printHelp("~YWz4!+k#Cs;aYL`", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      options0.addOption("", "", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+kzH3,g7");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, " ", ".6F$C)9<|Qr=GBH", options0, 22, 1461, " ", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, "/LZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("]");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("0i[8", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter2.getLongOptSeparator();
      helpFormatter3.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0NS(@Ds?-71(_8J7I ");
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", (Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      helpFormatter4.printHelp(printWriter0, 74, "--", "arg", options1, 74, 3, "--", false);
      helpFormatter4.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, (String) null);
      helpFormatter0.printHelp("/LZ", "]", options1, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FKhP");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedList0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "' was specified but an option from this group ", "", options0, 185, 185, "[ARG...]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter2.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l*uzAKf`");
      mockPrintWriter0.printf("ML", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", " ", options1, 3, 74, "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("]");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("0i[8", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter2.getLongOptSeparator();
      helpFormatter3.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0NS(@Ds?-71(_8J7I ");
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", (Object[]) null);
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      helpFormatter4.printHelp(printWriter0, 74, "--", "arg", options1, 74, 3, "--", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("arg", false, "");
      MockFile mockFile0 = new MockFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1846, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      helpFormatter1.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Xb\"4IH$Q,(_-", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("QvRlB4a,QK<O9", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 107, " ", "Od[*u/", options1, 3, 1, " ", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 21;
      StringBuffer stringBuffer1 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, ")6,KYF|G3O!&)f$", (String) null, (Options) null, "%eK{TuX@K&yf3-80@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp(89, "org.apache.commons.cli.Options", ")6,KYF|G3O!)f$", options0, ")6,KYF|G3O!)f$", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      helpFormatter0.setWidth((-483));
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "&La\\N{,)H";
      helpFormatter1.setLongOptSeparator("&LaN{,)H");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 36, (String) null, options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.helpOptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = (-1498);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "[MKz", "[MKz", options0, 2048, 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options0, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      options0.getMatchingOptions("");
      helpFormatter0.defaultLeftPad = 13;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 1429);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1709, 1709, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 36;
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 36, "*8\f8$Wuq*f[-_", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = (-1498);
      String string0 = "rxz";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 9, "arg", "arg", options0, 1732, (-1498), "rxz");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "*8\\f8$Wuq*f[-_";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 36, "*8\f8$Wuq*f[-_", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "*8\f8$Wuq*f[-_", "~CdhS_YB1O.3CM-5M", options0, (-894), 0, "aQ_cuyX<J]D");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      String string0 = "]";
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      int int0 = 1;
      int int1 = 3601;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "\n", "\n", options0, 1, 3601, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      options0.hasShortOption("cmdLineSyntax not provided");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 59, (-1126));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(8);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("\n", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 99, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption((String) null, "", false, "\u0002(-:77Gu:m9)(L7;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options1, true);
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter$1", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", options0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "RqwO+](", options0);
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter1.getLongOptSeparator();
      helpFormatter2.printHelp("\n", "", options0, "Wk");
      helpFormatter1.rtrim((String) null);
      helpFormatter2.printHelp(74, "-", "(%?G7U6-ixL", options0, ">SSnT{ik2lHJL9$L~g");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-936), (Options) null, 9, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("t||&,|)G:3:yHVul_");
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("t||&,|)G:3:yHVul_");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(">", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.printHelp("t||&,|)G:3:yHVul_", ":{7", options0, "W");
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter3.printHelp(3, "-", "", options1, "H");
      helpFormatter3.printHelp(" ", "]", options0, ":{7", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("}$'+(#A");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) helpFormatter0);
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-3188));
      String string0 = "";
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      options0.getMatchingOptions("");
      options1.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("t||&,|)G:3:yHVul_");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp("org.apache.commons.cli.OptionValidator", options1, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3931, "arg", options1);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.printHelp("1$XwZXM~FbIZhH,G", " ", options1, "org.apache.commons.cli.Options");
      String string0 = "]";
      helpFormatter3.rtrim("-");
      String string1 = "+";
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(18, "{SqHP", "{SqHP", (Options) null, "z?l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) helpFormatter0);
      Locale locale0 = Locale.FRANCE;
      String string0 = "]";
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("\n", options1);
      String string1 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1429, options1, 44, 11);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 63, options0, (-303), 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", options0, false);
      Comparator<Object> comparator0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "}Vi2d(sCHQ^", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1529), "<", "{SqHP", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MQGmRvz<lgARi'";
      objectArray0[1] = (Object) "t||&,|)G:3:yHVul_";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "t||&,|)G:3:yHVul_";
      objectArray0[4] = (Object) "0i[8";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "MQGmRvz<lgARi'", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 9, 9, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-5451), (Options) null, 1873, 1873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      String string0 = "-";
      Options options2 = options1.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setWidth((-557));
      helpFormatter0.setWidth((-557));
      helpFormatter0.getNewLine();
      String string0 = "_(!g";
      helpFormatter0.setArgName("_(!g");
      Options options0 = new Options();
      String string1 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("|kO)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      options1.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      options0.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options0, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      // Undeclared exception!
      helpFormatter0.printHelp(" ", options0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t||&,|)G:3:yHVul_";
      helpFormatter0.setOptPrefix("t||&,|)G:3:yHVul_");
      Options options0 = new Options();
      helpFormatter0.printHelp("t||&,|)G:3:yHVul_", options0, false);
      String string1 = "";
      options0.getOption("");
      int int0 = 1;
      helpFormatter0.createPadding(1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = new Options();
      helpFormatter0.printHelp("t||&,|)G:3:yHVul_", options1, true);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator(" ");
      String string2 = "X";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int1 = 2074;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2074, 1, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1, options1, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 1917, 117, "\n");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      options0.getOptions();
      options0.getOptions();
      options0.addOption("arg", false, "");
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("");
      Options options1 = options0.addOption("", ", ", false, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "_E%xAo@h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, "[J&Tw/,^;eiWoo", true, "--");
      helpFormatter0.printHelp("_E%xAo@h", options1, true);
      options0.getOption((String) null);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("", true, ":c-*:L");
      options1.toString();
      helpFormatter0.setWidth(0);
      options1.hasShortOption(":c-*:L");
      StringBuffer stringBuffer0 = new StringBuffer(":c-*:L");
      options0.getMatchingOptions("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Options options2 = options0.addOption("NO_ARGS_ALLOWED", "-", true, "5S*[S:Q");
      helpFormatter0.renderOptions(stringBuffer0, 1429, options2, 13, 1429);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "o? A*y", true, "c_|bg");
      helpFormatter0.printHelp("c_|bg", options1, true);
      String string0 = "";
      options1.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Options options1 = options0.addOption("", "org.apache.commons.cli.Option", false, "");
      helpFormatter0.printHelp("usage: ", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding((-2518));
      helpFormatter1.getOptionComparator();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "usage: ", options1, "[ARG...]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "o? A*y", true, "c_|bg");
      helpFormatter0.printHelp("c_|bg", options1, true);
      options1.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "", true, "_E%xAo@h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultWidth = (-1);
      options1.addOption((String) null, "[J&Tw/,^;eiWoo", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_E%xAo@h", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println();
      mockPrintWriter0.println((Object) helpFormatter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "]";
      mockPrintWriter0.printf(locale0, "]", objectArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.printf(locale0, "T?j6.F1K(ESSl/PVNj", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.print((Object) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 9, 1153, "bsglt-V<");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      boolean boolean0 = false;
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("--", "", options1, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      int int0 = (-608);
      String string2 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("cmdLineSyntax not provided", "~6YjTWHR[", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(1680, "U3y", "U3y", options0, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setSyntaxPrefix(" [ARG]");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, ")6,KYuF|G3O!)f$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayCountry(locale1);
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintStream0.flush();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1429, options1, 64, (-608));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      String string0 = "`v.LV39~Vkh^h";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println();
      mockPrintWriter0.println((Object) helpFormatter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1893, "");
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding((-2281));
      StringBuffer stringBuffer0 = new StringBuffer(63);
      stringBuffer0.append((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 610, 1414, "' was specified but an option from this group ");
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setArgName("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("bsglt-V<", 610, (-454));
      helpFormatter1.setNewLine("");
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("19lXmwpv@<#[e(", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = null;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      // Undeclared exception!
      helpFormatter0.printHelp("VGpc$e9", (Options) null, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 1;
      String string0 = "e }";
      Options options0 = new Options();
      boolean boolean0 = false;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "e }", "e }", options1, "e }");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*U8^@#.o\\JrcDu";
      String string1 = "";
      Options options0 = new Options();
      options0.getOptions();
      Collection collection0 = options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      options1.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = new Locale("[");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) collection0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintStream0.println('5');
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Y'2s9o.", objectArray0);
      int int0 = 44;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 44, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "0i[8";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "0i[8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3, 32, "");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(1461);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 1, 1497);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 592;
      helpFormatter0.defaultLeftPad = 592;
      int int1 = 32;
      helpFormatter0.defaultDescPad = 592;
      helpFormatter0.setLeftPadding(32);
      PrintWriter printWriter0 = null;
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 592, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("t||&,|)G:3:yHVul_");
      Options options0 = new Options();
      helpFormatter0.printHelp("t||&,|)G:3:yHVul_", options0, false);
      options0.getOption("");
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(" ", string0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      Options options1 = new Options();
      helpFormatter0.printHelp("t||&,|)G:3:yHVul_", options1, true);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("X", options0);
      helpFormatter0.printHelp("zI6jB`C88\"q?zYko{,", "rRJEW", options1, "NLC");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 1463, (-1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 41;
      StringWriter stringWriter0 = new StringWriter(41);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 41, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      String string0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options3 = options2.addOption("", "", false, (String) null);
      // Undeclared exception!
      try { 
        options3.addOption("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 0;
      mockPrintWriter0.println();
      mockPrintWriter0.println((Object) helpFormatter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "]";
      mockPrintWriter0.printf(locale0, "]", objectArray0);
      String string0 = "bsglt-V<";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "bsglt-V<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<CA^v5mS_CJr_|)+w0q";
      helpFormatter0.rtrim("<CA^v5mS_CJr_|)+w0q");
      int int0 = (-1442);
      String string1 = "9|I";
      Options options0 = new Options();
      String string2 = "5viNS";
      options0.addOption("", "<CA^v5mS_CJr_|)+w0q", false, "5viNS");
      Option option0 = null;
      try {
        option0 = new Option("cmdLineSyntax not provided", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "A CloneNotSupportedException was thrown: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      int int0 = 3238;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3238, 0, "!2Iq!xi\"=qYb.y(");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.getBuffer();
      int int1 = 31;
      Options options0 = new Options();
      String string1 = "W%$a";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "W%$a", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("<!Ps%/g}d#'EH%l_w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string0 = "TEY,f$6QHoh9PE";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "TEY,f$6QHoh9PE", (Options) null, (-9), (-1036), "TEY,f$6QHoh9PE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      options1.addOption("", false, "-");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "J=6u(@zgb>.4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = ")6,KYuF|G3O!)f$";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, " ");
      Options options3 = options2.addOption((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, " ", (String) null, options3, 99, (-463), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", (Options) null, 0, 9, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 592;
      helpFormatter0.defaultLeftPad = 592;
      int int1 = 32;
      helpFormatter0.defaultDescPad = 592;
      helpFormatter0.setLeftPadding(32);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "`v.LV39~Vkh^h");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      Options options1 = options0.addOption("", "~g$oRj'TjLRH!", false, "-");
      helpFormatter0.printHelp("~g$oRj'TjLRH!", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter1.getOptionComparator();
      String string0 = helpFormatter1.getLongOptSeparator();
      assertEquals(" ", string0);
      
      helpFormatter0.printHelp("@N>y@\"#_|*,1<", "   ", options1, "~g$oRj'TjLRH!");
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "usage: ", options1, "");
      helpFormatter0.setWidth(0);
      String string0 = "cmdLineSyntax not provided";
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      int int0 = (-608);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-608), options1, 0, 1429);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "$&aduv=PISPQ~*a+";
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.printHelp(" Y5W['-w(6s", options0, true);
      options0.toString();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", (String) null, false, "");
      helpFormatter0.printHelp(" | ", options1, false);
      helpFormatter0.setDescPadding(2486);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2306));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("t||&,|)G:3:yHVul_");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      int int0 = 1;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "-", 1461, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("*U8^@#.oJrcDu", "", options1, "");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      options0.hasShortOption("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.defaultLeftPad = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-608), options1, 0, 1429);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "!5\"a9c6hDg@$Hl7C3";
      String string1 = "F!3ooW)H0LW\\<_!Pe ";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 2058;
      String string0 = "&Fw";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("/S}Q", "-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/S}Q' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "$&aduv=PISPQ~*a+";
      Options options0 = new Options();
      options0.hasLongOption(" ");
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", (String) null, false, "");
      helpFormatter0.printHelp(" | ", options1, false);
      helpFormatter0.setDescPadding(2486);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2306));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1581);
      helpFormatter0.setArgName("oD>)r3G60k;6{X&U");
      String string0 = "=%9,7";
      Options options0 = new Options();
      options0.addOption("", true, "-");
      Option option0 = null;
      try {
        option0 = new Option("-", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2973, "Zs&6d~Eiiu.:?``o");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0i[8", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 3, 3, "0i[8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultLongOptPrefix = "--";
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(391);
      String string0 = ">kut";
      Options options0 = new Options();
      String string1 = "[";
      options0.getMatchingOptions("[");
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\"-j`");
      helpFormatter0.getArgName();
      String string0 = "ZJ0/z";
      helpFormatter0.setArgName("ZJ0/z");
      MockFile mockFile0 = new MockFile("^Jwvpoy}j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\"-j`", objectArray0);
      mockFile0.setWritable(false);
      helpFormatter0.printWrapped(printWriter0, 501, "r\"g_l8CPR-u");
      helpFormatter0.setArgName("b4jeWs^}C4a,ApVQKw");
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) helpFormatter0);
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.setWidth(11);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("_(!g");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.printHelp("=u4ob#Aic`", (String) null, options0, "");
      assertEquals(11, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-596);
      String string0 = "A..)|1>E8&7";
      helpFormatter0.defaultSyntaxPrefix = "A..)|1>E8&7";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "<";
      Options options0 = new Options();
      String string2 = "";
      Options options1 = options0.addOption("", true, "--");
      // Undeclared exception!
      try { 
        options1.addOption("`c&0+FD(j", "`c&0+FD(j", false, "kax[XS#]lMX>kBB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`c&0+FD(j' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = 1;
      int int0 = 3475;
      helpFormatter0.findWrapPos("-", 3475, 3475);
      int int1 = 51;
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "J6*0XA";
      Options options0 = new Options();
      String string1 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("4)5Pwz~f", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4)5Pwz~f' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 1;
      String string0 = "e }";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "e }");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "j'M*+gk3PTK;h9Ny";
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "^(&,QG)W";
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("12B*|A;h!+hTP]u61c", "j'M*+gk3PTK;h9Ny");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '12B*|A;h!+hTP]u61c' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
