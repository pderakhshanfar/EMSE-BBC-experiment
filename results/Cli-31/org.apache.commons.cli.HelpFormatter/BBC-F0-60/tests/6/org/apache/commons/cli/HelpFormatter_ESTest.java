/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:37:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.findWrapPos("X;9F", 110, 110);
      helpFormatter0.findWrapPos("tM;K*w%?,+1", 2664, 1036);
      helpFormatter0.getLongOptSeparator();
      String string0 = "J2Zj";
      MockFile mockFile0 = new MockFile("arg", "J2Zj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 74;
      mockPrintWriter0.println((double) 2664);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, (Options) null, 2664, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = 6;
      Options options0 = new Options();
      options0.hasLongOption("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      options0.hasShortOption("N");
      // Undeclared exception!
      try { 
        options0.addOption("\n", "", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "--", true, "arg");
      helpFormatter0.printHelp(74, "arg", "arg", options1, "QWH~HN9zMi.v]<$47|", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ]");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 0, 74);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1699;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp(74, " ", " ", options1, " ", true);
      helpFormatter0.rtrim(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.printHelp(8, " ] [ long ", "", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.createPadding(1699);
      // Undeclared exception!
      helpFormatter0.createPadding(1699);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "<:j'P2S3?R;8BV4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      option0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption("usage: ");
      helpFormatter0.printHelp(18, "-cy^%kr!xv//_O~", "--", options1, "--", true);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options2.hasOption("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]\"*$}+{XO({~\"4.JQ>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = 48;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "usage: ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.rtrim("t9xm]wh.~nlx");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.insert(1, (Object) null);
      Options options0 = new Options();
      options0.addOption("arg", "'3o ", false, "-");
      options0.getMatchingOptions("");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 4282, options0, 4282, 4282);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      CharBuffer.allocate(74);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 8, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringWriter stringWriter0 = new StringWriter(1723);
          StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 1, 1);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "0cG!t^4nk'>^If^\"lL", "E /o`", options0, 0, 34, "0cG!t^4nk'>^If^\"lL");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = "fh";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("3");
      helpFormatter0.setDescPadding(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[7];
      helpFormatter0.getDescPadding();
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      helpFormatter0.setSyntaxPrefix("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "cmdLineSyntax not provided");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "org.apache.commons.cli.HelpFormatter", "dQ)", options0, 481, (-2), "|7GT)_=JJPU'z?r;$", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".v{ay> 1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(100, ".v{ay> 1", ".v{ay> 1", (Options) null, "VSk\"4fc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1369);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "";
      int int0 = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", "a9", true, "");
      Options options1 = options0.addOption(option0);
      option0.setOptionalArg(true);
      options1.hasOption(" ");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("a9", "a9", true, "3mt!\"&");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options3 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      optionGroup3.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(532, "a9", "[@3(jLg8~Fdf;u*qa$M", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      helpFormatter1.printHelp(1483, "c.>RU(O6L/g/", "'", options3, "a9", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "/)$mTA|M !";
      int int0 = 89;
      String string1 = " ] [ lo{g ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "if%Q]F[5bWs", "org.apache.commons.cli.HelpFormatter", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.printf("line.separator", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "u|2vd b", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.printHelp(2137, "d*~X**w$", "9$oC^O'b!`", options0, "", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1597, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uMa";
      helpFormatter0.createPadding(2773);
      String string1 = "pVQWiT";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pVQWiT", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 3;
      mockPrintWriter0.println((double) 74);
      String string0 = "$#-q|#%9N(:N";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 53, "$#-q|#%9N(:N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(71, "3m\"93V(6G", "3m\"93V(6G", options0, "caj:?jEw", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 71, options0, 71, 31);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", true, "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOption((String) null, " ", true, "");
      helpFormatter1.printHelp(1227, "usage: ", "8M'Arxh\"cT_d)I*7q[", options1, "8M'Arxh\"cT_d)I*7q[", true);
      helpFormatter1.printHelp(44, "The option '", "usage: ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Fl|tJ-abm@^fz", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 1, options1, 66, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-603);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-603), "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-313));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options0.addOption("b", "", true, "arg");
      helpFormatter1.printHelp(74, "-", "8M'Arxh\"cT_d)I*7q[", options3, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ", ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "VRC3xyifB$o)2Jj3R", ".PYtxEKI*WLaK v_>", options0, 1618, 34, "", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "h9");
      options0.addOption(option0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}re&iAW4");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5065, "Nf27b6=a", options1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "arg");
      options0.addOption(option0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOption("b", "", true, "arg");
      helpFormatter1.printHelp(74, "-", "8M'Arxh\"cT_d)I*7q[", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos(", ", (-4499), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+Uw*~Kf0^n9TrijQ(O");
      helpFormatter0.defaultLeftPad = (-751);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3637, ">", ">", options0, 11, 74, "hB1", true);
      helpFormatter0.getArgName();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3637, "hB1", "", options1, ">", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 17, "arg", "Fl^5+)rAEv?q", options0, 17, 16, "Fl^5+)rAEv?q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("80m");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 57, "80m", (String) null, options0, 230, 66, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1166), 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(49, "Nf27b6=a", "", options2, "", true);
      helpFormatter0.findWrapPos("Nf27b6=a", 32, 32);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 57, "-", "", options0, 66, 34, (String) null, true);
      helpFormatter0.findWrapPos("", 57, 66);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4174, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp(49, "Nf27b6=a", "", options1, "", true);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1668), options0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 66, "arg", " oH6Kv&q5TGYj!9q9o", options0, 66, 25, "X{x?jNw", true);
      helpFormatter0.findWrapPos("X{x?jNw", 57, 3572);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8ePuX8$:r84", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "2<gJ&9>(R*wYq/g-", "", options0, 1005, 74, (String) null, true);
      helpFormatter0.findWrapPos("", 74, (-1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ");
      optionGroup0.addOption(option0);
      options0.addOption("", "", true, "usage: ");
      PrintWriter printWriter0 = null;
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 648, "!+G! YUtgY>aE=<&/_C", "54_fj9a/bA9AhJ.r6:", options1, (-3592), (-1), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, (String) null, options0, 1, 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x\"]Pl/YbhD]T}'g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "arg");
      String string0 = "-";
      Option option0 = new Option((String) null, "-");
      options1.addOption(option0);
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "B![2", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-532), (-532));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(186, "sk&tZl", "r^}O?`'W'VNtIz :m", options1, "]WB$B*G4W5gU", true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 186, options0, 186, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultDescPad = 773;
      mockPrintWriter0.println((double) 74);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 24, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x\"]Pl/YbhD]T}'g");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption((String) null, false, "arg");
      Option option0 = new Option((String) null, "-");
      Options options2 = options1.addOption(option0);
      String string0 = "";
      options2.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "", options2, (-1), (-2), "org.apache.commons.cli.AlreadySelectedException", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1);
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      int int1 = (-578);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), " ", "", options0, (-578), (-578), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1);
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      int int1 = (-578);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), " ", "", options0, (-578), (-578), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      String string1 = "[jfPDFX";
      String string2 = ".2";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a%a", ")(WzbBjbV0Ip>FMU", (Options) null, ".2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("_W$$mm<@&|_w'NlIob");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.renderOptions(stringBuffer0, 282, options0, 1468, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", " trmSHrJ)bS", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(58);
      Options options1 = new Options();
      helpFormatter0.printHelp(58, "8B1^$4J;)4", "91nDgk1!@( 8w[>{", options1, "wd:}`l", true);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "91nDgk1!@( 8w[>{");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2671), "w\\xDb[h=TtV9o*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      Option option0 = new Option((String) null, true, ";{v~-owW)?457");
      Options options2 = options1.addOption(option0);
      options2.getOptions();
      options1.getOptionGroups();
      String string0 = "PV5*9S";
      int int0 = (-60);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-60), ";{v~-owW)?457", "usage: ", options1, "5ptpWpE/2i*iE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("E,v+ch;$");
      helpFormatter0.defaultLongOptPrefix = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = (-3282);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = (-1432);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(24, 5430L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 24
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-11);
      helpFormatter0.defaultSyntaxPrefix = "";
      byteArray0[8] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (int) (byte)115, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x\"]Pl/YbhD]T}'g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "arg");
      Option option0 = new Option((String) null, "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "x\"]Pl/YbhD]T}'g", "x\"]Pl/YbhD]T}'g", options3, (-1), 520, " ]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 3, (-367));
      helpFormatter1.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 44, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      String string0 = ">oW:jPR*D";
      helpFormatter0.findWrapPos(">oW:jPR*D", 0, 44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2381), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1);
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", "", false, (String) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (String) null, options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option((String) null, "\"9'J");
      options0.addOption(option0);
      Option option1 = new Option("", "", false, (String) null);
      options0.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (String) null, options0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", false, "[eq}qTuFp=PTcB");
      options0.addOption(option0);
      helpFormatter0.setDescPadding((-1106));
      helpFormatter0.findWrapPos("", 3, (-1));
      helpFormatter0.setArgName("}Y_kx");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      options1.getOptions();
      options1.getOptionGroups();
      helpFormatter0.printHelp(12, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "PV5*9S", options1, "j@a~6X_@v5J");
      helpFormatter0.printHelp("Ac~S{a:By jMkK(%L", "PV5*9S", options1, "PV5*9S");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "line.separator";
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[3] = (Object) options0;
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("Ac~S{a:By jMkK(%L", options1, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("arg", (String) null, options0, "", false);
      options0.hasLongOption("o*K9W:n");
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, (-2462), options0, 1427, 1427);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options0, "r.PF(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "Uhs4'dnNQ|0(FJr-O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasLongOption("Uhs4'dnNQ|0(FJr-O");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, " ", "[ option: ", options0, 44, 44, "K'");
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.setDescPadding((-2046));
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(260, "N_Rg e", "", options0, "s>b]a6/", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "N_Rg e");
      helpFormatter0.renderWrappedText(stringBuffer0, 260, 260, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.rtrim("");
      options0.hasLongOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "K";
      int int0 = 3777;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 260, "", "s>b]a6/", options0, 3777, 260, "K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      Options options0 = new Options();
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("<");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "c:6>LBfSG}G yqE_Fj");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3307));
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options1 = options0.addOption("", (String) null, true, "nMJv^;#-94kHg+@");
      options0.getMatchingOptions(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(107, "'T", "", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string1 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 107, 107, "");
      helpFormatter0.rtrim("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-226), "cM", "91nDgk1!@( 8wf^[>{?", options1, (-3135), 107, "7Jd-_sJ=B32fUOR]a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      Options options2 = options1.addOption("_", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options3.addOption("usage: ", "usage:", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 111, 111);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, ",4@P7", "G@|@# Eh|", (Options) null, ",4@P7", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      options0.getOptionGroups();
      boolean boolean0 = true;
      String string1 = "nMJv^;#-94kHg+@";
      Options options1 = options0.addOption("", (String) null, true, "nMJv^;#-94kHg+@");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 103;
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "o1GbSat$", (Options) null, "o1GbSat$", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      int int1 = 0;
      String string0 = "";
      MockFile mockFile0 = new MockFile("91nDgk1!@( 8wf^[>{?", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1303, "ZCeOVfh");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "91nDgk1!@( 8wf^[>{?", "91nDgk1!@( 8wf^[>{?", options0, "T", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "T+V[%y)\"-,ol>");
      options0.addOption(option0);
      helpFormatter0.printHelp("T+V[%y)\"-,ol>", "6H{Rq;IxG|q^F[PB", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.setNewLine("[");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      Options options1 = null;
      boolean boolean0 = true;
      int int0 = 38;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(38, "_v%bp", "_v%bp", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", "", false, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("<", (String) null, options0, "", false);
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "7zA;iTwWJA4i|gkwG}F", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, (String) null);
      Options options3 = options2.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.helpOptions();
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "arg", (String) null, options4, "L`fGtAV;cb21sZ-0M", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLeftPad = 117;
      Options options1 = options0.addOption("$", (String) null, true, "nMJv^;#-94kHg+@");
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.printHelp("?F<(+m:l~oE", options0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator("L pyk");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setNewLine("5* N^9M=}6=!v");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options1 = new Options();
      options0.addOption("VYrCF", "-", false, "usage: ");
      helpFormatter0.printHelp(1918, "((DKcTYTX9dF-fE^", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("+2i:^jr_c3sgP@kf", " ]", options0, "--", true);
      helpFormatter1.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", "", true, (String) null);
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp(10, "C5fx7Fw|", "", options1, "C5fx7Fw|", true);
      Option option1 = new Option((String) null, "", true, "usage: ");
      Options options2 = options1.addOption(option1);
      helpFormatter0.printHelp(64, "QU[bok,J96:0CX", (String) null, options2, "J9T']p", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      options0.getOptions();
      options1.getOptionGroups();
      helpFormatter0.printHelp(12, "line.separator", "j@a~6X_@v5J", options1, "j@a~6X_@v5J");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("usage: ", "", options1, "line.separator");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aWWCT8&o$`");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-123), "JO0>]P`4A0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", (String) null, true, "nMJv^;#-94kHg+@");
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("o1GbSat$", "--", options1, "XDM;\"u#&i8Q$h3@-kS", true);
      helpFormatter0.setNewLine("[");
      helpFormatter0.printHelp(2186, "Rpa}liuX", "&'aP=DS{(TIk$~Sb=", options0, "[", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", (String) null, true, "nMJv^;#-94kHg+@");
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 319, options1, 760, 891);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3456;
      helpFormatter0.defaultWidth = 3456;
      String string0 = "";
      Options options0 = new Options();
      options0.hasShortOption("--");
      String string1 = "cmdLineSyntax not provided";
      helpFormatter0.defaultOptPrefix = "cmdLineSyntax not provided";
      helpFormatter0.setLongOptPrefix("");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      String string2 = "";
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 31;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      options1.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("--");
      String string1 = " [ARG]";
      String string2 = "";
      options1.getOption("");
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("[");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3421, "[", (String) null, options0, (-1), (-917), "<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((long) 3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 393, "x\"yd+");
      String string0 = "ytG";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", false, "[eq}qTuFp=PTcB");
      options0.addOption(option0);
      helpFormatter0.setDescPadding((-1106));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 103;
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 319, (Options) null, 319, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "91nDgk1!@( 8wf^[>{?", "91nDgk1!@( 8wf^[>{?", options0, "'T", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 44, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      StringBuffer stringBuffer0 = new StringBuffer(")=[KV");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 45, 45, " ");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 45, 45, ")=[KV");
      helpFormatter0.rtrim("line.separator");
      options0.hasLongOption("p,3>bZ$:(ZT5m!6=,wt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, "line.separator", " ", options0, 45, 65, "s0PyY2*ZK$huP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.setDescPadding(3);
      helpFormatter1.renderWrappedText(stringBuffer2, 65, 119, "SW`rlreF0w.+x");
      helpFormatter1.setLongOptSeparator("7sken0[:Z4'lo");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter2.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "usage: ";
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "Uhs4'dnNQ|0(FJr-O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = null;
      Options options0 = new Options();
      options0.hasLongOption("Uhs4'dnNQ|0(FJr-O");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, (String) null, "[ option: ", options0, 44, 44, "K'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", ")raHn-", false, "6bML4G6?5Bmrz-eA&<@");
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = ' ';
      charArray0[3] = 'z';
      stringBuffer0.append(charArray0);
      Option option0 = new Option("arg", "-", true, "Tkw%Rgu]4jE]");
      Options options2 = options1.addOption(option0);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 676, options2, (-556), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 44;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 44, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Integer>();
      Option option0 = new Option("", "", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp(63, "h^<~B", "", options1, "uhzUI`O2q;Dn4", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      int int0 = 0;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      String string1 = "Mf~a=IL|0By";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Mf~a=IL|0By", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      String string1 = null;
      Options options1 = options0.addOption("", (String) null, true, "nMJv^;#-94kHg+@");
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = (-671);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-671), options1, (-671), (-671));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      int int1 = 0;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "91nDgk1!@( 8wf^[>{?", "91nDgk1!@( 8wf^[>{?", options0, "T", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", false, "[eq}qTuFp=PTcB");
      options0.addOption(option0);
      helpFormatter0.printHelp("<.MG/&/MZX5p}ns}6", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.setNewLine("<.MG/&/MZX5p}ns}6");
      assertEquals("<.MG/&/MZX5p}ns}6", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = "fh";
      helpFormatter0.setNewLine("");
      String string1 = "3";
      helpFormatter0.setSyntaxPrefix("3");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "cmdLineSyntax not provided";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "cmdLineSyntax not provided");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "n'-,8wU;.";
      helpFormatter0.setOptPrefix("n'-,8wU;.");
      String string1 = "qS}-./3";
      helpFormatter0.defaultWidth = 0;
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "n'-,8wU;.";
      String string2 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("8@E^uzl{mal3C\"L", "uHwC>U%zP<1Zu=T", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8@E^uzl{mal3C\"L' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "Xbp9r4S]Y68%9[)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1544);
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Option";
      helpFormatter0.defaultLeftPad = (-1544);
      helpFormatter0.setWidth((-1544));
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding((-1544));
      helpFormatter0.setWidth((-1544));
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      String string0 = "y:^. ^W<=V";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", false, "*K |`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-609);
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("fiZ!h~,%eM+", "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Q~hU]/l#-*vwq");
      helpFormatter0.getOptPrefix();
      String string0 = "[ option: ";
      String string1 = "*";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "org.apache.commons.cli.Option", false, "Q~hU]/l#-*vwq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B=!(]pN~");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 10, "B=!(]pN~", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("W");
      helpFormatter0.getLeftPadding();
      String string0 = ":'7Z\\tzkT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":'7Z\tzkT", true);
      helpFormatter0.setDescPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 32;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, ":'7Z\tzkT");
      String string1 = "98`?_cG";
      mockFileOutputStream0.flush();
      mockPrintWriter0.flush();
      Locale locale0 = Locale.forLanguageTag("-W7yAG@_3mqRgXP75N");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "98`?_cG";
      mockPrintWriter0.printf(locale0, "5-t\"s@OA)}c|", objectArray0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "W4]EY`Vm4U!$gRb";
      Options options0 = new Options();
      int int1 = (-1619);
      helpFormatter0.defaultWidth = (-1619);
      String string1 = "/dc|ra$`zdxlOR^Mm6";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("e_EWto<.", "/dc|ra$`zdxlOR^Mm6", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'e_EWto<.' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      optionGroup0.toString();
      String string2 = "z^o";
      Option option0 = new Option("", false, "z^o");
      optionGroup0.addOption(option0);
      String string3 = "Ty2gQ>FlZHL";
      StringBuffer stringBuffer0 = new StringBuffer("Ty2gQ>FlZHL");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "z^o");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 31;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options1.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("--");
      String string1 = " [ARG]";
      String string2 = "";
      options1.getOption("");
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "gLF$SV/M/KE~";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2545), "gLF$SV/M/KE~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-563));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 4612;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1940;
      helpFormatter0.createPadding(1940);
      String string0 = helpFormatter0.createPadding(2421);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(string0);
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("{OoN>", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{OoN>' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
