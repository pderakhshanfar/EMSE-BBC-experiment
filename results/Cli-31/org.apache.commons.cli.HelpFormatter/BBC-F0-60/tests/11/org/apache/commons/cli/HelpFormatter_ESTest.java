/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:37:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "`v'u@/ *";
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter1.setSyntaxPrefix(" ");
      helpFormatter0.setLeftPadding((-766));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "usage: ", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("arg", "-", options1, "arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "");
      int int0 = 3563;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (-899), options1, 3563, 3563);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fAPri?jh2Sz+!2Sys");
      String string0 = "8Jm;[#Tc`hhri@P";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("8Jm;[#Tc`hhri@P");
      mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("N_d", "-");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal option name '");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", "", (Options) null, " ] [ long ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      String string0 = "h<*!K\\:";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h<*!K:", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(608, "Zs8\"|tyhk", "Zs8\"|tyhk", options0, "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(4164);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.OptionValidator");
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "@k";
      int int0 = (-1062);
      helpFormatter0.defaultDescPad = (-1062);
      String string1 = "";
      String string2 = "cmdLineSyntax not provided";
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "-");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "PK@@hq c):*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // PK@@hq c):*
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1918);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'", "'", options0, "p'sEX6");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("XMbe1me");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      String string0 = ";Vrb)N]|jv0s";
      helpFormatter0.defaultSyntaxPrefix = ";Vrb)N]|jv0s";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2102));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getDescPadding();
      int int0 = 58;
      helpFormatter0.defaultDescPad = 58;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.checkError();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "]");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("", 0, 3);
      helpFormatter0.getArgName();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P$2");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "-", options1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = null;
      helpFormatter0.setLeftPadding((-502));
      String string1 = "#HTMw`n\\R=C>H";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-502), "WNN*2eVT\u0006>R ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 23, 23, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("\n");
      options1.hasShortOption("rl@1XEEt->K1.");
      String string0 = "Q1,FASm&@M(bql";
      // Undeclared exception!
      helpFormatter1.printHelp(0, "usage: ", "Q1,FASm&@M(bql", options1, "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      options1.addOption("", "Zzw^N", true, "kI=n{:5*a8,T_z+\"^]");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter2.printHelp("\n", options1);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "UfzNiT)", "   ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.printHelp(3, "\n", "", options0, "S\"");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 737, 737);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";nLeH+S*G,HQV9", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.findWrapPos("BoGvY`=bQP", 62, 63);
      helpFormatter0.defaultNewLine = "-l";
      helpFormatter0.defaultDescPad = (-1509);
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      options0.getMatchingOptions("");
      options0.getOption("");
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 444, 28);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getWidth();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "-");
      helpFormatter1.printHelp("--", options1, true);
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      String string1 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--");
      option0.clone();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("-");
      helpFormatter1.printHelp(">", "-", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println('5');
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      helpFormatter2.printHelp(0, "-", "[-lGOR}u69q%Cf81", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(103);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('P');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 103, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 18;
      String string0 = "7']~>N|=9#Pr";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-704), "7']~>N|=9#Pr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options1 = options0.addOption("", (String) null, true, "W$Kd\"W*fujpZh,5Ve)");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", (String) null, options1, (-2), 13, "]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("4r/rNz&eA~GY");
      Options options0 = new Options();
      Options options1 = options0.addOption("YpM", false, "\n");
      Options options2 = options1.addOption((String) null, "\n", false, "arg");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 997, options2, 74, 997);
      helpFormatter0.renderWrappedText(stringBuffer1, 54, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-101);
      helpFormatter0.printHelp("--", options0);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1131);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Le", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      options0.addOption("", false, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options1 = new Options();
      int int0 = 1100;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.flush();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 0, 3);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 33, "!-C<2,6M03;&", "\n", options0, 74, 1, "\n", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.OptionValidator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-101);
      helpFormatter0.printHelp("--", options0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 44, ".;7K'Em6%@/K[", "8=|iD*?owFyw;a83n", options1, 1152, 64, "usage: ", true);
      helpFormatter0.findWrapPos("", 74, 64);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2612, "z8ecIycK;,fPN", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1476);
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("PIuS+f9{?XD[");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(";l'0rw", (-53), (-53));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "5HcWSaqePxp,jIi`VD", "", (Options) null, 9, 62, "ss4", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "Lyi", false, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "0Q~rtd>>KC`FQKg%", "2AZzg5?QN(+$", options1, "5ru<Yt/Hhg(Z]8P.", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-43);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 8, (-2), "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "arg", "--", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-1062);
      helpFormatter0.defaultDescPad = (-1062);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@k", "", options0, "P0>V2IBo{S.7H", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      String string0 = "0;j$@pUWf";
      int int0 = 7;
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X$C8");
      mockPrintWriter0.print(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2625), 29, "h_mmY%Nsn|}5KpVq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockFile mockFile0 = new MockFile("-", "tk!*m$V;$?");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1940), 64, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "f:`<YX5", options0, "f:`<YX5", true);
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 19, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setWidth(429);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1101));
      helpFormatter0.rtrim("1pu");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#zjSjm*e/wU");
      options0.getOption("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 47, "arg", "arg", options1, 1, 74, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.rtrim("=%&5]Fc d5U");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("4");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-136), options0, 1266, 1554);
      helpFormatter0.defaultOptPrefix = "8y1`3 MFF_]-";
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8y1`3 MFF_]-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "8y1`3 MFF_]-";
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("8y1`3 MFF_]-");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("8y1`3 MFF_]-", "");
      MockFile mockFile1 = new MockFile(mockFile0, "8y1`3 MFF_]-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 32, (Options) null, 32, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<cV u 6<W", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      mockFileOutputStream0.release();
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-2);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.release();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "-", (String) null, options2, 13, (int) (byte)60, "--");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<c> u 6<]", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      mockFileOutputStream0.release();
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)40;
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.release();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", false, "--");
      helpFormatter1.printHelp("LNxU", "usage: ", options0, "A CloneNotSupportedException was thrown: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LNxU");
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, (String) null, "", options0, 1, 499, "E-Eu(@D76>V}Ja(esE:", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1264, "--", "--", options0, 32, 34, "--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(1264, "' was specified but an option from this group ", (String) null, options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "8y1`3 MFF_]-";
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8y1`3 MFF_]-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 18, "7']~>N|=9#Pr", ".2{;[\">mOQl|l^|", (Options) null, 1, 32, "8y1`3 MFF_]-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      byte byte0 = (byte)60;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('j');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      String string0 = null;
      mockPrintWriter0.checkError();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1941), (String) null, (String) null, options0, (int) (byte) (-115), 2604, "\"Ud");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1268;
      String string0 = helpFormatter0.createPadding(1268);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.defaultArgName = "";
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = 'd';
      charArray0[4] = 'R';
      charArray0[5] = 'm';
      charArray0[6] = '\\';
      charArray0[7] = '&';
      mockPrintWriter0.println(charArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 1268, options0, 1268, 34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName(")");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1876, "", string0, (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options1 = options0.addOption("55g2", true, "0;j$@pUWf");
      helpFormatter0.printHelp("f:`<YX5", "0;j$@pUWf", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options1, 2691, 534);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gs;af!b*\"?BC", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "gs;af!b*\"?BC";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      printWriter0.println(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "[ARG...]", "gs;af!b*\"?BC", options0, (-1766), (-549), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "0;j$@pUWf");
      helpFormatter0.printHelp("0;j$@pUWf", "f:`<YX5", options0, "f:`<YX5", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('j');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 35, "f:`<YX5", "|U$o=qCL'", options0, (-1941), (-1941), "|U$o=qCL'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth(53);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(47);
      helpFormatter1.rtrim("1pu");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      options1.getOption("mA;?uMrA28Vh2");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "arg", " ", options1, 1, 47, "arg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = options0.addOption("", " ", false, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("   ", "", options1, "   ", false);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 47, "1pu", "_M&B}?f{R{5_9", options2, 850, 1, "^EI-AM[oe#pRWd", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      String string0 = "org.apache.commons.cli.Option";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 73, options0, 248, (-1522));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("55g2", true, "0;j$@pUWf");
      helpFormatter0.printHelp("f:`<YX5", "0;j$@pUWf", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockFile mockFile2 = new MockFile("arg");
      mockFile1.mkdir();
      helpFormatter0.createPadding(0);
      helpFormatter1.printHelp("-FfT*,_+2,RH", "--", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setOptPrefix("=<&qSjB7=c+\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getWidth();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "]", true, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("/AC", options1, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", "arg", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=<&qSjB7=c+\"";
      helpFormatter0.setOptPrefix("=<&qSjB7=c+\"");
      helpFormatter0.setWidth(693);
      helpFormatter0.setDescPadding(693);
      helpFormatter0.rtrim("=<&qSjB7=c+\"");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 32;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "]", "]", options1, (-1807), 693, "%|@Y", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getWidth();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "-");
      helpFormatter1.printHelp("--", options1, true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "   ");
      helpFormatter0.printHelp("--", " ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "0;j$@pUWf");
      helpFormatter0.printHelp("0;j$@pUWf", "f:`<YX5", options0, "f:`<YX5", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "0;j$@pUWf";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 84, "0;j$@pUWf");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-1231));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.rtrim("KN:d>0m>KON0GCi ]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", (String) null, true, "KN:d>0m>KON0GCi ]");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(4033, (String) null, "\n", options1, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth(53);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(47);
      helpFormatter1.rtrim("1pu");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      options1.getOption("mA;?uMrA28Vh2");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "arg", " ", options1, 1, 47, "arg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("", " ", false, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 95;
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal character : '", false, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      String string0 = "V4c)a)96DHwGMg0\\[";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-222), "org.apache.commons.cli.HelpFormatter$1", "V4c)a)96DHwGMg0[", options0, (-222), (-222), "V4c)a)96DHwGMg0[", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getWidth();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "-", options1, 53, 53, "%|@Y", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth(693);
      helpFormatter0.setDescPadding(693);
      helpFormatter0.rtrim("xW26M| I4A>$gC[");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 693, "org.apache.commons.cli.HelpFormatter$1", "--", options0, 693, 693, "%|@Y", false);
      Options options1 = options0.addOption("arg", "", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "'", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth(693);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(693);
      helpFormatter0.rtrim("xW26M| I4A>$gC[");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "'", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      options0.addOption("arg", false, "");
      options0.hasOption("0mQA,x4}.(jMKBX");
      helpFormatter0.printHelp("usage: ", "UR!OD<UC;&7Z*[CKN", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gs;af!b*\"?BC", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "gs;af!b*\"?BC";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 90, 97, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1844);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("% E(kTz&!1Jb", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) options0);
      helpFormatter0.renderWrappedText(stringBuffer1, 922, 922, "ZKp7");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "<";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<");
      mockFileOutputStream0.release();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(12, "arg", (String) null, options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getWidth();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(">", "--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gs;af!b*\"?BC", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      mockFileOutputStream0.release();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "gs;af!b*\"?BC";
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "gs;af!b*\"?BC", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ".";
      helpFormatter0.printHelp(76, ".", ".", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[ option: ", options0);
      helpFormatter0.getArgName();
      int int0 = 2946;
      helpFormatter0.findWrapPos("KAL", 2946, 2946);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      boolean boolean0 = false;
      try { 
        byteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "0;j$@pUWf");
      helpFormatter0.printHelp("0;j$@pUWf", "'Qvd&M2I'3i6x", options0, "f:`<YX5", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "The option '", options0, "Q/f4rbTrj;w;$|]P");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 555, "", "", options1, 0, 1569, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-1231));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.rtrim("\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", ">h", true, "");
      helpFormatter0.printHelp(693, "A CloneNotSupportedException was thrown: ", "arg", options1, "s@[:#H+)UlJp.k");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(605, "#HTMw`nR=C>H", "]", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      int int0 = 1248;
      String string1 = "";
      Options options0 = null;
      helpFormatter0.setArgName("4WNX_[D");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1248, "", "", (Options) null, "[ Options: [ short ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("i68/[");
      String string0 = null;
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("i68/[");
      File file0 = MockFile.createTempFile("i68/[", (String) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "f:`<YX5", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "Tx{/5k#AO;SZ2I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", ")");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) " ");
      Options options0 = new Options();
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'i';
      mockPrintWriter1.write(charArray0);
      int int0 = (-323);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 2232, options0, 2232, (-323));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((CharSequence) "usage: ");
      stringBuffer0.appendCodePoint(3);
      int int0 = 3;
      stringBuffer0.append((Object) helpFormatter0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "ZKp7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", options0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "]";
      Options options0 = null;
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%D~Qs", "]", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("!_ F8", "!_ F8", options0, "!_ F8", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1165);
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "--", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      helpFormatter0.setSyntaxPrefix("[ARG...]");
      helpFormatter0.setLongOptPrefix("[ARG...]");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuffer1.append((Object) stringBuffer0);
      int int0 = 1;
      int int1 = 63;
      Object[] objectArray0 = new Object[0];
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      int int0 = 1248;
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1248, "", "", (Options) null, "[ Options: [ short ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", " :: ", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options0, 44, 44);
      StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9R?");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringBuffer2;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) stringBuffer1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "w-g{^`P.^kZ'2", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2863), options1, 44, (-4167));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("3L0RN]@U{`w-}XB");
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      String string1 = "?4&QM/L#4\\4Iv2SUU30";
      helpFormatter0.defaultLongOptPrefix = "?4&QM/L#4\u0004Iv2SUU30";
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string2 = helpFormatter0.createPadding(3598);
      Options options0 = new Options();
      Option option0 = new Option("arg", "3L0RN]@U{`w-}XB");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string3 = "NO_ARGS_ALLOWED";
      helpFormatter0.setLongOptSeparator("?4&QM/L#4\u0004Iv2SUU30");
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", string2, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", string2, options2, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      options0.addOption("", false, "0;j$@pUWf");
      helpFormatter0.setLongOptSeparator("u0-#g0");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("0;j$@pUWf", "'Qvd&M2I'3i6x", options0, "f:`<YX5", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=Q}hz[EW_\"TB";
      helpFormatter0.setOptPrefix("=Q}hz[EW_\"TB");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = (-4001);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      String string1 = "{qaOQx/t|BJ9k3";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{qaOQx/t|BJ9k3", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ", false, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "|a\\IE2o*0;[7(/";
      try { 
        MockURI.URI("-", " ;", "/ZR=%&tg9=fsP;o%wbB", "|aIE2o*0;[7(/");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: -:// ;/ZR=%25&tg9=fsP;o%25wbB#%7CaIE2%7Fo*0;[7(/
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getWidth();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "-");
      helpFormatter1.printHelp("--", options1, true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "   ");
      MockFile mockFile2 = new MockFile("arg");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile2, "-3O^7nT");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -3O^7nT
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<cV u 6<W", false);
      mockFileOutputStream0.release();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "D9", "U;]i:eyH)", options1, "f}U_5C6l/#nTOf #J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "\n", "NK", options1, "S\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "z_ODvRDxhz|vfOL", options0, "HRLX.MjP-KMxztmZU:*", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options1 = options0.addOption("arg", ".2{;[\">mOQl|l^|", false, "0&SST;g^E/)QS");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      options0.getOption("F4 ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("   ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "}y(lbqOJ", "yHG-RH a#", options0, 64, (-1), "0&SST;g^E/)QS", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<cV u 6<W", false);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.hasShortOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "D9", "-", options0, "f}U_5C6l/#nTOf #J", false);
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      MockFile mockFile0 = new MockFile("SRw(]51j*K");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "--", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RR;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<cV u 6<W", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      mockFileOutputStream0.release();
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-2);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.release();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, false, "\n");
      helpFormatter1.printHelp("\n", "<Kt\"", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_9HDF?~.j6q%oTR/#";
      int int0 = 109;
      helpFormatter0.findWrapPos("_9HDF?~.j6q%oTR/#", 109, (-2));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "4v8z-Va");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4v8z-Va
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", "", options0, "   ", true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "0;j$@pUWf");
      helpFormatter0.printHelp("f:`<YX5", options1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gs;af!b*\"?BC", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "gs;af!b*\"?BC";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "[";
      Option option0 = new Option("arg", "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "gs;af!b*\"?BC", "", options1, 1, 63, "gs;af!b*\"?BC", false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      String string0 = "A CloneNotSupportedException was thrown: ";
      try { 
        MockURI.URI("A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 1: A CloneNotSupportedException was thrown: 
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2250));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'jiDw#Z0l~c");
      options0.getOption("-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, "sa`.)A<k'N?", "usage: ", options0, 1, 1520, (String) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      assertEquals((-2250), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth(693);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("xW26M| I4A>$gC[");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "", false, "-yqHaaWuF#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "'", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=<&qSjB7=c+\"";
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getSyntaxPrefix();
      int int0 = 693;
      helpFormatter0.setWidth(693);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "xW26M| I4A>$gC[";
      helpFormatter0.rtrim("xW26M| I4A>$gC[");
      Locale locale0 = Locale.ROOT;
      Object object0 = new Object();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"JrWvU0D2jw4\"?2y`M#", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options0 = new Options();
      int int1 = 26;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 3, options0, (-1231), 26);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(696, "[ARG...]", "[ARG...]", (Options) null, "[ARG...]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=<&qSjB7=c+\"";
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(693);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("xW26M| I4A>$gC[");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", true, "\n");
      helpFormatter0.printHelp(693, "s@[:#H+)UlJp.k", "", options2, "");
      assertEquals(693, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "^q&Nf~^qb3ErKK";
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("^q&Nf~^qb3ErKK", "4!-?Fu", false, "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^q&Nf~^qb3ErKK' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
