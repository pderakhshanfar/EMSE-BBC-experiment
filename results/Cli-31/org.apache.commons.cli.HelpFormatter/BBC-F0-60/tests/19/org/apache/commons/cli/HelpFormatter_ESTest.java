/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:42:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      helpFormatter0.defaultLeftPad = (-1616);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      String string0 = "";
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 6469, 6469);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-1736);
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "=hz9g~L`9ZAt,`", options0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("]", ">ojAKJoY9E.lY=:G2`_", options0, "]");
      helpFormatter0.setSyntaxPrefix(">ojAKJoY9E.lY=:G2`_");
      helpFormatter0.getNewLine();
      helpFormatter0.defaultDescPad = 58;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.findWrapPos("\n", 3142, (-2092));
      helpFormatter0.createPadding(3142);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 341, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.setOptPrefix("");
      optionGroup0.setRequired(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "-", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "arg", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((-1L));
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 2;
      helpFormatter0.printWrapped(printWriter0, 2, " ");
      helpFormatter0.getWidth();
      int int1 = (-2993);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2993), (Options) null, 74, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter1.printHelp("--", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 3, (Options) null, 74, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "J]Fznq8>1TG{M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup2);
      Options options2 = options1.addOption("arg", true, "--");
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&*9/o<\"", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2786));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "has already been selected: '", "has already been selected: '", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1700), 0, "}w33X8,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-8), "D^\"V] G");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.defaultDescPad = 115;
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      Options options0 = new Options();
      Option option0 = new Option("arg", ":Y1^hRL6+Mr.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, " ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.addOptionGroup(optionGroup0);
      options3.addOption("", "", false, "-");
      helpFormatter0.printHelp(2961, ":Y1^hRL6+Mr.", "", options3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      String string0 = "ROOD(SY##UC,'wq";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "ROOD(SY##UC,'wq", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("tOJXAPo.Ty)e\"O:YHV#");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "T:5T&{??.I-/$e[/`I", true, "h:`Rz0qk-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      options1.addOption("za0R", true, "z(c");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("PF}(P7j-R0o", options0, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "--", true, "usage: ");
      Option option2 = new Option("", true, "arg");
      optionGroup0.addOption(option2);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1320, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(540, "", "", options0, ",;{scN", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      int int0 = (-229);
      helpFormatter0.setDescPadding((-229));
      helpFormatter0.setArgName(")a<w[0&E7*b350VA");
      helpFormatter0.rtrim((String) null);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(74);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3695, 2);
      helpFormatter0.renderOptions(stringBuffer1, 2, options1, 3, 865);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print(70);
      mockPrintWriter0.append('I');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "org.apache.commons.cli.Util", ">j!!{TgwI12", options0, 10, 70, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      mockPrintWriter1.print(63);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1322, "lO-~,gybq", "+", options0, (-660), 865, "org.apache.commons.cli.OptionGroup", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "sl:'", options0, "\n");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      int int0 = helpFormatter1.defaultWidth;
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getNewLine();
      helpFormatter1.getNewLine();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, " ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.print(3);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      helpFormatter0.printHelp(printWriter0, 3708, ">j!!{TgwI12", (String) null, options1, 97, 3904, "+", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("--");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 1, 3);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1435, options1, 1435, 64);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1435, options1, (-2819), 12);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("--");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      options2.addOption(option0);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D^\"V] G";
      boolean boolean0 = false;
      String string1 = "%0";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%0", "%0", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append(' ');
      int int0 = 1320;
      Options options0 = new Options();
      mockPrintWriter0.println(0L);
      options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "arg";
      options0.getOptions();
      mockPrintWriter1.append('o');
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.printHelp(636, "43=P }T~]kFPI", "--", options0, "'", true);
      options0.getOptions();
      mockPrintWriter0.print(68);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 372, "N M8", "--", options0, 372, 1542, "[mOe7-0UKyH%", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1290, "arg", "", options1, " ", false);
      Options options2 = options1.addOption("arg", "6y", false, "w{c)I+");
      helpFormatter1.createPadding(44);
      Options options3 = options2.addOption((String) null, "-", false, "arg");
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options3, 74, 12, "/DY", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" VdnLN,{");
      Options options0 = new Options();
      helpFormatter0.printHelp(68, "[", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "K5brnw4_brn4GU=y508", false);
      Options options1 = options0.addOption((String) null, "K5brnw4_brn4GU=y508", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1383), "", (String) null, options1, (-1390), (-1574), "t//@YdIg>rcf2L%e1y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1290, "arg", "", options1, " ", false);
      Options options2 = options1.addOption("arg", "6y", false, "w{c)I+");
      Options options3 = options2.addOption((String) null, "-", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options3, 74, 12, "/DY", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      Options options0 = new Options();
      options0.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("bque*", options0);
      helpFormatter0.defaultOptPrefix = "]";
      Object object0 = new Object();
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "D5s\"M77!|Afv ";
      Object object1 = new Object();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("arg", 3310, (-806));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(18, "usage: ", ",;{scN", options0, ",;{scN", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(636, "org.apache.commons.cli.HelpFormatter$OptionComparator", "[mOe7-0UKyH%", options0, " VdnLN,{", false);
      Options options1 = options0.addOption((String) null, "[", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 68, "--", "", options1, 1129, 2, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, "--", options0, 65, (-823), "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("--");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "usage: ", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "LYxpu6M,-&h>|4h", "", options2, 9, 9, "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y)7;TAHFL!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "<?l}MdseTz", "Y)7;TAHFL!", options0, 3789, 74, "#");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("--");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options3 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", ".baEC5~&PN]:k|rcI", options1, "b'mg:A[Lh8'Yi8", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp("line.separator", "", options0, "arg", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 34, "-", "arg", options0, 1054, 74, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      int int1 = 3726;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1279, "D^\"V] G", "D^\"V] G", (Options) null, 18, 2, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Options options0 = new Options();
      String string0 = "[";
      helpFormatter0.printHelp(9, "[", "[", options0, "[");
      helpFormatter0.defaultOptPrefix = "`x%{{p4xr>,tp";
      String string1 = "-";
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      String string2 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("g", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) "Y)7;TAHFL!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "cmdLineSyntax not provided", "", options1, (-1), (-427), " ] [ long ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      int int0 = 74;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) "]";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 94, "");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 94, options0, 74, 74);
      String string0 = null;
      String string1 = "Gg:[d19l=r3q\\>";
      Option option0 = null;
      try {
        option0 = new Option("1)d", "C,7k}F}[A//");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1)d' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printHelp(636, "org.apache.commons.cli.HelpFormatter$OptionComparator", "[mOe7-0UKyH%", options0, " VdnLN,{", false);
      Options options1 = options0.addOption((String) null, "[", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 68, "--", "", options1, 1129, 2, "", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("$`<C*>!V-#6}pUK3R");
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", options1, "line.separator", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) "]";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 94, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 3, (-317));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "   ";
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" VdnL,{");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      options0.getOptions();
      helpFormatter0.printHelp("line.separator", "", options0, " VdnL,{", false);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 34, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      helpFormatter0.defaultNewLine = "";
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      helpFormatter0.printWrapped(printWriter0, 5573, ":BCF>j{1*$G[]5H]");
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "\n");
      options0.getOptions();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "usage: ", options1, "lO-~,gybq");
      helpFormatter1.printHelp("~sxN", options1, false);
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.getArgName();
      Object object0 = new Object();
      Object object1 = new Object();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1340, "U,*P(;-6(Pfh&UoB");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1340, "[^J7cp~J", "arg", options1, 3, 34, " N'vCjPLef");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(199);
      helpFormatter0.setOptPrefix("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.getWidth();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 118, "$CN2;dXQ#mi'A^Zl:W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(199);
      helpFormatter0.setOptPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "");
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.HelpFormatter", "--", options0, (-4056), (-1982), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(199);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(18, "ij^Iwlz@lDT){(zb[L", "", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 18, options0, 10, (-1191));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) "Y)7;TAHFL!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3789, "", "cmdLineSyntax not provided", options1, 0, 74, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "--", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "arg";
      PrintWriter printWriter1 = mockPrintWriter0.format("The option '", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 276, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, 3, "[", "", options0, 3, (-176), "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "LYxpu6M,-&h>|4h", "feHw+M}41_RG)Yf&N", options1, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("=bQjtp}6-w5");
      helpFormatter2.setLongOptPrefix("\n");
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setDescPadding(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) "-j\"dFCaBwy><";
      PrintWriter printWriter0 = mockPrintWriter0.format("-j\"dFCaBwy><", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = "p!]WB";
      Locale locale0 = new Locale("arg", "p!]WB");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "~s,jcB>J2ESF;", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1786, "");
      helpFormatter0.defaultOptPrefix = "[ARG...]";
      helpFormatter0.getLongOptPrefix();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1365), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("=g~|2.2zH+Lk/kso0", options0);
      helpFormatter0.printHelp(",", options0);
      helpFormatter0.setLeftPadding((-3330));
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.setWidth((-643));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "D5s\"M77!|Afv ";
      Object object1 = new Object();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "D5s\"M77!|Afv ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" VdnL,{");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("Q0u6A,Ijr'DstQA");
      helpFormatter0.printHelp("line.separator", "", options0, " VdnL,{", false);
      helpFormatter0.rtrim(" ]");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "", "a[Tha6UbPsVw", options0, " :: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$`<C*>!V-#6}p\\UK3R";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1895), "$`<C*>!V-#6}pUK3R", "$`<C*>!V-#6}pUK3R", options0, "$`<C*>!V-#6}pUK3R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(74);
      helpFormatter0.setWidth(199);
      String string0 = null;
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-197), 9, "                                                                          ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLongOptPrefix = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      String string0 = "@F<EX'M[t";
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1320, (-137), "lO-~,gybq");
      helpFormatter0.setNewLine("h=@qD`}@");
      options1.getMatchingOptions("usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-137));
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"^ggXoB s!~T<y", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-585));
      String string0 = "x@aR;NaDma";
      String string1 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultLongOptPrefix = "x@aR;NaDma";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x@aR;NaDma", "x@aR;NaDma", options0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("=g~|2.2zH+Lk/ko0", options0);
      helpFormatter0.printHelp(",", options0);
      helpFormatter0.setLeftPadding((-3330));
      helpFormatter0.renderOptions((StringBuffer) null, (-3330), options0, 1, 74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1529);
      helpFormatter0.findWrapPos(",", 1529, 0);
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "D5s\"M77!|Afv ";
      objectArray0[4] = (Object) "D5s\"M77!|Afv ";
      objectArray0[5] = (Object) "D5s\"M77!|Afv ";
      objectArray0[6] = (Object) "D5s\"M77!|Afv ";
      objectArray0[7] = (Object) "arg";
      Object object1 = new Object();
      objectArray0[8] = object1;
      mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "D5s\"M77!|Afv ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      String string0 = "D5s\"M77!|Af\\v ";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "D5s\"M77!|Afv ";
      Object object1 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-585));
      String string0 = "";
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultLongOptPrefix = "8u+BN)qG42jh9Gvv^Q+";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" VdnL,{");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp("line.separator", "", options0, " VdnL,{", false);
      helpFormatter0.rtrim(" ]");
      helpFormatter0.setLongOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(51, (String) null, (String) null, options0, " VdnL,{", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "usage: ", options1, "lO-~,gybq");
      helpFormatter1.printHelp("~sxN", options1, true);
      // Undeclared exception!
      try { 
        options1.addOption("pQ]Yk(p@<'Bp!%", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pQ]Yk(p@<'Bp!%' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("=g~|2.2zH+Lk/kso0", options0);
      helpFormatter0.printHelp(",", options0);
      helpFormatter0.setLeftPadding((-3330));
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.setWidth(1529);
      helpFormatter0.findWrapPos(",", 1529, 0);
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.printHelp("$`<C*>!V-#6}pUK3R", "--", options0, "line.separator", true);
      helpFormatter0.defaultNewLine = "Y)7;TAHFL!";
      helpFormatter0.rtrim("--");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setDescPadding(3789);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Cannot add value, list full.";
      PrintWriter printWriter0 = mockPrintWriter0.format("Cannot add value, list full.", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3789, "line.separator");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1340, "]");
      helpFormatter0.setLongOptSeparator("D5s\"M77!|Afv ");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "D^\"V] G";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "D^\"V] G");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = null;
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      String string1 = null;
      URI uRI0 = MockURI.URI((String) null, "l", "l", "", "Cannot add value, list full.");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      String string0 = "u*BS+{.ibD0^";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      // Undeclared exception!
      try { 
        options2.addOption("DR^HZHfM*@", ">", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'DR^HZHfM*@' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("=g~|2.2zH+Lk/ko0", options0);
      String string0 = ",";
      helpFormatter0.printHelp(",", options0);
      int int0 = 0;
      helpFormatter0.setLeftPadding((-3330));
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 9, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "\n", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLongOptPrefix = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1320, (-137), "lO-~,gybq");
      helpFormatter0.setNewLine("h=@qD`}@");
      options1.getMatchingOptions("usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-137));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options2, "b<64Fg2dx/\"v,pP@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-585));
      String string0 = "";
      String string1 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "8u+BN)qG42jh9Gvv^Q+";
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "8u+BN)qG42jh9Gvv^Q+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-871));
      int int0 = 2416;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-871), options1, (-871), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lO-~,gybq");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.getMatchingOptions("");
      Option option0 = new Option("arg", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = "";
      options2.hasShortOption("LYxpu6M,-&h>|4h");
      helpFormatter0.printUsage(printWriter0, 1320, "lO-~,gybq", options2);
      helpFormatter0.printHelp("@F<EX'M[t", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1320, (-137), "lO-~,gybq");
      helpFormatter0.setNewLine("");
      options1.getMatchingOptions("usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("arg", "--", options1, "");
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "HZ";
      helpFormatter0.defaultDescPad = (-350);
      helpFormatter0.setNewLine("Hzh7>Z[gmGDqq?:hs '");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      helpFormatter0.rtrim("yt0");
      helpFormatter0.setWidth(0);
      helpFormatter0.setSyntaxPrefix("<s!Kj$");
      helpFormatter0.setWidth(606);
      StringBuffer stringBuffer0 = new StringBuffer("!z");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("1V5c.P(W~d##nqC");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "N\"rYL";
      mockPrintWriter0.print(988L);
      objectArray0[1] = (Object) "N\"rYL";
      objectArray0[2] = (Object) "1V5c.P(W~d##nqC";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      helpFormatter0.setLongOptPrefix("1V5c.P(W~d##nqC");
      objectArray0[5] = (Object) "1V5c.P(W~d##nqC";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "1V5c.P(W~d##nqC";
      mockPrintWriter0.format("N\"rYL", objectArray0);
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter0.format(locale0, "", (Object[]) null);
      int int0 = (-425);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-425), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.printHelp("$`<C*>!V-#6}pUK3R", "--", options0, "line.separator", true);
      helpFormatter0.defaultNewLine = "Y)7;TAHFL!";
      helpFormatter0.rtrim("-j\"dFCaBwy><");
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setDescPadding(3789);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "$`<C*>!V-#6}pUK3R";
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) "Y)7;TAHFL!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(199);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-197), 9, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = new MockFile("sL30gcm");
      MockFile mockFile1 = new MockFile(mockFile0, "-SXyW'O9E> ?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), (Options) null, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-606);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("=hd/C0Yh*v%FRu[pXv");
      options0.hasShortOption("\n");
      options0.addOption((String) null, false, "o Z:yDEK");
      options0.hasLongOption("o Z:yDEK");
      String string0 = "";
      Option option0 = new Option("", "--");
      options0.getOption("@4s/");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("arg");
      helpFormatter0.defaultNewLine = "";
      option0.clone();
      helpFormatter0.setSyntaxPrefix("");
      options1.hasOption("cMe6[");
      options1.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-606), "=hd/C0Yh*v%FRu[pXv", "=hd/C0Yh*v%FRu[pXv", options1, ".W? WJ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1953, "CJ\u0001%-O%,,KW:9i2#[", "CJ\u0001%-O%,,KW:9i2#[", options0, "CJ\u0001%-O%,,KW:9i2#[", true);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.optionComparator = null;
      int int0 = (-1263);
      helpFormatter0.setDescPadding((-1263));
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultDescPad = (-1263);
      String string0 = "JFaq1s}YeO++";
      helpFormatter0.setOptPrefix("JFaq1s}YeO++");
      int int1 = (-2226);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2226));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("F$");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int0 = 74;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("has already been selected: '", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'has already been selected: '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
