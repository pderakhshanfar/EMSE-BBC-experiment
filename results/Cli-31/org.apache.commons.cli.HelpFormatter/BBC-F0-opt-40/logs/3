* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 2665
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 877343677
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 18:03:52.666 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 272 generations, 110259 statements, best individual has fitness: 137.0
* Minimizing test suite
[MASTER] 18:15:14.340 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 205
* Number of covered goals: 203
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 154
* Number of covered goals: 138
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 514
* Number of covered goals: 478
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 46
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 154
* Number of covered goals: 138
* Generated 128 tests with total length 1901
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:16:01.287 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7050833333333333% of time used, but only 2/128 tests minimized), falling back to using all assertions
[MASTER] 18:16:20.705 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 18:16:47.850 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:47.921 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:48.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:48.120 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:48.206 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:48.209 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_132_tmp__ESTest.test0(HelpFormatter_132_tmp__ESTest.java:54)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:16:48.212 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

StringBuffer stringBuffer0 = new StringBuffer();
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertNotNull(stringBuffer0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

Options options0 = new Options();
assertNotNull(options0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertNotNull(helpFormatter1);

helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 70, "XVEUoYVxuizRzQ$f5", options0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertFalse(fileDescriptor0.valid());

HelpFormatter helpFormatter2 = new HelpFormatter();
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertNotNull(helpFormatter2);

helpFormatter2.printHelp("i Zi;BF,Z=O0", "<", options0, "XVEUoYVxuizRzQ$f5");
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());

helpFormatter0.setLongOptPrefix("-");
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertNotSame(helpFormatter0, helpFormatter2);
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());

helpFormatter2.setOptionComparator((Comparator) null);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());

String string0 = helpFormatter2.getOptPrefix();
assertEquals("-", string0);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertNotNull(string0);

helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, false);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertFalse(helpFormatter1.equals((Object)helpFormatter2));
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotSame(helpFormatter1, helpFormatter2);
assertNotSame(helpFormatter1, helpFormatter0);
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());

Comparator comparator0 = helpFormatter0.getOptionComparator();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertNotSame(helpFormatter0, helpFormatter2);
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertNotNull(comparator0);


[MASTER] 18:16:51.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:51.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:51.513 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:51.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:53.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:53.774 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:16:53.946 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_140_tmp__ESTest.test0(HelpFormatter_140_tmp__ESTest.java:84)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:16:53.948 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

int int0 = helpFormatter0.getWidth();
assertEquals(74, int0);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(int1 == int0);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) "]C0{fGPt7r";
objectArray0[2] = (Object) "]C0{fGPt7r";
objectArray0[3] = (Object) mockFileOutputStream0;
objectArray0[4] = (Object) fileDescriptor0;
PrintWriter printWriter0 = mockPrintWriter0.format("]C0{fGPt7r", objectArray0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(5, objectArray0.length);
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);

helpFormatter0.printWrapped(printWriter0, 3, "");
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(5, objectArray0.length);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertFalse(fileDescriptor0.valid());


[MASTER] 18:16:59.900 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_156_tmp__ESTest.test0(HelpFormatter_156_tmp__ESTest.java:82)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:16:59.901 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertNotNull(helpFormatter0);

helpFormatter0.setArgName("o;&?`x`{aXYEXck!^?");
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("o;&?`x`{aXYEXck!^?", helpFormatter0.getArgName());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());

int int0 = helpFormatter0.getLeftPadding();
assertEquals(1, int0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("o;&?`x`{aXYEXck!^?", helpFormatter0.getArgName());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) "o;&?`x`{aXYEXck!^?";
objectArray0[1] = (Object) filterOutputStream0;
objectArray0[2] = (Object) null;
objectArray0[3] = (Object) mockFileOutputStream0;
objectArray0[4] = (Object) helpFormatter0;
mockPrintWriter0.format((String) null, objectArray0);

[MASTER] 18:17:03.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_168_tmp__ESTest.test0(HelpFormatter_168_tmp__ESTest.java:85)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:17:03.463 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertNotNull(helpFormatter0);

int int0 = helpFormatter0.getWidth();
assertEquals(74, int0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(int1 == int0);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) filterOutputStream0;
PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(1, objectArray0.length);
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);

helpFormatter0.printWrapped(printWriter0, 1352, (String) null);

[MASTER] 18:17:08.388 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 18:17:08.389 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertNotNull(helpFormatter0);

String string0 = "1";
String string1 = "";
Options options0 = new Options();
assertNotNull(options0);

String string2 = "";
int int0 = 0;
helpFormatter0.printHelp(0, "1", "1", options0, (String) null);

[MASTER] 18:17:08.599 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_172_tmp__ESTest.test0(HelpFormatter_172_tmp__ESTest.java:86)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:17:08.599 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertNotNull(helpFormatter0);

int int0 = helpFormatter0.getWidth();
assertEquals(74, int0);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertFalse(int1 == int0);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
assertNotNull(mockPrintWriter0);

String string0 = "]C0{fGPt7r";
Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "N(.9KL4", options0);

[MASTER] 18:17:11.640 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_173_tmp__ESTest$1.run(HelpFormatter_173_tmp__ESTest.java:77)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:17:11.641 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

int int0 = helpFormatter0.defaultDescPad;
assertEquals(3, int0);

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertFalse(int1 == int0);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
assertNotNull(mockPrintWriter0);

String string0 = "]C0{fGPt7r";
Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "N(.9KL4", options0);

[MASTER] 18:17:14.695 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_174_tmp__ESTest$1.run(HelpFormatter_174_tmp__ESTest.java:93)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:17:14.696 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

int int0 = helpFormatter0.getWidth();
assertEquals(74, int0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(int1 == int0);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(dataOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(filterOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2028, "N(.9KL4", options0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertFalse(fileDescriptor0.valid());

String string0 = ")M0eLAL;^cng=%";
helpFormatter0.printHelp("]C0{fGPt7r", "N(.9KL4", (Options) null, "org.apache.commons.cli.Option");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-40/tests/3
* Done!

* Computation finished
