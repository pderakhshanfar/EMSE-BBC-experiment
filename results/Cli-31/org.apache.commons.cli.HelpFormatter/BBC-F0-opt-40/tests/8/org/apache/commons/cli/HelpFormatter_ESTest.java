/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:40:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3037));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "\n", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "", true, "usage: ");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", false, "' was specified but a opton from this group");
      Options options3 = options2.addOption("", "\n", false, "' was specified but a opton from this group");
      Options options4 = options3.addOption(option1);
      options4.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "]", "' was specified but a opton from this group", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "\"1E3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"1E3");
      MockFile mockFile0 = new MockFile("4&*FM`gYSX[1ZzH{:8", "%C/ S2(&#ix1VX\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "4&*FM`gYSX[1ZzH{:8";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "4&*FM`gYSX[1ZzH{:8";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "E}g@ Ig N7S^<cr");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".REz~vVfT8/<5T-^lND");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      File file0 = MockFile.createTempFile("usage: ", "usage: ", (File) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t}Q3/");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultSyntaxPrefix = "--";
      options0.hasLongOption("arg");
      helpFormatter1.printHelp(1, "\n", "", options0, "usage: ");
      helpFormatter1.printHelp("\n", options0, false);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, " ");
      helpFormatter0.printHelp("J;BSi4r%Nt<0*m9", " ", options0, "-");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1604;
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) null, 74, (-533));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 74, end -533, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "ivj.=qQy?|S@A9xU+", "arg", options0, 0, 13, "", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("_", "A", true, "A");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setOptionalArg(true);
      option0.setArgName((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7-9Ml)dM");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "7-9Ml)dM");
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.printUsage(printWriter0, 2814, "", options0);
      helpFormatter0.printHelp("eqEh V[12yy!2i`]a", "_", options0, "A");
      helpFormatter0.createPadding(9);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("ldt{csK~+");
      MockFile mockFile0 = new MockFile("%y7?>nMN`o>#;BE$~P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "ceqze!?[U2h{ d-q", "ldt{csK~+", options1, (-376), 127, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.setArgName((String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding(369);
      helpFormatter0.createPadding(369);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(103);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("M", "--", true, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "M", "-", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultWidth = (-1396);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("iVc::)A9,lu", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      helpFormatter0.printHelp(" ", options4);
      helpFormatter0.defaultWidth = (-2);
      options1.hasLongOption("");
      helpFormatter0.getWidth();
      OptionGroup optionGroup2 = new OptionGroup();
      Options options5 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", "", options5, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "9KM$");
      OptionGroup optionGroup1 = new OptionGroup();
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("]", "", options1, " | ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "No}QAZ}D)O", "No}QAZ}D)O", (Options) null, "No}QAZ}D)O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("t");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "--", options0, 32, 4252, (String) null, true);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4273, "Ok/a}T", "Ok/a}T", options0, 4273, 3, "", true);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append('%');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 4273, options0, 4273, 4273);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",I_%lEP", (String) null, options0, "6/FFC6#A+(ef(b>>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Option option0 = new Option("", "", false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringWriter stringWriter1 = new StringWriter(9);
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "' was specifi+d but an option from this group ", (String) null, options0, 13, (-1), "691N<4>oae|jeV;XiAl", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4273, "\n", "\n", options0, 53, 4273, "\n", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("Cannot add value, list full.", "org.apache.commons.cli.AlreadySelectedException", options0, " ");
      helpFormatter0.createPadding(4273);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("_", "A", true, "A");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setOptionalArg(true);
      option0.setArgName((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("eqEh V[12yy!2i`]a", "_", options0, "A");
      helpFormatter0.createPadding(9);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 25, options2, 27, 25);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-532), "uyEeS?^Gp}fbkbg{", "JwL`-C+>?aaC", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) "fsF2fXem51I1OsqWM$";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("fsF2fXem51I1OsqWM$", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "fsF2fXem51I1OsqWM$", "fsF2fXem51I1OsqWM$", options0, (-1), 612, "");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(67);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 44, (-1), "                                                                   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "*QA.-)YpE'xE=8<";
      Options options1 = options0.addOption((String) null, false, "*QA.-)YpE'xE=8<");
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options1, 13, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(56);
      StringWriter stringWriter1 = stringWriter0.append('6');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "w2o.0W", "]2cID_?WTn7wwo", options0, 56, 219, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Option option0 = new Option("", true, "cK{Lo.`WwVNgr%)");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 49, options1, 13, 49);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2471));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2471), (Options) null, 1242, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("A", "--", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('6');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "' was specified but an option from this group ", "-", options0, 2866, 74, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-494), options0, 1860, (-2471));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print(2865L);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      mockPrintWriter0.append('A');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 99, "Y|XTK+}fdeJ.[m", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("", 717, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 60, "Y|XTK+}fdeJ.[m", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("A", "--", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      helpFormatter0.rtrim("'Y,Y`u7IQk:W");
      helpFormatter0.getNewLine();
      option0.setLongOpt("w}.b !(7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",wymv@Bo");
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2579, "'Y,Y`u7IQk:W", " [ARG]", options0, 0, (-2), "[ option: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cYJ>~";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cYJ>~", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 9;
      StringWriter stringWriter0 = new StringWriter(9);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "No\\}QAZ}D)O";
      Options options0 = null;
      boolean boolean0 = false;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "No}QAZ}D)O");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t}Q3/");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultSyntaxPrefix = "\"";
      options0.hasLongOption("arg");
      helpFormatter1.printHelp(1, "\n", "", options0, "usage: ");
      helpFormatter1.printHelp("\n", options0, false);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "\"");
      helpFormatter0.printHelp("J;BSi4r%Nt<0*m9", " ", options0, "-");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("", "\n", false, "\n");
      helpFormatter0.printHelp(36, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, "WPpP|X{$M", false);
      options0.hasLongOption("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4623), "org.apache.commons.cli.HelpFormatter$1", "oH~RY", options0, "oH~RY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = " ";
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", (Options) null, " ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(23);
      String string0 = "+B-R1}+";
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+B-R1}+", "zIeM'#0g/5~8Xjkk2ey", (Options) null, "zIeM'#0g/5~8Xjkk2ey");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4449));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(50, "]AU", "", (Options) null, "]AU");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      options0.hasLongOption("cP4;]g<hd&fj");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "ev%t2nnM", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "p]tS:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "p]tS:", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 34, options0, 34, 34);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-559), 44, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding((-1879));
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(103, "arg", "5T'!^%.-iPZ", options0, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(36, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, "WPpP|X{$M", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.findWrapPos("-", 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 64, options0, 500, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, " ");
      optionGroup0.toString();
      option0.setArgName("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 51, 11, "Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.findWrapPos("K;q<sp@@@C;,j", 74, 1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 77, 77, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.checkError();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      options0.hasLongOption("%i=kY");
      String string0 = "+wvh9=$DK`hw";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2919, "", "org.apache.commons.cli.HelpFormatter", options0, "+wvh9=$DK`hw", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 25, options2, 27, 25);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-532), "uyEeS?^Gp}fbkbg{", "JwL`-C+>?aaC", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.defaultDescPad = 34;
      Options options0 = new Options();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.getNewLine();
      helpFormatter0.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.checkError();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      options0.hasLongOption("%i=kY");
      helpFormatter0.rtrim("MVc7");
      helpFormatter0.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("[]");
      helpFormatter0.createPadding(941);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp("Illegal option name '", " [ARG]", options0, "Illegal option name '", false);
      helpFormatter0.rtrim("[]");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      boolean boolean0 = true;
      String string0 = "_CAgPPL 1&H1\"&h";
      options1.hasLongOption("_CAgPPL 1&H1\"&h");
      Option option0 = new Option((String) null, "eNXaE?ZX7vd~E HJ", true, "arg");
      option0.setArgs(74);
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.println((float) 1);
      Option option1 = new Option("", " [ARG]", true, "cP4;]g<hd&fj");
      option1.addValueForProcessing("--");
      options1.addOption(option0);
      option0.setArgs(1);
      options0.hasOption(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1230, (String) null, options1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2012), options0, 31, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("");
      Options options1 = new Options();
      helpFormatter0.findWrapPos("A", 584, 584);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "b94~}A:Y?s$";
      helpFormatter0.setArgName("b94~}A:Y?s$");
      helpFormatter0.setSyntaxPrefix("5y77Y&3m7e0d");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "xx820L;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xx820L;
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      int int0 = 0;
      Options options0 = new Options();
      int int1 = 2882;
      String string0 = "ev%t2nnM";
      boolean boolean0 = true;
      String string1 = "cP4;]g<hd&fj";
      options0.hasLongOption("cP4;]g<hd&fj");
      Option option0 = new Option("", "", true, "arg");
      option0.setArgs(74);
      printWriter0.println((float) (-2));
      option0.addValueForProcessing("");
      Options options1 = options0.addOption(option0);
      option0.setArgs(3);
      options0.hasOption("ev%t2nnM");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "Ry<u)z'6KIS*", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      helpFormatter0.printHelp(46, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, "org.apache.commons.cli.OptionGroup", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(6714, "W%&", "/0)oD_!Jhev", options2, "");
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "INV]x[G^_=w{GT8", options1, "[]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.addOption("Q", "Q", false, "b<IKy/%GTr%znP>D/");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(174, "Q", "b<IKy/%GTr%znP>D/", options0, "PU%w]dDKpN*@~lK/g");
      helpFormatter0.findWrapPos("OQo", 32, 32);
      helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 3, 174);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 26;
      String string0 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = "b-.Mk!,";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
      int int1 = 7572;
      helpFormatter0.printUsage(printWriter0, 7572, ">");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "' contains an illegal character : '");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.append('M');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options1.addOption("", true, "--");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 115, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "9[(g#@>-.:/RxYMB,)";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "9[(g#@>-.:/RxYMB,)", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "~~~#&3Mn++(Z Xw?^", "--", options1, 646, (-2574), "E&[CNh<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "oU%lrAM0?{=`,nXo2x";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.findWrapPos("", 872, 64);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = new Locale("--");
      mockPrintWriter1.printf(locale0, "--", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "-");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", "?DKGK)fB+?.<hH$p", false, " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "1l6hP=O6!f6!e", "<", options4, 1146, (-4335), "BiB-(c~,[puhM", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 74, 1);
      int int0 = (-1646);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1646));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      Options options0 = new Options();
      options0.addOption("arg", "usage: ", false, " [ARG]");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("sNw$FV.K}", "sNw$FV.K}", options0, "sNw$FV.K}", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-d\"}*AtqV&Ey33uK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-d\"}*AtqV&Ey33uK", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1914, "-d\"}*AtqV&Ey33uK", "-d\"}*AtqV&Ey33uK", options0, 1914, 1914, "-d\"}*AtqV&Ey33uK");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(46, "The option '", "The option '", (Options) null, "The option '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasShortOption(" ");
      helpFormatter0.printHelp("\"", "", options1, "", false);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      String string0 = "Mi^p4{}uUsN,gZ1GZ<e";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), " [ARG]", "Mi^p4{}uUsN,gZ1GZ<e", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("", " [ARG]", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options1, "", true);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1366), options1, (-1366), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1919;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1919, "Q", "Q", options1, "");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "3oJiMI@*BK_", "Yc:Dk5Mu[/S<Lo1h", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, (String) null);
      options1.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" [ARG]").when(comparator0).toString();
      doReturn(1).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("m.n", (String) null, options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 63, options0, (-1), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "\n");
      Option option0 = new Option("arg", false, (String) null);
      options1.addOption(option0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.ParseException").when(comparator0).toString();
      doReturn(109).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(34);
      helpFormatter0.printHelp("m.n", (String) null, options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(21, (String) null, "A CloneNotSupportedException was thrown: ", options1, "3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "\n");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(1406, " ", " ", options2, (String) null);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.setOptPrefix("l#");
      helpFormatter0.printHelp("86Hq", (String) null, options0, "!VdM1@]q", true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "!VdM1@]q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // !VdM1@]q
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "'";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "'";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintStream1;
      PrintStream printStream0 = mockPrintStream1.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) mockPrintStream1;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) "'";
      objectArray1[5] = (Object) mockPrintStream1;
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) mockPrintStream0;
      objectArray1[8] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1989), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "arg", options0, "b{m>o{(74>", false);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 842, 842, "b{m>o{(74>");
      helpFormatter0.printHelp("arg", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("->@TaIoO.u -Vzh}gSH", "arg", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("sNw$FV.K}", 13, 389);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!r%1D");
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "!r%1D";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "!r%1D";
      objectArray0[4] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      int int0 = (-356);
      String string1 = null;
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = 71;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-356), "", (String) null, options0, (-356), 71, "!r%1D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "-8&k.S`hMP";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = new Locale(">");
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "--", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "-");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", "?DKGK)fB+?.<hH$p", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-4744), "i", "i", options4, 4705, (-2), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth((-7913));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) mockPrintStream1;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "L@;r 9Z-^+vrox";
      objectArray0[8] = (Object) "[ Options: [ short ";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2710, "");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(29);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-7913), 2710);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sNw$FV.K}";
      Options options0 = new Options();
      helpFormatter0.printHelp("sNw$FV.K}", "sNw$FV.K}", options0, "sNw$FV.K}", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLongOptSeparator("sNw$FV.K}");
      helpFormatter0.setArgName("n'Y");
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2622, "sNw$FV.K}", "sNw$FV.K}", options0, (-1), 1795, "b7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sNw$FV.K}", "sNw$FV.K}", options0, "sNw$FV.K}", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLongOptSeparator("sNw$FV.K}");
      helpFormatter0.setArgName("n'Y");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2622, "sNw$FV.K}", "sNw$FV.K}", options0, (-1), 1795, "b7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "]");
      helpFormatter0.setDescPadding((-1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(188);
      helpFormatter0.renderWrappedText(stringBuffer0, 188, 188, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "QdznZ)uMbGG!Sp{");
      StringWriter stringWriter0 = new StringWriter(41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) options1;
      objectArray0[1] = (Object) "}cBntq;b xvg]{T_^";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "QdznZ)uMbGG!Sp{";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 41, 63, "");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 41, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      helpFormatter0.printHelp(" ", options4);
      options1.hasLongOption("");
      helpFormatter0.getWidth();
      OptionGroup optionGroup2 = new OptionGroup();
      Options options5 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("Illegal option name '", "", options5, "", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth((-7919));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-321));
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(2907);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setArgName("arg");
      helpFormatter0.getOptPrefix();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-869), (-869), "%Mk>GmilFH)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1145, "*R[B>m*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "usage: ", false, "\n");
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("b{m>o{(74>");
      helpFormatter0.setOptPrefix("Yc:Dk5Mu[/S<Lo1h");
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options1 = options0.addOption("arg", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("b{m>o{(74>", "C4Sp5.yC", options1, "", true);
      URI uRI0 = MockURI.create("org.apache.commons.cli.HelpFormatter$1");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      helpFormatter0.printHelp(" ", options4);
      options1.hasLongOption("");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-2));
      optionGroup1.toString();
      helpFormatter0.setNewLine("");
      String string1 = "]v7I\\Y)nU";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]v7IY)nU", "", options1, "[-arg null]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-101), "F;ZvCY7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "\n", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = "C";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "C", "C", options1, "");
      helpFormatter0.setSyntaxPrefix("Yc:Dk5Mu[/S<Lo1h");
      helpFormatter0.setOptPrefix("Yc:Dk5Mu[/S<Lo1h");
      helpFormatter0.printHelp("mm@r^`J>g{^tb+o:3f", "Yc:Dk5Mu[/S<Lo1h", options0, "", true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "   ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //    
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setSyntaxPrefix("");
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("p54CyNU>ee< !o");
      options1.getMatchingOptions(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(188);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 188, 188, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "QdznZ)uMbGG!Sp{");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, options1, 13, (-363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 2835, 3, "O");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(0, (CharSequence) " ", 2835, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2835, end 0, s.length() 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg", 1, 1);
      int int0 = 2703;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("*g.>2E:", "", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*g.>2E:' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sNw$FV.K}", "sNw$FV.K}", options0, "sNw$FV.K}", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLongOptSeparator("sNw$FV.K}");
      helpFormatter0.setArgName("n'Y");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("$YDKZ", false, "arg");
      options0.addOption(option0);
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", "--", false, "//U");
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 5;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-560), (String) null, (String) null, options2, 29, 5, "#Sr5@()r{Vt$hzQ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "J(+12iHd8O;X=f^");
      option0.setArgs(151);
      option0.addValueForProcessing("");
      options0.hasOption("");
      helpFormatter0.printOptions(printWriter0, 0, options0, 2882, 0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-2778));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth((-7913));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-321));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "8+`eCVTA", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      helpFormatter0.printHelp(" ", options4);
      options1.hasLongOption("");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-2));
      optionGroup0.toString();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]v7IY)nU", "", options1, "[]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " [ARG]");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption("G", false, ", ");
      options4.getOptions();
      helpFormatter0.printHelp(" ", options4);
      options1.hasLongOption("");
      helpFormatter0.rtrim("wMV;");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "isq?K>gqKk~@WD$;w";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "isq?K>gqKk~@WD$;w");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // isq?K>gqKk~@WD$;w
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "Illegal option name '";
      Option option0 = new Option("", "Illegal option name '", true, "\n");
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[- \n]", " ", options1, "rFzp_.4p4u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(34);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 34, (-3325));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-115), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-3544), "", "NO_ARGS_ALLOWED", options1, 3265, 74, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/^E$%98P/.";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, "--", false, "usage: ");
      options0.helpOptions();
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, (String) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2446), "/^E$%98P/.", "/^E$%98P/.", options2, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dzQ\\Ip,5Q_@";
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      options0.helpOptions();
      options0.getOptions();
      helpFormatter0.printHelp("dzQIp,5Q_@", "dzQIp,5Q_@", options0, "A CloneNotSupportedException was thrown: ", false);
      helpFormatter0.defaultNewLine = "A CloneNotSupportedException was thrown: ";
      Options options1 = new Options();
      options1.toString();
      options1.toString();
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.setDescPadding(1420);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("0Z&16:5GM", (-291), (-291));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      Options options0 = new Options();
      options0.hasLongOption("cP4;]g<hd&fj");
      Option option0 = new Option("", "", true, "J(+12iHd8O;X=f^");
      option0.setArgs(151);
      option0.addValueForProcessing("");
      options0.addOption(option0);
      options0.hasOption("ev%t2nnM");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options0, 2882, 0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(3892);
      String string0 = "/\"Rw";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/\"Rw", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
