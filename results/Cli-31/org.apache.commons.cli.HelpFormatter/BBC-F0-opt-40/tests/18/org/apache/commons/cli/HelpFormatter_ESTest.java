/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:27:59 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      helpFormatter0.defaultWidth = (-929);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_Y0e2T'I");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("oP1+ LKDP$Q7g#", 1, 1);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "[?0bDG\"+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [?0bDG\"+
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 63;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "", "f?6TQH?g/,c", options0, 63, 63, ">lm6uv%{M[5$My");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "eUZE09'8T6hL~X3n:";
      helpFormatter1.printHelp("[", "usage: ", options0, "eUZE09'8T6hL~X3n:", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 15;
      mockPrintWriter0.write("-");
      String string1 = "!/y";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1665, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, (-1284), 557, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("f", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2), options1, 2042, 1896);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("f", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "-", "usage: ", options1, 1, (-2), "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "-", "usage: ", options1, 1, (-2), "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-62 p+vRW1~IE]@";
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "-62 p+vRW1~IE]@");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1479));
      PrintWriter printWriter0 = null;
      String string0 = "!fVW_[(T[z>O}";
      Options options0 = new Options();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!fVW_[(T[z>O}", "org.apache.commons.cli.OptionValidator", options0, "DBVu8<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      options0.hasShortOption((String) null);
      int int0 = (-1896);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-822), options0, 4854, 4854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 653;
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "# j&;RK`YdDe/>zrd)s";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 653, "# j&;RK`YdDe/>zrd)s", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "FC";
      objectArray0[2] = (Object) "FC";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      linkedList0.stream();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "arg";
      mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options1 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 653, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(653, "FC", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "2wdO";
      Option option0 = new Option("2wdO", false, "SZH<S");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "arg");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options0.hasShortOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) option1;
      objectArray0[1] = (Object) options0;
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "-", false, "-");
      Options options3 = options2.addOption("", false, "Y8");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ".$<J!S-tTSM0Y", ".$<J!S-tTSM0Y", options4, 0, 11, "Y8");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options1.hasShortOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "C.[gv3<", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "-", "usage: ", options1, 1, (-2), "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-3382));
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 103, options1, 103, 103);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 103, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption("arg", true, (String) null);
      helpFormatter1.printHelp("J]2i", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1322, 31);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      options1.addOption("", false, "fX\"`=Hy2N");
      helpFormatter0.printHelp("--", "", options1, "--", true);
      helpFormatter1.getOptionComparator();
      helpFormatter0.printHelp(" ", "-", options1, "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, "aRuH\"DCe9>", (String) null, options0, 1321, 23, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "' contains an illegal character : '", "NhUbxhEQmJ", options0, 74, 74, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Util", "[ Options: [ short ", options2, "]");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      options0.addOption((String) null, true, " ");
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "arg", options0, "M3d.d'G2@95)", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultArgName = "A CloneNotSupportedException was thrown: ";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 2667, 2667, "");
      helpFormatter0.createPadding(1);
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getMatchingOptions("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "Hts|", options1, (-1), 74, "cmdLineSyntax not provided", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 109;
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U");
      Options options1 = options0.addOption((String) null, "-", true, "\n");
      helpFormatter0.printHelp(109, "--", (String) null, options1, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("/!%+", "-", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-462));
      helpFormatter0.setWidth(10);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1005, 1, "R/+H3!]vIT5h?lYdo:");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.optionComparator = comparator0;
      helpFormatter2.setWidth(0);
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("?C[", "78JZgG!r_n!", options0, "]");
      // Undeclared exception!
      helpFormatter0.printHelp("~", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, "+doT|E,g'-C;OdYTUg", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "Cannot add value, list full.", "", options0, (-2), (-1722), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "|U.", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.codePoints();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-182), options0, 112, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, (-2158), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.findWrapPos("PbRr$O1zI", 2872, 550);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.defaultSyntaxPrefix = "PbRr$O1zI";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printWrapped(printWriter0, 2872, "TPU6~>)5Eq}H");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("t.!$", true, "QA-n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't.!$' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "org.apache.comos.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "]", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("]", (-596), 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(12);
      helpFormatter0.rtrim("            ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("\"");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "[", options0, "[", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintWriter0.write("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 210, "!/y", "eUZE09'8T6hL~X3n:", options0, 25, (int) (byte)112, "", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-622));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2111), " [ARG]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "o[uIIn7zpu}JvE";
      String string1 = " ";
      Options options0 = new Options();
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter(4768);
      StringWriter stringWriter1 = stringWriter0.append('^');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, " ", " ", options0, 40, 10, "o[uIIn7zpu}JvE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("=:BxZ]wP}j^mF9W", "=:BxZ]wP}j^mF9W", options0, "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "6v/z{_t)Sos4+";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "6v/z{_t)Sos4+", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8JRL5|{s'4|?Q!r", true, "8JRL5|{s'4|?Q!r");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-113), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1072);
      helpFormatter0.getLeftPadding();
      String string0 = "fW%#QtJKD/\\,-lugO";
      MockFile mockFile0 = new MockFile("fW%#QtJKD/,-lugO");
      File file0 = MockFile.createTempFile("fW%#QtJKD/,-lugO", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "org.apache.commons.cli.Option", options0, "\n", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.Option", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 14, 14, "';");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "t4h(", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options1, 2235, 1);
      String string0 = "lLax";
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-1336), options0, 97, 1638);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(6, "Illegal option name '", "Illegal option name '", options0, "F", true);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("[", "usage: ", options0, "eUZE09'8T6hL~X3n:", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintWriter0.write("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 895, "!/y", "eUZE09'8T6hL~X3n:", options0, 895, 15, "-8K", true);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOption("", "\n", true, "");
      helpFormatter0.printHelp("iaolHk+r{IBt1lHm$v1", "", options1, "iaolHk+r{IBt1lHm$v1", false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "Teu BGLP4NmXL", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("/tLf?R8", "/tLf?R8", options0, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 518, (String) null, "org.apache.commons.cli.HelpFormatter$1", options0, 38, 518, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
      Options options1 = new Options();
      helpFormatter0.printHelp("-", ">Nq_bi;e4~uIw=Z", options0, " | ", true);
      helpFormatter0.createPadding(1);
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3331, options1, 3331, 42);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3331, 3331, " | ");
      helpFormatter0.renderWrappedText(stringBuffer2, 3331, 3331, " ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "org.apache.commons.cli.Option", options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "org.apache.commons.cli.Option", options0, "\n", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "!/y", "-8K", options0, (-3952), (-1722), "-8K", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(51);
      helpFormatter0.printHelp("Io;l", "", options0, "=:BxZ]wP}j^mF9W");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, (Options) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", "\n", false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options0, "i`8J*_P", true);
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, 0, "n-bO<(w@NJfiaa$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "/:A=qDC:/", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options0, "i`8J*_P", false);
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "^bKm{z:4I%_yA", "-", options0, (-2370), 3, "-", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("tv", "\n", true, "usage: ");
      options1.addOption(option0);
      helpFormatter1.printHelp("org.apache.commons.cli.Util", "", options1, "arg", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter2.createPadding(67);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "lLax", options1, "usage: ", true);
      helpFormatter0.setWidth(1);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) null, 0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "H&]rigg3yNt+t'ZvO", options0, "H&]rigg3yNt+t'ZvO", true);
      helpFormatter0.setWidth((-1320));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1320), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "H&]rigg3yNt+t'ZvO", options0, "H&]rigg3yNt+t'ZvO", true);
      helpFormatter0.setWidth((-1320));
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "I+@r+8,X6a$ Lj", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "");
      options1.addOption(option0);
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", "", options0, "]", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      helpFormatter2.setWidth(1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 53;
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "Y-~oCcx</1Wd#B";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y-~oCcx</1Wd#B", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "org.apache.commons.cli.Option", options0, "\n", true);
      helpFormatter0.createPadding(462);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "arg", true, "n6ZG|T^F!");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u", "org.apache.commons.cli.HelpFormatter", options2, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = new Options();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("?<ANf&`", "--", options3, "\n", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(74);
      helpFormatter2.setWidth((-4369));
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 559;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1783), "org.apache.commons.cli.Options", ")[EDNu!g{rqx", options0, 559, 79, "' was specified but an option from this group ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
      helpFormatter0.setWidth((-1320));
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((float) 3);
      helpFormatter0.printOptions(mockPrintWriter0, 549, options0, 563, 566);
      helpFormatter0.setSyntaxPrefix("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 563, "", (String) null, options0, 2001, 1717, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t7W7u6n@|");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", "t7W7u6n@|", (Options) null, "[ option: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 573, options1, 573, 573);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1303, "' was specified but an option from this group ", "usage: ", options0, "-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 4478, "K?\"qI|RE", "-", options0, 1, 0, "3i");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ");
      helpFormatter1.printHelp(603, "usage: ", "3fGvO9rZ@&z6i4", options1, "--", false);
      helpFormatter0.rtrim(">-'RI");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 536);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.format("\n", objectArray0);
      int int0 = 1484;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      options1.hasLongOption("H&]rigg3yNt+t'ZvO");
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 710, 101, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = new Options();
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "ZpJ-o >jsn;", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[");
      helpFormatter1.setArgName("");
      MockFile mockFile0 = new MockFile("\n", "YZ!");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter1.printUsage(printWriter0, 3497, "-");
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("IZ&Wc!)#(FG", options2, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
      int int0 = (-1320);
      helpFormatter0.setWidth((-1320));
      helpFormatter0.setWidth((-1320));
      String string1 = "e$xFGaX9q}D";
      String string2 = "=:BxZ]wP}j^mF9W";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=:BxZ]wP}j^mF9W", "e$xFGaX9q}D", options0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "f\"^PF8qZN/8Tw", options0, "91A]SXF", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter1.printHelp(" :: ", "usage: ", options0, "f\"^PF8qZN/8Tw");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("5~v/sGuFW8r", "juBZ s^V[ cwh", options0, "<", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      helpFormatter1.defaultArgName = "=:BxZ]wP}j^mF9W";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("e$xFGaX9q}D", "juBZ s^V[ cwh", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
      helpFormatter0.setWidth((-1320));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, ")[EDNu!g{rqx", "", options0, (-1783), (-1320), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Options options0 = new Options();
      options0.getOption("' was specified but an option from this group ");
      helpFormatter0.printHelp("--", "' was specified but an option from this group ", options0, "^V ", true);
      helpFormatter0.setWidth(63);
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 563, 563);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("AEr*xR*", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      Options options1 = new Options();
      boolean boolean0 = false;
      String string0 = "ZpJ-o \\>jsn;";
      helpFormatter0.printHelp("ZpJ-o >jsn;", "LB/ H}JZ`3q_YhP~", options0, "LB/ H}JZ`3q_YhP~", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2134));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, (-1110), options0, 1, 1376);
      mockPrintStream0.println("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(filterOutputStream0, false);
      mockPrintWriter2.println((float) 584);
      helpFormatter0.printOptions(mockPrintWriter2, 549, options0, 566, 9);
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.setArgName("   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = new Options();
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "ZpJ-o >jsn;", options0, "", false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Util", "org.apache.commons.cli.Util", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, "' was specified but an option from this group ", true);
      helpFormatter0.setWidth(462);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1767), "H&]rigg3yNt+t'ZvO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = new Options();
      helpFormatter0.printHelp("H&]rigg3yNt+t'ZvO", "ZpJ-o >jsn;", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setWidth(336);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      boolean boolean0 = false;
      String string0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer(118);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-280), options1, (-2315), 584);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(551, (String) null, "~ty*", (Options) null, "MpO[y^DJ)GyE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 584, options1, 584, 584);
      mockPrintStream0.println("' was specified but an option from this group ");
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.setArgName("--");
      helpFormatter0.createPadding(547);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, "' was specified but an option from this group ", true);
      helpFormatter0.setWidth(462);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 462, 710, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(2080);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 2631, options0, 584, 711);
      mockPrintStream0.println("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((float) 563);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 188, options1, (-1), 188);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "--");
      int int0 = 444;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 444, (-5471), "H&]rigg3yNt+t'ZvO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option fro this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Option option0 = new Option("arg", "-");
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.printHelp("D(\"y]):", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("T8~V'r[*G*CT");
      helpFormatter1.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultDescPad = 1915;
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptPrefix("n9YJZFyK");
      helpFormatter0.getDescPadding();
      String string0 = "n,`";
      helpFormatter0.setOptPrefix("n,`");
      helpFormatter0.setOptPrefix("n9YJZFyK");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("s]sk(8}zLLC8", (String) null, true, "n9YJZFyK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 's]sk(8}zLLC8' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      int int0 = (-5);
      String string0 = ".8\"}m +[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("l{cv8NWol^.jf\"S!{H+", "\"<lP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = helpFormatter0.defaultArgName;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 368, 569, "pT,qPp>by6?)B>%cE");
      PrintWriter printWriter1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A4f@3; XA3f@e]%/Ov");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("l{cv8NWol^.jf\"S!{H+", "\"<lP");
      String string0 = helpFormatter0.defaultArgName;
      int int0 = 569;
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A4f@3; XA3f@e]%/Ov");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 368, "arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = new Options();
      helpFormatter0.printHelp("H&rigg3yNt+t'ZvO", "ZpJ-o >jsn;", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setWidth(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "-", "\n", options2, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-504);
      String string0 = "lO=O>aP";
      String string1 = "[ Options: [ short ";
      Options options0 = null;
      String string2 = "~ty*";
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('>');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", (String) null, false, "");
      Option option0 = new Option((String) null, "");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-583), "a/r7/", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("W=rO9o~3s4HQZ v");
      helpFormatter0.setLongOptSeparator("ZmC7Ox");
      Option option0 = new Option("", "usage: ", false, "arg");
      helpFormatter0.rtrim("");
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, "W=rO9o~3s4HQZ v");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("--", (Object[]) null);
      String string0 = "#g7[&g";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "#g7[&g");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 573, options1, 573, 573);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1303, "' was specified but an option from this group ", "usage: ", options0, "-");
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 584, options1, 584, 584);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((float) 3);
      helpFormatter0.printOptions(mockPrintWriter0, 549, options0, 563, 566);
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.setArgName("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 547, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp("   ", options1, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 912;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(3);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = "P%9o\\4+HrN1xP8?";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf("P%9o\u0004+HrN1xP8?", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%9o'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      options0.addOption((String) null, "-", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-4753);
      int int1 = (-1);
      helpFormatter0.setDescPadding((-4753));
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-4753), (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      int int0 = (-2580);
      File file0 = MockFile.createTempFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 1506, 1506);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 573, options1, 573, 573);
      mockPrintStream0.println((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 656;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 656, "--");
      int int1 = (-1);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-195);
      String string0 = "";
      String string1 = ":z;JT=AnV[";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "   ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2573), "zmX(USDq`%k}9s", "zmX(USDq`%k}9s", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-504), "lO=O>aP", "[ Options: [ short ", (Options) null, "~ty*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.setLongOptPrefix("\"_g~PTgwZkG");
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '+';
      charArray0[2] = 'P';
      charArray0[3] = 's';
      charArray0[4] = 'z';
      charArray0[5] = 'U';
      charArray0[6] = '^';
      charArray0[7] = 'd';
      charArray0[8] = 't';
      stringWriter0.write(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 2647, 717, ")}x=@81I$B");
      helpFormatter0.rtrim(")}x=@81I$B");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      assertEquals("\"_g~PTgwZkG", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedList1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) linkedList1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "'AG=oj", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 32;
      String string0 = "H&]rigg3yNt+t'ZvO";
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Option option0 = new Option("", "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2159), "H&]rigg3yNt+t'ZvO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      int int1 = (-2446);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("' was specified but an option from this group ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' was specified but an option from this group ' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setDescPadding(4382);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      int int0 = (-1629);
      String string0 = "/Hn";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-305));
      helpFormatter0.setWidth((-305));
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      boolean boolean0 = true;
      stringBuffer0.append(true);
      int int0 = 666;
      stringBuffer0.append((float) 666);
      helpFormatter0.renderWrappedText(stringBuffer0, 666, 0, "");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setDescPadding((-1841));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "|zvdZ6Wfm])l");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // |zvdZ6Wfm])l
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.Option", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xfdr0P;M";
      helpFormatter0.defaultArgName = "xfdr0P;M";
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("obne^", "xfdr0P;M");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "xfdr0P;M");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xfdr0P;M
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      int int0 = 406;
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
}
