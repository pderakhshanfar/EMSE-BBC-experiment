/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:16:20 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "\n", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 18, "hfaOw/}7#W]Ma4.L)89", options0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2526);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "yNubdoWm";
      helpFormatter0.setOptPrefix("yNubdoWm");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("yNubdoWm", "yNubdoWm", (Options) null, "yNubdoWm");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("!Y S>@Xs C_(q:;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options0, 1773, 2231);
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.setLeftPadding(74);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options1, 3623, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", " ");
      Options options0 = new Options();
      options0.addOption((String) null, "\n", false, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'G';
      charArray0[2] = 'k';
      charArray0[3] = 'z';
      charArray0[4] = 'y';
      charArray0[5] = 'l';
      charArray0[6] = 'G';
      charArray0[7] = 'n';
      charArray0[8] = 'M';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", " ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("5|:((Q3");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 8, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", false, "   ");
      optionGroup0.setSelected(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", false, " ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", false, "--");
      options4.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]saN`.h");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options5 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "g-EH3%6bt2uAx1%>S", options5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ":!Q>k^";
      PrintWriter printWriter0 = null;
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":!Q>k^", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-407);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", (Options) null, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("XCWn}w^yP^j*p2", "@Kl}{Fc1y:6id]Kb?v", options0, "jUI!*M1VU9!q+;zn+");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = 304;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      String string0 = "x>wH<,2!Ww5";
      int int1 = (-2);
      String string1 = "";
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3790, "[", "[", options2, 6, (-4070), "kdYpk z[x\"Y7nrpGv");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.findWrapPos(" ", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 115, 115);
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      stringBuffer0.setLength(397);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(49, (CharSequence) " ", 93, 385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 93, end 385, s.length() 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("}g-%>");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-8870), "rE 8<]=FlG1\"N4cmW", "z81c~a9", options0, "rE 8<]=FlG1\"N4cmW", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "sg`VlhI";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "sg`VlhI", "", options0, "sg`VlhI");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("", 1406, 1406);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.helpOptions();
      options1.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"mmMz!I9b _8@#G1j8_");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)34, "");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "wD!H~Oh#T51i:g", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "7", "", (Options) null, "B)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(72, "vH\nat7yc}Ju5u`b#+", "", (Options) null, "vH\nat7yc}Ju5u`b#+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = new Locale("", "-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "B)";
      objectArray0[3] = (Object) "B)";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "B)";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "j}@1nZ)}$ynFG_");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 77;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      String string1 = ")=fewRBl;";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.setArgName((String) null);
      option0.setArgs(3);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1238, "\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2485));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OoMmH");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1238, "lSF", options0);
      helpFormatter0.renderOptions((StringBuffer) null, (-1991), options0, 1238, 1238);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, (String) null, (String) null, options0, "Y<)b)O5PHu(_:S~C", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "+g>p'n3eNXot", "-", options0, 1506, (-1177), " [ARG]");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-998));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Vj$%~~g", "usage: ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.getMatchingOptions("arg");
      helpFormatter0.defaultLeftPad = (-186);
      options0.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "\n", "B)", options0, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", (String) null);
      option0.setArgs(74);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", false, "q/U;5jX:!uqYayH");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.setSelected(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1898, "", options2);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 49, (String) null, (String) null, options2, 2163, 65, "q/U;5jX:!uqYayH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", (String) null, true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.setSelected(option0);
      OptionGroup optionGroup3 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = options0.addOption("?", (String) null, true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2373, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, ", ", options0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 2373, options0, 34, 51);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.renderOptions(stringBuffer1, 1, options0, 8, 10);
      helpFormatter1.findWrapPos("--", 97, 1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("OoMmH", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-1), options0, 1, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 104;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 104, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "/2A=5`E1L_2x_g$", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[ARG...]");
      int int0 = 59;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 45, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Options options1 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "Wps8kLD2%pie5G:s`OR", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, "--", "--", options0, 64, 64, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1073;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 688, 688, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringWriter stringWriter0 = new StringWriter(4184);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 64, (String) null, options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, (String) null, "-", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("XCWn}w^yP^j*p2", "@Kl}{Fc1y:6id]Kb?v", options0, "jUI!*M1VU9!q+;zn+");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = 304;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      String string0 = "x>wH<,2!Ww5";
      int int1 = (-2);
      String string1 = "";
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3790, "[", "[", options2, 6, (-4070), "kdYpk z[x\"Y7nrpGv");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) " ";
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", true, "");
      helpFormatter0.printHelp("t!FY{CW", "Xs!?O>", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[vYa6%u", true, "hwDe^[|#!yD");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("zjqQF4", "zjqQF4", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*Gt0?dG");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 36, "zB=<zO]hIklVY3", (String) null, options0, 269, 125, "", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("XCWn}w^yP^j*p2", "@Kl}{Fc1y:6id]Kb?v", options0, "jUI!*M1VU9!q+;zn+");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "XCWn}w^yP^j*p2";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 304, "N`08");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "x>wH<,2!Ww5", options0, 304, (-2), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("`!:;H", ">", options0, "`!:;H", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("40Td__dt]L!^(!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Object object1 = new Object();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1073, 1073, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Nz{5l,", "qDJ;74UnBW;/B", options0, 1073, 1073, "Nz{5l,", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(36, "Vs[", "Vs[", options0, "Vs[", false);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'r';
      charArray0[2] = '';
      charArray0[3] = 'd';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 638, (String) null, "Nz{5l,", options1, (-3989), (-3989), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 638, "o&+B{PPa'Z+@7", "Nz{5l,", options1, 30, 30, "o&+B{PPa'Z+@7", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("`!@%0vDeC[>");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = (-3063);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("XCWn}w^yP^j*p2", "uL8", options0, "jUI!*M1VU9!q+;zn+");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "XCWn}w^yP^j*p2";
      objectArray0[2] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("@Kl}{Fc1y:6id]Kb?v", objectArray0);
      helpFormatter0.printUsage(printWriter0, 5, "[ Options: [ short ", options0);
      Options options2 = new Options();
      Options options3 = new Options();
      helpFormatter0.printHelp("has already been selected: '", "_L!", options3, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commans.cli.Util", "org.apache.commans.cli.Util", options0, "org.apache.commans.cli.Util");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", "", options0, 3, (-2686), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ]", (Options) null, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("@Kl}{Fc1y:6id]Kb?v", "XCWn}w^yP^j*p2", options1, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]";
      options1.addOption("UPeUf", "[ Options: [ short ", true, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4191), "}O^Ei]<logajs!NRW/", "'Y;l@7aT<9]b2{", options1, " !aY':gbe$`]a9rOGNG", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "CQD:DVP2;%yWm", "CQD:DVP2;%yWm", options1, (-3626), (-3626), "CQD:DVP2;%yWm", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3645), "");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2678, " ", (String) null, options0, 2923, 2923, "4");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3645), "", "zJg94lgO8Pf<X#-y Ja", options0, "1TUy", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#T'2YgFV<j");
      Options options1 = options0.addOption("OoMmH", true, "--");
      helpFormatter0.printHelp(" ]", (String) null, options1, "@Kl}{Fc1y:6id]Kb?v");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "OoMmH", " [ARG]", options0, 105, 9, "#T'2YgFV<j", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4191), "}O^Ei]<logajs!NRW/", "}O^Ei]<logajs!NRW/", options1, " !aY':gbe$`]a9rOGNG", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#T'2YgFV<j");
      Options options1 = options0.addOption("OoMmH", true, "--");
      helpFormatter0.printHelp(" ]", (String) null, options1, "@Kl}{Fc1y:6id]Kb?v");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "@Kl}{Fc1y:6id]Kb?v", (String) null, options0, 33, 105, "9^JGk'sL~CcYiPCM`Xf");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("nlT57Np2>M.Rivfk!A");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commans.cli.Util", "\"", options0, "-");
      helpFormatter0.printHelp(435, "2(hwW2S", "#oV;GcAv5/Hh$`l4", options0, "arg");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3645), "");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2678, "Cannot add value, list full.", "4", options1, 2678, (-2), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(1514, "usage: ", "usage: ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "6&/*ka\"w8P&PI+c/>", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 278, options0, (-4101), (-4101));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("@Kl}{Fc1y:6id]Kb?v", "XCWn}w^yP^j*p2", options1, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "XCWn}w^yP^j*p2";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1154), "L2O", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 18, "r", "\n", options0, 18, 116, "a3O/=vj(tG(");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "--", "", options1, 30, (-106), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("arg", ")J6:", options0, " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(27, "", "", options0, "2(hwW2S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix(" ");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2678, "", "", options2, 2678, (-1), " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3645), "");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3680), "Aq&-+d,", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3645), "");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2678, "Cannot add value, list full.", "", options1, 2678, (-2), "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 1406, 1406);
      Options options0 = new Options();
      Options options1 = options0.addOption("jL", "", true, "");
      Options options2 = new Options();
      helpFormatter0.printHelp("{", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "arg", true, "arg");
      options1.addOption("", true, (String) null);
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2336, ">4~", ">4~", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_K)h3Otwg3rCwk7)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 692, 606, " ");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "[ option: ");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      Options options2 = options1.addOption("", "51f@Y]e)|iiJt", false, "+pv).78xpm");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "   ", options3, "_K)h3Otwg3rCwk7)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 116, "}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      options0.toString();
      String string0 = "org.apache.commons.cli.Options";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "}O^Ei]<logajs!NRW/", "", options0, 30, (-1), "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp("}O^Ei]<logajs!NRW/", "", options0, "}O^Ei]<logajs!NRW/");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2818));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+@-Y^VkZ";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+@-Y^VkZ", "+@-Y^VkZ", (Options) null, "+@-Y^VkZ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("V5PUh~%^tsGK,xc^Sd");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.rtrim("|]");
      MockFile mockFile0 = new MockFile("2rd0Y4e!4p6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-68), "|]", "\"", options0, 64, 64, "|]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("}O^Ei]<logajs!NRW/", "@Kl}{Fc1y:6id]Kb?v", options0, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      byteArrayOutputStream0.reset();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      objectArray0[6] = (Object) bufferedOutputStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Locale locale0 = Locale.PRC;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 3, 3, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ",|8");
      helpFormatter0.printHelp("-", "org.apache.commons.cli.HelpFormatter", options1, "--");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("", 1406, 1406);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.getOptionComparator();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1115);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 631, options0, 106, 631);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "H", options0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      String string0 = "(wF\"xv";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1594), 2812, "vRBg L9@24");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      mockPrintWriter0.write(44);
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "-", objectArray0);
      mockPrintWriter0.println((Object) "[ARG...]");
      helpFormatter0.printWrapped(printWriter0, 9, 2642, ">");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, (-1259), (-1548));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      byteArrayOutputStream0.reset();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      objectArray0[6] = (Object) bufferedOutputStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_K)h3Otwg3rCwk7)");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 692, 606, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-1957), (-956));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("V5PUh~%^tsGK,xc^Sd");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 57, options0, 737, 737);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("--", 1, 1);
      Options options0 = new Options();
      Options options1 = options0.addOption("jL", "", true, "");
      Options options2 = options1.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2490), " ", " ", options2, "jL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 1406, 1406);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("OoMmH", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      StringBuffer stringBuffer0 = null;
      int int0 = 2135;
      String string0 = "A";
      helpFormatter0.setLeftPadding(965);
      int int1 = (-2643);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2643), (-400), "A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[7] = (Object) " ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", " ] [ long ", options0, 116, 10, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      Options options0 = new Options();
      options0.addOption("OoMmH", true, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("PNCbRb?3A{:}3\"K#'J");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      options0.getOption("--");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options0, (-3613), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(127);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      byteArrayOutputStream0.writeTo(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, "#y5~QM");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("--");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(34);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("arg", options1, false);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[7] = (Object) " ";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName(" [ARG]");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(3041);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix("");
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 1371, (-2335));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("OoMmH", true, (String) null);
      helpFormatter0.printHelp(" ]", (String) null, options1, "@Kl}{Fc1y:6id]Kb?v");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", options0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printOptions(mockPrintWriter0, (-2220), options0, 911, 1377);
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(mockPrintWriter0, 440, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 862, "-", "-w|a=-BkY", options0, (-3803), 1222, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      String string0 = "}O^Ei]<logajs!NRW/";
      MockPrintStream mockPrintStream0 = new MockPrintStream("}O^Ei]<logajs!NRW/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "}O^Ei]<logajs!NRW/", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "!BlU!_] &=wy]Z|ywK}", options0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("PNCbRb?3A{:}3\"K#'J");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "]yRCQH|(F|wdbK\";";
      try { 
        MockURI.URI("-", "]yRCQH|(F|wdbK\";", "-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: -:]yRCQH%7C(F%7CwdbK%22;#-
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 0;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, (Options) null, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(42);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix(")e[~Iq-%B2r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      int int0 = 1112;
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      Option option0 = null;
      try {
        option0 = new Option("<\u0002_r0VCs+mAw^", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '<\u0002_r0VCs+mAw^' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 1229;
      helpFormatter0.findWrapPos("S>uo'#4RDb oWQ", 1239, 1229);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_K)h3Otwg3rCwk7)");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 452, "");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 2135;
      String string0 = "A";
      helpFormatter0.setLeftPadding((-163));
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2135, 2135, "A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      int int0 = (-891);
      helpFormatter0.setLeftPadding((-891));
      helpFormatter0.setNewLine("The option '");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string1 = "hW";
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("hW", objectArray0);
      Options options0 = new Options();
      mockPrintWriter0.print(74);
      String string2 = "f AJ)|t}6w'qF~d8";
      boolean boolean0 = true;
      String string3 = "\"Q/3<ZOxv=(";
      // Undeclared exception!
      try { 
        options0.addOption("f AJ)|t}6w'qF~d8", true, "\"Q/3<ZOxv=(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'f AJ)|t}6w'qF~d8' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2146, "");
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setNewLine("10&7}yf3rHq-oibn_B");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "N~=rR%{C;J";
      helpFormatter0.setOptPrefix("N~=rR%{C;J");
      int int0 = 1850;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1078);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "N~=rR%{C;J";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-989), "N~=rR%{C;J", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      int int0 = 1406;
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 1406, 1406);
      Options options0 = new Options();
      Options options1 = options0.addOption("jL", "", true, "");
      Options options2 = options1.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2490), "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options2, "jL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "YA2'6<#PXfXr2", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix("DqP");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, " ");
  }
}
