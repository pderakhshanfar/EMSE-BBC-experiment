/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:37:27 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultDescPad = (-656);
          helpFormatter0.setWidth((-656));
          helpFormatter0.getDescPadding();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor75.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "arg");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*2y7k&k*,@(<e_", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        MockURI.create(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0:  
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth((-4261));
      helpFormatter0.defaultLongOptPrefix = "x[28cXgd>n^dHe";
      helpFormatter0.defaultNewLine = "nCo(xow";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      String string0 = "line.separator";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "org.apache.comcons.cliHelpFormatter");
      option0.setArgName("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      option0.setLongOpt("org.apache.comcons.cliHelpFormatter");
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", ">", options0, "", true);
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "' was specified but an option from this group ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&wrr", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      MockFile mockFile0 = new MockFile("z$H:g67v<u#qVWT;", "z$H:g67v<u#qVWT;");
      File file0 = MockFile.createTempFile("arg", "", (File) mockFile0);
      mockFile0.setReadable(false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "mdW11)az(\"rp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // mdW11)az(\"rp
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "", options0, ">", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "C1pm d!}@IZ6");
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", ">", options0, "", true);
      helpFormatter0.rtrim("1vkAb%`OhCU");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("n", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.printHelp(9, "org.apache.commons.cli.Util", "usage: ", options0, "usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      String string1 = null;
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1103, " ] [ long ", "Lse'h}%;Y4pJS.p$)<", options0, (-1955), 39, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = null;
      int int0 = (-675);
      helpFormatter0.setLeftPadding((-675));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", (Options) null, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "arg", "F", options0, "usage: ");
      Options options1 = options0.addOption((String) null, " ", false, "-");
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, 3, options1, 3893, 2520);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "|=@gb");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, (-964), options2, 5171, 2252);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = 9;
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vPF3bljxJ", "vPF3bljxJ", (Options) null, "vPF3bljxJ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", (String) null, true, "aG>(;NvdOF~O");
      Options options3 = options2.addOption("", true, "\n");
      Option option0 = new Option("arg", ">");
      Options options4 = options3.addOption(option0);
      helpFormatter1.printHelp(3, "-", "--", options4, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2), options2, 1, 2516);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("");
      helpFormatter0.printHelp(56, "<", "<", options1, "?1F_k9@=p\"");
      helpFormatter0.renderOptions((StringBuffer) null, 368, options0, 1351, 64);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultDescPad = 32;
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = 0;
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "\n", options1, ")9||WuPKe!j0le", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      optionGroup1.toString();
      helpFormatter0.printHelp("<", "<", options2, "<", true);
      helpFormatter0.getOptPrefix();
      Options options3 = new Options();
      option0.setArgName((String) null);
      int int0 = 4863;
      helpFormatter0.printHelp(4863, "u##X!y{P", "-", options1, "u##X!y{P");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int1 = (-932);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-932), (-3133), "[-arg -]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Option option0 = new Option("arg", "usage: ", false, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("The option '", 10, (-2));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6F*mN|+k0Y`+ZOu!@V]";
      helpFormatter0.setDescPadding((-9));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6F*mN|+k0Y`+ZOu!@V]", "pW7|=X* 7h", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-";
      helpFormatter0.printHelp(1, "\n", "-", options0, " ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "|,Y(");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "|,Y(");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, ".Z", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("E", "");
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "E", options0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      mockPrintWriter0.print((Object) helpFormatter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, "\n");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "|,Y(");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("\n", options2, true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "mvEa9>`~s%]%PSIL.Yu";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "\n", "mvEa9>`~s%]%PSIL.Yu", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", (Options) null, "b\"o<f^.YyM2,9p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "I]_}[Ont!yoc:s", (String) null, options0, 3, 15, "usage: ", true);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getArgName();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 3, "-", "--", options0, 74, 3, (String) null, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zO4hl>0Ur wO_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "<");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 10, "");
      stringBuffer1.append(1);
      int int0 = 14;
      // Undeclared exception!
      try { 
        stringBuffer0.replace(195, 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2;
      String string0 = "5K";
      helpFormatter0.createPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 79, 44, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 3;
      int int1 = 64;
      String string0 = "j17#";
      String string1 = "H1\"]j";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-638), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "line.separator");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3012, "8Pe}sAZ@O3z3[.WWCe", "8Pe}sAZ@O3z3[.WWCe", options2, "usage: ", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(3012, "y", "y", options3, "-");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "nQUNnh{~*|7c!}n", "nQUNnh{~*|7c!}n", options0, 0, 44, "nQUNnh{~*|7c!}n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("D-Ja$Qc@Wo&Bt={cG", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = null;
      helpFormatter0.setLongOptSeparator("|+yeQX_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = (-3354);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1253), "sMu:21dDsU,.Y%s 6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "   ");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter1, 16, "   ", "", options0, 2, 16, "   ", false);
      helpFormatter0.rtrim("The option '");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 112;
      String string0 = "#h/={W{4r-nT";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("{[1^<iT0?M=}]l8*.", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{[1^<iT0?M=}]l8*.' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uXE";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "uXE", "V~6e}>R#5QFMZ5;", options0, 111, 111, "5/<Ho");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(34);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = null;
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", (String) null, true, "--");
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", false, "bfwGuu%?j.A7n;!u2C");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 1;
      helpFormatter0.rtrim(" ");
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options2, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(31, "org.apache.commons.cli.Option", "", (Options) null, "BC?:wXMX'8(E6", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "\n");
      options2.addOptionGroup(optionGroup0);
      Options options4 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "-";
      helpFormatter2.printHelp(31, "wSe,38", "yyQr'eJ[b3dUL.", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yyQr'eJ[b3dUL.");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 116, "\"C!+", "-", options3, 97, 74, " ", true);
      helpFormatter0.printHelp(116, "2SWx`6HJ#s4~'@Pq.4Q", "AuK1_<", options0, "\"C!+");
      helpFormatter2.printOptions(mockPrintWriter0, 1, options3, 74, 44);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "--", options0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, "5b2", options0);
      helpFormatter1.rtrim("]");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "Or/", "{EQ$sPe", options0, (-2857), 3549, "]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 458, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("arg", false, "\n");
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-1015));
      String string0 = "yyQr'eJ[b3dUL.";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(31, "wSe,38", "yyQr'eJ[b3dUL.", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 35, "", "", options0, 35, 35, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ljj/1!3^^v +");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "arg", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "[", "' contains an illegal character : '", options0, "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, " t*:JBJ=H\n", "NO_ARGS_ALLOWED", options1, "--");
      StringBuffer stringBuffer0 = new StringBuffer(11);
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("", "The option '");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "3_J", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6S(o$[G(T_P+");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "e7pS`1Y-{('{k|~d,");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6S(o$[G(T_P+";
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      String string1 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("NO_ARGS_ALLOWED", "i 9A 4u*PPR", true, "~K/z3Q(RZyjnW|&yv");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "XE|[6oNo-$akMg*!Ius", "5e+XM-PoMGno}hpl3z", options0, 1887, 2, "NO_ARGS_ALLOWED", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "\n");
      options2.addOptionGroup(optionGroup0);
      Options options4 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "-";
      helpFormatter2.printHelp(31, "wSe,38", "yyQr'eJ[b3dUL.", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yyQr'eJ[b3dUL.");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 116, "\"C!+", "-", options3, 97, 74, " ", true);
      Option option0 = null;
      try {
        option0 = new Option("-", "-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1609);
      StringWriter stringWriter1 = stringWriter0.append('x');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1609, 1142, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("Gr8{ S?4X.0!!qT?l", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      Option option0 = new Option("", ", ", true, "has already been selected: '");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, (-1360), options1, 3, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("arg", false, "\n");
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "-";
      helpFormatter2.printHelp(31, "wSe,38", "yyQr'eJ[b3dUL.", options0, "usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, " ");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "`K\"(f]YP\"_NktP\\F";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1975);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Locale locale0 = Locale.ITALY;
      mockPrintWriter0.format(locale0, "", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("   ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String string1 = "F[ otion: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 7, "F[ otion: ", "o;o~U9c3OdO<gNj*M!", options1, 26, 721, "o;o~U9c3OdO<gNj*M!", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.print((-3884.3816F));
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 18, "0.hX(x", "0.hX(x", options0, 21, 3, "0.hX(x", true);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(25, " ", "-", options0, "mk()$^2");
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(mockPrintWriter0, 18, options0, 2693, 21);
      StringBuffer stringBuffer0 = new StringBuffer("' was specified but an option from this group ");
      helpFormatter0.renderOptions(stringBuffer0, (-1304), options0, 3, 74);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("arg", false, "\n");
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(31, "wSe,38", "yyQr'eJ[b3dUL.", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(70, "usage: ", "usage: ", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 18, "0.hX(x", "0.hX(x", options0, 21, 3, "0.hX(x", true);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(25, " ", "-", options0, "mk()$^2");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", false, "");
      Options options2 = new Options();
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.rtrim("y");
      helpFormatter0.printHelp(2443, " | ", "#%LWZW_1hSk&", options1, "#%LWZW_1hSk&");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 31, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "-", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1362, "P\u0006Vz:k-", "--", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Comparator<Object> comparator0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "[ARG...]", false, "-");
      helpFormatter0.printHelp(1628, "-", "", options1, "arg", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", false, "");
      Options options2 = new Options();
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.rtrim("y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y");
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "hEj6~iCjvY1kdiE", "^O#nXo g7GgTA2r@XEq", options1, 721, 117, "*coH|+(~r", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("]7A}x=l~(q:|", "p^", options3, "+IR~w&EN2|FSN\"q", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("", true, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('%');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 63, options1, 63, 1);
      helpFormatter0.printHelp("+FT&CIr4j>8*xs", "", options2, "", true);
      helpFormatter0.printHelp(28, " ", " ", options2, "");
      helpFormatter0.findWrapPos(" ", 1876, 28);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.rtrim("y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y");
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "hEj6~iCjvY1kdiE", "^O#nXo g7GgTA2r@XEq", options1, 721, 117, "*coH|+(~r", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("]7A}x=l~(q:|", "p^", options3, "+IR~w&EN2|FSN\"q", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options1, true);
      helpFormatter0.rtrim("y");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2064), (-2064), "y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", true, "");
      Options options1 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options1, true);
      helpFormatter0.rtrim("y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}/K[WQOILdf");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2793), "\u0000_", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 125, options0, 125, 125);
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('[');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 125, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.renderOptions(stringBuffer0, (-1271), options0, 125, 3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", true, "");
      options1.addOption("", "org.apache.commons.cli.OptionGroup", true, "--");
      Option option0 = new Option("", false, ";BC6Q5");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("+X^vDBQO:Ik", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.rtrim("y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}/K[WQOILdf");
      options1.addOption("", "-", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1538), "}/K[WQOILdf", "", options1, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "8";
      Options options1 = options0.addOption("", "\n", true, " ");
      helpFormatter0.printHelp(",u6'V o!G,3|/)nR", options0, true);
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}/K[WQOILdf");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, (String) null, (String) null, options1, 721, 75, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, " ", " ", options0, "-");
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp(25, " ", "W6", options1, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "-";
      helpFormatter0.defaultSyntaxPrefix = "-";
      helpFormatter0.setLongOptPrefix("");
      String string2 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6S(o$[G(T_P+";
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      String string1 = " ]";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "i 9A 4u*PPR", true, "~K/z3Q(RZyjnW|&yv");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "6S(o$[G(T_P+", "", options2, "[K(|QYH@", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "6S(o$[G(T_P+";
      objectArray0[3] = (Object) "6S(o$[G(T_P+";
      objectArray0[4] = (Object) helpFormatter0;
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("", (String) null, false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?\";q:hSd,V", options0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) optionGroup0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) optionGroup0;
      mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "y", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      options0.addOption("arg", true, "");
      Options options1 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options1, true);
      helpFormatter0.rtrim("y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}/K[WQOILdf");
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "`K\"(f]YP\"_NktPF", "hEj6~iCjvY1kdiE", options2, 7, 721, "}/K[WQOILdf", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ]";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = (Object) "6S(o$[G(T_P+";
      objectArray0[3] = (Object) "6S(o$[G(T_P+";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "6S(o$[G(T_P+";
      objectArray0[7] = (Object) mockPrintStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "]");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1628, "]", ";!K<2>ZK/Eq", options0, "[ARG...]", true);
      options0.addOption((String) null, "[ARG...]", false, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      options0.addOption("8", " ", true, "y");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "arg", options2, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ]";
      objectArray0[2] = (Object) "6S(o$[G(T_P+";
      objectArray0[3] = (Object) "6S(o$[G(T_P+";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "6S(o$[G(T_P+";
      objectArray0[7] = (Object) mockPrintStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("izl<?.=:8R$h/-pF", ", ", options0, "y", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.setLongOptSeparator("y");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3012, "arg", "arg", options0, "-");
      File file0 = MockFile.createTempFile("usage: ", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 30, "}EXi@CA}!", (String) null, options0, 3012, 1353, "}EXi@CA}!");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-461);
      String string0 = "G_}mYlulQ\"u{`n>:Q(";
      Options options0 = new Options();
      helpFormatter0.printHelp("G_}mYlulQ\"u{`n>:Q(", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("MqNk", (-461), (-461));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "+&LzlFltwH fh";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "+&LzlFltwH fh";
      PrintWriter printWriter0 = mockPrintWriter0.printf("+&LzlFltwH fh", objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter1.format(locale0, "+&LzlFltwH fh", objectArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "", "NO_ARGS_ALLOWED", (Options) null, 2179, 2179, "has already been selected: '", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3893, "S");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("]", 3, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[5] = (Object) stringWriter0;
      Locale locale0 = Locale.GERMANY;
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ")>:WXAA", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3257), 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ]";
      objectArray0[2] = (Object) "6S(o$[G(T_P+";
      objectArray0[3] = (Object) "6S(o$[G(T_P+";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "6S(o$[G(T_P+";
      objectArray0[7] = (Object) mockPrintStream0;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "arg", " ", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 3, (-1360));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 740, "G_}mYlulQ\"u{`n>:Q(", "", options0, (-461), 869, "G_}mYlulQ\"u{`n>:Q(", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      MockFile mockFile0 = new MockFile(" ] [ long ", " ] [ long ");
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      int int0 = 1857;
      int int1 = 752;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 752, 1857, "8N8_");
      mockFile0.mkdirs();
      helpFormatter0.createPadding(752);
      helpFormatter0.getOptionComparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 0, 1857);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ] [ long ", " ] [ long ");
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      int int0 = 1857;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, (-3266), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-461);
      int int1 = 842;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setArgName("^");
      int int2 = (-458);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 842, (-458), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("<", "<", options1, ",zBy($+YXQdBf~`<{");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setLeftPadding((-2016));
      String string1 = "";
      try { 
        MockURI.URI("l?OdULb nfIe#&g", "\n", "", 3, "-", "\n", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: l?OdULb nfIe#&g://%0A@:3-?%0A#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3012, "y", "y", options0, "-");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2181;
      int int0 = 680;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4097));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">#hhRmH>", true);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      char char0 = '/';
      StringBuffer stringBuffer0 = new StringBuffer(736);
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 736, options1, 736, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      MockFile mockFile0 = new MockFile(" ] [ long ", " ] [ long ");
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1857, 44, " ] [ long ");
      mockFile0.mkdirs();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      String string0 = "xh}LSygMeQyrL2VX";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.addOption("", false, "usage: ");
      String string1 = "V7*|c";
      String string2 = "7{B]V+e)+\"";
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        options1.addOption("mA8  W1", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'mA8  W1' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      Options options1 = options0.addOption("", "--", true, "nTZ$`SE7+AFVW)U2.yM");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "%sl~6`:sexY<r");
      Options options2 = options1.addOption((String) null, "]i)UGiRg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(13);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 895, 10);
      assertEquals(13, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "ErV7[+FqZ/PS";
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("\n", "ErV7[+FqZ/PS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5(");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.TAIWAN;
      Locale.forLanguageTag("-");
      Option option0 = new Option("", "", false, "");
      mockPrintWriter0.print((Object) option0);
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 461, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uXE";
      helpFormatter0.defaultOptPrefix = "uXE";
      String string1 = "#";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "uXE";
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#", "#", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      String string0 = "d}fu";
      helpFormatter0.defaultArgName = "d}fu";
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      objectArray0[1] = (Object) " ]";
      objectArray0[2] = (Object) "6S(o$[G(T_P+";
      objectArray0[3] = (Object) "6S(o$[G(T_P+";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "6S(o$[G(T_P+";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) " ]";
      PrintStream printStream0 = mockPrintStream0.printf(" ]", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth((-4261));
      helpFormatter0.defaultLongOptPrefix = "x[28cXgd>n^dHe";
      helpFormatter0.defaultNewLine = "nCoKxo>";
      helpFormatter0.getOptionComparator();
      assertEquals((-4261), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      assertEquals(31, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "+&LzlFltwH fh";
      PrintWriter printWriter0 = mockPrintWriter0.printf("+&LzlFltwH fh", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter1.format(locale0, "+&LzlFltwH fh", objectArray0);
      mockPrintWriter1.print((Object) mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2322), "+&LzlFltwH fh", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("]", 3, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("Xiud7mj2", "]");
      options0.addOption(option0);
      boolean boolean0 = true;
      Option option1 = null;
      try {
        option1 = new Option("-", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("iaD_;K.l4[!e", options0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) " ", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "\n");
      Option option0 = new Option("NO_ARGS_ALLOWED", false, "-");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("' contains an illegal character : '", options4);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6S(o$[G(T_P+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6S(o$[G(T_P+";
      Options options5 = new Options();
      Option option1 = new Option("NO_ARGS_ALLOWED", "i 9A 4u*PPR", true, "~K/z3Q(RZyjnW|&yv");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "~K/z3Q(RZyjnW|&yv", "HHX=bKsvJZX67", options5, "sh.Ae@zTmN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      Options options2 = options0.addOption("8", " ", true, "y");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter0.rtrim("y");
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 458, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-461), "G_}mYlulQ\"u{`n>:Q(", "G_}mYlulQ\"u{`n>:Q(", options0, (-461), (-461), "G_}mYlulQ\"u{`n>:Q(", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "[";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) "[";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("[", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 3270;
      Options options0 = new Options();
      mockPrintWriter0.printf("--", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      mockPrintWriter0.print(false);
      Option option0 = null;
      try {
        option0 = new Option(" :: ", "$)7_u;ttB?", true, "0EX~@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "[ARG...]", false, "-");
      helpFormatter0.printHelp(1628, "9-MO U", "", options1, "arg", false);
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
  }
}
