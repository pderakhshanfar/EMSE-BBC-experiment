/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:42:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-244));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", ".WKHdWh|L", options1, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("TY3MK}|b(7si}!j+Ua", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setWidth((-1976));
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1976), "", "usage: ", options0, (-1976), (-2), " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultDescPad = (-1013);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-456));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "usage: ");
      helpFormatter0.defaultLeftPad = (-4206);
      option0.clone();
      option0.setDescription("arg");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "WIB4l");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "7jVgSyhk";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-1), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp(":4LJ8(/'l8[uW:~E{B", "8xzz,^E5m0b", options0, "p");
      helpFormatter0.defaultDescPad = (-4055);
      String string0 = "^3u";
      options1.addOption((String) null, "", true, "^3u");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-2650));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "\n", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[3];
      helpFormatter0.setWidth((byte) (-1));
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ae*4JjAt", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "~E/}rH@M<6K`p#";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("~E/}rH@M<6K`p#", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      int int0 = 2560;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 102, "]", "", options0, 102, 2560, "3=c32hS6xgKZhTOl%}", false);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      int int1 = (-3871);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 53, "PUERUOIjcZ", "", options0, 102, (-3871), "~E/}rH@M<6K`p#");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "zV5q", "zV5q", options0, "zV5q");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "-", options0, "");
      helpFormatter0.findWrapPos("", 74, 74);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "}?LIKfh:q@%MG|-w!", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "ix4moQ4v.b", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "s51Ik}4My$8yqC'MlK.");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "?${Q%>z>M]:j}EVN4", "?${Q%>z>M]:j}EVN4", options1, "*M", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("MUjsv", true, "MUjsv");
      options1.getOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1061, "MUjsv", "[ARG...]", options0, 74, 1, (String) null, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-703));
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-5Q;yvR ", "cmdLineSyntax not provided", options0, "-5Q;yvR ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      int int0 = 101;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(101, (String) null, (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = 2397;
      Options options0 = new Options();
      options0.getMatchingOptions("/t&");
      String string0 = " | ";
      Options options1 = options0.addOption("arg", " | ", true, " ] [ long ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", " :: ");
      MockFile mockFile1 = new MockFile(mockFile0, "bsa49?*b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile0.renameTo(mockFile1);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("Z$8#x");
      helpFormatter0.printHelp(101, "Cannot add value, list full.", "Cannot add value, list full.", options0, "Cannot add value, list full.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("Cannot add value, list full.", 3, 3);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("OT(-_x");
      helpFormatter0.getNewLine();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("", 117, 235);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('>');
      String string0 = "'GF&I,";
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.printUsage(printWriter0, 31, "'GF&I,");
      helpFormatter0.getArgName();
      int int0 = (-4165);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4165));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "V{48sl*XYE|;exBF-", (String) null, (Options) null, 13, 13, "<", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      String string0 = "fJ%*qRt+:Aui^d";
      // Undeclared exception!
      try { 
        options0.addOption("fJ%*qRt+:Aui^d", "arg", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fJ%*qRt+:Aui^d' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(2018);
      int int0 = 13;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "J1/6}5xU", true, "i0Fi0nB3M|x/i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(350);
      helpFormatter0.defaultLeftPad = 1754;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      helpFormatter0.setNewLine("");
      byteArray0[1] = (byte)1;
      helpFormatter0.setOptPrefix("");
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 267, ", ", " 0dA)1|7FsB>|", options0, 13, 13, "", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "]", ", ", options0, 74, 1496, ", ", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.defaultWidth = 2397;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "L\"-5Z6T)+");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vs:e}NqAI/%:", options2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "org.apache.commons.cli.AlreadySelectedException", options0, 1, (-1347), "1x|(5SX");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3407, "]", "b=GwolwD[?9vHl", (Options) null, 3407, 3407, "b=GwolwD[?9vHl", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = null;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rM!o5!npJ~*C", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "ZZ~");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1141, "?|X-?:e9Jo?]", " ", options0, 2024, 2, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "\n");
      StringBuffer stringBuffer1 = new StringBuffer("-?wi8n]TQX}s(a");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1496, "?qnE,;:c", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.println((double) 1);
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "' contains an illegal character : '");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 107, " [ARG]", " [ARG]", options3, (-2), (-1), "rGKdpSf\"sN*@", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "", "", options0, (-4087), 13, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "QZrQI/IDSSbg2330`b", "cmdLineSyntax not provided", options1, 3, 13, "Ej>A/I&MfV=VT4n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.findWrapPos("]", (-1), 171);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printHelp("]", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 166, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 3307, 171);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 163, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.findWrapPos("]", (-1), 171);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = null;
      helpFormatter0.renderOptions((StringBuffer) null, 13, options1, 2397, 171);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 54, (-1209), "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append((float) 74);
      stringBuffer0.append('7');
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, " [ARG]");
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "usage: ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", true, "'");
      helpFormatter0.printUsage(printWriter0, 10, " [ARG]", options4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("]", (-1), 171);
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "ZZ~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-3042), " | ", "   ", options2, 1367, 32, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, ", ", "\n", options0, 0, 13, ", ", false);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "-", true, "\n");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "org.apache.commons.cli.OptionGroup", options1, 1, 1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "--");
      Options options3 = options2.addOption("", "--", true, "-");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options3, "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "ZZ~");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.helpOptions();
      Option option1 = new Option("", true, "-");
      options0.addOption(option1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "", options0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      int int1 = 171;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 171, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "3y7l");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      option0.clearValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-4279), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" | ", (-1), (-535));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "-", true, "\n");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printHelp("line.separator", options0);
      StringBuffer stringBuffer0 = new StringBuffer("L/t,M|Zs");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4170), "@1/14", (String) null, options0, "L/t,M|Zs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "ZZ~");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "!zeY.[iR/g", "", options0, (-4491), (-4491), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, "{", "A CloneNotSupportedException was thrown: ", (Options) null, 34, 632, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getLeftPadding();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3181, (Options) null, 1, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(2397);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      options0.getOptionGroups();
      helpFormatter0.renderOptions(stringBuffer0, 25, options0, 2397, 2397);
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 25, "Hn;[hwSRr$wN");
      helpFormatter0.renderWrappedText(stringBuffer0, 2397, 25, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 2397, 0);
      helpFormatter0.printHelp(" ", " ", options0, (String) null, false);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("^FZD=]r:rY", "J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, "\n");
      helpFormatter0.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 245, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "");
      helpFormatter0.printHelp("^{2}kX(!c(5DFv huJq", "^{2}kX(!c(5DFv huJq", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("Qg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Options options1 = options0.addOption(option1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("::TG0@U%<_Y/B ", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, (String) null, options1, 115, (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      optionGroup0.addOption(option0);
      Option option1 = new Option("jH", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), " ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Qg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "");
      options0.addOption(option1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("::TG0@U%<_Y/B ", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("1{e%u2+7g[74DSZ2s\"2");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("]", (-1), 171);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "-", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Option option0 = new Option("", "line.separator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "--");
      options1.addOption(option1);
      helpFormatter0.printHelp("Z;r iiSGcEGIZZ", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        options1.addOption("-", "]", true, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">*(w8U`:0^YZSb";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">*(w8U`:0^YZSb", ">*(w8U`:0^YZSb", (Options) null, ">*(w8U`:0^YZSb", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 2397, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1, 13, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 13, 2397, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      mockPrintWriter0.print(0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/--");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("arg", objectArray0);
      mockPrintWriter0.println((double) 74);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 245, "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      options1.addOption("arg", true, "arg");
      Options options2 = options0.addOption("arg", "-", false, "usage: ");
      options2.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2591, (-1), "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      stringBuffer0.append((Object) options0);
      stringBuffer1.insert(0, (CharSequence) "--", 0, 1);
      stringBuffer1.appendCodePoint(1);
      stringBuffer1.append((-1.0F));
      stringBuffer1.append((Object) stringBuffer0);
      options0.getOptions();
      stringBuffer1.delete(0, 0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options1 = new Options();
      helpFormatter0.printHelp(" ", " ", options1, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " | ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " | ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " | ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      helpFormatter0.setNewLine("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.defaultWidth = (-273);
      String string0 = "w_l<!Kn";
      StringBuffer stringBuffer0 = new StringBuffer("F");
      int int0 = 2335;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "F");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption(" :: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(2648);
      helpFormatter0.createPadding(2364);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "h&i=AV";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<;[$VJS+=R0wq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1908), "Gx<uo;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2386, "arg", "w?4TWC`", (Options) null, "nnRp_Mzja", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.print(0.0);
      helpFormatter0.setSyntaxPrefix("");
      String string1 = null;
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      options0.addOption((String) null, "-", false, "");
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.OptionGroup", options1, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.findWrapPos("]", (-1), 171);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Option option0 = new Option("", "line.separator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printHelp("]", options1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.printHelp(408, "]", "line.separator", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, "$nh'Z`Rit;", options0, "JX5/]8E8+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("o2I)MLVg3S/(", "org.apache.commons.cli.Option", true, "Illegal option name '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'o2I)MLVg3S/(' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int0 = 2397;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 2397, 0);
      int int1 = 13;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 13, "\n");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-2);
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "G%xdLg>";
      helpFormatter1.setLongOptPrefix("G%xdLg>");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 64, (-2), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "h&i=AV";
      String string1 = "";
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h&i=AV");
      int int0 = 1413;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1413, (Options) null, (-1005), 498);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1184;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1184, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "Q8[\"g;*\rt@uCD`DaT");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "SuFL";
      Option option0 = null;
      try {
        option0 = new Option(" ", "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "--", false, "");
      Option option0 = new Option("", true, "-");
      Options options2 = options0.addOption("", false, "");
      options2.addOptionGroup(optionGroup0);
      options1.addOption("3ZAK", " ", false, "--");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      mockPrintWriter0.format(" ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1637), "NO_ARGS_ALLOWED", "-", options0, 2071, 1716, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultNewLine = "rF";
      int int0 = 0;
      helpFormatter0.setOptPrefix("rF");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultNewLine = "rF";
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding((-5514));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      String string0 = "~-jxAz[@M<>";
      Options options0 = new Options();
      options0.hasOption("rF");
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "rF", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "usage: ");
      options3.helpOptions();
      Option option0 = new Option("", true, "Z~%");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.setArgName("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 63;
      helpFormatter0.printHelp(63, "O(]9D]d)18u,9s @s~", "O(]9D]d)18u,9s @s~", options0, "pu,ymYY{`mKiAA}#", true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.format("", objectArray0);
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile(" [ARG]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      int int1 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "", "arg", options0, 31, 31, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName((String) null);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.hasShortOption("m");
      helpFormatter0.printHelp("RW", "", options2, ";B+]<pn");
      helpFormatter0.setNewLine("WR}NCMQ8a`t0$=D#{E");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 467;
      stringBuffer0.appendCodePoint(74);
      int int1 = 44;
      int int2 = (-320);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 467, options0, 44, (-320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6";
      Options options0 = new Options();
      Option option0 = new Option("TfXlakm1", "");
      options0.addOption(option0);
      helpFormatter0.printHelp("6", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = (-1233);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1233), options0, (-1233), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "&legF)#X7.9T#m`eQZY";
      helpFormatter0.setNewLine("&legF)#X7.9T#m`eQZY");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 1557;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1557, "arg");
      String string0 = "uG";
      String string1 = "-Q>2T)ZmE";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-Q>2T)ZmE", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '-Q>2T)ZmE' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "usage: ");
      options3.helpOptions();
      Options options4 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(")ls7`<#'6+OZ[n1bF", "", options3, "(dV*;ZSwiP7aW4B");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      String string0 = "6";
      Options options0 = new Options();
      Option option0 = new Option("TfXlakm1", "");
      options0.addOption(option0);
      helpFormatter0.printHelp("6", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append('H');
      int int0 = (-993);
      helpFormatter0.renderWrappedText(stringBuffer0, 1902, (-993), "");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("arg");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (String) null, (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 245, "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      options1.addOption("arg", true, "arg");
      Options options2 = options0.addOption("arg", "-", false, "usage: ");
      options2.getMatchingOptions("arg");
      helpFormatter0.printHelp(123, "uG", "", options2, "uG", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockPrintWriter1;
      mockPrintWriter1.format("--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "[ option: ", options0, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("C$", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.defaultDescPad = 244;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "[ Options: [ short ", options1, "Er\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "-", true, "\n");
      Options options2 = new Options();
      helpFormatter0.printHelp("/9+6JcJ$DgEbP", "", options1, "org.apache.commons.cli.OptionGroup");
      PrintWriter printWriter0 = mockPrintWriter0.append('O');
      helpFormatter0.printOptions(printWriter0, 117, options0, 0, 679);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.findWrapPos("]", (-1), 171);
      String string1 = "0Y0qv{v?";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Option option0 = new Option("", "<");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printHelp("0Y0qv{v?", options1);
      StringBuffer stringBuffer0 = new StringBuffer("Z6~;pro0_.-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "0Y0qv{v?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h&i=AV", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix((String) null);
      int int0 = (-675);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 13, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?9(I9-M";
      helpFormatter0.setLongOptSeparator("arg");
      StringBuffer stringBuffer0 = new StringBuffer("?9(I9-M");
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "?9(I9-M", false, "arg");
      options0.hasShortOption("?9(I9-M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = (-1990);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, (-1990), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.setLongOptSeparator("K`^]f9qcI");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("z", "-", false, "z");
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix((String) null);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-2);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      stringBuffer0.append(0.0);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cJkqVRo0hl5W#/oev]";
      helpFormatter0.setArgName("cJkqVRo0hl5W#/oev]");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-1695));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("}u%)", false, "+Do=!;e4x,S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}u%)' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1951, 998, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1951, options0, (-2), 1951);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      options0.helpOptions();
      option0.addValueForProcessing("r6j!i#dq");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      int int0 = 2745;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, (String) null, "", options1, 2745, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.print(0.0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      mockPrintWriter1.println((double) 74);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "v!2@SW");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-4772), "", "NO_ARGS_ALLOWED", options0, (-942), (-942), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("`dr%{^xE4");
      helpFormatter0.getDescPadding();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 3, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultSyntaxPrefix = "V";
      Option option0 = new Option("V", true, "2=xs }r_dPt%)L_I");
      String string0 = "";
      options0.addOption("", true, "V");
      option0.addValueForProcessing(" ");
      Options options1 = options0.addOption(option0);
      options0.helpOptions();
      Options options2 = options1.addOption("V", "V", true, "Oan|X1E");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "V", "V", options2, "2=xs }r_dPt%)L_I", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 0;
      int int1 = 0;
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      stringBuffer1.insert(0, (CharSequence) "--", 0, 1);
      stringBuffer1.append((-1.0F));
      stringBuffer1.append((Object) stringBuffer0);
      options0.getOptions();
      stringBuffer1.delete(0, 0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VBKbu%2/ex+`!Cd";
      helpFormatter0.setNewLine("VBKbu%2/ex+`!Cd");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("arg", (-2155), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
