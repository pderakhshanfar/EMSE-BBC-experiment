/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:35:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultDescPad = (-1529);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-1529), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.rtrim("Bwc\"");
      assertEquals("Bwc\"", string0);
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1529), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-1529), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1529), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-1529), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals((-1529), int1);
      assertFalse(int1 == int0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1529), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-1529), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      helpFormatter0.printHelp(0, "z}BA}lu`&R?.r", "z}BA}lu`&R?.r", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, "arg", true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("arg", "usage: ", options1, "-", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-991), options1, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.defaultWidth = 0;
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, "arg", true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "usage: ", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "[");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      option0.setArgName("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printHelp(2436, "{Ub>3a0B $MB/fEx*5", " ", options2, "");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(127, option0.getId());
      assertEquals("[", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "4@-q-:|x) E|Alel*A!");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options3 = options2.addOption("arg", "ZE'NZVV>$t2", true, "--");
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertNotNull(options3);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("arg", "JY7,9g:lKXp9W]>=", false, "--");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("JY7,9g:lKXp9W]>=", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      Options options4 = options3.addOption(option0);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options4);
      assertSame(options2, options0);
      assertSame(options3, options4);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options1);
      assertSame(options4, options2);
      assertNotNull(options4);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("JY7,9g:lKXp9W]>=", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "4@-q-:|x) E|Alel*A!", "org.apache.commons.cli.HelpFormatter", options4, "h9v#;'C<kKinny", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--", false, " ");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      Options options2 = options0.addOption("_X", "", false, "-");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      List list0 = options2.helpOptions();
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertNotNull(optionGroup1);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertNotNull(optionGroup2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Options options3 = options0.addOptionGroup(optionGroup2);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter1.printHelp("&1.+Kmo;L3", "-", options3, "", true);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("--", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "arg", options2, 3, (-2365), "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("arg", "--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/arg/--", mockFile0.toString());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) helpFormatter0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      assertEquals(7, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/arg/--", mockFile0.toString());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(mockPrintWriter1);
      
      mockPrintWriter0.println();
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "y?L%3Uam#", ">", (Options) null, 74, 66, "y?L%3Uam#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--", false, " ");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      optionGroup2.setRequired(true);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      helpFormatter0.printHelp("m1UJQOW+?A", "arg", options0, "", true);
      assertSame(options0, options1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setArgName((String) null);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = helpFormatter0.getArgName();
      assertNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('c');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("c--", stringWriter0.toString());
      assertEquals("c--", stringWriter1.toString());
      
      int int0 = 44;
      stringWriter0.close();
      assertSame(stringWriter0, stringWriter1);
      assertEquals("c--", stringWriter0.toString());
      
      String string0 = "RNMX_!";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "RNMX_!", "RNMX_!", (Options) null, (-1755), 44, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\"-;:qSR0IJQId\f*?";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[6] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[7] = (Object) "\"-;:qSR0IJQId\f*?";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter0.setNewLine("");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("&>9Ae");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("&>9Ae", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("", string0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("&>9Ae", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string1 = helpFormatter0.rtrim((String) null);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNull(string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("&>9Ae", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "--";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("NO_ARGS_ALLOWED", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      
      printWriter0.close();
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(6, objectArray0.length);
      assertEquals(15L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      
      int int0 = 3;
      helpFormatter0.printWrapped(printWriter0, 3, 5301, "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(6, objectArray0.length);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(15L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter1.setNewLine("&>9Ae");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("&>9Ae", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter0.setLongOptSeparator("--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile(" ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(" ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      helpFormatter0.defaultNewLine = null;
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options1 = options0.addOption((String) null, (String) null, true, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", (String) null, options1, 74, 74, "", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, "I)}%", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = (-2243);
      helpFormatter0.setWidth((-2243));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2243), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2243), helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int1 = helpFormatter0.getWidth();
      assertEquals((-2243), int1);
      assertTrue(int1 == int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2243), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2243), helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2243), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2243), helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("-", true, "uZ!o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "--";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("NO_ARGS_ALLOWED", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      helpFormatter0.printWrapped(printWriter0, 74, 5301, "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(6, objectArray0.length);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setNewLine("\n");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 5301, "A CloneNotSupportedException was thrown: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals("", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1776, 3, "!!?ov}a");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      MockFile mockFile0 = new MockFile("--", "");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "a[| Err_nU F7";
      objectArray0[3] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "NO_ARGS_ALLOWED";
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/experiment", file0.getParent());
      assertEquals("--", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/--", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      objectArray0[6] = (Object) "";
      String string1 = mockFile0.getCanonicalPath();
      assertEquals("/experiment/--", string1);
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("a[| Err_nU F7", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockFile0, file0);
      assertSame(mockPrintWriter0, printWriter0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(printWriter0);
      assertEquals(9, objectArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 5301, "");
      assertNotSame(mockFile0, file0);
      assertSame(mockPrintWriter0, printWriter0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      helpFormatter1.setNewLine("e*/a");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("e*/a", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("a[| Err_nU F7");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("a[| Err_nU F7", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      Comparator<Locale> comparator0 = (Comparator<Locale>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", true, "usage: ");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      Options options2 = options1.addOption(option0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      List list0 = options1.helpOptions();
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotNull(list0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options3 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 937, "ypV!P@SMeC\"cgy,~GN!", options0);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockFile mockFile0 = new MockFile((File) null, ">");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(8, objectArray0.length);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(">", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(">", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(mockPrintWriter1);
      assertEquals(8, objectArray0.length);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, printWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(printWriter1);
      assertEquals(8, objectArray0.length);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(">", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(">", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-1), ">", "", options0, (-1), (-1), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setNewLine((String) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultWidth = 2995;
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setDescPadding(2995);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(2995, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(2995, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(2995, int0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(2995, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(2995, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      int int1 = helpFormatter0.getWidth();
      assertEquals(2995, int1);
      assertTrue(int1 == int0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(2995, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(2995, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.createPadding(1959);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(2995, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(2995, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter0.getNewLine();
      assertNull(string1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(2995, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(2995, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(2995, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(2995, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", true, "usage: ");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      
      Options options2 = options1.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options3 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "   ", "arg", options1, 32, (-2), "ypV!P@SMeC\"cgy,~GN!", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("arg");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5309, 5309, "\n");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", true, "usage: ");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertNotNull(options2);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 33, "");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      
      helpFormatter0.printHelp(10, "ypV!P@SMeC\"cgy,~GN!", "", options0, "arg");
      assertSame(options0, options1);
      assertNotSame(options0, options2);
      assertFalse(options0.equals((Object)options2));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "[ Options: [ short ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter0.printHelp(" ", "usage: ", options1, "5GNeFv5>\",ATD?)", true);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertNotSame(options0, options2);
      assertNotSame(options1, options2);
      assertSame(options1, options0);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(options0.equals((Object)options2));
      assertFalse(options1.equals((Object)options2));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 31, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLeftPadding((-550));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultDescPad = (-4330);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("DBd+`&Ya`Wz{f 8G=");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals((-550), int0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("Vow");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Vow", helpFormatter0.getLongOptSeparator());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int1 = helpFormatter0.getLeftPadding();
      assertEquals((-550), int1);
      assertTrue(int1 == int0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Vow", helpFormatter0.getLongOptSeparator());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      assertNotNull(stringBuffer0);
      assertEquals("--", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1979, 133, "DBd+`&Ya`Wz{f 8G=");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Vow", helpFormatter0.getLongOptSeparator());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(19, stringBuffer0.length());
      assertEquals("--DBd+`&Ya`Wz{f 8G=", stringBuffer0.toString());
      assertEquals("--DBd+`&Ya`Wz{f 8G=", stringBuffer1.toString());
      assertEquals(19, stringBuffer1.length());
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Vow", helpFormatter0.getLongOptSeparator());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string2 = helpFormatter0.getNewLine();
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-4330), helpFormatter0.defaultDescPad);
      assertEquals((-550), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Vow", helpFormatter0.getLongOptSeparator());
      assertEquals("DBd+`&Ya`Wz{f 8G=", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-4330), helpFormatter0.getDescPadding());
      assertEquals((-550), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("-");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.setOptPrefix("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertEquals("-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
      
      String string2 = helpFormatter0.getOptPrefix();
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp(32, "ypV!P@SMeC\"cgy,~GN!", "/dHdlKWEoVWuj", options1, "/dHdlKWEoVWuj");
      assertNotSame(options1, options0);
      assertFalse(options1.equals((Object)options0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(string0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.printHelp("{kDl.", "", options0, "", false);
      assertNotSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      assertEquals("usage: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      assertNotNull(stringBuffer0);
      assertEquals("usage: ", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 325, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLeftPadding((-1));
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultDescPad = 563;
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(563, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(563, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(563, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(563, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(563, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int1 = helpFormatter0.findWrapPos("\n", 3749, (-1));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(563, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(563, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int2 = helpFormatter0.findWrapPos("\n", (-1), 3749);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(563, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(563, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("tH8");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = helpFormatter0.createPadding(0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = (-3947);
      helpFormatter0.defaultWidth = (-3947);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-3947), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Collection collection0 = options0.getOptions();
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.optionComparator = null;
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile(" ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" ", mockFile0.toString());
      assertEquals(" ", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNull(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "ypV!P@SMeC\"cgy,~GN!";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, (String) null, true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(74, "<", "\"-;:qSR0IJQId\f*?", options1, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("<", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      helpFormatter0.printWrapped(printWriter0, 3, 5325, "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(6, objectArray0.length);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setNewLine("&>9Ae");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("&>9Ae", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      int int1 = helpFormatter1.getLeftPadding();
      assertEquals(1, int1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int1 == int0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("&>9Ae", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getArgName();
      assertEquals("", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      int int0 = 1516;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, (-8), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "q;4tT| HUKu~=1M";
      MockFile mockFile0 = new MockFile("<", "q;4tT| HUKu~=1M");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 6, 3, "<");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("/experiment/</q;4tT| HUKu~=1M", mockFile0.toString());
      assertEquals("/experiment/<", mockFile0.getParent());
      assertEquals("q;4tT| HUKu~=1M", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 67, options0, (-1594), 67);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", true, "O7");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 49, options1, 3005, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, (Options) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      helpFormatter0.setDescPadding((-1290));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1290), helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-1290), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultLongOptPrefix = null;
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-1290), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.rtrim(" :: ");
      assertEquals(" ::", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1290), helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-1290), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptPrefix());
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNull(string1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1290), helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-1290), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptPrefix());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1290), helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-1290), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      int int0 = 63;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0002");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("\n", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, (String) null, true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "<", (String) null, options1, 3176, 3176, "", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\n", mockFile0.getParent());
      assertEquals("/experiment/\n/ ", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, 31, options2, 3176, 2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      String string0 = "lW&Xgdlt<c>,^j";
      MockFile mockFile0 = new MockFile("!8");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "}1e8_f@ oq2nv\\baE";
      helpFormatter0.setNewLine("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 74;
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 26, "<");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals(" ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      helpFormatter0.printHelp(printWriter0, 26, "Bb!h", "Bb!h", options0, 74, 3135, (String) null, true);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(2, objectArray0.length);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string1 = helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      assertEquals("A CloneNotSupportedException was thrown:", string1);
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Options options1 = options0.addOption((String) null, (String) null, true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(74, "<", "\"-;:qSR0IJQId\f*?", options1, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        options1.addOption(" ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "[ option: ");
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1711, "]", "}1e8_f@ oq2nv\baE", options0, 5325, 5325, "\"-;:qSR0IJQId\f*?", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, (String) null, true, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.printHelp(74, "org.apache.commons.cli.Option", "m", options0, "*k[KUex7s#%9P~,");
      assertSame(options0, options1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(1, objectArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!QrO9_JyJ??K<", "[ Options: [ short ", (Options) null, "RI", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ", "vH:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(":gHg\"");
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1565, "KZDK(+FNVQU.wf", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, 707, 1, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintWriter0.print("mP}x$x+");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("--", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      Options options3 = options2.addOption(option0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      Options options4 = options3.addOption((String) null, "   ", true, "S'L6sqF<hWA");
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options4);
      assertSame(options3, options0);
      assertSame(options4, options1);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertNotNull(options4);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      helpFormatter0.printHelp(" ]", "", options4, (String) null, true);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options4);
      assertSame(options3, options0);
      assertSame(options4, options1);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "\n");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("\n", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(5325, "x3xBP?_T+ZE_} QPl", "x3xBP?_T+ZE_} QPl", options0, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.rtrim("=^^W:SH;Pdm,.?1");
      assertEquals("=^^W:SH;Pdm,.?1", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.printHelp("=^^W:SH;Pdm,.?1", "=^^W:SH;Pdm,.?1", options0, (String) null, false);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.setLongOptSeparator("\n");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ", "'");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2016, 3, "'");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /'", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("'", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      
      helpFormatter1.setNewLine("arg");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(helpFormatter1, helpFormatter2);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = ", ";
      // Undeclared exception!
      helpFormatter1.printHelp(0, "H[)Z^", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setLongOptSeparator("\n");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("arg", "nKJH\"5y# ~0UYHi#T0q");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 882, "");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("nKJH\"5y# ~0UYHi#T0q", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/arg/nKJH\"5y# ~0UYHi#T0q", mockFile0.toString());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("nKJH\"5y# ~0UYHi#T0q", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/arg/nKJH\"5y# ~0UYHi#T0q", mockFile0.toString());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      helpFormatter0.printHelp(printWriter0, 64, "-", "QF", options0, 74, 882, "", true);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("nKJH\"5y# ~0UYHi#T0q", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/arg/nKJH\"5y# ~0UYHi#T0q", mockFile0.toString());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("arg", "line.separator");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("1$ygH3V", "4O6!8q&", false, "org.apache.commons.cli.ParseException");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(47, "; R'e@{s|*pZ", "; R'e@{s|*pZ", options1, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options2 = options0.addOption("", false, "org.apache.commons.cli.ParseException");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      helpFormatter0.printHelp(47, ";oX2<2,O&z", "4O6!8q&", options1, "--");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setLongOptSeparator("\n");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "'");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 10, "--");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(mockFile0.isDirectory());
      assertEquals("'", mockFile0.getName());
      assertEquals("/experiment/usage: /'", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      
      boolean boolean0 = mockPrintWriter0.checkError();
      assertFalse(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("'", mockFile0.getName());
      assertEquals("/experiment/usage: /'", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(3L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      
      helpFormatter1.setArgName("");
      assertNotSame(helpFormatter1, helpFormatter2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("\n", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("", helpFormatter1.getArgName());
      
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 64, "^'dW_1R0", "}1e8_f@ oq2nv\baE", options0, 74, 3, "--", true);
      assertSame(options0, options1);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertFalse(mockFile0.isDirectory());
      assertEquals("'", mockFile0.getName());
      assertEquals("/experiment/usage: /'", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(3L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print('X');
      assertEquals("\n", mockFile0.getName());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "\n");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", mockFile0.getName());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "x3xBP?_T+ZE_} QPl");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(24, "m", "", options1, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options2 = options0.addOption("m", "rt", false, "arg");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 280, "wt=", options2);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", mockFile0.getName());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setNewLine("\n");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(5350, "usage: ", "", options0, " ");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp(5350, "-", "-", options0, "");
      assertNotSame(options0, options1);
      assertFalse(options0.equals((Object)options1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, (String) null, true, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(74, "<", "\"-;:qSR0IJQId\f*?", options1, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options2 = options1.addOption("arg", true, (String) null);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "[snCk3Zr~x@O?!c", "arg", options0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-664), "}1e8_f@ oq2nv\baE", "iAh1R3yhb@", options0, 5325, 3, "}1e8_f@ oq2nv\baE", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "\n");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\n", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "}1e8_f@ oq2nv\baE", "", options0, 24, 24, "}1e8_f@ oq2nv\baE", true);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\n", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, (-1587), options0, 63, 63);
      assertNull(stringBuffer0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 63;
      String string0 = "";
      String string1 = "VDZ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, (String) null, "", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?,N=/\"XNe(HlB", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(20, objectArray0.length);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals("/usage: ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, "", false, "\n");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage(printWriter0, 493, "", options1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(20, objectArray0.length);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals("/usage: ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "P1M#A<U>QOlv", ";q?t8 ~o>XF", options0, 493, (-1296), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.defaultArgName = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /usage: ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "usage: ", false, "FuV+Qve#zE");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage(printWriter0, 493, "", options1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(2, objectArray0.length);
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/usage: /usage: ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FNZE,&UpJ.", "usage: ", options2, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile("usage: ", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(74);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: / ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, " ");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: / ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      helpFormatter0.setNewLine("rHkxro1");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("rHkxro1", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", false, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp(498, ">", "", options1, "rHkxro1");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("rHkxro1", helpFormatter0.getNewLine());
      
      StringWriter stringWriter0 = new StringWriter(889);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 4719, options1, 498, 4719);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("rHkxro1", helpFormatter0.getNewLine());
      assertEquals(47, stringBuffer0.length());
      assertEquals(47, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = mockFile0.setWritable(false, false);
      assertTrue(boolean0);
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/usage: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(20, objectArray0.length);
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/usage: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      
      String string1 = "d";
      helpFormatter0.setNewLine("d");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("d", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 10;
      String string2 = "4Rw9*0GA4tP[VH.pAB";
      String string3 = "/,To-@HZ:;5jhp";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "&<AMXl");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "\n");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: /\n", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("\n", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(1659, "m", "}1e8_f@ oq2nv\baE", options0, "m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("vt:", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(74);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("vt:", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "vt:");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("vt:", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.printHelp(5325, "line.separator", "--", options0, "");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.printHelp("usage: ", options0, false);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setNewLine("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      Options options2 = options0.addOption("arg", false, ">");
      assertNotSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, (String) null, (String) null, options2, (-998), 498, "0I", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setNewLine("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "0I";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(3, objectArray0.length);
      
      helpFormatter0.printWrapped(printWriter0, 74, "");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, objectArray0.length);
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      
      PrintWriter printWriter0 = mockPrintWriter0.format("<", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      helpFormatter0.printWrapped(printWriter0, 3, 5325, "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(6, objectArray0.length);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.setNewLine("&>9Ae");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("&>9Ae", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("m");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(74);
      assertEquals("m", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("m", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 5325, "vt:");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("m", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("m", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(5325, ", ", "m", options0, "3p/2L+'sTY]27^");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5325, ", ");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("m", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("m", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "H4~Nra", options0, "}1e8_f@ oq2nv\baE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("8[p\"eZrV", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4719, 1408, "");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/8[p\"eZrV", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/8[p\"eZrV/usage: ", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("usage: ", mockFile0.getName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "cmdLineSyntax not provided", " ", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      String string0 = helpFormatter0.rtrim((String) null);
      assertNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter1.setLeftPadding(1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      assertEquals(8, objectArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/arg/usage: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertEquals("usage: ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      
      helpFormatter2.setNewLine("org.apache.commons.cli.HelpFormatter");
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, "", "--", options0, "|<(:n?*v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setLeftPadding((-3041));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-3041), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-3041), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      MockFile mockFile0 = new MockFile("", " bb3_J8D@MZ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "wu_Fq~/4>/9>/eXn3u:";
      objectArray0[1] = (Object) "wu_Fq~/4>/9>/eXn3u:";
      objectArray0[2] = (Object) " bb3_J8D@MZ";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "8[p\"eZrV";
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "wu_Fq~/4>/9>/eXn3u:";
      PrintWriter printWriter0 = mockPrintWriter0.format("wu_Fq~/4>/9>/eXn3u:", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(9, objectArray0.length);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/ bb3_J8D@MZ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(" bb3_J8D@MZ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/ bb3_J8D@MZ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(" bb3_J8D@MZ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      
      Options options1 = options0.addOption((String) null, "FuV+Qve#zE", true, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1009), "oWN@{,LnF+A#TIn", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setNewLine("8[p\"eZrV");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("8[p\"eZrV", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(5325, "usage: ", "", options0, "8[p\"eZrV");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("8[p\"eZrV", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0f>jV");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 5325, 31);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("8[p\"eZrV", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("8[p\"eZrV", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.rtrim("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLeftPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("arg", "m");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format(".5p5z6:=U:9UiWV{yF", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("m", mockFile0.getName());
      assertEquals("/experiment/arg/m", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      helpFormatter0.setNewLine("d");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("d", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "m", "c5;:.|,N*", (Options) null, "/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("m");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(74);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("vt:", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("vt:", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(1659, "m", "}1e8_f@ oq2nv\baE", options0, "");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("m", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "\n", true, "-");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("p818_@#QiR", options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int1 = (-261);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = (-2030);
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      
      MockFile mockFile0 = new MockFile(" :: ", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/ :: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/ :: /usage: ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", false, "");
      assertSame(options1, options0);
      assertSame(options0, options1);
      assertNotNull(options1);
      
      int int1 = 3;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3347;
      helpFormatter0.setNewLine("tr1;E?YU{=ooq");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("tr1;E?YU{=ooq", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3347, "usage: ", "}1e8_f@ oq2nv\baE", options0, "tr1;E?YU{=ooq");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setNewLine("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      Options options2 = options0.addOption("arg", false, ">");
      assertSame(options0, options2);
      assertNotSame(options0, options1);
      assertNotSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertNotNull(options2);
      
      helpFormatter0.printHelp(498, "0I", "}1e8_f@ oq2nv\baE", options2, "f[Nf?w;![");
      assertSame(options0, options2);
      assertNotSame(options0, options1);
      assertNotSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 485, options0, 485, 485);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 485, 485, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer0.toString());
      assertEquals(53, stringBuffer0.length());
      assertEquals(53, stringBuffer1.length());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer1.toString());
      assertEquals(53, stringBuffer2.length());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer2.toString());
      
      stringBuffer2.ensureCapacity(2166);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer0.toString());
      assertEquals(53, stringBuffer0.length());
      assertEquals(53, stringBuffer1.length());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer1.toString());
      assertEquals(53, stringBuffer2.length());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", stringBuffer2.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter0.printHelp("arg", "--", options0, "org.apache.commons.cli.ParseException");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("--", "wu_Fq~/4>/9>/eXn3u:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "wu_Fq~/4>/9>/eXn3u:";
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertEquals("eXn3u:", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/--/wu_Fq~/4>/9>", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/--/wu_Fq~/4>/9>/eXn3u:", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", true, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1513, "FuV+Qve#zE", options0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(options0, options1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertTrue(mockFile0.isFile());
      assertEquals("eXn3u:", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/--/wu_Fq~/4>/9>", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/--/wu_Fq~/4>/9>/eXn3u:", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(74);
      assertTrue(mockFile0.canRead());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertTrue(mockFile0.canRead());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1659, "", "}1e8_f@ oq2nv\baE", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultArgName = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("/experiment/usage: /usage: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("usage: ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "usage: ", false, "FuV+Qve#zE");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      int int0 = helpFormatter0.findWrapPos("", 124, 124);
      assertEquals((-1), int0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setLongOptSeparator(" ] [ long ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ] [ long ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      MockFile mockFile0 = new MockFile(" ] [ long ", " MhRGJiUX|");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1929), 0, "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('c');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, (-600));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("vt:", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "m#22Z-z'Ra/#8;}6k@", "vt:", options0, "m#22Z-z'Ra/#8;}6k@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "arg");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-313), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("\"-;:qSR0IJQId\f*?", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("<", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      assertEquals(" ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      helpFormatter0.printWrapped(printWriter0, 3, 5325, "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(6, objectArray0.length);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/\"-;:qSR0IJQId\f*?/ ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter1.setNewLine("&>9Ae");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("&>9Ae", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: /usage: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "usage: ", false, "FuV+Qve#zE");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage(printWriter0, 493, "", options1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(2, objectArray0.length);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/usage: /usage: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 493, "^vX>%KEciq>jD", "", options1, (-2030), 493, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLeftPadding((-2030));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      
      MockFile mockFile0 = new MockFile("", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(20, objectArray0.length);
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/usage: ", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "usage: ", false, "FuV+Qve#zE");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage(printWriter0, 493, "", options1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2030), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(20, objectArray0.length);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2030), helpFormatter0.getLeftPadding());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/usage: ", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      
      String string0 = "}1e8_f@ oq2nv\\baE";
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string1 = null;
      Option option0 = new Option((String) null, "arg");
      assertNotNull(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 5325, options1, (-3143), 3316);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      StringBuffer stringBuffer0 = new StringBuffer(9);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 9, (-826), "");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      
      StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer2, 9, (-1683), "");
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer3);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertNotNull(stringBuffer3);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer3.length());
      assertEquals("", stringBuffer3.toString());
      
      String string0 = "U0$$n`syRSE[x=`#5T";
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1683), "U0$$n`syRSE[x=`#5T", "", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/usage: ", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("vt:", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/usage: /vt:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      StringWriter stringWriter0 = new StringWriter(2899);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('_');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("_", stringWriter0.toString());
      assertEquals("_", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("_", stringWriter0.toString());
      assertEquals("_", stringWriter1.toString());
      assertEquals("_", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("_", stringWriter0.toString());
      assertEquals("_", stringWriter1.toString());
      assertEquals("_", stringWriter2.toString());
      assertEquals("_", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2899, 1408, "");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("_", stringWriter0.toString());
      assertEquals("_", stringWriter1.toString());
      assertEquals("_", stringWriter2.toString());
      assertEquals("_", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("_", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("u;_Fi.{");
      assertNotNull(stringBuffer0);
      assertEquals("u;_Fi.{", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      stringBuffer0.ensureCapacity((-2902));
      assertEquals("u;_Fi.{", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}1e8_f@ oq2nv\baE", "}mk2IwU*`VMd", (Options) null, "3xF`&^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = 9;
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = false;
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "xNr)A!TeXY67`V)OMyS", options0, "6XBY0QBK,", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setDescPadding(0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(0, helpFormatter0.getDescPadding());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(0, int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(0, helpFormatter0.getDescPadding());
      
      String string0 = "\"zh#L@r5?9";
      MockFile mockFile0 = new MockFile("\"zh#L@r5?9", "--");
      assertNotNull(mockFile0);
      
      String string1 = "6xKP*4W~$Cc";
      MockFile mockFile1 = new MockFile(mockFile0, "6xKP*4W~$Cc");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockPrintWriter0.checkError();
      assertFalse(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertEquals("/experiment/\"zh#L@r5?9", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/\"zh#L@r5?9/--", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("--", mockFile0.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/\"zh#L@r5?9/--", mockFile1.getParent());
      assertEquals("6xKP*4W~$Cc", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/experiment/\"zh#L@r5?9/--/6xKP*4W~$Cc", mockFile1.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4143), "\"zh#L@r5?9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = "GFo4^yOz(VDvt##";
      helpFormatter0.setWidth(3);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("GFo4^yOz(VDvt##", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      String string0 = "";
      String string1 = "z;e9,5|H L@G$3LQj";
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(74, "z;e9,5|H L@G$3LQj", "", options0, (String) null, false);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      String string2 = "line.separator";
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      boolean boolean0 = false;
      Options options2 = options1.addOption("arg", "Ak@-~,Vn?", false, "Cannot add value, list full.");
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(options2, options0);
      assertSame(options2, options1);
      assertFalse(options1.equals((Object)options0));
      assertFalse(options2.equals((Object)options0));
      assertNotNull(options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setWidth((-5061));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-5061), helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-5061), helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = 1636;
      String string1 = "Dy5<zi<8$e@\\";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string2 = "A CloneNotSupportedException was thrown: ";
      Option option0 = null;
      try {
        option0 = new Option("\n", " ", false, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer("u;_Fi.{");
      assertNotNull(stringBuffer0);
      assertEquals("u;_Fi.{", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      stringBuffer0.ensureCapacity((-2902));
      assertEquals("u;_Fi.{", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2902), 2899, "u;_Fi.{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "@y<", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "|Jwf5j\"h7cj&";
      Options options0 = new Options();
      helpFormatter0.createPadding(1681);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(">", "", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 0, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options0, 0, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("", true, "[ option: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 955, "f[Nf?w;![", "", options1, 0, 2513, "f[Nf?w;![");
      helpFormatter0.setNewLine("B&4K=81<vu0aOp9");
      assertEquals("B&4K=81<vu0aOp9", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.setLeftPadding(44);
      String string0 = "9ORCI";
      helpFormatter0.setArgName("9ORCI");
      String string1 = "Ge\\|`WHhzn-$c";
      helpFormatter0.setLongOptPrefix("Ge|`WHhzn-$c");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ORCI");
      int int1 = (-769);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "[", false, "9ORCI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'_>CM5qB(5QQnUf;NL";
      StringBuffer stringBuffer0 = new StringBuffer("'_>CM5qB(5QQnUf;NL");
      int int0 = 1;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("HN#V", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'HN#V' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = new MockFile("usage: ", "vt:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5325, 1408, "vt:");
      helpFormatter0.setNewLine("}1e8_f@ oq2nv\baE");
      helpFormatter0.setLongOptSeparator("}1e8_f@ oq2nv\baE");
      assertEquals("}1e8_f@ oq2nv\baE", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      assertEquals("[ option: ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('c');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 44;
      stringWriter0.close();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "", "", (Options) null, (-1755), 44, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-2969);
      helpFormatter0.setLeftPadding((-2969));
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
