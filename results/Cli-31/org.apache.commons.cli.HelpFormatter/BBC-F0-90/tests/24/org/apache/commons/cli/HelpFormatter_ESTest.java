/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:47:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".nw`#";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;79|q");
      options1.getOptionGroups();
      String string1 = "p\"-MP's&EC[`I";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options1, 1173, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultWidth = 2436;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getWidth();
      int int0 = 2408;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(2436);
      helpFormatter0.createPadding(2408);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options1 = options0.addOption("arg", true, "");
      options1.toString();
      helpFormatter0.printHelp("usage: ", options1, true);
      String string0 = "&2`~Z<5nsA";
      options1.toString();
      // Undeclared exception!
      helpFormatter0.printHelp("&2`~Z<5nsA", "2EhFC?HFk[MoBA}", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding(1);
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "c{o9>:%9V K1T<<';K2";
      Options options0 = new Options();
      String string1 = "--";
      // Undeclared exception!
      try { 
        options0.addOption(" :: ", "--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;79|q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "Mnwh#", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      optionGroup0.setRequired(true);
      Options options2 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options1);
      StringBuffer stringBuffer0 = new StringBuffer("NO_ARGS_ALLOWED");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-2), options2, 2946, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ey-8;8WL6ctnU8", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".nw`#";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;79|q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ".nw`#", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      option0.setArgName("\n");
      optionGroup0.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setWidth((-1));
      String string1 = null;
      optionGroup0.setSelected(option0);
      options1.addOption((String) null, "\n", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".nw`#", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ".nw`#", ".nw`#", options0, 74, 74, "--");
      Options options1 = options0.addOption("arg", true, "g5;79|q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ".nw`#", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      option0.setArgName("\n");
      optionGroup0.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "\n", true, "\n");
      helpFormatter0.printHelp(806, ".nw`#", "", options2, (String) null, true);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-103);
      helpFormatter0.rtrim("' contains an illegal character : '");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "\n", "\n", options0, "\n");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("");
      // Undeclared exception!
      helpFormatter0.printHelp("2ak/++P$akG>\"", options0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "usage: ", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2145));
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", "VL=dwJ;qx]", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("q1", "", options2, "q1", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0, false);
      // Undeclared exception!
      helpFormatter1.printHelp(0, "A CloneNotSupportedException was thrown: ", "", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2910);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-2910));
      helpFormatter0.getWidth();
      String string0 = "CSc";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "XII1");
      Options options0 = new Options();
      String string0 = "g5;O7poq";
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "g5;O7poq");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      options1.addOption((String) null, "\n", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ".nw`#", ".nw`#", options0, (-2), 3, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1340));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("C5LGCC ", "C5LGCC ", options0, "C5LGCC ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 680;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 680, options0, 680, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1221));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!", "!", (Options) null, "F~/5nNyzT");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "@MdA%h}sZ%?4";
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "usage: ", (Options) null, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "hn6`P";
      Options options0 = new Options();
      String string1 = "g5;O7poq";
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "g5;O7poq");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      optionGroup0.setSelected(option0);
      options1.addOption((String) null, "\n", true, "*%#9N`r;(NPghOh#N7~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "hn6`P", "hn6`P", options3, (-2), 3, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(10, "arg", "K |O]s4kDg{5i8=", (Options) null, "^<?<w!dB*/M+", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "B";
      helpFormatter0.setSyntaxPrefix("B");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "QnHw!l?PQc2-@", (Options) null, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(691);
      StringWriter stringWriter1 = stringWriter0.append('#');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append('#');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 691, "-", "BoB_JJfY>P", options0, (-2387), (-129), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1875;
      helpFormatter0.setDescPadding(1875);
      helpFormatter0.defaultLongOptPrefix = null;
      String string1 = helpFormatter0.createPadding(3398);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(string1, 26, 232);
      String string2 = "8:[[Lx$";
      Options options0 = new Options();
      String string3 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      options0.hasLongOption("8:[[Lx$");
      options0.getOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("   ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      String string0 = "hn6`P";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      options1.addOption((String) null, "", true, "*%#9N`r;(NPghOh#N7~");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "hn6`P", "hn6`P", options3, (-2), 0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 452, "0%E8? !", (String) null, options0, 452, 452, "[Ly", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.defaultOptPrefix = "arg";
      options0.addOption("", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3765, "[ option: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("--", options0, true);
      String string0 = null;
      int int0 = (-2300);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2300), (-2300));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e9wp8U";
      helpFormatter0.rtrim("e9wp8U");
      PrintWriter printWriter0 = null;
      int int0 = 763;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 763, 763, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("?Z$", (-4138), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("zw", true, "");
      helpFormatter0.printHelp("usage: ", options1, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "bgIr";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bgIr");
      String string1 = "y>[SJgE)g.!PB";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2015, 63, "y>[SJgE)g.!PB");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim((String) null);
      int int0 = (-402);
      Options options0 = new Options();
      String string2 = "[";
      Option option0 = null;
      try {
        option0 = new Option(" ", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          HelpFormatter helpFormatter0 = new HelpFormatter();
          int int0 = 0;
          StringBuffer stringBuffer0 = new StringBuffer();
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "ecY^HPm[/V9", "ecY^HPm[/V9", options0, "ecY^HPm[/V9");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("eE'4Y2qbk esp@~Cp*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1566, "]", " ", options0, 25, 3, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " JFp<2&<M");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "m*$Zkn");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "C|o", "", options2, "m*$Zkn", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      String string0 = "g5;O7poq";
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      StringBuffer stringBuffer0 = new StringBuffer("[ Options: [ short ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1226, 64);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("arg", "_ux'shp$s5`l_p&g%", true, "arg");
      helpFormatter1.printHelp("Q/t~RoAva:u@;z/", options2, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("R Db <", "--", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('_');
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "cmdLineSyntax not provided", "arg", options0, 1226, 2058, (String) null, false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 803, options0, 0, 803);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "8IyxF~qa", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bIc8lj");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "J-/$h]& m\"pka@lp6a");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "J-/$h]& m\"pka@lp6a");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(42, "line.separator", "line.separator", options0, "!", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-756));
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(2709);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 8, (-756), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = new Locale("-", "--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "J-/$h]& m\"pka@lp6a";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format("Ci]L} ", objectArray0);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1357, "Ci]L} ", "", (Options) null, 1357, 1357, "[ option: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = mockPrintWriter1.append('=');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "NKujIrb";
      Option option0 = new Option("arg", "NKujIrb");
      String string2 = "r@*N]J* {9-";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r@*N]J* {9-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1890, "", options1);
      int int0 = 2797;
      // Undeclared exception!
      try { 
        options1.addOption("H-M5", "--", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'H-M5' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.rtrim(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 237, " [ARG]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("arg", options3, true);
      helpFormatter0.printUsage(printWriter0, 13, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1);
      helpFormatter0.printHelp("usage: ", "", options2, "\n");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("P", "", (Options) null, "jSHL,p~Q\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.addOption((String) null, true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("-", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "='4({", "-", options1, (-1928), 3, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 74, 74);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "--", false, "D:J");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 1201, 0);
      helpFormatter0.setNewLine("Nyc");
      MockFile mockFile0 = new MockFile(">");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1201, "Nyc", "Nyc", options0, (-1), 2, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", "QnHw!l?v@mPQc2-@", (Options) null, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      options1.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '0';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'A';
      mockPrintWriter0.println(charArray0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1213, "Ik.eS/>aONG", "F4~MffBc:OumnAgk", options1, 31, 2274, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      String string0 = "hn6`P";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      options1.addOption((String) null, "", false, "*%#9N`r;(NPghOh#N7~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "hn6`P", "hn6`P", options3, (-2), 3, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, " ");
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      char[] charArray0 = new char[3];
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 556, "", options0);
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = '0';
      mockPrintWriter0.println(charArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "MAwM3v)`", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bIc8lj");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "", "", (Options) null, (-1369), 1017, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bIc8lj");
      Locale locale0 = new Locale("J-/$h]& m\"pka@lp6a", ":~;I}22[/dlo(%*a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "");
      Options options3 = options2.addOption("", "P:~ts6>^2J9:lTt1", true, ":~;I}22[/dlo(%*a");
      Option option0 = new Option("", true, "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("5,=,)8GM6b_c", "5,=,)8GM6b_c", options4, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 31, "");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      options1.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '0';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'A';
      mockPrintWriter0.println(charArray0);
      Options options2 = new Options();
      options1.addOption("arg", true, "ER.Ne4Pa7+pTV\"P");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-87), "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 30, "?f1!2p7`", "<", (Options) null, 13, 13, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1369), "r", "--", (Options) null, (-1369), (-1369), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      Comparator<String> comparator0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "5,=,)8GM6b_c", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "--", false, "D:J");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 1201, 0);
      helpFormatter0.setNewLine("Nyc");
      MockFile mockFile0 = new MockFile(">");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "Nyc", ">", options1, (-2049), 0, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      options1.addOption((String) null, "", true, "*%#9N`r;(NPghOh#N7~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "hn6`P", options1, " DB/V:Sg_*hR'R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      helpFormatter0.defaultWidth = (-3770);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", " ", options1, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      helpFormatter0.printHelp("Illegal option name '", options3, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bIc8lj");
      Locale locale0 = new Locale("J-/$h]& m\"pka@lp6a", ":~;I}22[/dlo(%*a");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      objectArray0[2] = (Object) "J-/$h]& m\"pka@lp6a";
      objectArray0[3] = (Object) "J-/$h]& m\"pka@lp6a";
      objectArray0[4] = (Object) ":~;I}22[/dlo(%*a";
      objectArray0[5] = (Object) ":~;I}22[/dlo(%*a";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, "J-/$h]& m\"pka@lp6a");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("=Zdynbt~=ds'H|<}");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "zX/]D#9R, g5sj(G(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.printHelp("arg", "WJuyS", options0, "arg", true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("b&INk", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'b&INk' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '~';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-441), options0, (-3086), 1416);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(720);
      Comparator<String> comparator0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1731), (Options) null, (-1731), (-1731));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '~';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = 'I';
      charArray0[5] = '0';
      charArray0[6] = '`';
      mockPrintWriter0.println(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1292), ">!rXXZQLY", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "[";
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      String string0 = "--";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      stringWriter1.append((CharSequence) "arg");
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, 976, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "D:J");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 9, options2, 1201, 0);
      helpFormatter0.setNewLine("Nyc");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.printHelp(7, "usage: ", "Nyc", options1, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1571, "\n");
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1453, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 711, 711, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, (-1188));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bIc8lj");
      Locale locale0 = new Locale("J-/$h]& m\"pka@lp6a", ":~;I}22[/dlo(%*a");
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream1 = new MockPrintStream("gSl{u.[xe'G~R{");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "bIc8lj";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "bIc8lj";
      mockPrintStream1.printf(locale0, "cmdLineSyntax not provided", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      options0.addOption("arg", false, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.flush();
      mockPrintWriter0.print((long) 3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printWrapped(printWriter0, 351, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 35, options0, 95, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      options1.getOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "WJuyS", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("? yE9* pun1St$", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "0 bHy*zg~4");
      Option option0 = new Option((String) null, "0 bHy*zg~4", false, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 48, (String) null, "0 bHy*zg~4", options3, (-1), 1, "{\")FD7_x", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, (-1835), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, (-2), "zX/]D#9R, g5sj(G(");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      options1.getOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "WJuyS", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      Options options0 = new Options();
      options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.flush();
      mockPrintWriter0.print((long) 3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printWrapped(printWriter0, 351, "--");
      helpFormatter0.printWrapped(printWriter0, 351, "`3!");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      Options options0 = null;
      String string1 = " | ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, " [ARG]", "Hv$", (Options) null, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      Option option0 = new Option("arg", (String) null);
      options1.addOption((String) null, "", true, "*%#9N`r;(NPghOh#N7~");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("hn6`P");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-29), options0, (-29), (-3373));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-536), options0, 361, 31);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 976;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 976, "Cannot add value, list full.");
      stringBuffer1.append('5');
      helpFormatter0.renderWrappedText(stringBuffer1, 542, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(78, "", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 109, "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-zTE.";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "TyxO3^", false, "5XEq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 844;
      String string0 = "Bs7@";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 844, "Bs7@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5a\\gF8mmW=Rad/";
      helpFormatter0.rtrim("5agF8mmW=Rad/");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "$RY'dOEd<*+kq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("Q8wKUpViCXpR,D:&CH", "arg", options0, "Q8wKUpViCXpR,D:&CH");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("W!sim8i", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('g');
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 21, "arg", "awPe}IwzI4w?G)Jx", options0, 54, 819, "]", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 976, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('g');
      String string0 = "hn6`P";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "g5;O7poq");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      optionGroup0.toString();
      options1.addOption((String) null, "", true, "*%#9N`r;(NPghOh#N7~");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "hn6`P", "hn6`P", options3, (-2), 0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<y^{-2VN?7[#5EJ=y");
      helpFormatter0.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("b '~\":f");
      helpFormatter0.getLongOptSeparator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-958));
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      boolean boolean0 = false;
      mockPrintStream0.println((Object) "b '~\":f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string0 = "vzuVI1.C'";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) "vzuVI1.C'";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("vzuVI1.C'", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "b '~\":f");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "~id/cVm1jfU[5~s");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "Nyc";
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("L1bX", false, "Jbm%Tk..n");
      Option option0 = new Option("arg", "--", false, "D:J");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, options3, 1201, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "(\"a=B7Zb9vh!/E|E>]";
      MockPrintStream mockPrintStream0 = new MockPrintStream("(\"a=B7Zb9vh!/E|E>]");
      Locale locale0 = new Locale("J-/$h]& m\"pka@lp6a", "(\"a=B7Zb9vh!/E|E>]");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      objectArray0[4] = (Object) locale0;
      objectArray0[6] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1038));
      String string0 = "";
      String string1 = "cU*";
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      Option option0 = null;
      try {
        option0 = new Option("--", "0x~/PEO$RL.[#Yf<NK", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2700);
      String string0 = "47[<*ra:x\"1ECH0k;";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2700), (-2700), "47[<*ra:x\"1ECH0k;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "(\"a=B7Zb9vh!/E|E>]";
      helpFormatter0.setDescPadding(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(\"a=B7Zb9vh!/E|E>]");
      Locale locale0 = new Locale("J-/$h]& m\"pka@lp6a", "yaOSzk>8[+ p");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "(\"a=B7Zb9vh!/E|E>]";
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "yaOSzk>8[+ p", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "(\"a=B7Zb9vh!/E|E>]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(">");
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 1, "", "", options0, 1, 1290, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      int int0 = 132;
      String string0 = "M_Ggz>@@!H9X|elm38";
      String string1 = "X}t$mC:#w`9J-Y";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      File file0 = MockFile.createTempFile(" [ARG]", "Nx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.flush();
      int int0 = (-1679);
      mockPrintWriter0.print((long) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1679), "<JT~ezo\"|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z9&", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      String string1 = "[";
      String string2 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("7kB-g%M3EKl", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7kB-g%M3EKl' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-536), options0, 361, 31);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 976, "Cannot add value, list full.");
      stringBuffer1.append('5');
      helpFormatter0.renderWrappedText(stringBuffer1, 542, 0, "");
      assertEquals("Cannot add value, list full.", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "\n", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
