/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:49:57 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(7, "fOM59j!\"fvj`; 47", "", options0, ">7");
      helpFormatter0.defaultLeftPad = (-136);
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "fOM59j!\"fvj`; 47", ">7", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.printHelp(3, "\n", "arg", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.defaultWidth = (-961);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.defaultOptPrefix = "Cannot add value, list full.";
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "?V");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ":", true, ":");
      String string0 = "";
      option0.setArgName("");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1195), "ii{G]6DKCOhE", "}^e8D]9*C))]Qj", options0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringWriter stringWriter2 = stringWriter1.append('!');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "%iQ z@a.PGJr");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim("<du~/&/$qZ<7");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option((String) null, "usage: ", true, " ");
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(34, "ZF=}wj", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "<4U");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<4U");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 34, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "%[-BvwxnBZ";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      options1.hasShortOption(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "%[-BvwxnBZ", (String) null, options1, 0, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "usage: ", options0, "usage: ");
      int int0 = 532;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 532, 532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("' was specified but an option from this group ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 8, (-544), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "", true, (String) null);
      Options options1 = options0.addOption(option0);
      options1.addOption(option1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(849, "org.apache.commons.cli.HelpFormatter$1", "", options0, "org.apache.commons.cli.HelpFormatter$1");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.printHelp(2468, "\n", (String) null, options0, "", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, " :: ", " :: ", options0, (-1393), (-1393), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.printHelp(13, "7))9o|W", "7))9o|W", options0, " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QiVD2xP~r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "{]0}sN0H0?W6>rqd2", options0);
      helpFormatter0.renderOptions((StringBuffer) null, 13, options0, 13, 900);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 13, 900, "L4[8bjZz!/R)c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("fP", "arg", true, "usage: ");
      options1.hasShortOption("");
      Options options2 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(10, "IWEL", "fP", options2, "");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Option option0 = new Option((String) null, "IWEL", true, (String) null);
      Options options3 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options3, 10, 18);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2675));
      Options options0 = new Options();
      options0.hasShortOption(" ");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName("");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.hasShortOption(" ");
      helpFormatter0.setWidth(0);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      helpFormatter0.printHelp(" ", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-114));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.setLeftPadding((-3042));
      helpFormatter1.setWidth(74);
      Options options1 = new Options();
      options1.toString();
      options1.hasOption("rH3#bI>V^=vxB2T");
      helpFormatter1.defaultDescPad = 44;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.printf((Locale) null, "arg", objectArray0);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(79, "wn/Mz|Vx", "arg", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "   ");
      helpFormatter0.renderWrappedText(stringBuffer1, 5, 10, "   ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(".[ATG]");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = helpFormatter0.defaultArgName;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 3, 3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-4068), ".[ATG]", ".[ATG]", options0, 7, 952, ".[ATG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      MockFile mockFile0 = new MockFile("7ebuem}XO?pr ?", ";+W^%/uupc)XpR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('7');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 256, "I0.T&(4LO;", (String) null, (Options) null, 256, 74, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printOptions(mockPrintWriter0, 2, options0, 70, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options0, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.hasShortOption(" ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName(" ");
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.rtrim("n3?fn,mup7j]");
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "Pl&c1q>CGW8u3", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 30, " ", "]ry^<V2`+3W", options0, 30, 7, "`F~ZBehIRK\"_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B=");
      helpFormatter0.setWidth(34);
      helpFormatter0.defaultLeftPad = 101;
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultArgName = ">";
      helpFormatter0.getArgName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultArgName = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "'", true, "wNr{b-V");
      options1.hasShortOption("\n");
      options1.hasShortOption("(xKTA8UBRil'");
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp(10, "fOM59j!\"fvj`; 47", "   ", options2, "");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderOptions(stringBuffer0, 1258, options0, 63, 63);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", "f9mu95ZUUEx'", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      helpFormatter1.printHelp("--", options0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      PrintWriter printWriter0 = null;
      helpFormatter0.createPadding(32);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", "f9mu95ZUUEx'", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(false);
      optionGroup0.setRequired(false);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2188, "|O7usOB&S", options1);
      helpFormatter0.printHelp(127, "d(v1U6b` )X3R+", "kR#G>:&?", options2, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 127, 2177);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption("", "f9mu95ZUUEx'", true, "arg");
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      optionGroup0.setRequired(true);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "|O7usOB&S", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(61, "\n", "arg", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", "f9mu95ZUUEx'", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(false);
      optionGroup0.setRequired(false);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2188, "|O7usOB&S", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(127, "f9mu95ZUUEx'", "usage: ", (Options) null, "|O7usOB&S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.setDescPadding(3);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('(');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2331), (Options) null, 1188, 1188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append('R');
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2331), "I;^J", "I;^J", (Options) null, "I;^J", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("");
      options0.getOptionGroups();
      helpFormatter0.printHelp(74, " ", "", options0, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setRequired(false);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setValueSeparator('\u0087');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("xDYO`MV#, <!TpA", " ", options0, "\n");
      helpFormatter0.getOptPrefix();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "\n", "!y^I$fh2qe)", (Options) null, (-2), (-222), "w30@bzcl&]Qev=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "CRF>Zd";
      helpFormatter0.rtrim("CRF>Zd");
      String string1 = helpFormatter0.defaultNewLine;
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.hasOption("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("CRF>Zd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      options1.toString();
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("-", (Object[]) null);
      helpFormatter0.printHelp(printWriter1, 2238, "CRF>Zd", "CRF>Zd", options1, 45, 13, "\n", true);
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = (-2091);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "";
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-325), options0, 1939, (-786));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption("", "f9mu95ZUUEx'", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getMatchingOptions("6\"&~5A@BsD:Mb");
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup1.setRequired(false);
      option0.setValueSeparator('\u0087');
      helpFormatter0.printHelp("line.separator", options1, false);
      helpFormatter0.printHelp("line.separator", "line.separator", options1, "line.separator");
      int int0 = 1188;
      StringBuffer stringBuffer0 = null;
      int int1 = 101;
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-222), "<Po}(0R}eRTzZ}", "f9mu95ZUUEx'", options0, "f9mu95ZUUEx'", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("CRF>Zd");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasOption(" | ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[eM{Mq^H|Wr)3y(!_~f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList2, linkedList1);
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.printf("arg", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]", "usage: ", options0, 2238, 45, (String) null, true);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2091), "[eM{Mq^H|Wr)3y(!_~f", "usage: ", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("CRF>Zd");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasOption("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      options1.toString();
      mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 1281, "4kNGk.*iu133/", "org.apache.commons.cli.HelpFormatter", options0, 13, 13, "?~xa^=VW5tt$*8GNV~", true);
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp(74, "--", "usage: ", options1, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I;^J";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Options options0 = new Options();
      options0.toString();
      mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.printf("has already been selected: '", (Object[]) null);
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "[", "", options0, 2238, (-451), "1fR", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("");
      options0.getOptionGroups();
      helpFormatter0.printHelp(74, " ", "", options0, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setRequired(false);
      optionGroup0.setSelected(option0);
      option0.setValueSeparator('\u0087');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("xDYO`MV#, <!TpA", " ", options0, "\n");
      helpFormatter0.getOptPrefix();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "\n", "!y^I$fh2qe)", (Options) null, (-2), (-222), "w30@bzcl&]Qev=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append('R');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "");
      helpFormatter0.printHelp(103, "\"=<Bh", "I;^J", options2, "\"NYSGJj4!s:lMZNI$-");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I;^J";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "K)Bz#*F/?");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("BDvZnJE`NKXkO>l", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BDvZnJE`NKXkO>l' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.hasShortOption(" ");
      helpFormatter0.setArgName(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-750), options0, (-750), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "K)Bz#*F/?");
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      mockFile0.setWritable(false);
      mockFile0.getCanonicalPath();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, ";&zqW\"Fr>!Ny+`1pu", "I;^J", (Options) null, (-2331), 1, "I;^J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      int int0 = (-1007);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "-");
      String string0 = "+4vgl";
      Option option0 = new Option("arg", "+4vgl");
      Options options3 = options2.addOption(option0);
      option0.clearValues();
      optionGroup0.setSelected(option0);
      options2.getOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1007), (String) null, options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I;^J";
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(3);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile0.setReadOnly();
      mockPrintWriter0.append('R');
      Options options0 = null;
      int int0 = (-2331);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2331), (Options) null, 62, (-572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.defaultWidth = 1749;
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('Z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.print((-4764.0F));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1749, " ");
      mockPrintWriter0.print((Object) "j<)iuT7pj[;o7zMNS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1749, "='xp$K-!", "usage: ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      optionGroup0.setRequired(true);
      String string1 = null;
      Option option0 = new Option("arg", (String) null);
      optionGroup0.setSelected(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultWidth = 1749;
          helpFormatter0.rtrim("   ");
          helpFormatter0.getSyntaxPrefix();
          StringWriter stringWriter0 = new StringWriter();
          Options options0 = new Options();
          OptionGroup optionGroup0 = new OptionGroup();
          Options options1 = new Options();
          String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
          options1.hasOption("3x");
          // Undeclared exception!
          helpFormatter0.printHelp(0, "+Z}Bz5=V4OUB,;WGwJ", (String) null, options0, "   ");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 32, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      int int0 = 7;
      options0.toString();
      options0.hasOption("arg");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      String string0 = "H/r!\\G";
      helpFormatter0.setLongOptSeparator("H/r!G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "u~>|f{^ y%hqYsx w1y", (Options) null, "u~>|f{^ y%hqYsx w1y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">S5,p3n:*");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("");
      options0.getOptionGroups();
      int int0 = 7;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockFile mockFile2 = new MockFile(mockFile1, "-");
      MockFile mockFile3 = new MockFile(mockFile2, "zTcv1nZ@q&K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append('1');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 406, (String) null, (String) null, (Options) null, (-470), 1151, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" /9[");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile(" ", "9[");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      String string0 = "";
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append('1');
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.setLeftPadding((-3042));
      helpFormatter1.setWidth(74);
      Options options1 = new Options();
      options1.toString();
      options1.hasOption("rH3#bI>V^=vxB2T");
      helpFormatter0.printHelp(44, "db/% j", "", options0, "a|SVcd)Rqo9kh>U%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.printf((Locale) null, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(79, "wn/Mz|Vx", "arg", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      options1.hasShortOption(" ");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1749;
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1749, (String) null, (String) null, options1, 1749, 1749, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 2776, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("r!y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptPrefix("\"\"M| Z\u0000g=tPU(C");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1974, "dl9");
      helpFormatter0.createPadding(3);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setWidth(2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(44);
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.createPadding(2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      options1.hasOption("3x");
      optionGroup0.setRequired(true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 1749, options1, 1749, 2);
      helpFormatter0.printHelp(2095, "vP?lv\"", "]", options1, "s");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(441);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printHelp(printWriter0, 63, "j~zubwvuj ;x]v", "", options0, 1749, 2855, "n|B8");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = " <.ZwG J  3?fe0`";
      helpFormatter1.printHelp("_", "", options0, " <.ZwG J  3?fe0`", false);
      helpFormatter1.createPadding(1);
      String string1 = "{";
      helpFormatter1.setLongOptPrefix("{");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1309), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1749, "");
      assertEquals(3, helpFormatter0.getDescPadding());
      
      mockPrintWriter0.print((Object) "j<)iuT7pj[;o7zMNS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1749, "j<)iuT7pj[;o7zMNS", "", (Options) null, 45, 45, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(441);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      printWriter0.println();
      helpFormatter0.printUsage(printWriter0, 5, "j~zubwvuj ;x]v");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("VygN9E*q8_\u0001gR");
      helpFormatter0.setLeftPadding((-306));
      helpFormatter0.setWidth(1193);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth((-306));
      int int0 = 4723;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-3813));
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("I;^J");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nvy3W]Xix3O", "I;^J", (Options) null, "I;^J", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(3);
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, " ", "I;^J", (Options) null, (-2331), 1, "I;^J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2331), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("V<(t%%rMEI");
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("sxVMj_$(:", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1738;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1738, 1738, "J`n~QGlD");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(1738);
      helpFormatter0.setWidth(1784);
      Options options1 = new Options();
      options0.toString();
      options1.hasOption("e;DVV:P 1_t^n%huR");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2353), "J`n~QGlD", "vC&Pp2OlFHIO^Xb+g|t", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("H/r!y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter0.println();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      byte[] byteArray0 = new byte[3];
      helpFormatter0.setArgName("7<}=5%g:xev*");
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)109;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "51@vg(GWdQB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      mockPrintWriter1.flush();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-2524), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "4";
      String string0 = "";
      String string1 = "o'\\hphiZPH=[cL";
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, false, "arg");
      options1.hasShortOption("M.s>mYlm\"7{*(?%");
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.setLongOptPrefix((String) null);
      options1.getOption("@5BJ1N![A3-&@)I/?[!");
      String string2 = "`3'";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2920, (String) null, options0);
      int int1 = 715;
      String string3 = "";
      String string4 = " | ";
      // Undeclared exception!
      try { 
        options1.addOption("plLnCnXFI[Sf2", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'plLnCnXFI[Sf2' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      mockPrintWriter0.write(charArray0);
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-2606), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('R');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2471, "=KJ3&c1BP!", "", (Options) null, 2471, 1208, "' was specified but an option from this group ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(441);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printHelp(printWriter0, 63, "j~zubwvuj ;x]v", "", options0, 1749, 2855, "n|B8");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = " <.ZwG J  3?fe0`";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options0, " <.ZwG J  3?fe0`", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-3813));
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3813), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1749;
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      MockFile mockFile0 = new MockFile("", "]");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      String string0 = ";&zqW\"Fr>!Ny+`1pu";
      Options options0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mockFile1;
      objectArray0[7] = (Object) ";&zqW\"Fr>!Ny+`1pu";
      PrintWriter printWriter1 = mockPrintWriter0.format("", objectArray0);
      String string1 = "";
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 1749, "", "X+o]sEzCb/a8&kNe<.s", (Options) null, 0, 0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.rtrim("   ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      options1.hasOption("3x");
      helpFormatter0.printHelp(2095, "vP?lv\"", "]", options1, "s");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-3813));
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.append('X');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 27, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("H/r!y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[0];
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptPrefix("VygN9E*q8_\u0001gR");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "H/r!y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "[";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLongOptPrefix("[");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(1);
      int int0 = (-1488);
      StringWriter stringWriter1 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2442, 2442, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", false, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1749;
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 29, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "   ");
      helpFormatter0.createPadding(2);
      helpFormatter0.setWidth(29);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-340));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-340), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "~";
      helpFormatter0.setNewLine("~");
      helpFormatter0.createPadding(32);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = null;
      int int0 = 573;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(13);
      helpFormatter0.findWrapPos("--", 13, 13);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "4";
      String string0 = "";
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, false, "arg");
      options1.hasShortOption("M.s>mYlm\"7{*(?%");
      options0.getOptionGroups();
      options1.helpOptions();
      options1.getOption("@5BJ1N![A3-&@)I/?[!");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "o'hphiZPH=[cL", options1, "`3'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "FB9917G A91.U+S@", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v0.;ADW#f1|#^";
      int int0 = 10;
      helpFormatter0.defaultLeftPad = 10;
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v0.;ADW#f1|#^", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2110);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2110));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) helpFormatter0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1296, (Options) null, (-1479), 1296);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("H/r!y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "51@vg(GWdQB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[:D`.'5Efh$d5kGqs";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[:D`.'5Efh$d5kGqs");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "|wT+[EJ*bQt?=n#1h8", "_RI$&p*GBd]F~:(>3H", options0, 0, 0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "g)SoUFXyzm)2dn";
      helpFormatter0.getNewLine();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-2253);
      String string1 = ">";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      String string0 = "H/r!\\G";
      helpFormatter0.setLongOptSeparator("H/r!G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "u~>|f{^ y%hqYsx w1y", (Options) null, "u~>|f{^ y%hqYsx w1y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      options1.hasShortOption(" ");
      options1.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOption("", "f9mu95ZUUEx'", true, "arg");
      options1.hasLongOption("Jexw");
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getMatchingOptions("6\"&~5A@BsD:Mb");
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup1.setRequired(false);
      options2.toString();
      option0.setValueSeparator('w');
      helpFormatter0.printHelp("line.separator", options2, false);
      helpFormatter0.printHelp("line.separator", "line.separator", options2, "line.separator");
      helpFormatter0.setNewLine("#FVR'A->~");
      option0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "Tr89&}WB*ZuGff", "W{jhe=%^ ", options1, "Tr89&}WB*ZuGff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WP\\\"TncMa,+";
      Options options0 = new Options();
      String string1 = "";
      options0.hasOption((String) null);
      boolean boolean0 = true;
      String string2 = "eW{";
      Option option0 = new Option("", true, "eW{");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, false, "rL9");
      options1.getMatchingOptions("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("WP\"TncMa,+", "WP\"TncMa,+", options1, "eW{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("Yb?MB", options0, false);
      helpFormatter0.defaultArgName = "ASG(sK\"mxX";
      int int0 = (-833);
      String string0 = "|1B2E0 \"iIqzph%]9";
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("9\"8ZeOeGs0:X`", "ko3?b`Ob!+ut'", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9\"8ZeOeGs0:X`' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('N');
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      helpFormatter0.defaultSyntaxPrefix = "N{JzmJ98@Ppx:b";
      charArray0[1] = 'H';
      mockPrintWriter0.write(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      options0.getMatchingOptions("h]{D<4:/");
      helpFormatter0.printUsage(printWriter0, 31, ";HSPCxZ\"M", options0);
      helpFormatter0.setNewLine("h]{D<4:/");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.rtrim("org.apache.commons.cli.Options");
      assertEquals("N{JzmJ98@Ppx:b", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-80), " ", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 316, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "2QJsuVF&6`:F", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2426);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2426), "tgk!&q", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setLongOptPrefix(" ");
      String string1 = "iZi1yW";
      helpFormatter0.setLongOptSeparator("iZi1yW");
      helpFormatter0.setNewLine("iZi1yW");
      helpFormatter0.getDescPadding();
      int int0 = 281;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "";
      Options options2 = options1.addOption("iZi1yW", true, "");
      options2.getOptionGroups();
      options1.getMatchingOptions("arg");
      options1.addOptionGroup(optionGroup0);
      String string3 = "uNQcQ:SM+e]";
      options2.addOption("", " ", true, "uNQcQ:SM+e]");
      options0.getOptionGroups();
      Option option0 = null;
      try {
        option0 = new Option("-", "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("I;^J");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-3813));
      MockFile mockFile0 = new MockFile("K)Bz#*F/?", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3813), ";&zqW\"Fr>!Ny+`1pu", "I;^J", (Options) null, (-2331), (-3813), "I;^J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2513));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("CRF>Zd");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.hasOption("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("CRF>Zd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      options1.toString();
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("-", (Object[]) null);
      helpFormatter0.printHelp(printWriter1, 2238, "CRF>Zd", "CRF>Zd", options1, 45, 13, "usage: ", true);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2091), "CRF>Zd", "", options0, "CRF>Zd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1299);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding(44);
      assertEquals(44, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "[";
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLongOptPrefix("[");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "org.apache.commons.cli.HelpFormatter", (-1488), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim("");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      int int0 = 0;
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string1 = "[";
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = helpFormatter0.createPadding(1724);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "-", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
