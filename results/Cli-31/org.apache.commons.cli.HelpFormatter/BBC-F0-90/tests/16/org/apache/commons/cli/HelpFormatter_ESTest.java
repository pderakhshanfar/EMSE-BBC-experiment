/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:41:35 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "d1Gv_", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("d1Gv_", options0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("NCy7'%w;6ch$", "--", options1, " ", true);
      helpFormatter0.rtrim("d1Gv_");
      helpFormatter1.findWrapPos("usage: ", (-1), 1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.codePoints();
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      Option option0 = new Option("", "A,*Ft+>z@HpM'wYLJDL");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", "?+fh", true, "arg");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "\n", "", options4, (-2), 113, (String) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("\n");
      Options options1 = options0.addOption((String) null, "usage: ", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding(1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.Util", options2, "org.apache.commons.cli.Util", true);
      Options options3 = new Options();
      helpFormatter0.rtrim("e4@},}gUEvJkS\"");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)123;
      helpFormatter0.getOptionComparator();
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "7A(=/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "arg", "7A(=/", options1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(41);
      helpFormatter0.rtrim("J/");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("                                         ", 31, 70);
      helpFormatter0.findWrapPos("--", 2406, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("arg");
      helpFormatter0.setWidth((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      File file0 = MockFile.createTempFile("line.separator", "/");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("J", false, "-");
      Options options2 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options3 = options0.addOptionGroup(optionGroup1);
      options3.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      optionGroup0.addOption(option1);
      options3.helpOptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("--", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2076), "", "J", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1192), " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-400));
      helpFormatter0.setArgName("lTmLaoD");
      helpFormatter0.setOptPrefix((String) null);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Option option0 = new Option("arg", false, "]");
      Options options1 = options0.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("m.#9eZM", options1, false);
      helpFormatter1.printHelp(1250, "]", "6:", options0, "\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1608), options0, 392, 1542);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("a", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 934, "a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "R48PxZ''UJEb7@` ',", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      stringBuffer0.append(false);
      stringBuffer0.codePoints();
      StringBuffer stringBuffer1 = new StringBuffer(1);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3066, "                                                                          ", "                                                                          ", options1, 2, 3066, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("a", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("WW^D`oF1X");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) "a";
      objectArray0[2] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1831, "WW^D`oF1X", "/CAq,:jr", options0, 1831, (-1), "WW^D`oF1X");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-834), "6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      String string1 = "[BAL3F,E";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "\n", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", (String) null);
      options0.addOption("arg", true, "usage: ");
      Option option1 = new Option("J", true, "-");
      options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      options1.helpOptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("*OEQ)av A`T<ftrc0", options0, true);
      stringBuffer0.setLength(1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("j=K3.{m|$&\"L|5 t2[O");
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      Option option1 = new Option("J", true, "-");
      options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      options1.helpOptions();
      helpFormatter0.defaultLeftPad = (-1972);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      optionGroup0.setRequired(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*OEQ)av A`T<ftrc0", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-1), (Options) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "a=5Ow&|9.(){7Q'Fu", "wj:#ES0*$o1ZY]p}@", options0, 27, 1586, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getWidth();
      Options options1 = new Options();
      options1.hasLongOption("--");
      helpFormatter0.printHelp(74, "a=5Ow&|9.(){7Q'Fu", "-", options1, "Y]ZjO*i3C`Wz(");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", options0);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(19, "<", " 3p[3", (Options) null, "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Option option1 = new Option("J", true, "-");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      options2.helpOptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1813, "arg", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("*OEQ)av A`T<ftrc0", options0, true);
      stringBuffer0.setLength(1);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 547);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptions();
      options1.hasShortOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printOptions(mockPrintWriter0, 26, options1, 17, 19);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(26, "", " ", options1, "4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1772, "Cl/;i1Y@b\"(^mx", "--", options0, 74, 886, "", false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 886, "Cl/;i1Y@b\"(^mx", "org.apache.commons.cli.OptionGroup", options1, (-2), (-2), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options1 = new Options();
      Option option1 = new Option("J", true, "-");
      Options options2 = options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options0.addOptionGroup(optionGroup1);
      options3.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      options3.helpOptions();
      Options options4 = options2.addOptionGroup(optionGroup1);
      options4.hasShortOption("-");
      helpFormatter1.printHelp("J", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1772, "Cl/;i1Y@b\"(^mx", "--", options0, 74, 886, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("Cl/;i1Y@b\"(^mx");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", " ");
      Options options0 = new Options();
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      mockPrintWriter2.write("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 248, "'", (String) null, options0, (-1), 74, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.UK;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 64, (String) null, "-", options1, 74, 8, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", true, "arg");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "l#QzM0nhyZbvO6.aY", "a", options0, 3267, (-2), "Cl/;i1Y@b\"(^mx", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "");
      options1.hasShortOption("--");
      options0.hasLongOption("");
      helpFormatter0.setLongOptSeparator("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 46, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.printf("arg", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1772, "Cl/;i1Y@b\"(^mx", "--", options0, 74, 886, "", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("-mC=KFZPQP:hUh>h");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1584);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1584));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", (Object[]) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "arg", "", options0, 74, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      String string0 = "z;\\7t~@}{M#6qT";
      options0.hasOption("z;\u0007t~@}{M#6qT");
      helpFormatter0.printUsage(printWriter0, 54, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1984, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1984
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "usage: ", "DiA,Pvfmn$", options0, " ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 38, options0, 38, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "");
      helpFormatter1.setSyntaxPrefix("Bu1)Ri*4(9T81Wi(bl?");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter0, 64, 64, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "]tQ^");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.createPadding(24);
      helpFormatter0.getLongOptPrefix();
      String string0 = "zP6G7tE(mO^";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      int int0 = 19;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-761), options0, (-761), 19);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasShortOption("Q'^u]4Bb9QFH_");
      helpFormatter0.setLongOptSeparator("p5P#");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 74);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 2, options0, (-1), 1660);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("y]g").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasShortOption("Q'^u]4Bb9QyH_");
      helpFormatter0.printHelp(17, " ", "", options0, " ");
      helpFormatter0.setLongOptSeparator("--");
      Options options1 = new Options();
      options1.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 17, "]", "Q'^u]4Bb9QyH_", options1, 17, 17, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ">z";
      String string0 = " ] [ long ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options1, (String) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options2 = new Options();
      Options options3 = options2.addOption("arg", "rdmBz5T2k", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-972), "#`U", " ", options3, 610, 74, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("=>xu60j7");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, "org.apache.commons.cli.Util");
      Option option0 = new Option("", "481Q`f<(;d.", true, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("481Q`f<(;d.", "481Q`f<(;d.", options3, "s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasShortOption("Q'^u]4Bb9QFH_");
      helpFormatter0.setLeftPadding(443);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = stringBuffer0.insert(1, (Object) options0);
      helpFormatter0.renderWrappedText(stringBuffer1, 97, 64, "1#[xU4gl},");
      PrintWriter printWriter0 = null;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "", "f+(=2f;^*", options0, 97, 2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.getWidth();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "Lc";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Lc", objectArray0);
      helpFormatter0.printUsage(printWriter0, 94, "org.apache.commons.cli.HelpFormatter$1", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1077, "line.separator", "-", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("fI", "usage: ");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption("&Ph.");
      options1.hasShortOption("9=N=`)QY@OH)0{gW%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "--", "arg", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptSeparator("\"5/]#5[");
      helpFormatter0.findWrapPos("-", 1511, 1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("1#[xU4gl},");
      stringBuffer0.insert(9, (Object) " ");
      int int0 = 64;
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "1#[xU4gl},");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, " ", "1#[xU4gl},", options0, (-640), (-640), " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, " _", "z7.o~b7.DZf1W ", options0, "0e<8'Ew}*+i]u|oxEo");
      helpFormatter1.setLongOptSeparator("\n");
      helpFormatter1.printHelp(32, "};7^D$Y)DY~", "", options0, "", false);
      helpFormatter0.rtrim("y;u4a70Hmv");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 100, "--", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      options1.getOptions();
      int int0 = 300;
      helpFormatter0.printHelp(printWriter0, 300, "{FVTj2$", "", options1, 300, 300, "");
      MockFile mockFile0 = new MockFile(" ", "{FVTj2$");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      String string0 = " ]";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option1 = new Option("X3", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      options0.hasShortOption("!NI8doQ");
      helpFormatter0.printHelp(" ", options1, true);
      helpFormatter0.printHelp("|xq'P Mj<,", options0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("ms", "Ch4wAe*hT/5", options0, "[]", false);
      helpFormatter0.renderOptions((StringBuffer) null, 95, options0, 72, 72);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 1, options0, 976, (-542));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", true, "7A(=/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "7A(=/", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options0 = new Options();
      options0.hasShortOption("Q'^u]4Bb9QFH_");
      helpFormatter0.printHelp(17, "]9ixcUVz", "--", options0, "");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 255, 34);
      StringBuffer stringBuffer1 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, (-1), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 30, 30, " ");
      Options options0 = new Options();
      options0.addOption("", "]", true, "7A(=/");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(10, "7A(=/", "7A(=/", options0, " ");
      helpFormatter0.setLongOptSeparator("]");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("' contains an illegal character : '", "' contains an illegal character : '", options0, "' contains an illegal character : '");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.setArgName("3vwwvh?Ax&\"AF1");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.setOptPrefix("' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 40, options0, 1938, 1);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options1, false);
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 768, 768, "ms");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.setLongOptSeparator("[");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("arg");
      options1.helpOptions();
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(13, "a", "", options2, (String) null);
      helpFormatter0.setWidth((-1));
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "6\\,w?du";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", (Options) null, "6,w?du");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("~5oyW", options0, true);
      helpFormatter0.printHelp("~5oyW", options0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp("ALF7EHjtY'p2UzcJhXj", options0, false);
      helpFormatter0.defaultDescPad = (-2769);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" uIe", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0NnT?-3\"Z0M";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2230), (Options) null, 9, (-239));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("fI", "usage: ");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("burE|rCX,z");
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 1, 74);
      StringBuffer stringBuffer1 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 1547, options1, 255, 1547);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4745, (String) null, "@ty(2{TtC@d", options1, "u3u,gka}XlKIRk7\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      helpFormatter1.printHelp(0, "--", "-", options0, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(31, "\n", "", options2, ">}J9X,s!}DuUd2x<Ul$");
      helpFormatter1.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("ALF7EHjtY'p2UzcJhXj", options0, true);
      helpFormatter0.defaultDescPad = (-2769);
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("burE|rCX,z");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2256), options0, 255, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 67;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(67, "-", "-", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", "--", options0, "IrL #_UHq9L;&G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      helpFormatter0.printHelp(4745, "[", "", options1, "");
      helpFormatter0.setLongOptSeparator("MuV}n|-53'*@fE$'P,");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2230);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasOption("usage: ");
      options0.hasShortOption("-");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "3ADJV7E'I$", options0, ".", true);
      Options options1 = options0.addOption("", "]", true, "7A(=/");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", true, "7A(=/");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.setSelected(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultArgName = "arg";
      helpFormatter0.setLongOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", "-T71o}[A-1o+", options0, "IrL #_UHq9L;&G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("fMZ4");
      options0.getOptions();
      helpFormatter0.setDescPadding((-1194));
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.hasShortOption("usage: ");
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 2488;
      StringBuffer stringBuffer0 = new StringBuffer(2488);
      int int1 = 2520;
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) " ", 3, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 3, end 1, s.length() 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-668));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-668));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), " ", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("usage: ");
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4t>,=kOkjTVD!7$!", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "ej<<7(BM");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, "J;Ms&rmP)_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options3, "ej<<7(BM", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "C]bUVDxRZ&Ybn_";
      helpFormatter0.rtrim("C]bUVDxRZ&Ybn_");
      helpFormatter0.setOptPrefix("F`$FhR\"Y?{:sjg*6;");
      helpFormatter0.getDescPadding();
      File file0 = MockFile.createTempFile("F`$FhR\"Y?{:sjg*6;", "--");
      MockFile mockFile0 = new MockFile(file0, "5G3CmR}4e{.9S");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", (-4217), (-4217));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yqiF< 40";
      helpFormatter0.defaultOptPrefix = "yqiF< 40";
      String string1 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1642, (-2972), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "NO_ARGS_ALLOWED");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(",", "6F=OsF{a_M7}=", false, "6F=OsF{a_M7}=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-668);
      PrintWriter printWriter0 = null;
      int int1 = (-2023);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      String string1 = "";
      options1.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[]", options1, "[]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.hasShortOption("ms");
      helpFormatter0.printHelp("[]", "", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("The option '", "arg", options0, ":;N`!Z$k][L>", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, " ] [ long ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options1 = new Options();
      options1.addOption("", true, "arg");
      Option option1 = new Option("yJ", true, "-");
      Options options2 = options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = new Options();
      optionGroup1.addOption(option0);
      options3.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1813, "arg", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("*OEQ)av A`T<ftrc0", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "  .J'fw1>#%I";
      helpFormatter0.defaultOptPrefix = "  .J'fw1>#%I";
      helpFormatter0.setWidth(760);
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.toString();
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      pipedInputStream0.mark(3);
      helpFormatter0.setLeftPadding(10);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.println();
      helpFormatter0.setWidth(10);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      int int0 = 1;
      pipedInputStream0.read();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.append(')');
      String string1 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 743, 0, "");
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      stringBuffer0.codePoints();
      stringBuffer0.insert(3, true);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "--");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        stringBuffer1.insert((-1793), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1793
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = null;
      int int0 = (-1833);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine(" ] [ long ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 267;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", false, "--");
      String string0 = "";
      // Undeclared exception!
      try { 
        options2.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-44), "--", "--", options0, (-44), 1, "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setWidth(2231);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter0, 982, "],O\"?(J)J%Q|EqW?>Pz");
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("],O\"?(J)J%Q|EqW?>Pz");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "}U}";
      String string1 = null;
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("`O[oZF<~)", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`O[oZF<~)' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(21);
      helpFormatter0.renderOptions(stringBuffer0, 3119, options0, 547, 17);
      helpFormatter0.printHelp(290, "Rh!1=q.hQAl", "arg", options0, "&$E?T");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2470);
      String string0 = ";m W\"fw~";
      String string1 = "4Bb$";
      helpFormatter0.setLongOptSeparator(";m W\"fw~");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2470), "The option '", ";m W\"fw~", options0, "v,2r'?04");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", "-T71o}[A-1o+", options0, "IrL #_UHq9L;&G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption((String) null);
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp("ALF7EHjtY'p2UzcJhXj", options0, true);
      helpFormatter0.defaultDescPad = (-2769);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-193), (-1158), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1843), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 186, "", "", options1, 186, 186, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "]?N&)cg4THZx~r";
      helpFormatter0.defaultDescPad = 0;
      int int0 = 352;
      helpFormatter0.createPadding(352);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 133;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = "-GJ\\/MV*(b<V#";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0.optionComparator;
      mockPrintWriter1.format("-GJ/MV*(b<V#", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "JCe2O.^[Ge", "tb7QGl\"92", options0, 1078, (-253), "-GJ/MV*(b<V#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionGroup");
      String string1 = "[KfbU:6=D?{_8";
      String string2 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("[KfbU:6=D?{_8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
}
