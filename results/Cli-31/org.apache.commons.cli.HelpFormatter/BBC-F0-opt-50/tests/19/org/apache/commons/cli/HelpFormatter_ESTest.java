/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:38:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultWidth = (-244);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-244), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fMhK|ik4NNT[P)=e", "fMhK|ik4NNT[P)=e", options0, "   ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.defaultLeftPad = (-2);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2), helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals((-2), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setNewLine((String) null);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "!|R|iwW~R7R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", true, "--");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      
      option0.setArgName("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.printHelp(" ", options1, false);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string0 = helpFormatter1.getArgName();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("arg", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter1.findWrapPos("usage: ", 626, 1398);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals((-1), int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultNewLine = "W@m]&d5-Y-";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("W@m]&d5-Y-", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("W@m]&d5-Y-", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string1 = helpFormatter0.getArgName();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(string1.equals((Object)string0));
      assertEquals("arg", string1);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("W@m]&d5-Y-", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("W@m]&d5-Y-", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string3 = "8J7fqB1_'";
      String string4 = "(95/ \\<Q(-";
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string5 = "IN$O>vas~zZ$A ";
      Option option0 = null;
      try {
        option0 = new Option("IN$O>vas~zZ$A ", false, "IN$O>vas~zZ$A ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'IN$O>vas~zZ$A ' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOption("", "", true, "-");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Option option0 = new Option("arg", "--");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Option option1 = new Option("n2F", true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option1.equals((Object)option0));
      assertNotNull(option1);
      assertFalse(option1.hasValueSeparator());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertTrue(option1.hasArgName());
      assertNull(option1.getLongOpt());
      assertEquals(110, option1.getId());
      assertEquals("n2F", option1.getOpt());
      assertFalse(option1.hasLongOpt());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArg());
      assertEquals("-", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertEquals(1, option1.getArgs());
      assertFalse(option1.isRequired());
      
      option1.setArgName(" ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option1.equals((Object)option0));
      assertNotSame(option1, option0);
      assertFalse(option1.hasValueSeparator());
      assertEquals(" ", option1.getArgName());
      assertFalse(option1.hasArgs());
      assertTrue(option1.hasArgName());
      assertNull(option1.getLongOpt());
      assertEquals(110, option1.getId());
      assertEquals("n2F", option1.getOpt());
      assertFalse(option1.hasLongOpt());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArg());
      assertEquals("-", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertEquals(1, option1.getArgs());
      assertFalse(option1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option1.equals((Object)option0));
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option1.hasValueSeparator());
      assertEquals(" ", option1.getArgName());
      assertFalse(option1.hasArgs());
      assertTrue(option1.hasArgName());
      assertNull(option1.getLongOpt());
      assertEquals(110, option1.getId());
      assertEquals("n2F", option1.getOpt());
      assertFalse(option1.hasLongOpt());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArg());
      assertEquals("-", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertEquals(1, option1.getArgs());
      assertFalse(option1.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.printHelp("n2F", options2, true);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      option0.setArgName((String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printHelp("KAM'HI/SDF=!&", options0, true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertSame(options0, options1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.findWrapPos("-", 1, 3);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",U9", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = 5;
      int int1 = (-2320);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(74);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, stringBuffer0.length());
      assertEquals("J", stringBuffer0.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("J", stringBuffer1.toString());
      
      helpFormatter0.defaultOptPrefix = "";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = "";
      helpFormatter0.setWidth((-2320));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2320), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-2320), helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 5, (-2320), "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2320), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-2320), helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, stringBuffer0.length());
      assertEquals("J", stringBuffer0.toString());
      assertEquals("J", stringBuffer2.toString());
      assertEquals(1, stringBuffer2.length());
      
      String string2 = helpFormatter0.getOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2320), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-2320), helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string3 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2320), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-2320), helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string4 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string5 = "U.t7(q&w";
      String string6 = "";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("U.t7(q&w", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U.t7(q&w' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setDescPadding((-749));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-749), helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-749), helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", (-749), 2993);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-749), helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-749), helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-749), helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertFalse(int1 == int0);
      assertEquals((-749), int1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-749), helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pAm+]rbAR56:bH!<I", (String) null, (Options) null, "h(;'#^eI}3Gm9Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = 10;
      MockFile mockFile0 = new MockFile("lDbZFwd!_s Xn");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "b-g,Z");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, (Options) null, 110, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1325), options0, (-1325), (-1325));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("[ARG...]", options1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultSyntaxPrefix = "\n";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setLeftPadding(1922);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 2564, " [ARG]");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(6, stringBuffer0.length());
      assertEquals(" [ARG]", stringBuffer0.toString());
      assertEquals(6, stringBuffer1.length());
      assertEquals(" [ARG]", stringBuffer1.toString());
      
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 2552, options0, 2552, 0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(43, stringBuffer0.length());
      assertEquals(43, stringBuffer2.length());
      
      MockFile mockFile0 = new MockFile("-", "usage: ");
      assertNotNull(mockFile0);
      
      helpFormatter1.printHelp("/;", options0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      // Undeclared exception!
      helpFormatter1.printHelp("3_bRXP", options0, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      assertNotNull(stringBuffer0);
      assertEquals("arg", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      int int0 = helpFormatter0.findWrapPos("e[CB", 31, 8);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Option option0 = new Option("arg", " ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals(" ", option0.getDescription());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals(" ", option0.getDescription());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      
      helpFormatter0.printHelp("[ARG...]", options1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.defaultSyntaxPrefix = "\n";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter1.setLeftPadding(1922);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 2564, " [ARG]");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals(" [ARG]", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(" [ARG]", stringBuffer1.toString());
      assertEquals(6, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 2552, options0, 2552, 0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals(79, stringBuffer0.length());
      assertEquals(79, stringBuffer2.length());
      
      MockFile mockFile0 = new MockFile("-", "usage: ");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      helpFormatter1.printHelp("/;", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("-");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      
      int int0 = 1401;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1730), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = options0.hasOption((String) null);
      assertFalse(boolean0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.setWidth((-2939));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-2939), helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2939), helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setSyntaxPrefix("(pl");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-2939), helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2939), helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("(pl", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.forLanguageTag("--");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", (String) null, options0, 1, 105, "", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("DzZqa", true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      OptionGroup optionGroup3 = new OptionGroup();
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertNotNull(optionGroup3);
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      
      optionGroup1.setRequired(false);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup1.equals((Object)optionGroup3));
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup1, optionGroup3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      List list0 = options1.getMatchingOptions("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup1.equals((Object)optionGroup3));
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup1, optionGroup3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotNull(list0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("DzZqa", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(68, option0.getId());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "#i#eiO8x=m*9Z%(6", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 58, 58, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.defaultLongOptPrefix = "";
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.defaultLeftPad = 31;
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string2 = helpFormatter0.createPadding(31);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                               ", string2);
      assertNotNull(string2);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string3 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("usage: ", string3);
      assertNotNull(string3);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, " ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(31, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(31, int0);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(31, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string4 = "(;gb\"NfMI06f@dG\"";
      String string5 = "KAH-!;N&5&i;T[}";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "                               ", true, "(;gb\"NfMI06f@dG\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer("-");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 689, (-387), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("MHh", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      File file0 = MockFile.createTempFile("1|j:.>^ ICdX+NcssV", "--");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("1|j:.>^ ICdX+NcssV0--", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/1|j:.>^ ICdX+NcssV0--", file0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("\n", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2), options0, 107, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("-", options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "[ARG...]", "M{~DmK{km", options0, 1, 3, "org.apache.commons.cli.OptionValidator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptPrefix("mi&J&p");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("mi&J&p", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("mi&J&p", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.defaultDescPad = (-3674);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("mi&J&p", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals((-3674), helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("ESV");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("ESV", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ESV", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      
      helpFormatter0.printWrapped(printWriter0, 14, "ESV");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-3674), helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("mi&J&p", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals((-3674), helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ESV", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ESV", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(56, "mi&J&p", "mi&J&p", options0, "3XlC>H]oR87");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("MHh", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      File file0 = MockFile.createTempFile("1|j:.>^ ICdX+NcssV", "--");
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("1|j:.>^ ICdX+NcssV0--", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/1|j:.>^ ICdX+NcssV0--", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      assertNotNull(mockPrintWriter0);
      
      mockPrintStream0.print(true);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(4L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("1|j:.>^ ICdX+NcssV0--", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/1|j:.>^ ICdX+NcssV0--", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      
      Options options2 = options0.addOption("", true, "--");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1), " *#zNmp^R;+d0`.", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.defaultDescPad;
      assertEquals(3, int0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", "usage: ", true, "^&[!{g)jXCKdKYj97");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      optionGroup1.setRequired(true);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertTrue(optionGroup2.isRequired());
      
      optionGroup2.setRequired(true);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("^&[!{g)jXCKdKYj97", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertTrue(optionGroup2.isRequired());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, ", 1>r@LQ[KM]", "Fa7wyUU", options1, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, "", true, "&)fK<q$sQPkSs6gx");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("&)fK<q$sQPkSs6gx", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("&)fK<q$sQPkSs6gx", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("&)fK<q$sQPkSs6gx", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("&)fK<q$sQPkSs6gx", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), ", 1>r@LQ[KM]", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      int int0 = helpFormatter1.findWrapPos("usage: ", 3, 3);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(6, int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "d";
      Option option0 = new Option("d", "\n");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",(v=~7DFaP}$Va");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Collection collection0 = new LinkedList<Option>();
      assertNotNull(collection0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Collection collection1 = options0.getOptionGroups();
      assertFalse(collection1.equals((Object)collection0));
      assertSame(options0, options1);
      assertNotNull(collection1);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertNotNull(options3);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options4 = options2.addOption("", true, "L]oi");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options4, options2);
      assertSame(options4, options3);
      assertSame(options4, options1);
      assertSame(options4, options0);
      assertNotNull(options4);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("d", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals(100, option0.getId());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      helpFormatter0.defaultWidth = (-2);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals((-2), helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("L]oi", "n{.P)W", options4, "g(ZF lg'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "\n", "a", options0, 74, 3, "--", true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer("dSSXq\"?v}PRDZjb");
      assertNotNull(stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      assertEquals("dSSXq\"?v}PRDZjb", stringBuffer0.toString());
      
      helpFormatter1.setSyntaxPrefix("");
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      helpFormatter1.printHelp(0, "Oyz>", " #a=Xs>l$T~c -C!", options0, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      assertNotNull(mockPrintWriter0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      Options options2 = options0.addOption((String) null, true, "\n");
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertSame(options0, options2);
      assertNotSame(options0, options1);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotNull(options2);
      
      Options options3 = options2.addOptionGroup(optionGroup0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertFalse(options3.equals((Object)options1));
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertNotSame(options0, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertNotNull(options3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1561, "cmdLineSyntax not provided", (String) null, options3, 7, 16, "GH8g@z06");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertFalse(options3.equals((Object)options1));
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertNotSame(options0, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "", false, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("-", options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(options0, options1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      String string1 = helpFormatter1.rtrim("");
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "XM~#dE6", "--", options0, 10, (-689), "", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      int int0 = helpFormatter1.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string0 = helpFormatter0.createPadding(74);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("                                                                          ", string0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("),m[kMNw", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      Options options2 = options0.addOption((String) null, false, (String) null);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertSame(options0, options2);
      assertNotSame(options0, options1);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotNull(options2);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 373, "|*F", options2);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertSame(options0, options2);
      assertNotSame(options0, options1);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals("usage: |*F [--null]\n", stringWriter0.toString());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      
      helpFormatter0.printHelp("usage: ", options1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(options1.equals((Object)options0));
      assertFalse(options1.equals((Object)options2));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(options1, options0);
      assertNotSame(options1, options2);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)3, (byte)78, (byte)3, (byte)9, (byte) (-56), (byte)40, (byte) (-2), (byte)62}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertNotNull(helpFormatter3);
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      
      String string0 = helpFormatter3.defaultArgName;
      assertEquals("arg", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "-", "", options0, 1, 64, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "xizidZ", "", options0, 10, 1464, "5qho");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLeftPadding(45);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(45, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(45, helpFormatter0.getLeftPadding());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">h,.%B@pAGn[,");
      assertFalse(boolean0);
      
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(45, helpFormatter0.defaultLeftPad);
      assertNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(45, helpFormatter0.getLeftPadding());
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(45, helpFormatter0.defaultLeftPad);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(45, helpFormatter0.getLeftPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer("Br;/dZN)fO1QC");
      assertNotNull(stringBuffer0);
      assertEquals("Br;/dZN)fO1QC", stringBuffer0.toString());
      assertEquals(13, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-953), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("KX%'PX/3GI<1#VTQ1>S");
      assertNotNull(stringBuffer0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("KX%'PX/3GI<1#VTQ1>S", stringBuffer0.toString());
      
      StringWriter stringWriter0 = new StringWriter(1400);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertNotNull(optionGroup1);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Option option0 = new Option((String) null, false, " ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertNotSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(options0, options1);
      assertSame(optionGroup2, optionGroup0);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options2 = options1.addOption("", " ", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup0, optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(optionGroup2, optionGroup0);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1400, "T]f;#h@u/0", (String) null, options2, "KX%'PX/3GI<1#VTQ1>S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 919;
      StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 56, options0, 56, 919);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(stringBuffer0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 919, 10, "{:sBep%BGTwm?RW4_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, false, "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "6/%@/l3Odw0FZ$6/", true, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string0 = "<:}qs,9Q)(0";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(182, "6/%@/l3Odw0FZ$6/", "", options1, "q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionValidator");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("org.apache.commons.cli.OptionValidator", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer("dSSXq\"?v}PRDZjb");
      assertNotNull(stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      assertEquals("dSSXq\"?v}PRDZjb", stringBuffer0.toString());
      
      helpFormatter0.setSyntaxPrefix("\n");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("org.apache.commons.cli.OptionValidator", helpFormatter0.getLongOptSeparator());
      
      StringWriter stringWriter0 = new StringWriter(4637);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) mockPrintWriter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(73, stringBuffer0.length());
      assertEquals(73, stringBuffer1.length());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals(73, stringBuffer0.length());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("org.apache.commons.cli.OptionValidator", helpFormatter0.getLongOptSeparator());
      
      helpFormatter1.printHelp("}EZ|N$mNW=", options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      String string0 = helpFormatter1.defaultArgName;
      assertEquals("arg", string0);
      assertNotNull(string0);
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1085, "%^GOk=wSyhcuu", ">", options0, 1, 1575, "", true);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-69);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)32, (byte)44, (byte) (-69)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("\n", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2367, 0, "5A2<JNKb##");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n5A2<JNKb##", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals(11, stringBuffer1.length());
      assertEquals("\n5A2<JNKb##", stringBuffer1.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer("KX%'PX/3GI<1#VTQ1>S");
      assertNotNull(stringBuffer0);
      assertEquals("KX%'PX/3GI<1#VTQ1>S", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      StringWriter stringWriter0 = new StringWriter(1400);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertEquals(29, stringBuffer1.length());
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringBuffer1.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringWriter0.toString());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertEquals(29, stringBuffer1.length());
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringBuffer1.toString());
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasLongOption("arg");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption("p", true, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1849, (String) null, options1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(stringWriter0, stringWriter1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("KX%'PX/3GI<1#VTQ1>S[--null -]usage: null [-p <arg>]\n", stringWriter0.toString());
      
      helpFormatter0.printHelp("DzP)ln", options1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.defaultArgName;
      assertEquals("arg", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer2 = new StringBuffer(1400);
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertNotNull(stringBuffer2);
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer2.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      int int0 = helpFormatter1.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, " ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      String string0 = "";
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 911, "I", "org.apache.commons.cli.HelpFormatter", options0, 911, 10, (String) null, true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string1 = "`'|q,JI>l5V\\";
      boolean boolean1 = false;
      boolean boolean2 = false;
      Option option0 = null;
      try {
        option0 = new Option("cmdLineSyntax not provided", "", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("k6K4E$0zX1cesdt");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("k6K4E$0zX1cesdt", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 34, options0, 4601, 74);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      StringWriter stringWriter0 = new StringWriter(34);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer2 = stringBuffer1.append((Object) stringBuffer0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(2, stringBuffer2.length());
      assertEquals(" ", stringBuffer2.toString());
      
      helpFormatter0.setLeftPadding((-2498));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2498), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("k6K4E$0zX1cesdt", helpFormatter0.getLongOptSeparator());
      assertEquals((-2498), helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(" ", stringWriter0.toString());
      assertEquals(" ", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Options options2 = options0.addOption("", "usage: ", true, " :: ");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-535), " :: ", (String) null, options2, "671F{1Os'Hp-sj9Lh$", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("d", "\n");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Collection collection0 = options0.getOptionGroups();
      assertSame(options0, options1);
      assertNotNull(collection0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Collection collection1 = options0.getOptionGroups();
      assertTrue(collection1.equals((Object)collection0));
      assertSame(options0, options1);
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertNotNull(optionGroup2);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertNotNull(options3);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options4 = options2.addOption("", true, "L]oi");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options4);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertNotNull(options4);
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      helpFormatter0.printHelp("L]oi", "n{.P)W", options4, "g(ZF lg'");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options4);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("\n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string1 = helpFormatter0.rtrim("d");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d", string1);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string2 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      assertNotNull(stringBuffer0);
      assertEquals("arg", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        options2.addOption("M'wc~+a=L[s-", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'M'wc~+a=L[s-' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("arg", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("-", options0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(options0, options1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter0.printHelp("arg", options1, true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter1.defaultLeftPad;
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-196));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockFile mockFile0 = new MockFile((File) null, "usage: ");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("usage: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("mg@$|hSnnKYDRB,[qq-");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("mg@$|hSnnKYDRB,[qq-", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter1.setLeftPadding(74);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      Option option0 = new Option("arg", true, "mg@$|hSnnKYDRB,[qq-");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals("mg@$|hSnnKYDRB,[qq-", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertEquals("mg@$|hSnnKYDRB,[qq-", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals("mg@$|hSnnKYDRB,[qq-", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      helpFormatter0.printHelp(74, "\n", "usage: ", options1, "usage: ");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("mg@$|hSnnKYDRB,[qq-", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("mg@$|hSnnKYDRB,[qq-", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string1 = "cmdLineSyntax not provided";
      String string2 = "-";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = false;
      String string3 = null;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "X:()\"}BebuS+0(-hs(";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "HFu^\"E^5POb>/d`zC";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "HFu^\"E^5POb>/d`zC";
      objectArray0[7] = (Object) options1;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      assertEquals(9, objectArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "\n", "", options0, 3, (-755), "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      helpFormatter0.setArgName("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      boolean boolean0 = options0.hasShortOption("-");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("\n", options1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultSyntaxPrefix = "-";
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      String string1 = helpFormatter0.getArgName();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setSyntaxPrefix("usage: ");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("k6K4E$0zX1cesdt");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("k6K4E$0zX1cesdt", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 34, options0, 4601, 74);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      StringWriter stringWriter0 = new StringWriter(34);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer2 = stringBuffer1.append((Object) stringBuffer0);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(2, stringBuffer2.length());
      assertEquals(" ", stringBuffer2.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(" ", stringWriter0.toString());
      assertEquals(" ", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2{.v~");
      assertFalse(boolean0);
      
      helpFormatter0.setArgName("]");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("]", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("]", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = 1986;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "]", 3, 1986);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator(">[8vs");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(">[8vs", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer0, (-508), options0, 3, 13);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotNull(stringBuffer2);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(">[8vs", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, (String) null, options1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options1, options0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter1.printHelp("--", options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      
      String string0 = helpFormatter2.getLongOptPrefix();
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals("--", string0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.printHelp("D", "", options0, "arg");
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string0 = helpFormatter1.createPadding(74);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("                                                                          ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter0.setLongOptPrefix("arg");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      
      int int0 = 2019;
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertNotNull(options2);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, (String) null, "ZA3M", options2, 3027, (-2551), "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.defaultOptPrefix = null;
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "uCE\"a$no", "' contains an illegal character : '", options1, (-4277), (-2927), "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setSyntaxPrefix(",'%$Rst+'L6bKU-");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(",'%$Rst+'L6bKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5rB, \t37P ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("y");
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      mockPrintWriter0.println();
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertFalse(options1.equals((Object)options0));
      assertFalse(options2.equals((Object)options0));
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertNotSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      
      helpFormatter2.printHelp(1476, "F:Br98+", "5rB, \t37P ", options1, " ");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertFalse(options1.equals((Object)options0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      
      helpFormatter2.printOptions(mockPrintWriter0, 1, options2, 1, 3);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(options1.equals((Object)options0));
      assertFalse(options2.equals((Object)options0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertNotSame(options2, options0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "~Ki?", "' contains an illegal character : '", options1, 1482, 7, "' contains an illegal character : '");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(options1.equals((Object)options0));
      assertNotSame(options1, options0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.rtrim("~Ki?");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("~Ki?", string0);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setSyntaxPrefix("usage: ");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("--", "\n", options0, "\n", false);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, stringBuffer0.length());
      assertEquals("3.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer1.length());
      assertEquals("3.0", stringBuffer1.toString());
      
      boolean boolean0 = options0.hasShortOption("\n");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile(" ", "-");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/ /-", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/ ", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("-", mockFile0.getName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = objectArray0[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      assertEquals(7, objectArray0.length);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/ /-", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/ ", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("-", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "SWwF`gV9^j=", "-", options0, 59, (-1), "SWwF`gV9^j=", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("[ARG...]", options1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile((File) null, "--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 1269, " ");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, (String) null);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setSyntaxPrefix(",'%$<Rst+'L<6bFKU-");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5rB, \t37P ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("y");
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      helpFormatter0.setSyntaxPrefix("5rB, \t37P ");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("5rB, \t37P ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 19, (-3668), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertNotNull(optionGroup1);
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Option option0 = new Option("arg", true, "arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      
      mockPrintWriter0.print((Object) "I");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3511), "", "", options0, (-3511), (-3511), "@(\"JKaP)K*U'\"W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockFile mockFile0 = new MockFile("usage: ", "");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockFile mockFile1 = new MockFile(">");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("usage: ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/usage: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "X:()\"}BebuS+0(-hs(";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean1 = true;
      String string1 = "\"@E";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "k", "\"@E", options0, 11, 1, "arg", true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotSame(mockFile0, mockFile1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("usage: ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/usage: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      MockFile mockFile0 = new MockFile((File) null, "usage: ");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("usage: ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("mg@$|hSnnKYDRB,[qq-");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("mg@$|hSnnKYDRB,[qq-", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter1.setLeftPadding(74);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 2556, (-1270), " ");
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(1, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      
      String string0 = "H4B2XYB!:93 7An!";
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 74, options0, 1, 4);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(1, stringBuffer1.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(" ", stringBuffer2.toString());
      assertEquals(1, stringBuffer2.length());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2623), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Option option0 = new Option("", true, "arg");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp("'", options1, false);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(options1.equals((Object)options0));
      assertNotSame(options1, options0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-", 1, 1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      
      PrintWriter printWriter1 = mockPrintWriter0.append('C');
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      assertNotNull(printWriter1);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      
      int int0 = (-570);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-570), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("arg", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2760, "", "", options0, "I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setSyntaxPrefix(",'%$<Rst+'L<6bFKU-");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(",'%$<Rst+'L<6bFKU-", "\n", options0, "\n", false);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, stringBuffer0.length());
      assertEquals("3.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer1.length());
      assertEquals("3.0", stringBuffer1.toString());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      String string0 = helpFormatter1.rtrim("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter0.setLongOptPrefix("--");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      int int0 = helpFormatter1.getLeftPadding();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertNotNull(helpFormatter2);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      
      helpFormatter2.setWidth(57);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(57, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(57, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      
      helpFormatter2.setLongOptSeparator(" ");
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(57, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(57, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("[ARG...]", options1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(comparator0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setDescPadding(3);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      int int1 = helpFormatter1.getLeftPadding();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      helpFormatter1.setWidth(3);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringWriter stringWriter0 = new StringWriter(156);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1265, (-1), "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", stringWriter0.toString());
      
      int int0 = 3841;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3841, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n\n", stringWriter0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockFile mockFile0 = new MockFile((File) null, "usage: ");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("-");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      mockFile1.deleteOnExit();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile1, mockFile0);
      assertEquals("-", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("-", mockFile1.getName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("mg@$|hSnnKYDRB,[qq-");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("mg@$|hSnnKYDRB,[qq-", helpFormatter0.getLongOptSeparator());
      
      helpFormatter1.setLeftPadding(74);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 2556, (-1270), " ");
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 682, options0, (-653), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      
      PrintWriter printWriter0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOption("arg", "-", false, "\n");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Collection collection0 = options0.getOptionGroups();
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertNotNull(collection0);
      
      Collection collection1 = options2.getOptionGroups();
      assertTrue(collection1.equals((Object)collection0));
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Collection collection2 = options2.getOptions();
      assertFalse(collection2.equals((Object)collection1));
      assertFalse(collection2.equals((Object)collection0));
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(collection2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.printHelp("Mz(", options2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 143, "[[ac8(?o'", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = 811;
      String string0 = "HJu^\"E^5POb>/d`zC";
      String string1 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = options0.toString();
      assertNotNull(string0);
      
      Options options1 = options0.addOption("", "", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("[ARG...]", options1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "\n";
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      helpFormatter1.setLeftPadding(1922);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 2564, " [ARG]");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(6, stringBuffer0.length());
      assertEquals(" [ARG]", stringBuffer0.toString());
      assertEquals(6, stringBuffer1.length());
      assertEquals(" [ARG]", stringBuffer1.toString());
      
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 2552, options0, 2552, 0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1922, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1922, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(43, stringBuffer0.length());
      assertEquals(43, stringBuffer2.length());
      
      MockFile mockFile0 = new MockFile("-", "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "' was specified but an option from this group ", 1922, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile((File) null, "usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockFile mockFile1 = new MockFile("-");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      mockFile1.deleteOnExit();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("-", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals("-", mockFile1.toString());
      assertFalse(mockFile1.exists());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2019, "X:()\"}BebuS+0(-hs(", "-", options0, (-2551), 3, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("usage: ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("-", "iMpLhL-MV", options0, "iMpLhL-MV", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      boolean boolean0 = options0.hasShortOption("iMpLhL-MV");
      assertFalse(boolean0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1391), options0, 2571, 2571);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1326, 1712, "iMpLhL-MV");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("iMpLhL-MV", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals(10, stringBuffer1.length());
      assertEquals("iMpLhL-MV", stringBuffer1.toString());
      assertEquals(10, stringBuffer2.length());
      assertEquals("iMpLhL-MV", stringBuffer2.toString());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setLongOptPrefix("iMpLhL-MV");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("iMpLhL-MV", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("iMpLhL-MV", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getArgName();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("arg", string1);
      assertNotNull(string1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("iMpLhL-MV", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(63, "<:}qs,9Q)(0", "", options0, "", true);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 811, 1514, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(" ", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string1 = helpFormatter0.getArgName();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", string1);
      assertNotNull(string1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "HJu^\"E^5POb>/d`zC", "", options1, "T]f;#h@u/0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter1.setLeftPadding(64);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(64, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(64, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      assertNotNull(stringBuffer0);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 64, "-");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(64, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(64, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" -", stringBuffer0.toString());
      assertEquals(" -", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 4601, options0, 34, 74);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(64, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(64, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(2, stringBuffer0.length());
      assertEquals(" -", stringBuffer0.toString());
      assertEquals(" -", stringBuffer2.toString());
      assertEquals(2, stringBuffer2.length());
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printHelp(811, "HJu^\"E^5POb>/d`zC", "", options1, "T]f;#h@u/0");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "bN9c76jQkfMAgT'6D");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = (-369);
      String string0 = "x*(h7{v)&dH3Opf";
      Option option0 = options0.getOption("4=Y;iQ.DJ");
      assertNull(option0);
      
      MockFile mockFile0 = new MockFile("-", " ");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("x*(h7{v)&dH3Opf", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/-", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/-/ ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.canRead());
      assertEquals("/experiment/-/ /x*(h7{v)&dH3Opf0The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("x*(h7{v)&dH3Opf0The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/experiment/-/ ", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 537, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, "");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string0 = options1.toString();
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(string0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string1 = "hBFFq9w]AoKmS:Z0";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-295), "IJD-]X*&;", "", options0, "<:}qs,9Q)(0", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2923), options0, 1, (-418));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setSyntaxPrefix(",'%$<Rst+'L<6bFKU-");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(",'%$<Rst+'L<6bFKU-", "iMpLhL-MV", options0, "iMpLhL-MV", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      helpFormatter0.defaultArgName = "o3I9&RW";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("o3I9&RW", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      boolean boolean0 = options0.hasShortOption("iMpLhL-MV");
      assertFalse(boolean0);
      
      helpFormatter0.defaultArgName = "_rg";
      assertEquals("_rg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1391), 1712, "iMpLhL-MV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = "I";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1155), "I", "I", options0, (-1), (-295), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockFile mockFile0 = new MockFile("-", "*");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = helpFormatter0.findWrapPos("#c|t)-$1kfC}]+A@W", 1630, 74);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setSyntaxPrefix(",'%$<Rst+'L<6bFKU-");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(",'%$<Rst+'L<6bFKU-", "\n", options0, "\n", false);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("3.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("3.0", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      
      boolean boolean0 = options0.hasShortOption("\n");
      assertFalse(boolean0);
      
      helpFormatter0.defaultArgName = "arg";
      assertEquals(",'%$<Rst+'L<6bFKU-", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1391), 1712, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockFile mockFile0 = new MockFile("-", "*");
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "g>)D8.OAjk");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      StringWriter stringWriter0 = new StringWriter(156);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1265, (-1), "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", stringWriter0.toString());
      
      helpFormatter0.setWidth((-2469));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2469), helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2469), helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultDescPad = 1816;
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2469), helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1816, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1816, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2469), helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2469), int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2469), helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1816, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setArgName("]");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1816, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2469), helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2469), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("]", helpFormatter0.getArgName());
      assertEquals(1816, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1816, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2469), helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-2469), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("]", helpFormatter0.getArgName());
      assertEquals(1816, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("!L'oH}", 36, (-5133));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockFile mockFile0 = new MockFile("-0\"]@q(;v}DAv\"D4{");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("-0\"]@q(;v}DAv\"D4{", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("-0\"]@q(;v}DAv\"D4{", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      MockFile mockFile1 = new MockFile(mockFile0, "+B-ZTUF(");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1823, "+B-ZTUF(");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("-0\"]@q(;v}DAv\"D4{", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("-0\"]@q(;v}DAv\"D4{", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("+B-ZTUF(", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/-0\"]@q(;v}DAv\"D4{/+B-ZTUF(", mockFile1.toString());
      assertEquals("/experiment/-0\"]@q(;v}DAv\"D4{", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      
      helpFormatter0.setLeftPadding(1823);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1823, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1823, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptPrefix("I");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("I", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.rtrim("[");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("[", string0);
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("I", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = (-1);
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "bN9c76jQkfMAgT'6D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setOptPrefix("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setDescPadding(0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = (-1216);
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string1 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        options1.addOption("cmdLineSyntax not provided", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.createPadding(50);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                  ", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("--", string2);
      assertNotNull(string2);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("pXwZM[gBR#f4Z&", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setNewLine("[");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("[", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), 0, "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("lD[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'lD[' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1265, (-1), "");
      helpFormatter0.setWidth((-2469));
      helpFormatter0.defaultDescPad = 1816;
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1849, "I", "I", options0, (-1), (-295), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("c(X>He *Az8;{X5[Y", "c(X>He *Az8;{X5[Y", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2075, (Options) null, 2075, 2075);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-0\"]@q(;v}DAv\"D4{");
      MockFile mockFile1 = new MockFile(mockFile0, "+B-ZTUF(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1823, "+B-ZTUF(");
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "^~It!G.OsE";
      helpFormatter0.setLongOptSeparator("^~It!G.OsE");
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      String string2 = null;
      options0.getMatchingOptions((String) null);
      String string3 = "";
      // Undeclared exception!
      try { 
        options0.addOption(" | ", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W&gTWtb*`!ih";
      helpFormatter0.setArgName("W&gTWtb*`!ih");
      helpFormatter0.createPadding(0);
      int int0 = 624;
      String string1 = null;
      String string2 = "-";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", "", true, "--");
      helpFormatter0.printHelp("[ARG...]", options1);
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("\rN3Cp");
      helpFormatter0.setLeftPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-343), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      String string1 = "";
      Option option0 = new Option("", true, "");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      option1.clone();
      option1.setArgName("=I>!6%");
      option1.setDescription("-");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "-", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "' contains an illegal character : '", "-", options0, (-4277), (-2927), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", "", true, "--");
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("<");
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",'%$<Rst+'L<6bFKU-";
      helpFormatter0.setSyntaxPrefix(",'%$<Rst+'L<6bFKU-");
      String string1 = "\\iMpLhL-MV\\";
      Options options0 = new Options();
      helpFormatter0.printHelp(",'%$<Rst+'L<6bFKU-", "iMpLhL-MV", options0, "iMpLhL-MV", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-1391);
      options0.hasShortOption("iMpLhL-MV");
      String string2 = "arg";
      helpFormatter0.defaultArgName = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1391), 1712, "iMpLhL-MV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      optionGroup1.addOption(option0);
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", "--", options0, "H4B2XYB!:93 7An!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", "", true, "--");
      helpFormatter0.printHelp("[ARG...]", options1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile((File) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      mockFile0.deleteOnExit();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options1, 0, (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-1797);
      String string0 = "#TVkOs-;h&N\";rAif<(";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1797), (-3509), "#TVkOs-;h&N\";rAif<(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(" ", objectArray0);
      int int0 = 3;
      String string0 = "dl#";
      Options options0 = new Options();
      options0.addOption("", "--", false, "(Gy[Dm@");
      Option option0 = null;
      try {
        option0 = new Option("--", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1173;
      String string0 = "";
      String string1 = "n?4:`W";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("X0(cnE5", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'X0(cnE5' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
