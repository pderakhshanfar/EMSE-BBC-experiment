/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:45:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("n4ZB", "n4ZB", options2, "n4ZB", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, 1531, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-40), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "N'OSO)v\"Y=D}hJkL";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("N'OSO)v\"Y=D}hJkL", "z", (Options) null, "N'OSO)v\"Y=D}hJkL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Util");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOption("", " ", false, "usage: ");
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1598, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", "", options0, "", false);
      helpFormatter0.renderOptions((StringBuffer) null, 113, options0, 64, 64);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 116, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2039, (Options) null, 2039, 2073);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "s^Y~p1 0!Uz;";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "xQQsJX<\"sqG6 5", "s^Y~p1 0!Uz;", options0, "xQQsJX<\"sqG6 5");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = null;
      String string0 = "";
      String string1 = "B+ZeMUe`X";
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("a;7r3A@ s-.uECCU", "", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "a;7r3A@ s-.uECCU", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 91, " ", "", (Options) null, 1100, 91, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)12;
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 120;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((int) (byte)115, "-", "-", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.createPadding(2567);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "!+xGl&Mzq3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("D", true, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "]", "", options1, 1, 2665, (String) null, false);
      int int0 = helpFormatter0.defaultDescPad;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "!\\+x\\Gl&Mzq3";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "!+xGl&Mzq3", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("-");
      int int0 = (-1441);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, (-1441), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1571));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "-", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("q", "arg", true, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<.MH0f+){GLW@;", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("q", "-", options2, "<.MH0f+){GLW@;", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_ h4g ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\",{G~v", "-", options0, (-4322), 1, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultOptPrefix = ">";
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.findWrapPos("has already been selected: '", 0, 8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2707, "<.MH0f+){GLW@;", "<.MH0f+){GLW@;", (Options) null, 3503, 3503, "[Ak", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " [ARG]", true, "AygJ");
      Option option0 = new Option("q", "arg", true, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("<.MH0f+){GLW@;", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("E", "-", options3, "<.MH0f+){GLW@;", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " [ARG]", true, "AygJ");
      Option option0 = new Option((String) null, "I.", true, (String) null);
      Option option1 = new Option("arg", true, (String) null);
      options0.addOption(option1);
      helpFormatter0.printHelp("AygJ", options1, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_ h4g ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 64, "--", "", options0, 23, 1, "D#}&hO:7^p'?L=E<h.", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      helpFormatter0.defaultNewLine = "[ option: ";
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-700), options0, 0, 3);
      StringWriter stringWriter0 = new StringWriter(2215);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp("[S{V7xqllo]H", "arg", options0, "QpoES3@", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", " [ARG]", true, "AygJ");
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "AygJ", "AygJ", options0, 74, 74, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter1.printHelp("LNf-%", "usage: ", options0, "-", true);
      helpFormatter1.getNewLine();
      MockFile mockFile0 = new MockFile("", "-");
      File file0 = MockFile.createTempFile("arg", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print("usage: ");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "mcz@w!Ln", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " [ARG]", true, "AygJ");
      Option option0 = new Option("q", "arg", true, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("<.MH0f+){GLW@;", options2, true);
      helpFormatter0.printHelp(" [ARG]", "<", options2, "q", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('2');
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.helpOptions();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-5653), options2, 83, 83);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<.MH0f+){GLW@;";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "\"-77{w5^=h%e)m";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "<.MH0f+){GLW@;", "org.apache.commons.cli.AlreadySelectedException", (Options) null, "org.apache.commons.cli.AlreadySelectedException", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", true, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      helpFormatter2.setWidth(3);
      helpFormatter3.createPadding(1);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Option option0 = new Option("jb", "<?GFvn}ig1^%<Q2IF{", false, "");
      Options options2 = options0.addOption(option0);
      helpFormatter4.printHelp("usage: ", "arg", options2, "_m4~tzLA", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "[6i4i|G{p");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "--", options1, "usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 3;
      helpFormatter1.printOptions(mockPrintWriter0, 636, options1, 0, 106);
      helpFormatter0.printHelp("--", "arg", options0, "5v? ", false);
      helpFormatter1.printHelp("5v? ", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 48, "", "OUc}4", options0, 48, 48, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "[6i4i|G{p");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "--", options1, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 3;
      helpFormatter1.printOptions(mockPrintWriter0, 636, options1, 0, 106);
      helpFormatter0.printHelp("--", "arg", options0, ";?Ly ", false);
      helpFormatter1.printHelp(";?Ly ", options1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YP&Tqs&YBl", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", true, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("cmdLineSyntax not provided", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      helpFormatter2.setWidth(3);
      helpFormatter3.createPadding(1);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter4.renderWrappedText(stringBuffer0, 1, 1, "-");
      Options options2 = new Options();
      helpFormatter1.renderOptions(stringBuffer1, 8, options2, 3, 481);
      StringWriter stringWriter0 = new StringWriter(301);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter4.printHelp((PrintWriter) mockPrintWriter0, 1398, "N)$", "6oe6bP{7UP\"\"uNH<{:", options0, 3, 304, "+PNpo]c^J3;q", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.setLongOptPrefix("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth((-4237));
      helpFormatter2.printHelp(3, "\n", " | ", options0, "");
      helpFormatter0.printHelp("-", "arg", options0, " ", false);
      helpFormatter2.printHelp(1, " ", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.hasLongOption("usage: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 1050, 2181);
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-611));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-4237));
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "(8PXa", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<.MH0f+){GLW@;";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-441), "~?m2`W85 i^qk{~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannt add value, list full.");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp("bbjX~`Z]ojc>", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth((-1048));
      helpFormatter0.createPadding(1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[ option: ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannot add value, list full.");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "n ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "[6i4i|G{p");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "--", options1, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printHelp("usage: ", "arg", options1, "--", false);
      helpFormatter1.createPadding(2431);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 78;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 0, 78, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 773, (-1), "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[ option: ";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "!+?xGGl&Mzq3B");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 15, options0, 409, 142);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 409, 31, "\n");
      helpFormatter0.renderWrappedText(stringBuffer2, 295, 73, "--");
      helpFormatter1.findWrapPos("arg", 72, 32);
      helpFormatter0.setWidth(5);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator((Comparator) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<.MH0f+)GLW@;", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 22, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      EvoSuiteFile evoSuiteFile0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "!j>@]kL1/>L{,q/zV", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "org.apache.commons.cli.HelpFormatter", "' contains an illegal character : '", options0, 1, 1082, "' contains an illegal character : '", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "-", options0, 0, 0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) "<.MH0f+)GLW@;";
      objectArray0[4] = (Object) "=";
      objectArray0[5] = (Object) "<.MH0f+)GLW@;";
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) "<.MH0f+)GLW@;";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      Options options0 = new Options();
      Option option0 = new Option("", true, "f");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("l'Ev^lE`OVp3", options1, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "^]", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setDescPadding(1746);
      helpFormatter0.getWidth();
      String string0 = "\\\\svyr)@N";
      helpFormatter0.findWrapPos("\\svyr)@N", 3478, (-313));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-313), (-313));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "[6i4i|G{p");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "--", options1, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultDescPad = 636;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "A CloneNotSupportedException was thrown: ");
      helpFormatter1.printOptions(mockPrintWriter0, 636, options1, 0, 106);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "arg", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 34;
      String string0 = null;
      String string1 = "].J*P>9YfKTl";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", (String) null, true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "[6i4i|G{p");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "--", options1, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannot add value, list full.");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      options1.addOption("arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", options1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, (String) null, options0, 0, 0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannot add value, list full.");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp(", ", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter1.setWidth(103);
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-845));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 48;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 48, 3, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "usage: ", options0, "usage: ", true);
      helpFormatter0.createPadding(3);
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[DrZ");
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      pipedOutputStream0.connect(pipedInputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2729));
      int int0 = 2384;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2384, ",nAm]v+}~JRzHuQV(9", "", (Options) null, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[DrZ");
      helpFormatter0.defaultLongOptPrefix = "[DrZ";
      helpFormatter0.defaultArgName = "z@E#,&<p.'uJ]ipWU";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printHelp("'", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("[DrZ");
      helpFormatter1.setWidth(2972);
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-845));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "P-7oG`)@r");
      Options options1 = options0.addOption(option0);
      helpFormatter2.printHelp("-", "usage: ", options1, "|/0*z", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("66w<9YPTnt*Nu");
      helpFormatter0.defaultLeftPad = (-2266);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2384, ",nAm]v+}~JRzHuQV(9", "", (Options) null, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", "6", options0, "6", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("p;uwU6dG /iNr2_N", options0, false);
      helpFormatter0.setSyntaxPrefix("-t sxmw4HU@<v?&IF&");
      helpFormatter0.setWidth(97);
      helpFormatter0.createPadding(61);
      helpFormatter0.rtrim("]");
      helpFormatter0.printHelp(61, "E|u", "org.apache.commons.cli.OptionGroup", options0, "p;uwU6dG /iNr2_N");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("66w<9YPTnt*Nu");
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("66w<9YPTnt*Nu", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(695);
      helpFormatter0.renderWrappedText(stringBuffer0, 277, 277, "");
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "--");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "%)IJdI|N*Q", "IVdaaf9.p}RC1>!", options0, 277, 44, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-1178);
      String string0 = "/h3~ns~Dj=W";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1178), (-1178), "/h3~ns~Dj=W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, (String) null, "]", (Options) null, "nj,q|?\"E0q<% 8eMP*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 2949, 0, "arg");
      helpFormatter2.findWrapPos("", 2949, 1735);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(695);
      helpFormatter0.setWidth(18);
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<.MH0f+)GLW@;";
      Options options0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(48, "<.MH0f+)GLW@;", "", (Options) null, "oZ58b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "]", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      char char0 = 'N';
      String string0 = "=";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "=");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[DrZ");
      helpFormatter0.defaultLongOptPrefix = "[DrZ";
      helpFormatter0.defaultArgName = "z@E#,&<p.'uJ]ipWU";
      helpFormatter0.setLeftPadding(929);
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("taDq{zo{", options0, false);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp("z@E#,&<p.'uJ]ipWU", "arg", options0, "z@E#,&<p.'uJ]ipWU");
      assertEquals("z@E#,&<p.'uJ]ipWU", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Rvtbhy");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.getBuffer();
      int int0 = (-2);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("8*(*}'M5?J", " ", true, "8*(*}'M5?J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8*(*}'M5?J' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      try { 
        MockURI.URI("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "usage: ", "pZo6/zDKGez", " ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ://[usage: ]pZo6/zDKGez#%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 695;
      StringBuffer stringBuffer0 = new StringBuffer(695);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 277, 277, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 3391, 695, "");
      String string0 = " {P";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" {P", 1454, (-2071));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", false, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4571), "yTP\"KBX*qAw3", " ", options1, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1155);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("OQThmR kHw:'+u");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1155), "OQThmR kHw:'+u", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter0.setNewLine("Cannot add value, list full.");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2643, "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      options0.addOption("_E", "R", false, "arg");
      options0.addOption("arg", "-", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 23, options0, (-2), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannot add value, list full.");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp(", ", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 87, options1, 74, 29);
      Option option0 = new Option("", true, (String) null);
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", ")L}{\"", options2, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")h5";
      helpFormatter0.defaultLongOptPrefix = ")h5";
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 3324;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3324, options0, 3, (-1515));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[DrZ");
      helpFormatter0.defaultLongOptPrefix = "[DrZ";
      helpFormatter0.defaultArgName = "z@E#,&<p.'uJ]ipWU";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printHelp("'", options1, false);
      assertEquals("[DrZ", helpFormatter0.getSyntaxPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("[DrZ");
      helpFormatter1.setWidth(2972);
      helpFormatter1.createPadding(1);
      helpFormatter1.getDescPadding();
      assertEquals("arg", helpFormatter1.getArgName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1364;
      helpFormatter0.defaultDescPad = 1364;
      helpFormatter0.setSyntaxPrefix(";YeM[");
      helpFormatter0.setLongOptPrefix("");
      String string0 = "";
      Options options0 = new Options();
      String string1 = "/+y'jWh^U /y(5\"s\\";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("/+y'jWh^U /y(5\"s", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("has already been selected: '", 277, 277);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter0.print(74);
      int int0 = 1810;
      mockPrintWriter0.println(1810);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1810, "Dwf(p{$u0");
      String string0 = null;
      String string1 = ")`Ch(f)";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getWidth();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|/0*z", "<.MH0f+)GLW@;", (Options) null, "<.MH0f+)GLW@;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "LiKt~Ocr,qyIAqC";
      helpFormatter0.setWidth(97);
      helpFormatter0.createPadding(97);
      assertEquals(97, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2384, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("p;uwU6dG /iNr2_N", options0, false);
      helpFormatter0.setSyntaxPrefix("-t sxmw4HUM@<v?&IF&");
      int int0 = 31;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.createPadding(31);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("                               ");
      String string0 = "2_I~";
      StringBuffer stringBuffer0 = new StringBuffer("2_I~");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("-t sxmw4HUM@<v?&IF&", "", false, "                               ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '-t sxmw4HUM@<v?&IF&' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.createPadding(4099);
      Options options0 = new Options();
      String string1 = "<";
      // Undeclared exception!
      try { 
        options0.addOption("<", "", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1091;
      String string0 = "I\"";
      Options options0 = new Options();
      String string1 = "fL^24m";
      boolean boolean0 = false;
      String string2 = "m4I5A<S";
      // Undeclared exception!
      try { 
        options0.addOption("fL^24m", false, "m4I5A<S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fL^24m' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
