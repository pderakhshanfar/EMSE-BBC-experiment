/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("YGt", "", true, "9G 0fWjr&");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "-", true, "usage: ");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "t7YwN2D)W", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintStream0.println((-554.0));
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      helpFormatter0.printUsage(printWriter0, 101, "=X");
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 840;
      int int1 = 47;
      stringBuffer0.append("usage: ");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(111, (CharSequence) null, (-1), (-1421));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 111
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1746);
      helpFormatter0.defaultSyntaxPrefix = null;
      String string0 = " | ";
      helpFormatter0.defaultLongOptPrefix = " | ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 2786;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "-");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 2786, 2786);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "<S]e^";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<S]e^");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("tFV4jx=88))V NlPGa");
      helpFormatter0.getNewLine();
      int int0 = (-1790);
      helpFormatter0.defaultLeftPad = (-1790);
      helpFormatter0.defaultLeftPad = (-1790);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      String string1 = "gkV)m[5FYBJb]?Q+N";
      String string2 = "[";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("[", ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/{QdB@ab", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("--");
      Options options1 = options0.addOption((String) null, " ", true, "arg");
      helpFormatter0.printHelp("\n", options0, true);
      File file0 = MockFile.createTempFile("zJ~=aSi", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 0, "zJ~=aSi", "", options1, 0, (-1052), "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i\t&tMSV@Wx-p&)", "", (Options) null, "=(", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.parseServerAuthority(uRI0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2922), 2176, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ", true, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]", options0, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U&n<+Pv}lv`jv");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      int int0 = 2930;
      helpFormatter0.setSyntaxPrefix(">mDu");
      helpFormatter0.setDescPadding((-836));
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", ">mDu", options0, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "!QOp i";
      String string1 = "y<C4d&8$Lm";
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('>');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "]Y46U$$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockPrintWriter0.print((-716.0538F));
      helpFormatter0.defaultDescPad = 0;
      mockPrintWriter0.println("' contains an illegal character : '");
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 225, "]Y46U$$", "]Y46U$$", options0, 225, 225, "]Y46U$$", false);
      mockFile0.setReadable(false);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 2134, options1, 225, 2134);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("' contains an illegal character : '");
      StringBuffer stringBuffer0 = new StringBuffer(":LA22.MB");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3206, options0, 201, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 207, 201, "]Y46U$$");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, 223, options1, (-1061), 1356);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      String string1 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", (String) null, (Options) null, "   ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "   ";
      Option option0 = new Option("", "-", true, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("!QOp iQ", "   ", options1, " ]");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-25));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-947), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*>b1J&_P+#8YC/.");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "F;i");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "*>b1J&_P+#8YC/.", options1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) helpFormatter0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-636), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(1429);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(57);
      options0.addOption("Y", "usage: ", true, (String) null);
      helpFormatter0.printHelp("39/", options0, false);
      helpFormatter1.rtrim(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("39/");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 70, "f5oL6q&", options0);
      helpFormatter1.findWrapPos("", 1429, 70);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-2075));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printOptions(mockPrintWriter0, 4, options0, 4, 1423);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "h>g&Alra`6a", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1124, " MCBkj~gK[S-", "usage: ", options0, 1124, 39, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-915), 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = helpFormatter0.defaultOptPrefix;
      mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "fAMZ}O~#vS+Zqni+y", (Options) null, (-322), 3, "", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.defaultArgName = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter1.optionComparator = comparator0;
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2040, "LO<~]0", options3);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "org.apache.commons.cli.Options", true, "--");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "{+)sH1&?CN)xPW:");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|Sn-TvwD", options1, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "L$[(s>DbN-<7-F");
      option0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("Bd", true, "ZF&\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "=S<j\"d(a\"-{&\"K", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.defaultArgName = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "usage: ");
      Options options3 = options2.addOption("", "t)@BR;q@xD6,", true, "Zpy__z6=7z@vGuwU");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2040, "LO<~]0", options3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "org.apache.commons.cli.HelpFormatter");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.setOptPrefix("L$[(s>DbN-<7-F");
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$1", "", options1, "mwV=zeI6~A", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 229, "L$[(s>DbN-<7-F", (String) null, options0, 116, 319, "+", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 319, 229, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("yd0[@Z>10ijc*!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      helpFormatter0.setWidth(3);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("yd0[@Z>10ijc*!");
      Options options1 = new Options();
      helpFormatter0.printHelp("!QOp iQ", "!QOp iQ", options1, "[");
      MockPrintStream mockPrintStream0 = new MockPrintStream("O");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 2429, 1, "--");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options1, 74, 1902);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-2519), 159, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2728;
      helpFormatter0.renderOptions((StringBuffer) null, 2728, options0, 49, 49);
      helpFormatter0.setLongOptSeparator("<0{#\"~g~VRLR");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("\n", options0, false);
      helpFormatter0.renderOptions((StringBuffer) null, 196, options0, 2728, 0);
      int int0 = (-3630);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3630), "--", "-", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "L$[(s>DbN-<7-F");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "--", options1, (-1), 111, "q.1p;FvbQ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("yd0[@Z>10ijc*!");
      MockFile mockFile0 = new MockFile("yd0[@Z>10ijc*!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.print("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2543), (String) null, "", options0, 1, 1, "KZln\"", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      Options options1 = options0.addOption((String) null, true, "\n");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options2 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-144), "", "-", options1, 34, (-2271), "/%lg|Ey~cqRS0M~c$)", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.createPadding(1429);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, "arg");
      helpFormatter1.printHelp("\n", options0, true);
      helpFormatter1.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1395), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3231, "\n");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[ARG...]";
      helpFormatter0.setLeftPadding((-3266));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pv93ofF0cEo*", "pv93ofF0cEo*", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1689);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.sepaDrator", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "L$[(s>DbN-<7-F");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("L$[(s>DbN-<7-F");
      int int0 = 111;
      String string0 = "q.1p;FvbQ";
      boolean boolean0 = true;
      helpFormatter0.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 111, "q.1p;FvbQ", "jZ}ASa|`'", options0, (-1), 1, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      Options options0 = new Options();
      helpFormatter1.createPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", "", false, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("-", options1, true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1243, "sN_yu?rR~iy#,", "KZln\"", (Options) null, 1243, 1243, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("[#Yi:q9@i", "\n", options0, "[#Yi:q9@i");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("6(X2Xr`mbuU]/jBO", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 2880, ":Ir#|*0}2S");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("]");
      Options options1 = new Options();
      helpFormatter0.printHelp(1, "\n", "usage: ", options1, "", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      Options options2 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "\n", options0, 3, 1, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 34, " ", "org.apache.commons.cli.ParseException", options2, 1358, 74, "_%&m4F.gV", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "-");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(9, "arg", "", options2, (String) null, false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter2.setLeftPadding(74);
      helpFormatter1.printHelp("\n", options1, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "W=YNN:lRIbz-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y?C-:<Pmw1->r-WUg", "W=YNN:lRIbz-", (Options) null, "y?C-:<Pmw1->r-WUg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("~=`fI>(IDkO", "J|", options0, "W=YNN:lRIbz-");
      MockFile mockFile0 = new MockFile(" ", "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "~=`fI>(IDkO";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "J|";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 74, "~=`fI>(IDkO", "cmdLineSyntax not provided", options1, 74, 74, "cmdLineSyntax not provided", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (String) null, options0, "W=YNN:lRIbz-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 34, (Options) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2181), "usage: ", "", options0, (-1351), (-1351), "dK", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.createPadding(1455);
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "MThSiQU", (String) null, options0, (String) null);
      helpFormatter0.setLeftPadding(74);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("]");
      Options options1 = new Options();
      helpFormatter0.printHelp(1, "\n", "usage: ", options1, "", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      helpFormatter2.setLeftPadding(1);
      options0.hasLongOption((String) null);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.printHelp("K", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      helpFormatter0.setDescPadding(560);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 560, 560, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1051, "(OQK", "", options0, (-2181), (-997), "dK", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      helpFormatter0.setWidth(1426);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = helpFormatter0.createPadding(1426);
      helpFormatter0.rtrim(string0);
      helpFormatter0.printHelp(1325, "usage:", "", options0, "");
      helpFormatter0.setLeftPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, (-1072), 42);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 823, "9A=^J", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options1 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(120, "arg", "--", (Options) null, "C`@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "<", "-", options0, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter3.renderWrappedText(stringBuffer0, 82, 74, "");
      // Undeclared exception!
      try { 
        stringBuffer1.insert(3, (CharSequence) "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-1385));
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(";DTtC_e;SA,[>.^.`N");
      helpFormatter0.setOptPrefix("");
      Options options1 = new Options();
      helpFormatter0.printHelp(1582, "T", "Xnh'", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("J", options0, false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      Options options1 = options0.addOption((String) null, true, "\n");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4635), ">", "?~_VOyR&dkq", options1, "?~_VOyR&dkq", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "usage: ", "", options0, 13, 2, ">lu,sHY8(xhE");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("c_Be(1");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.", "", options0, "DZ|?mqr$", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      helpFormatter0.setLeftPadding(0);
      Options options1 = options0.addOption((String) null, false, "--");
      helpFormatter2.printHelp(" ", options1, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      options0.addOption((String) null, false, "\n");
      helpFormatter0.getArgName();
      options0.helpOptions();
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(1669);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1408, 1424, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "%4|.c6!*-:", "gBew<o*}jIyG,To_iO", options0, "", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((-1034));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "6e)>T5< p5vXi", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-736), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 95;
      helpFormatter0.setDescPadding(95);
      String string0 = "'";
      int int1 = (-1462);
      helpFormatter0.defaultWidth = (-1462);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 95, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(97);
      helpFormatter0.setSyntaxPrefix("yd0[@7ZZ>10ijc*!");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("                                                                                                 ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      Options options1 = new Options();
      options1.addOption((String) null, true, (String) null);
      options1.getMatchingOptions((String) null);
      Option option0 = new Option("", false, "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = new Options();
      helpFormatter0.printHelp(13, "6e)>T5< p5vXi", "YYE7F.M)h6j", options1, "YYE7F.M)h6j", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(10);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ] [ long ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-1690), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "arg");
      option0.setDescription("p$0*_c,[C [[R5/");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setDescPadding((-2));
      option0.setRequired(false);
      Options options2 = options1.addOption("arg", "q-0=f", false, "q-0=f");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options2.getOption("y;x|8T5ig0NU");
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "y\"HBzk:G'av[zr$=z");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), 0, "~^(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1426, ";DTtC_e;SA,[>.^.`N", "", options0, "");
      helpFormatter0.setLeftPadding(52);
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(1426);
      String string0 = ")~p$)<@.";
      Option option0 = new Option("", "usage: ");
      Options options2 = options1.addOption("", false, ")~p$)<@.");
      helpFormatter0.defaultSyntaxPrefix = "p`nUP!k2IA";
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.appendCodePoint(1);
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options2, 1265, 5120);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(1426, ";DTtC_e;SA,[>.^.`N", "", options0, "");
      helpFormatter0.setLeftPadding(52);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "tlQHv;7=qB>";
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("c_Be(1");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("c_Be(1", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" | ");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "\n", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1299), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("_1uZ:N", 358, 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, false, "arg");
      String string1 = "p$0*_c,[C [[R5/";
      option0.setDescription("p$0*_c,[C [[R5/");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 63, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("arg", objectArray0);
      int int0 = 2;
      String string0 = "' contains an illegal character : '";
      Options options0 = new Options();
      int int1 = (-1318);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "NzJ(%_j@P\"H]gU\"d_K", "' contains an illegal character : '", options0, (-1318), (-1318), "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, 2);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 253, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 253, (-1), "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("%^1jR1iC3EE$|%3B[u", "%^1jR1iC3EE$|%3B[u", options0, "", false);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("w:;fhg{|lxp");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "LF<DJZp~=z", options0, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "tlQHv;7=qB>";
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("c_Be(1");
      helpFormatter0.getDescPadding();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string1 = "";
      Options options0 = new Options();
      options0.helpOptions();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      int int0 = 0;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("c_Be(1");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(74);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getArgName();
      options1.helpOptions();
      options1.toString();
      helpFormatter0.printHelp("}R", "e%d", options1, "arg", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(195);
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "A*^*$rWw D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y\"HBzk:G'av[zr$=z";
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "arg");
      option0.setDescription("p$0*_c,[C [[R5/");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setDescPadding((-2));
      option0.setRequired(false);
      Options options2 = options1.addOption("arg", "q-0=f", false, "q-0=f");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options2.getOption("y;x|8T5ig0NU");
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.toString();
      String string1 = "b5}6Z4I";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "h,X!1`t8_zejM", "", options3, "b5}6Z4I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "%^1jR1iC3EE$|%3B[u", "%^1jR1iC3EE$|%3B[u", options0, "[", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(18);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("F<=aw^b;2Yco _", 0, 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5[f`V";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-1);
      Options options0 = new Options();
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1874), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 253, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 3, "kjJSo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 253, "");
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      helpFormatter0.printWrapped(printWriter0, 3, "A*^*$rWw D");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.getOptPrefix();
      String string1 = "";
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "-", true, "arg");
      helpFormatter0.printHelp("Q 0y:w;4Ljw0i%E|;j", options3, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options2, 1, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      Options options1 = options0.addOption((String) null, true, "\n");
      helpFormatter0.printHelp("YYE7F.M)h6j", options0);
      helpFormatter0.getArgName();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options1.addOption("u\"qUJre+zu-sSf", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'u\"qUJre+zu-sSf' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "<", "-", options0, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.setLeftPadding(43);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options2 = options0.addOption("", "--", true, "[ option: ");
      helpFormatter3.printHelp("--", options2, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "YYE7F.M)h6j";
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options1);
      int int0 = 0;
      String string1 = "p`nUP!k2IA";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 44, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      helpFormatter0.createPadding(1426);
      Option option0 = new Option("", "usage: ");
      optionGroup0.addOption(option0);
      Options options2 = options1.addOption("", false, ")~p$)<@.");
      helpFormatter0.defaultSyntaxPrefix = "p`nUP!k2IA";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1426, options2, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "YYE7F.M)h6j";
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options1);
      options0.addOption((String) null, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YYE7F.M)h6j", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(" ]", " [ARG]", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("YYE7F.M)h6j", options1);
      options0.addOption((String) null, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YYE7F.M)h6j", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.setWidth(44);
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      String string1 = "[ option: ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "line.separator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "Pm9`eA.j.H.U6", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y\"HBzk:G'av[zr$=z";
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "arg");
      option0.setDescription("p$0*_c,[C [[R5/");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setDescPadding((-2));
      Options options2 = options1.addOption("arg", "q-0=f", false, "q-0=f");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.toString();
      String string1 = "b5}6Z4I";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(98, "h,X!1`t8_zejM", "", options3, "b5}6Z4I");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w:;fhg{|lxp";
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("w:;fhg{|lxp");
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "");
      int int0 = (-1737);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "w:;fhg{|lxp", "w:;fhg{|lxp", options1, (-1737), (-1737), "w:;fhg{|lxp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "W=YNN:lRIbz-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFTPURI;
      helpFormatter0.setDescPadding(466);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1207), ">", (String) null, options2, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("%ij`!k3rH(]i");
      helpFormatter0.defaultLeftPad = 3586;
      String string0 = "DB2h.:+Ia1M(>ioyX";
      helpFormatter0.setArgName("DB2h.:+Ia1M(>ioyX");
      String string1 = "mm/Seyp2";
      Options options0 = new Options();
      String string2 = "(SKb9P`fx2\"K";
      // Undeclared exception!
      try { 
        options0.addOption("z4_KKci{4-&", "", true, "(SKb9P`fx2\"K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'z4_KKci{4-&' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.setNewLine("cmdLineSyntax not provided");
      int int0 = 939;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("-");
      options0.getOptions();
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(939, (String) null, (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "tlQHv;7=qB>";
      helpFormatter0.createPadding(0);
      String string0 = "c_Be(1";
      helpFormatter0.setSyntaxPrefix("c_Be(1");
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getMatchingOptions("--");
      options0.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(3);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", "", true, "");
      options0.addOption("", "", false, "KfF7");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "c',_xHlc^", options0, 0, 13, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setOptPrefix("sOtR~yEx}K+F");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, (Options) null, 1764, 1764);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1594));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3013);
      helpFormatter0.defaultLeftPad = (-3013);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLongOptPrefix = "}OC(~Dq6)8!~*F";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("}OC(~Dq6)8!~*F", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1258), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, options0, "@0d+jOB+QzpxTs", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1887;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("aH:L`", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8}C-yOnPIu";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "[";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("[", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
