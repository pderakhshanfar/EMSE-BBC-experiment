/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:17:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-*ZFHN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", (String) null, false, "B");
      optionGroup0.setSelected(option0);
      Options options2 = options1.addOption("arg", "-", false, "Q^{#wSfd%kI=");
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 33, "5qb07/", options3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultLeftPad = (-1163);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-4732);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", (-1163), (-4732));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "_UF6tRA^NT+bc|'";
      helpFormatter0.defaultSyntaxPrefix = "arg";
      options0.getOptionGroups();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n", false);
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getArgName();
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int0 = (-462);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-462));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", "--", true, "-");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("", "hUN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "_UF6tRA^NT+bc|'";
      options0.getOptionGroups();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n", true);
      helpFormatter0.findWrapPos("org.apache.commons.cli.Option", 2115, (-260));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2280;
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      options0.addOption("arg", false, "--");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-985), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("XT", "\n");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, (String) null);
      Options options4 = options3.addOption("", "[", true, (String) null);
      helpFormatter0.printHelp("C1:k}", options4);
      Options options5 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2181), (-2181));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3229));
      helpFormatter0.setOptPrefix("<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("66q,+4}QMQ", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(26, "The option '", "[ARG...]", (Options) null, "hl3u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, (-557), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "--");
      option0.setArgName("$05nzV+dERQ+lQ5");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options1, 44, 17);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-4676), options0, 63, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 6;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", "' was specified but an option from this group ", (Options) null, "' was specified but an option from this group ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]I[6");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\\]I[6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, 2, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(600);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) " ", 2922, (-2051));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile(",MfE9e,b0$-", "-");
      File file0 = MockFile.createTempFile("EDT\"p5HcAanpa01U", "org.apache.commons.cli.HelpFormatter$1", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "EDT\"p5HcAanpa01U");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y37";
      String string1 = "r>vX(H7ywz";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1556, "r>vX(H7ywz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PI[6;");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, 2, "\n");
      mockPrintWriter0.println(1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "z5;Ea+$e5i8Dxc9i ", options0);
      helpFormatter0.rtrim("PI[6;");
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 9, 1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      int int0 = 32;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printWrapped(printWriter0, 32, (-702), "");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("   ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(115);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4588);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) option0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 10, "T}Fn", "--", options0, 59, (-1), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-5137), "k+%J", "   ", options0, 1734, 1734, "5(7N,<>PgcR!\"c]|Oto");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3128, 3128, "");
      helpFormatter0.rtrim("%+9o,j#AR*G");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2950, "L&,`", " ", options0, "L&,`", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp("L&,`", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", (String) null, options0, (-150), 72, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("--", "Yd:^o}::m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp("--", options1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("nxC\u0000}n*0gS-D `D");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = " ";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 64, " | ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 905;
      stringBuffer0.insert(0, (Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 188, (Options) null, 188, 905);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1628, "W", "", options0, 3685, 74, "W", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 4260, options0, (-3499), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(8, " ", " ", options0, " ", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      options0.toString();
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("has already been selected: '", 114, 114);
      helpFormatter0.rtrim("has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.defaultArgName = "\n";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 10, "-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      String string0 = "5dC{>ah}M3*";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "5dC{>ah}M3*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5dC{>ah}M3*
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W";
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 3685;
      int int1 = 74;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1628, "W", "", options0, 3685, 74, "W", true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "' contains an illegal character : '", "W", options0, 1949, 74, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")g-");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) "L&,`";
      objectArray0[2] = (Object) "L&,`";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "4";
      PrintWriter printWriter1 = mockPrintWriter0.format((Locale) null, "l{CaepO@s`kvbY-", objectArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter1, 2950, "4", "!Vn~Jm2Y5GiZ&;Unad", options0, 1226, 101, (String) null, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(2950, "L&,`", " ", options0, "L&,`", true);
      Options options1 = new Options();
      helpFormatter0.printHelp("L&,`", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2950, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-815), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(8, " ", " ", options0, " ", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 8, "org.apache.commons.cli.HelpFormatter$OptionComparator", "dj9XWxIW'", options0, 8, 60, "}ML1\"0 %P>>dHi ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "");
      helpFormatter0.printHelp(8, " ", " ", options0, " ", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      Options options1 = options0.addOption("", "arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1628, "W", "W", options2, "W");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 1628, (-2178));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fR");
      mockPrintWriter0.print(0.0F);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 58, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "fR", "fR", (Options) null, 5, 0, "N>Kf-LI`!VbbV~X5=");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, " ", "Illegal option name '", options0, " ", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(8, " ", " ", options0, " ", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1203, " ", "", options0, "TUpBC6m4rqQj*d|/qMw", true);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      MockFile mockFile0 = new MockFile("AWG;<8jJa{sQM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, (-1197), 321, "Ixzq1+U)f23#", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("S");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setReadable(true);
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = 1020;
      Options options0 = null;
      int int1 = 7;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1020, "S", "S", (Options) null, 7, 1020, "S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", (String) null, options1, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      mockPrintWriter0.print((Object) optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Option", "[ option: ", options0, 18, 74, "", true);
      helpFormatter0.createPadding(3685);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "[", "--", options0, "[", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 537);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(831, " ", "\n", options0, "*", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter0.append('M');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 570, 47, "org.apache.commons.cli.Util");
      helpFormatter1.printOptions(mockPrintWriter1, (-1853), options0, 74, 1);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1059));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, " ", " ", options0, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 58, options1, 3975, 58);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3975, "", "--", options1, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "line.separator", " b`SJa.,1=oA(,6", options0, "=vspUj#3tD1V$QUV", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 1180;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, (String) null, options0, 1180, 2950, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1628, "W", "", options0, 3685, 74, "W", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3748));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "The option '";
      Options options2 = options0.addOption((String) null, false, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "The option '", options2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(305, " ", " ", options0, " ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 305, "-", "-", options0, 1316, 1180, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "_f1hn", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, "<XW!=G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n", true);
      boolean boolean0 = true;
      int int0 = 13;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "wph}P";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "wph}P";
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "wph}P", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("$(T^/+JT-V", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-1), "O7}ic%+\";<k*(zWTt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(74);
      int int0 = 309;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer0, 309, (-2267), "--");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "BzG~(l>RI0S\"F[TK|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 3975;
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3975, options0, 1, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "uoJ.m0o!q-~");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(115, "", " ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(305, " ", " ", options0, " ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " :: ", "[", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1628, "W", "W", options2, "W");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      int int0 = 3;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2950, "L&,`", "?uX2VVG,%b!`\"?yn", (Options) null, "L&,`", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, " ", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(2950, "L&,`", " ", options0, "L&,`", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      helpFormatter0.printWrapped(printWriter0, 2001, 2001, " ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "L&,`", " ", options0, "L&,`", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 32;
      int int1 = 300;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 300, "(,D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(305, " ", " ", options0, " ", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 309, (-2267), "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", "--", options0, "--");
      helpFormatter0.createPadding(309);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-172), "", "                                                                                                                                                                                                                                                                                                                     ", options2, "Tr|/(6X5.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding(480);
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.setWidth((-2));
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{{3R*laSYNf\"Z'byp", options1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = " ";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "(v9{v~J+c-AtV<k@-A ";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      pipedOutputStream0.write((-1316));
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(17, " ", "5XbYa.B|OSY", options0, "gdoVY", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-*ZFHN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "arg";
      String string1 = "";
      Option option0 = new Option("", (String) null, true, "B");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(5349);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter2.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.AlreadySelectedException", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.append('3');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "", "H5t##L?\"d`D", options0, 64, 64, "vI!>(*.Rc", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1021;
      int int1 = 2274;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 44, "tb96|I2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z3", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      options0.addOption(option0);
      Option option1 = new Option("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("--", "Yd:^o}::m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter1.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.setWidth(1);
      helpFormatter0.setArgName("");
      helpFormatter1.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, (String) null);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 235, "usage: ", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1628);
      helpFormatter0.setWidth(1628);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1628);
      helpFormatter0.setWidth(1321);
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter1.printUsage(printWriter0, 2134, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding(480);
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.setWidth((-2));
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, "", options1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, " :y=8.$l.1Ikn");
      Options options2 = options1.addOption((String) null, (String) null, false, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, ">Z:2", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "UjZ\"COUpNmqg,cT";
      Options options0 = new Options();
      options0.hasOption("usage: ");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "E~~BjuJp?'^BsJCWgt";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "E~~BjuJp?'^BsJCWgt");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // E~~BjuJp?'^BsJCWgt
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "#Ibi?cF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "_r";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      mockPrintWriter0.print((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.UK;
      locale1.getUnicodeLocaleAttributes();
      mockPrintWriter0.printf(locale1, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 27, "");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.createPadding(1329);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.Option";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-194), "org.apache.commons.cli.Option", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 5157, options1, 5157, 5157);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      helpFormatter0.setArgName("Ie4Dwd96lUH=/U");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      mockPrintWriter0.print((Object) helpFormatter0);
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      String string1 = "[";
      Locale locale0 = Locale.UK;
      locale0.getUnicodeLocaleAttributes();
      mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1329, "[");
      helpFormatter0.getOptionComparator();
      String string2 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getOptionComparator();
      mockPrintWriter0.println(1861);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3305), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      String string0 = "--";
      int int0 = 1356;
      helpFormatter0.findWrapPos("--", 1356, (-2));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "f 05\\0Qw";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f 05\u0000Qw");
      mockPrintWriter0.append('/');
      mockPrintWriter0.append('');
      helpFormatter0.setLongOptPrefix("f 05\u0000Qw");
      String string1 = "aUZ~";
      mockPrintWriter0.write("v} aN1%}}@@4K7pMy", (-3119), 0);
      mockPrintWriter0.write("aUZ~", 0, 0);
      int int0 = (-2929);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 647, "gL", options0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "H5t##L?\"d`D", "", options0, 3, 5272, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(2950, "L&,`", " ", options0, "L&,`", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 3, 3, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 309, (-2267), "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", "--", options0, "--");
      helpFormatter0.createPadding(309);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = "                                                                                                                                                                                                                                                                                                                     ";
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer0, 309, (-2267), "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLi'eSyntax not provided", "--", options0, "--");
      helpFormatter0.createPadding(309);
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.defaultSyntaxPrefix = "                                                                                                                                                                                                                                                                                                                     ";
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp(275, "-", "                                                                                                                                                                                                                                                                                                                     ", options0, (String) null, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      String string1 = "$vP]G,";
      try { 
        MockURI.URI("org.apache.commons.cli.HelpFormattervP]G,", (String) null, "cmdLi'eSyntax not provided");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.commons.cli.HelpFormattervP%5DG,#cmdLi'eSyntax%20not%20provided
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      Options options0 = null;
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("The option '", (Options) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(74);
      int int0 = 309;
      helpFormatter0.renderWrappedText(stringBuffer0, 309, (-2267), "--");
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", "--", options0, "--");
      helpFormatter0.createPadding(309);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = "                                                                                                                                                                                                                                                                                                                     ";
      helpFormatter0.printHelp("--", options0);
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Dp&~(-NK0u5";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1lZw";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2917), (Options) null, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3172, 0, "iTrn|&>JDLtHvn19%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      String string0 = " ";
      Options options0 = new Options();
      String string1 = null;
      helpFormatter0.printHelp(" ", " ", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2048));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.defaultLongOptPrefix = "w:CBjv=1yea";
      helpFormatter0.setWidth(1);
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-*ZFHN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", (String) null, true, "B");
      optionGroup0.setSelected(option0);
      Options options2 = options1.addOption("arg", "-", false, "Q^{#wSfd%kI=");
      Options options3 = options2.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, (String) null, "", options3, (-2), 74, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp("The option '", options0, true);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "0s,?NP{n?h";
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "0s,?NP{n?h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
