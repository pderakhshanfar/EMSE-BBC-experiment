/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:16:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "N#v";
      helpFormatter0.setSyntaxPrefix("N#v");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 10;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "Y0_", (String) null, options0, "% dk?mt2nH@l3w,b=_", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultNewLine = "IS#4kR1Z42svM5,";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("N#,v");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", " ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("_1yB8u-", "_1yB8u-", options0, (String) null, true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 63, "usage: ", "", options0, 1, 15, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-12), "", "\n", options0, 10, 74, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1833);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "-", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp("iUkB", "iUkB", options0, (String) null, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2128);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "-", options0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "?vn ?8+;V_LFiL<:1#", (String) null, options1, 97, 913, "", false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      Options options1 = options0.addOption((String) null, "usage: ", true, " [ARG]");
      Option option0 = new Option("", false, "7Jg!?kq+`Sq");
      option0.clearValues();
      options0.addOption(option0);
      helpFormatter0.printHelp("DqF)tTdV", options1, true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(")1JighTA7,&)]8!~", "ezlb/2g?)=(,`7vqY", options0, ")1JighTA7,&)]8!~", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2), options1, 62, 62);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 42, " [ARG]");
      helpFormatter0.getArgName();
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "arg";
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter2.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 13, " ", "arg", options0, (-1), (-550), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 578;
      helpFormatter0.createPadding(578);
      helpFormatter0.defaultLeftPad = 578;
      helpFormatter0.defaultDescPad = 578;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      int int1 = 49;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("bj<3fRuKw,L~_", "--", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bj<3fRuKw,L~_' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0%Stw*jv");
      int int0 = 13;
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0%Stw*jv", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-5236), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add alue, lit full.");
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", (String) null, options2, 1, 74, " ", true);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("9f5\"", "--", options0, "--", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultDescPad = 1506;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1506, (-1208));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Object object0 = new Object();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(9);
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 242, "");
      MockFile mockFile0 = new MockFile("zX");
      File file0 = MockFile.createTempFile("pD;]y?^M]F#~I", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "]rxsVY<$fVc!gucA#");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "pD;]y?^M]F#~I", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2917, "The option '");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(",$U:kVX", options1, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (int) (byte) (-118);
      helpFormatter0.defaultWidth = (int) (byte) (-75);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add alue, lit full.");
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter1.printOptions(printWriter0, 3, options1, 972, 1);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "nj*N=QJL3;SqCO", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      String string0 = "";
      options0.addOption((String) null, false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1515, "arg", "arg", options0, 1515, 1515, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(1);
      helpFormatter0.defaultNewLine = "";
      mockPrintWriter0.write("");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "1xarW;I;&;#", " | ", options1, 31, 31, "z", false);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print("--");
      mockPrintWriter0.print('~');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "9f5\"", (String) null, options0, "   ");
      helpFormatter0.printHelp("9f5\"", "   ", options0, "   ", false);
      helpFormatter0.renderOptions((StringBuffer) null, 13, options0, 1, 9);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "9f5\"", (String) null, options0, "   ");
      helpFormatter0.printHelp("9f5\"", "   ", options0, "   ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 13, options0, 1, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "QYM!sOZv\\\\-m<O.7";
      int int0 = (-1828);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1828), "QYM!sOZv\\-m<O.7", "", (Options) null, "H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "9f5\"", (String) null, options0, "   ");
      helpFormatter0.printHelp("9f5\"", "   ", options0, "   ", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2507, "   ", "", options0, 24, 2361, "?o`|@`6T,oN?");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Option option0 = new Option("arg", true, "usage: ");
      option0.clearValues();
      Options options0 = new Options();
      Option option1 = new Option("", "");
      options0.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 2638);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.format("org.apache.commons.cli.Options", (Object[]) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "usage: ", "", options0, 3, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.write(10);
      mockPrintWriter0.write("usage: ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "$Qh6R#-4Vv|ApP3t", (String) null, options1, (-120), 31, " | ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 2, 2);
      int int0 = 44;
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append('g');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3783, 'N');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, " | ", "", options1, 31, (-2), " | ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 1543, "");
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter1, 3, 3, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(44);
      mockPrintWriter0.write("OsVaRlm3yq)}mZ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, (String) null, "", options2, (-1), (-2), "n`^.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(1);
      mockPrintWriter0.write("");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "1xarW;I;&;#", " | ", options1, 31, 31, "z", false);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1182), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, " ");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      mockPrintWriter0.format("arg", (Object[]) null);
      options1.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter2, 0, "arg", "\n", options0, 3, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.format("-", (Object[]) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "", "G4L=zvmzav;$k2=n", options2, (-2), (-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format((Locale) null, "OZ*c", objectArray0);
      objectArray0[2] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 116, 116, "usage: ");
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 116, "usage: ", "OZ*c", (Options) null, 67, 13, "0eab+,qOiWFs|W]T", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add value, list full.");
      MockFile mockFile0 = new MockFile("arg", "f7[-SU");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "nj*N=QJL3;SqCO", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NzH.UuE:#g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(30, "has already been selected: '", "org.apache.commons.cli.Options", (Options) null, "MN#Fih");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "--", (Object[]) null);
      Options options2 = options0.addOption("arg", "Wq^Hr,y~]>2m f!2&k", true, ">'P:ib@a9$d<");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "3L.=@2GP", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionValidator", "usage: ");
      Options options0 = new Options();
      mockFile0.getAbsolutePath();
      mockFile0.toURL();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add value, list full.");
      MockFile mockFile0 = new MockFile("arg", "f7[-SU");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "usage: ", options2, 2412, 1, "-dB/4lgtsMr\"xA", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0%Stw*jv";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0%Stw*jv");
      helpFormatter0.defaultSyntaxPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "0%Stw*jv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('y');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter3);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "--");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = null;
      int int0 = 14;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 82, (Options) null, 14, 1103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printHelp(13, "' was specified but an option from this group ", "", options0, "", true);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, (-520), 64, "K5FLn@D2JUn!ZeNHv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Object object0 = new Object();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("A CloneNotSupportedException was thrown: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add value, list full.");
      MockFile mockFile0 = new MockFile("arg", "f7[-SU");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "usage: ", options2, 2412, (-763), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 3344, (String) null, options0);
      StringBuffer stringBuffer0 = new StringBuffer(3114);
      helpFormatter0.renderOptions(stringBuffer0, 1492, options2, 302, 1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "?7JDY&y%", "?7JDY&y%", (Options) null, "?7JDY&y%");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-2), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      Options options1 = options0.addOption((String) null, "", true, " [ARG]");
      Option option0 = new Option("", false, "7Jg!?kq+`Sq");
      option0.clearValues();
      options0.addOption(option0);
      helpFormatter0.printHelp("DqF)tTdV", options1, true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1335, "yIqA", "yIqA", options0, "yIqA");
      Options options1 = new Options();
      String string0 = "line.separator";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("line.separator", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 4426, 12, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2743), "", "-", options0, "]GsS/ltaq+OZ}M<", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderWrappedText(stringBuffer0, 4, 1, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0%Stw*jv");
      mockPrintWriter0.print((-536.041909743));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "NO_ARGS_ALLOWED");
      Options options0 = new Options();
      helpFormatter0.printHelp("0%Stw*jv", (String) null, options0, "p97n9V5ir", true);
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j;Jj");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "j;Jj";
      objectArray0[2] = (Object) "cmdLineSyntax not provided";
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      Options options0 = new Options();
      options0.addOption("", true, "Jz(R?DjHb:@Do]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("+1:");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-14), "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "Co}m/;.7hu9j<f{%j_t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("A CloneNotSupportedException was thrown: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "Cannot add value, list full.");
      helpFormatter0.printHelp(2412, "J+%/!xmK|w6=", "KnW)>mMIne=]J#y", options0, "", true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      Options options0 = new Options();
      options0.addOption(option0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Object object0 = new Object();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 42, (-1438), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[15];
      helpFormatter0.getOptPrefix();
      objectArray0[0] = (Object) "[ARG...]";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      String string0 = "_{@o";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-695), "_{@o", "<", (Options) null, 0, 0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setArgName(" ");
      helpFormatter0.setLongOptPrefix("I[?PF");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp("I[?PF", options0);
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "'");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      options1.hasShortOption("");
      Options options2 = options1.addOption("arg", "--", false, "QYM4");
      options1.hasLongOption((String) null);
      options1.getMatchingOptions("");
      options1.hasLongOption("arg");
      options2.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "ycT", options0, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%Stw*ov");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      Options options1 = options0.addOption("", "usage: ", true, "Cannot add value, list full.");
      helpFormatter0.printHelp("<", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 34, (Options) null, 34, (-1524));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayScript(locale1);
      helpFormatter0.printUsage(printWriter0, 3344, (String) null, options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3344, options0, (-1088), (-1088));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 3344, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 3344, (String) null, options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2;%MwH2bJ>k";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      String string1 = null;
      String string2 = "";
      String string3 = ":";
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = ":";
      options0.hasOption((String) null);
      String string4 = "";
      Option option0 = new Option("", false, "$9'");
      Options options1 = options0.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("K4\"z");
      helpFormatter0.createPadding(3);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1375, (String) null, options0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0%Stw*jv");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "NO_ARGS_ALLOWED");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('(');
      int int0 = (-298);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "0%Stw*jv", (-298), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 1488, "[=5F", options1);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("j;Jj");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("j;Jj", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Jz(R?DjHb:@Do]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "", "]a\tPpHP7wwk%H sG", options1, (-1819), (-2286), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1;
      String string0 = "[r/I$";
      String string1 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("1T-~c.p )qUM){", "A CloneNotSupportedException was thrown: ", options0, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "a Y|<`2", "]", options0, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("[", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-1243), "}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2;%MwH2bJ>k";
      Options options0 = new Options();
      String string1 = null;
      String string2 = "";
      String string3 = ":";
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = ":";
      options0.hasOption("");
      Option option0 = new Option("", false, "$9'");
      Options options1 = options0.addOption(option0);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")sLc' Ie}gTHmy#?JFe", ")sLc' Ie}gTHmy#?JFe", (Options) null, ")sLc' Ie}gTHmy#?JFe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-519), "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4277);
      helpFormatter0.setLeftPadding((-4277));
      String string0 = "wx!~LSYTU'oNfT&syZ|";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("[ARG...]", "arg", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("b(^IcWB#<", options0, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Qr:s";
      helpFormatter0.setOptPrefix("Qr:s");
      String string1 = "'";
      helpFormatter0.defaultWidth = (-1286);
      helpFormatter0.setSyntaxPrefix("'");
      helpFormatter0.setSyntaxPrefix("'");
      helpFormatter0.getArgName();
      int int0 = 1883;
      helpFormatter0.defaultDescPad = 1883;
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      String string2 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("--", 434, 434);
      String string0 = "T<g";
      String string1 = "BRxH5;c(";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[3];
      locale0.getScript();
      objectArray0[0] = (Object) "[ARG...]";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-695), "_{@o", "<", (Options) null, 0, 0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("K4\"z");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1828));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      int int1 = 1934;
      helpFormatter0.defaultWidth = 1934;
      String string0 = "";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "";
      String string1 = "Ws*";
      Options options0 = new Options();
      String string2 = "9VcE2%8Z*f<EPPl?T";
      Option option0 = null;
      try {
        option0 = new Option("9VcE2%8Z*f<EPPl?T", "Hqygx\"b(", true, "('");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9VcE2%8Z*f<EPPl?T' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("ef", "usage: ", true, "Cannot add value, list full.");
      Option option0 = new Option("", true, "v");
      option0.clearValues();
      options0.addOption(option0);
      helpFormatter0.printHelp("<", options1, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "-", false, "]/ngfaa[F1rdph");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options3, "]/ngfaa[F1rdph", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x%W", ", ", (Options) null, "/L%mu7@R-yzb'4l-)}", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(4738);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3168), "`u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 1;
      String string0 = "[r/I$";
      String string1 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("1T-~c.p )qUM){", "A CloneNotSupportedException was thrown: ", options0, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "a Y|<`2", "]", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write("");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      assertEquals("org.apache.commons.cli.AlreadySelectedException", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 760, "\n");
      assertEquals(3, helpFormatter1.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-428);
      String string0 = "oYQ*M4|qRS&$";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-428), "oYQ*M4|qRS&$", "oYQ*M4|qRS&$", (Options) null, "oYQ*M4|qRS&$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockFile0.toURL();
      helpFormatter0.printHelp("1T-~c.p )qUM){", "A CloneNotSupportedException was thrown: ", options0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setArgName("--");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptPrefix("a Y|<`2");
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      helpFormatter1.printHelp("Cyvd!UI", "-", options0, "usage: ", false);
      helpFormatter1.printHelp(3, "\n", "", options0, (String) null, true);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter1, 0, "");
      helpFormatter0.getOptPrefix();
      int int0 = (-1481);
      Options options0 = new Options();
      String string0 = "Nxb+Pwz";
      // Undeclared exception!
      try { 
        options0.addOption("Nxb+Pwz", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Nxb+Pwz' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("H`=es/'DK( Vg?k}9.");
      helpFormatter0.setLongOptPrefix("ol7E8WLa");
      assertEquals("ol7E8WLa", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockFile0.toURL();
      helpFormatter0.printHelp("1T-~c.p )qUM){", "A CloneNotSupportedException was thrown: ", options0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setArgName("BCa)xe#Gb<iDDXrUM");
      helpFormatter0.setLongOptPrefix("a Y|<`2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.flush();
      stringWriter1.getBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 951, "]");
      assertEquals("a Y|<`2", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(4730);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("peJ&* ");
      helpFormatter1.rtrim("--");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 97, 1366, "has already been selected: '");
      assertEquals(28, stringBuffer0.length());
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("4ts1|e=%*vnaJ{Q{%~2");
      helpFormatter0.rtrim("o,a$E");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("o,a$E");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptPrefix("o,a$E");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 955, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1413));
      helpFormatter0.defaultLongOptPrefix = "NO_ARGS_ALLOWED";
      String string0 = "r@\"C-gDK/aV,}7:sx8{";
      helpFormatter0.defaultLongOptPrefix = "GPAVa'.[I.i'W+]Z";
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'F';
      charArray0[2] = 'h';
      charArray0[3] = 't';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      charArray0[6] = 'N';
      charArray0[7] = '[';
      charArray0[8] = '$';
      stringBuffer0.append(charArray0);
      options0.getOptions();
      Options options1 = options0.addOption("arg", "r@\"C-gDK/aV,}7:sx8{", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasOption(" ");
      Option option0 = new Option("arg", "sI>FGe");
      option0.setValueSeparator('~');
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", "");
      option1.clone();
      Options options3 = options2.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1413), options3, (-1413), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 164;
      helpFormatter0.defaultWidth = 164;
      helpFormatter0.defaultLongOptPrefix = "wJl(:St|Imtlp$DkS";
      helpFormatter0.defaultOptPrefix = "wJl(:St|Imtlp$DkS";
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int1 = 4095;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int2 = 13;
      String string0 = "Z/=-8S W<20}he";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "wJl(:St|Imtlp$DkS", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 729;
      helpFormatter0.setDescPadding(729);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "%3[,4^5<@U";
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "%3[,4^5<@U", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
