* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 21197
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 1662645743
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 18:15:27.291 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 603s and 398 generations, 143186 statements, best individual has fitness: 139.0
* Minimizing test suite
[MASTER] 18:26:48.941 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 205
* Number of covered goals: 203
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 154
* Number of covered goals: 137
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 57
* Number of covered goals: 57
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 514
* Number of covered goals: 476
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 46
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 154
* Number of covered goals: 137
* Generated 128 tests with total length 1709
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:27:32.552 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6771% of time used, but only 22/128 tests minimized), falling back to using all assertions
[MASTER] 18:27:52.961 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 18:28:16.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.050 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.118 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.231 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.325 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.374 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.418 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:17.479 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:28:23.531 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_214_tmp__ESTest.test0(HelpFormatter_214_tmp__ESTest.java:133)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:28:23.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());

Options options0 = new Options();
assertNotNull(options0);

Options options1 = new Options();
assertNotNull(options1);
assertFalse(options1.equals((Object)options0));

StringBuffer stringBuffer0 = new StringBuffer("L,xwD");
assertNotNull(stringBuffer0);
assertEquals("L,xwD", stringBuffer0.toString());
assertEquals(5, stringBuffer0.length());

Options options2 = options0.addOption("", true, "arg");
assertNotNull(options2);
assertNotSame(options0, options1);
assertSame(options0, options2);
assertNotSame(options2, options1);
assertSame(options2, options0);
assertFalse(options0.equals((Object)options1));
assertFalse(options2.equals((Object)options1));

helpFormatter0.printHelp(28, "L,xwD", "L,xwD", options0, "[", true);
assertNotSame(options0, options1);
assertSame(options0, options2);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertFalse(options0.equals((Object)options1));
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());

StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 28, 34, "L,xwD");
assertNotNull(stringBuffer1);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(10, stringBuffer0.length());
assertEquals("L,xwDL,xwD", stringBuffer0.toString());
assertEquals(10, stringBuffer1.length());
assertEquals("L,xwDL,xwD", stringBuffer1.toString());

helpFormatter0.printHelp("L,xwD", options1, true);
assertNotSame(options1, options2);
assertNotSame(options1, options0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertFalse(options1.equals((Object)options2));
assertFalse(options1.equals((Object)options0));
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
assertNotNull(mockPrintWriter1);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

PrintWriter printWriter0 = mockPrintWriter1.append('');
assertNotNull(printWriter0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter0, printWriter0);
assertSame(mockPrintWriter1, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter0);
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));
assertFalse(fileDescriptor0.valid());

helpFormatter0.printUsage(printWriter0, 34, "L,xwD", options0);
assertNotSame(options0, options1);
assertSame(options0, options2);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter0, printWriter0);
assertSame(mockPrintWriter1, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertFalse(options0.equals((Object)options1));
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter0.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertFalse(fileDescriptor0.valid());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-20/tests/9
* Done!

* Computation finished
