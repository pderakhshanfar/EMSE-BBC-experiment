/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:54:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", ", ", (Options) null, "tLtAE'W{jNvCY,<<Ehz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-572), options2, 2775, 2775);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3150, options0, 86, 3150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "]g";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]g");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-666);
      helpFormatter0.defaultWidth = (-666);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultSyntaxPrefix = "[!";
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]g", " ", options1, "C0GwV(I-}Qgm:@B)U", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#RVb4PxrIrZ?7.M", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = " | ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 3602;
      helpFormatter0.printHelp(1, " ", "-", options0, " :: ", true);
      helpFormatter0.printHelp(" :: ", "%X(Hz", options0, " :: ", true);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp("(C+$,=GJvJ7t", "lDps", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)81;
      byte byte0 = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print(false);
      PrintWriter printWriter0 = mockPrintWriter0.append('o');
      helpFormatter0.printUsage(printWriter0, (int) (byte)9, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 1330, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.rtrim(" ");
      helpFormatter0.getWidth();
      String string0 = "1*z.^7d2d";
      String string1 = "TGVHqID";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("1*z.^7d2d", "TGVHqID");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // TGVHqID
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = 13;
      helpFormatter0.setNewLine(", ");
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = 74;
      helpFormatter0.createPadding(74);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(74);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("$&&6WQs,OK", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$&&6WQs,OK' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", ";1#* ", true, "[_n");
      Options options3 = options2.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", "", options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(3473, " ", "I", options1, " ", true);
      helpFormatter0.renderOptions((StringBuffer) null, 3473, options1, 3473, 669);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[", "", options0, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("L)");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "KP!-{v{^:{$m@", "KP!-{v{^:{$m@", options0, "L)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("");
      Options options2 = options1.addOption("", "", false, "");
      helpFormatter0.printHelp(9, "'", "Z", options1, "", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("usage: ", options2);
      Option option0 = new Option("", "", false, " ;e@O))Ov/uxE)1");
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp(1479, "org.apache.commons.cli.HelpFormatter$OptionComparator", "& ", options3, "-", false);
      helpFormatter0.setWidth((-677));
      helpFormatter0.setSyntaxPrefix("E0fvm");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3543), 1479, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, " ");
      helpFormatter0.printHelp("%(_A@Y4)D>[gD\"3?h", "%(_A@Y4)D>[gD\"3?h", options1, "%(_A@Y4)D>[gD\"3?h", true);
      options0.toString();
      Option option0 = new Option("", "usage: ");
      options0.hasOption("arg");
      String string0 = "2`M_";
      helpFormatter0.printHelp("Fu!'o]G8)Uz'm1", "2`M_", options0, (String) null, true);
      options0.helpOptions();
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options2, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 11);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "H(");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 654, "6", "org.apache.commons.cli.ParseException", options1, 10, 10, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp(1294, "kiEk)~^5{", "", options1, "Cannot add value, list full.", true);
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("hi{v(p,# sOu9+", "hi{v(p,# sOu9+", options0, "hi{v(p,# sOu9+");
      helpFormatter0.setSyntaxPrefix("--");
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "\n", "", options1, " ", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "line.separator");
      Options options2 = options1.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 4595, options3, 4595, 4595);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine("%j!QRA$f0r`~l)wPXC");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      helpFormatter0.defaultDescPad = (-467);
      helpFormatter0.defaultNewLine = "";
      StringWriter stringWriter0 = new StringWriter(1881);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1881, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.findWrapPos("ST*1bo1f6ROThw@Ck4", 63, 1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      helpFormatter0.rtrim("--");
      mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 431, "usage: ", " ", options0, 30, (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, " ");
      Option option0 = new Option("arg", false, "--");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(38);
      helpFormatter0.rtrim("\u0003-'M)C'\"%FKO");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 38, (String) null, "rW.^aN=APLtep?{M", (Options) null, 3, 38, "\u0003-'M)C'\"%FKO", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".EPR!eyx?>");
      helpFormatter1.rtrim("<");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printHelp(printWriter0, 3, ", ", "arg", options1, 74, 0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".O2s]VS-)MZI");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1192), options0, (-1192), 687);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 36, "BpR!.NNkZe}a\"90e8Mz", "TqO^6:-", options0, (-2), (-1737), "S,{P<%rFh$%iYVt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = false;
      helpFormatter0.printHelp("A(<", "", options0, "A(<", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4517, (-1155), "SPF5\"rf#b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      options0.hasOption("--");
      helpFormatter0.printHelp(3, " ", " ", options0, "usage: ", false);
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", false, (String) null);
      helpFormatter0.printHelp("\n", "\n", options2, "\n", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("", "@[ ", true, (String) null);
      options0.getOptionGroups();
      helpFormatter0.printHelp(">gz,zm~`Qxcn2V}", "Cannot add value, list full.", options2, "", false);
      helpFormatter0.printHelp(74, "\n", "--", options1, "arg", true);
      helpFormatter0.findWrapPos("", 3548, 3548);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[6] = '(';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter1.printUsage(printWriter0, 13, "-");
      helpFormatter0.printHelp(printWriter0, 64, "arg", "arg", options0, (int) 'a', 27, "<", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "\n", (String) null, options0, 1, 1131, "' contains an illegal character : '", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      options0.addOption(option0);
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "\n", options0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 2287, (-2859), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[5] = 'A';
      helpFormatter0.printOptions(mockPrintWriter0, (-1120), options0, 836, 836);
      charArray0[6] = 'n';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter1.printUsage(printWriter0, 13, "-");
      helpFormatter0.printHelp(printWriter0, 64, "$)G4.HvCW", "arg", options0, 30, 27, "<", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2410, 600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n");
      Object object0 = new Object();
      String string0 = null;
      Option option1 = new Option((String) null, "-");
      Options options1 = options0.addOption(option1);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Illegal option name '", options2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      Options options0 = new Options();
      Option option0 = new Option("", " ", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "G{< _+=9k38");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "F[=cIY):B", "XcP3r+n", options2, 1623, (-6), "   ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      pipedInputStream0.markSupported();
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[3] = '(';
      charArray0[4] = '}';
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 219, "");
      charArray0[5] = 'B';
      charArray0[6] = 'n';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "-", options0, 3, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", true, " | ");
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter0.printHelp("c$h(uQay'l4[:`'TLQ3", options3);
      helpFormatter0.printHelp(30, "-", (String) null, options2, "u\"[|;gCg-47cSc:", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      options0.addOption(option0);
      String string0 = "[";
      int int0 = (-3);
      String string1 = " [ARG]";
      int int1 = 44;
      boolean boolean0 = true;
      printWriter0.println((long) 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 19, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Object object0 = new Object();
      option0.setType(object0);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)14;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "\n", options0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, false);
      helpFormatter0.printHelp(printWriter0, 3, "Y", "\n", options0, 3, 0, "Illegal option name '");
      String string0 = helpFormatter0.defaultArgName;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 113, "G2", "\n", options0, (-1), 778, "e/Bwl):E)H");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding((-1876));
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4033, "XGKuD&ua:Wf( 5g", "", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "vK[Aqz/6R-EoHLff''", "Cannot add value, list full.", (Options) null, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      int int0 = (-2);
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setWidth(110);
      String string1 = "has aleay been selected: '";
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*QS}L|r;4|tW]x#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 110, "`7)JngIh", "} J.GF9", (Options) null, 63, 110, "`7)JngIh", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), " [ARG]", "[", options0, (-3), 44, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options1 = new Options();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, (String) null, "", options0, 11, 11, "t_R`riB`%CBc!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-209), "\n", (String) null, options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 103, 0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "--", "8B%ZN(i2ZMt", options0, "Y", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      pipedOutputStream0.flush();
      charArray0[0] = '\u0087';
      charArray0[1] = 'a';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[5] = 'B';
      charArray0[6] = 'n';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 13, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("", true, "XM%1>t#gu~Uv");
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "-", "GU{8F6n(zOJ\"[", options1, 1, (-1), "GU{8F6n(zOJ\"[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 8;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 8, 8, "");
      Options options0 = new Options();
      int int1 = 2;
      helpFormatter0.renderOptions(stringBuffer1, 8, options0, 2, 2);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      String string0 = ">";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(">", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      optionGroup0.setRequired(false);
      Options options2 = options1.addOption("", " | ", true, " | ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " | ", true);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("<", options2);
      helpFormatter0.printHelp(114, " | ", "", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1100, "-", "", options0, "='z", true);
      helpFormatter0.printHelp(1100, "7l<arO'Z(/N`2 e", "$}/a=B|", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 879, options0, 879, 1100);
      stringBuffer0.append((CharSequence) "$}/a=B|");
      helpFormatter0.renderWrappedText(stringBuffer1, 1100, 10, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4093, "", " ", options0, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options1 = new Options();
      String string0 = "j9dp&l@#*'B^s!(b";
      String string1 = "0P~gYbRmu$q&GDBKO!V";
      pipedOutputStream0.write(3);
      helpFormatter0.printHelp(48, "0P~gYbRmu$q&GDBKO!V", "j9dp&l@#*'B^s!(b", options0, "org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(".YwS}qj^2k\"C$aGERU");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 879, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", true, " | ");
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter0.printHelp("c$h(uQay'l4[:`'TLQ3", options3);
      helpFormatter0.setSyntaxPrefix(" | ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, 1, options3, 0, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("vZ]_V?");
      MockFile mockFile0 = new MockFile("f:$p?lib\"ozg?{Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine((String) null);
      mockPrintWriter0.println('y');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 109, 1, "f:$p?lib\"ozg?{Q");
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "-";
      Option option0 = null;
      try {
        option0 = new Option("-", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Object object0 = new Object();
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "\n", options0);
      options2.addOption("", false, "<");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "Y", "\n", options1, 0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Object object0 = new Object();
      option0.setType(object0);
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "\n", options0);
      options2.addOption("", false, "<");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "Y", "\n", options1, 0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" ");
      Options options2 = options1.addOption("", " ", false, " ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " ", true);
      helpFormatter0.getLongOptSeparator();
      options2.toString();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("<", options2);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp(1479, "B12)eA", "", options2, " ");
      helpFormatter0.setLongOptSeparator("fJ+6~fb8/rd_N.");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "5-T");
      Options options1 = new Options();
      options1.hasOption("-");
      options0.getMatchingOptions("arg");
      Options options2 = options0.addOption(option0);
      options2.getOption("usage: ");
      options2.addOption("", false, "<");
      helpFormatter0.printHelp(3303, "G2", (String) null, options0, "36L_,zA5&FF");
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      Option option0 = new Option("CVUI222G", "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "&sk#9b>M";
      options1.addOption((String) null, " ", false, "&sk#9b>M");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1005), "bHF+\"?fTG", (String) null, options0, 4151, (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.defaultSyntaxPrefix = "\n";
      String string0 = "";
      options2.addOption("", false, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "Y", "\n", options1, 0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[5] = 'B';
      charArray0[6] = 'n';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter1.printUsage(printWriter0, 13, "-");
      helpFormatter0.printHelp("\n", "ClqUwajSf''OiDBl8B", options0, "$)G4.HvCW", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-237), "", "#U$aQe7JPwrf^!Igs3@", options0, "z?7HrrOf)[5zZi/S", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      Option option0 = new Option("CVUI222G", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "j{j";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("j{j", "", options1, "CVUI222G", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ONa[Y*5@F@BpZg";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      options0.addOption("1U", "[", true, "eO$);]H#khZf>`KSP=l");
      options2.addOption("", true, "c&kO.eHSDm ");
      String string1 = "6v~";
      String string2 = "j{j";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options2, "[ option: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      options1.addOption("", " | ", false, " | ");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "usage: ", "", options1, "Z", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      Options options3 = options2.addOption("arg", false, "--");
      MockFile mockFile0 = new MockFile(" | ");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4536, "");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 37, "", "", options3, 10, 13, "$)G4.HvCW", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      options0.getMatchingOptions("arg");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.helpOptions();
      options2.addOption("", false, "<");
      String string0 = "G2";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options3, "9&id=|G{>3_geeS0/MC", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " | ", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("usage: ", options2);
      int int0 = 1479;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string2 = " ";
      Option option0 = null;
      try {
        option0 = new Option(" | ", " | ", false, " ;e@O))Ov/uxE)1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-500);
      String string0 = "line.separator";
      Options options0 = new Options();
      String string1 = " ]";
      Option option0 = new Option("arg", " ]");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("The option '", options0, true);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "d^5i?n7H", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("<", options0, false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2293), "%%)oRX7xs{N4uhy{K#", "%%)oRX7xs{N4uhy{K#", options2, "%%)oRX7xs{N4uhy{K#", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " | ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("<", options2);
      optionGroup0.setRequired(true);
      Options options3 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp(1479, "B12)eA", "", options2, " | ");
      helpFormatter0.setLongOptSeparator("fJ+6~fb8/rd_N.");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.renderOptions(stringBuffer0, 237, options3, 5, 101);
      helpFormatter0.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.rtrim("Yg}s");
      String string0 = "CT7!@va";
      helpFormatter0.setNewLine("CT7!@va");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-1);
      String string1 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[5] = 'B';
      charArray0[6] = 'n';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter1.printUsage(printWriter0, 13, "-");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.printHelp(printWriter0, 64, "$)G4.HvCW", "arg", options0, 30, 27, "<", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Ks^1J%,D", "", options0, "Ks^1J%,D");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      mockPrintWriter0.println((Object) locale0);
      pipedInputStream0.mark(1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "qy(&5_#nd3r`<P";
      objectArray0[1] = (Object) "6,>rV87Z?Vpe-9PoXd";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "[ option: ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4199, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '>';
      charArray0[2] = '~';
      charArray0[3] = ']';
      charArray0[4] = ':';
      charArray0[5] = '<';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "6,>rV87Z?Vpe-9PoXd");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Ks^1J%,D";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1592), "Ks^1J%,D", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1099, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SHrge_nE");
      char[] charArray0 = new char[1];
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      optionGroup0.setSelected((Option) null);
      Options options3 = options2.addOption("arg", false, "--");
      helpFormatter0.printHelp("c$h(uQay'l4[:`'TLQ3", options3);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "ONa[Y*5@F@BpZg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1347, "ONa[Y*5@F@BpZg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SHrge_nE");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-1193);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1193), "SHrge_nE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      options0.addOption("1U", "[", true, "eO$);]H#khZf>`KSP=l");
      options2.addOption("", true, "c&kO.eHSDm ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "ONa[Y*5@F@BpZg", "6v~", options2, "j{j", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(4037);
      Options options0 = new Options();
      options0.addOption("", "", true, "@0kiDfh&Kn0W~,");
      Option option0 = new Option("zK", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption(",", true, "^{qM1@]1HNW&QwQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      char[] charArray0 = new char[7];
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append(':');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("CT7!@va");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CT7!@va");
      int int1 = (-1);
      mockPrintWriter0.print("");
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2786);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2786));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SHrge_nE");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      mockPrintWriter0.print(charArray0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "&d$b^HhQV3");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " | ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("<", options2);
      Options options3 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp(1479, "B12)eA", "", options2, " | ");
      helpFormatter0.setLongOptSeparator("fJ+6~fb8/rd_N.");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.renderOptions(stringBuffer0, 237, options3, 5, 101);
      helpFormatter0.createPadding(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "                                            ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultDescPad = 1115;
      helpFormatter0.findWrapPos("--", 0, 2776);
      helpFormatter0.getNewLine();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1475), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine(">p)v1=");
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      mockPrintWriter0.println((Object) pipedOutputStream0);
      pipedInputStream0.mark(1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "qy(&5_#nd3r`<P";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-4529), "A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLeftPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLeftPadding(16);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.rtrim(" ");
      helpFormatter0.setNewLine("CT7!@va");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CT7!@va");
      int int1 = (-1);
      mockPrintWriter0.print("");
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      Options options3 = options2.addOption("arg", false, "--");
      helpFormatter0.printHelp("c$h(uQay'l4[:`'TLQ3", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "c$h(uQay'l4[:`'TLQ3", "ONa[Y*5@F@BpZg", (Options) null, "c$h(uQay'l4[:`'TLQ3", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "[";
      String string1 = "6,>rV87Z?Vpe-9PoXd";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "qy(&5_#nd3r`<P";
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      mockPrintWriter0.println((Object) null);
      Object[] objectArray0 = new Object[0];
      pipedInputStream0.mark((-4529));
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 9, "qy(&5_#nd3r`<P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("MWhc%Q@B;i", "--", true, ";{|j2r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MWhc%Q@B;i' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator(" | ");
      Options options2 = options1.addOption("", " | ", false, " | ");
      helpFormatter0.printHelp(9, "'", "Z", options1, " | ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      String string1 = "<";
      helpFormatter0.printHelp("<", options2);
      int int0 = 1479;
      String string2 = "WcwX&\\G";
      String string3 = " ";
      Option option0 = null;
      try {
        option0 = new Option(" | ", " | ", true, " ;e@O))Ov/uxE)1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1967;
      helpFormatter0.defaultDescPad = 1967;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(2040);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("4g-)TaAg", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = new Options();
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "\n", options0);
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", (String) null, options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "R4o1h{H+<";
      helpFormatter0.setOptPrefix("R4o1h{H+<");
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      // Undeclared exception!
      try { 
        options1.addOption("/fy2o9ybRiLNTpAg`U,", "arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/fy2o9ybRiLNTpAg`U,' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "Ks^1J%,D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(":MG+fq_L8a", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 0;
      String string0 = "5-T";
      Options options0 = new Options();
      Option option0 = new Option("arg", "5-T");
      Options options1 = options0.addOption(option0);
      options1.hasOption("-");
      options0.getMatchingOptions("arg");
      Options options2 = options0.addOption(option0);
      options2.addOption("", false, "<");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "5-T", "\n", options1, 0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-4331);
      String string1 = "";
      String string2 = null;
      Options options0 = new Options();
      String string3 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4331), (-4331), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = new Locale("<", "/vIX\"t8HT!/b");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "/vIX\"t8HT!/b";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "1,|'Dd%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1712);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding((-1712));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("usage: ");
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      options0.hasLongOption("-");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string1 = "KP!\\-{v{^:{$m@";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("KP!-{v{^:{$m@", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      MockFile mockFile0 = new MockFile("--", "n-Xtv)");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.OptionGroup", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 9;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "arg", false, "_zs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 0;
      String string0 = "V~";
      String string1 = ".*U3|;Wj(p\\";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", " ] [ long ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("S]", "line.separator", true, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'S]' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getWidth();
      Options options0 = new Options();
      String string1 = "   ";
      Option option0 = null;
      try {
        option0 = new Option("   ", (String) null, false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
