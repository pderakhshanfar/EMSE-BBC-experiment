/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:11:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setArgName((String) null);
      String string0 = "";
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(618, "", "Y>+'f$]b_kZk LR$IxN", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-778), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("'", 0, 421);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1890, "   ", "   ", (Options) null, "p\"z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option((String) null, "arg");
      optionGroup0.setRequired(true);
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "h", options0, "h");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "((6,$(`qB?s37");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      stringWriter0.close();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, 3, 1669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      helpFormatter0.setLongOptSeparator("");
      options1.addOption("arg", true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "", options0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("}4UVU", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.Option");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = (-3688);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "cmdLineSyntax not provided";
      options0.hasOption("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 1, 3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X/", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-", false, (String) null);
      helpFormatter1.setLeftPadding(864);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "org.apache.commons.cli.ParseException", false, "arg");
      OptionGroup optionGroup2 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup2);
      helpFormatter2.printHelp(2426, "<", "", options4, "org.apache.commons.cli.ParseException", false);
      helpFormatter1.getArgName();
      helpFormatter2.rtrim("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "FoJsI%f7o8r", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options1.addOption((String) null, "\n", false, "DQ6=kC*E{0EVX0!");
      // Undeclared exception!
      helpFormatter1.printHelp(0, ")p$,NX)rE@U", (String) null, options1, "arg", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      boolean boolean0 = true;
      options1.addOption((String) null, "\n", false, "DQ6=kC*E{0EVX0!");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('c');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter2;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("<", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 3, options1, 1539, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("", "-", true, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "usage: ", true, "");
      helpFormatter0.setArgName("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3051, 74, "usage: ");
      stringBuffer0.insert(3, (double) 74);
      helpFormatter3.getArgName();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 0, options3, 0, 2361);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = " | ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " | ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultLeftPad = 571;
      helpFormatter0.setNewLine("--");
      Options options0 = new Options();
      helpFormatter0.printHelp("E$Rx CW", "", options0, "E$Rx CW", false);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+8y)=}{}5\"Fz'#=", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "(k;T84hy0\"$=CN$s|");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      Options options2 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "O>", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "cmdLineSyntax not provided", "", options1, ">", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 64, options0, 64, (-323));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      mockPrintStream0.println(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.renderOptions((StringBuffer) null, 4357, options0, 4357, 4357);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4357, " bZ1A3h=H%<_cnZs7", (String) null, options0, 32, 32, "org.apache.commons.cli.AlreadySelectedException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "usage: ", false, "");
      helpFormatter0.setArgName("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      Options options2 = options1.addOption("arg", (String) null, false, "\n");
      HelpFormatter helpFormatter6 = new HelpFormatter();
      options0.addOptionGroup(optionGroup0);
      helpFormatter5.printHelp(" ", options2, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1349), "jv)e@ur", " ", options1, 38, (-2), " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockFile0.setWritable(false, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1349), "jv)e@ur", " ", options1, 38, (-2), " | ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, " ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 13, 13);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.setArgName(" ");
      StringWriter stringWriter0 = new StringWriter(105);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 64, 10);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = helpFormatter0.defaultNewLine;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      int int0 = 3;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile1 = new MockFile("arg");
      mockFile1.setWritable(false, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3137, "|fXnjRWZs}", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-629);
      helpFormatter0.defaultLeftPad = (-629);
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.rtrim("arg");
      helpFormatter0.setLeftPadding(671);
      helpFormatter0.getSyntaxPrefix();
      int int1 = 9;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "arg", "arg", options0, "^_<WxPmm}_[R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.createPadding(13);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2687), "             ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      options0.toString();
      options0.addOption((String) null, false, "ZR6pI|>39m{wFj");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("Aywni,5f`A", options0, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 13, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "RC;{@s{^`^@n;uPU";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 110, "RC;{@s{^`^@n;uPU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "~j7 >07JY\\'m(v)!";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)101, " :: ", "~j7 >07JY'm(v)!", options0, 2653, (int) (byte) (-19), "z<Qr8/>b*~AXyh-s/T|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "", false, "");
      helpFormatter0.setArgName("^ZFz#}ePx`>&m';f(");
      helpFormatter0.renderOptions(stringBuffer0, 3, options2, 3, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      options0.addOption("", "--", true, ">");
      helpFormatter1.printHelp(95, "$#c,AHK6>9Ad", "has already been selected: '", options0, "arg", false);
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "", false, "");
      String string0 = "^ZFz#}ePx`>&m';f(";
      helpFormatter0.setArgName("^ZFz#}ePx`>&m';f(");
      helpFormatter0.renderOptions(stringBuffer0, 3, options2, 3, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      options1.addOption((String) null, "\n", true, "DQ6=kC*E{0EVX0!");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp(3, "-", "Ru", options1, "Ru", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      Options options0 = new Options();
      options0.helpOptions();
      List list0 = options0.getMatchingOptions("arg");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "PKUV<", options0, "A CloneNotSupportedException was thrown: ");
      Options options1 = options0.addOption("arg", "A CloneNotSupportedException was thrown: ", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLongOptPrefix();
      options0.addOption("bCQ", "--", true, "org.apache.commons.cli.Options");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "PKUV<";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "S<go_2@$foh", objectArray0);
      helpFormatter0.printUsage(printWriter0, 661, "", options1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "4}J4y,zXr;X$ZKM";
      MockFile mockFile0 = new MockFile("arg");
      mockFile0.setReadable(false);
      File file0 = MockFile.createTempFile("4}J4y,zXr;X$ZKM", "arg", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "4}J4y,zXr;X$ZKM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockFile0.getCanonicalPath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2211, 2211, "4}J4y,zXr;X$ZKM");
      int int0 = 64;
      Options options0 = new Options();
      String string1 = "p8J%\\d[%-D1[ke/C){Z";
      Option option0 = null;
      try {
        option0 = new Option("p8J%d[%-D1[ke/C){Z", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'p8J%d[%-D1[ke/C){Z' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vh");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '{';
      charArray0[2] = '\"';
      charArray0[3] = '3';
      charArray0[4] = '&';
      charArray0[5] = '=';
      charArray0[6] = '}';
      charArray0[7] = ' ';
      mockPrintWriter0.println(charArray0);
      options1.addOption("arg", true, "");
      String string0 = "0rz1a";
      int int0 = (-2484);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "t4{(dzB=#I+@", "0rz1a", options0, (-2484), (-1), "LL,]sW", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "", false, "");
      helpFormatter0.setArgName("^ZFz#}ePx`>&m';f(");
      helpFormatter0.renderOptions(stringBuffer0, 3, options2, 3, 2);
      options1.hasShortOption("org.apache.commons.cli.HelpFormatter$1");
      int int0 = (-2038);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2038), options2, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",=>,NH;");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter1.println((double) 74);
      options0.helpOptions();
      options0.getMatchingOptions("--");
      mockPrintWriter0.print("--");
      helpFormatter0.setDescPadding(3);
      options0.getOptionGroups();
      mockPrintWriter0.println(646L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1019, "k<:U,/G-]?P", "k<:U,/G-]?P", options0, 1019, 3, "k<:U,/G-]?P", false);
      MockFile mockFile0 = new MockFile("-");
      mockFile0.setWritable(false, false);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]mXX\u0002", options1, false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vh");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "zrO]ul9|GQrHC({{", "Vh", options3, 1176, 103, "6");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WJobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      mockPrintWriter0.print("U]U!Ms8+j0-7!hc{U");
      helpFormatter0.setDescPadding(3);
      mockPrintWriter0.println(0L);
      String string0 = "org.apache.commons.cli.Options";
      String string1 = helpFormatter0.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderOptions(stringBuffer0, 1601, options0, 3, 1105);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Options", 3, (-791));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-684));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("mEoj?n[i.;z$8u&tT3m", "org.apache.commons.cli.Options", options0, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(" ", "5PLFYXj~/ym:za|");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "5PLFYXj~/ym:za|");
      Options options0 = new Options();
      mockPrintWriter1.println(0.0);
      options0.helpOptions();
      options0.getMatchingOptions(" | ");
      mockPrintWriter1.print("The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(115);
      mockPrintWriter0.println((-2441L));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(printWriter0, 74, " ", "usage: ", options0, 74, 3, (String) null, false);
      mockFile1.setWritable(false, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter3.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options0.getMatchingOptions("5/;j");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.print("J]U!Ms8+j0-7!hc{U");
      helpFormatter0.setDescPadding((-2131));
      printWriter0.println((long) (-2131));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, 34, (-2131), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      printWriter0.println(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = "d";
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      boolean boolean0 = false;
      String string2 = "V'lDr\"v|})1_Obc";
      Options options1 = options0.addOption("d", false, "V'lDr\"v|})1_Obc");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-848), "d", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockPrintWriter0.print((-1.0));
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 2024, "usage: ");
      helpFormatter0.getArgName();
      mockPrintWriter0.println(429.3092);
      String string0 = "d";
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 223, (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 31, 2024, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      MockFile mockFile0 = new MockFile("arg", "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.printHelp("'}xu^gUXrH2pDO", options0, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 2024, "a;WaobB;/XGl11");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      printWriter0.println(0.0);
      mockPrintWriter0.println((long) 2024);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "usage: ", options0, 74, 74, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options0.addOption("", "YFH.A?*vAA8A?", false, "{wQpQ");
      helpFormatter0.setArgName("}");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 487;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1), options0, 487, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockFile0.delete();
      helpFormatter0.setNewLine("eL^tZz)Id=NX0");
      helpFormatter0.rtrim("eL^tZz)Id=NX0");
      helpFormatter0.setOptPrefix("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      StringWriter stringWriter0 = new StringWriter(1245);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.getNewLine();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 0, 1);
      stringWriter1.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      char[] charArray0 = new char[5];
      Options options0 = new Options();
      helpFormatter1.printOptions(printWriter0, 74, options0, 1, 74);
      helpFormatter0.getArgName();
      charArray0[0] = 'D';
      charArray0[1] = '=';
      charArray0[2] = 'I';
      charArray0[3] = '~';
      charArray0[4] = '#';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 10, "a;WaobB;/XGl11");
      helpFormatter0.getArgName();
      printWriter0.write(587);
      mockPrintWriter0.println(429.3092);
      String string0 = "' was specified but an option from this group ";
      mockPrintWriter0.println((long) 1);
      helpFormatter0.printUsage(printWriter0, 3, "-", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[", "[", options0, 9, 0, "' was specified but an option from this group ", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(31);
      helpFormatter1.setLongOptSeparator("w}yR1&eO|&QX]~8M;i7");
      helpFormatter0.getLeftPadding();
      helpFormatter1.printHelp("@w4HLOXq{s?", "-", options0, "");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "qFcY98=", "qFcY98=", options0, 74, 64, "3", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 2024, "usage: ");
      helpFormatter0.getArgName();
      mockPrintWriter0.println(429.3092);
      mockPrintWriter0.println((long) 1);
      mockFile0.setWritable(false, false);
      options0.addOption("", "A CloneNotSupportedException was thrown: ", true, ".wccn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter1.printHelp(239, "-", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " ]", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      mockPrintWriter0.append((CharSequence) "-");
      int int0 = 3;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, (Options) null, 477, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(31);
      helpFormatter1.setLongOptSeparator("w}yR1&eO|&QX]~8M;i7");
      helpFormatter0.getLeftPadding();
      helpFormatter1.printHelp("@w4HLOXq{s?", "-", options0, "");
      helpFormatter1.createPadding(64);
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter1 = printWriter0.printf("--", (Object[]) null);
      helpFormatter1.printHelp(printWriter1, 1800, "A CloneNotSupportedException was thrown: ", "9vsy#Z?KuOTX.O!zmE%", options0, 212, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockFile0.delete();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      StringWriter stringWriter0 = new StringWriter(1245);
      stringWriter0.write(74);
      stringWriter0.getBuffer();
      helpFormatter1.getNewLine();
      mockFile0.setWritable(true, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.setOptPrefix("jHjOp{Wp");
      helpFormatter4.setOptPrefix("--");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "--", " ", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      Options options0 = new Options();
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "PKUV<", options0, "A CloneNotSupportedException was thrown: ");
      options0.addOption("arg", "A CloneNotSupportedException was thrown: ", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLongOptPrefix();
      Options options1 = options0.addOption("bCQ", "--", true, "org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "]", "usage: ", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
      helpFormatter1.setArgName("-");
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "u)_fn]ma");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "--", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3353, "org.apache.commons.cli.Util", "r?,wE", options2, ">", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 2024, "usage: ");
      helpFormatter0.getArgName();
      mockPrintWriter0.println(429.3092);
      mockPrintWriter0.println((long) 1);
      mockFile0.setWritable(false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("\n");
      helpFormatter2.setOptPrefix(" ");
      helpFormatter2.getLongOptPrefix();
      helpFormatter1.printHelp(239, "-", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " ]", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print("J]U!Ms8+j0-7!hc{U");
      helpFormatter1.setDescPadding(31);
      mockPrintWriter0.println(0L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Options", "", options0, 73, 34, "\n", false);
      helpFormatter1.setNewLine("-");
      helpFormatter0.getDescPadding();
      helpFormatter1.getWidth();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "o3|%D|qlCz:Srl", options0, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 3010;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2847, (Options) null, 863, 3010);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 618;
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2780), "");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.getBuffer();
      StringWriter stringWriter1 = new StringWriter(510);
      stringWriter1.append((CharSequence) "   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 545, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      int int1 = 0;
      options0.getMatchingOptions("arg");
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 10, "a;WaobB;/XGl11");
      helpFormatter0.getArgName();
      String string0 = "[";
      int int2 = 9;
      printWriter0.write(587);
      mockPrintWriter0.println(429.3092);
      String string1 = "' was specified but an option from this group ";
      mockPrintWriter0.println((long) 1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-848), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(4339);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("");
      helpFormatter2.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter(183);
      stringWriter0.append((CharSequence) "a5'uefJo0Npc=9");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setSyntaxPrefix("org.apache.commons.cli.Options");
      helpFormatter1.setLongOptPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 4339, "cmdLineSyntax not provided", "", options0, 74, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("bv");
      helpFormatter1.setOptPrefix("usage: ");
      StringWriter stringWriter0 = new StringWriter(121);
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix(":-($ 5");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "--", "q*?G66bu,[{g<CI", options0, 202, 202, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("bv");
      helpFormatter1.setOptPrefix("usage: ");
      StringWriter stringWriter0 = new StringWriter(121);
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptSeparator("9'`oh+b");
      helpFormatter3.setLongOptPrefix("org.apache.commons.cli.Options");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = " :: ";
      String string1 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "K_=OB'>\"HvIHqKmqFu", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockFile0.delete();
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 10, "a;WaobB;/XGl11");
      helpFormatter0.getOptPrefix();
      mockPrintWriter0.println(429.3);
      mockPrintWriter0.println((long) 1);
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "?w8v#W>%1x,");
      Option option0 = new Option("", true, "-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, "", "-", options2, (-1087), 5, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("usage: ");
      StringWriter stringWriter0 = new StringWriter(121);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 4335, "usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 5, "-", "", options0, 3, 1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      mockFile0.delete();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator("jpI=RmZ0T");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "line.separator", options1, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(,cL.Bm;jQg=9tk");
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "5k?Kq2x\\UhFLSHo1F<";
      Option option0 = new Option("", "H CXxZ;20+ofg|", false, "5k?Kq2xUhFLSHo1F<");
      options0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "5k?Kq2xUhFLSHo1F<", "", options2, "6V1/6", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter1.defaultLeftPad = 1871;
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      mockFile0.delete();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("a;WaobB;/XGl11");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("a;WaobB;/XGl11");
      StringWriter stringWriter0 = new StringWriter(1245);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.getNewLine();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 0, 1);
      stringWriter1.append((CharSequence) "a;WaobB;/XGl11");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-2780);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2780), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 3144, (-1), "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "   ";
      mockPrintWriter0.format("--", objectArray0);
      String string0 = "*)c0k$ep";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      // Undeclared exception!
      try { 
        options1.addOption("   ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.getNewLine();
      stringWriter0.append((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 3, "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 3011, "             ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, 13, "#aa'[V:_Wn&%e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2780), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 3144, (-1), "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "   ";
      mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("6)+=Y*5</g}@", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "   ");
      helpFormatter0.getWidth();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.printHelp(" ", options0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("LO3l.");
      helpFormatter1.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter1.setArgName("usage: ");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(1148);
      stringWriter1.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      stringWriter1.append((CharSequence) charBuffer0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("--", "--", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      int int0 = 2;
      helpFormatter0.renderOptions(stringBuffer0, 3, options2, 2, 3);
      options2.hasShortOption("-");
      int int1 = 502;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options2, 502, (-797));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      Options options2 = options1.addOption("arg", "usage: ", false, "");
      helpFormatter0.setArgName("^ZFz#}ePx`>&m';f(");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      options1.addOption((String) null, "\n", true, "DQ6=kC*E{0EVX0!");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter1.printHelp(74, "\n", "usage: ", options2, "-", true);
      helpFormatter2.createPadding(1);
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.setArgName(" ");
      StringWriter stringWriter0 = new StringWriter(121);
      stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", "'\"zw", options1, "   ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("&4S{S", "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 4335;
      stringWriter0.append((CharSequence) "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 4335, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockFile0.delete();
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 10, "a;WaobB;/XGl11");
      helpFormatter0.getOptPrefix();
      mockPrintWriter0.println(429.3092);
      mockPrintWriter0.println((long) 1);
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.getMatchingOptions("cmdLineSyntax not provided");
      helpFormatter0.printHelp(13, "ccotu)@eL&l", "cmdLineSyntax not provided", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.createPadding(3013);
      options0.hasOption("--");
      options0.hasShortOption("cM<<SsF@{-0t");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("@1(sFN\"C-~k7Y[xrT", "cM<<SsF@{-0t", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      helpFormatter0.setArgName("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setLongOptSeparator("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ow~]}Xkwzk[uM", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = null;
      mockFile0.setWritable(false, false);
      String string1 = "K,I4tEf";
      String string2 = "{XX<\"KGdVS\"1t0_";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1625), "{XX<\"KGdVS\"1t0_", "-", (Options) null, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "--";
      String string1 = ")UJXf8cli";
      helpFormatter0.setOptPrefix("D8{3JuyRK'@Y~B{+<6A");
      Options options0 = new Options();
      options0.getMatchingOptions("[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2749), "D8{3JuyRK'@Y~B{+<6A", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      helpFormatter0.setDescPadding(618);
      helpFormatter0.setArgName((String) null);
      String string0 = "JOTNdyv";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(618, "", "Y>+'f$]b_kZk LR$IxN", options0, "JOTNdyv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1350));
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "usage: ", false, "GyZinm");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1126, "", "", options3, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1452));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      String string0 = "'";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-527), (-527), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(966);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "#OHCEv|WvL1blZQGb7q";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2797), "#OHCEv|WvL1blZQGb7q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qnE");
      helpFormatter0.setLongOptSeparator("3ScHI#J");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println(1172.187368283801);
      options0.helpOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockFile0.delete();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2024, "a;WaobB;/XGl11");
      helpFormatter0.getArgName();
      mockPrintWriter0.println(1172.187368283801);
      mockPrintWriter0.println(0L);
      mockFile0.setWritable(false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "arg", options0, (-443), 13, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("usage: ");
      StringWriter stringWriter0 = new StringWriter(121);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 1, 4335, "usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer1, 1148, 31, "usage: ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a;WaobB;/XGl11";
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      int int1 = 0;
      options0.getMatchingOptions("arg");
      boolean boolean0 = false;
      mockFile0.delete();
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "a;WaobB;/XGl11", "a;WaobB;/XGl11", options0, 0, 0, "a;WaobB;/XGl11", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(,cL.Bm;jQg=9tk");
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(3066);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-1864);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-1864), 261, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(44);
      helpFormatter0.setWidth(2066);
      helpFormatter0.getLeftPadding();
      String string0 = "h@!CT)M[r}mV7,LsM";
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      String string1 = "ONk!\"b|h2Nf4+QGDe9q";
      boolean boolean0 = false;
      Option option0 = new Option("", "ONk!\"b|h2Nf4+QGDe9q", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, "}w:t9`UcZIxVH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("&4S{S", "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      mockFile0.setWritable(false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, "K,I4tEf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("MS$#`8yI", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MS$#`8yI' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      String string1 = "[";
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.setDescPadding(0);
      String string2 = "|x`<";
      String string3 = "-^7b{=Xw9s#S";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string4 = "U)J<_T}Fz;T<e0";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("U)J<_T}Fz;T<e0", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U)J<_T}Fz;T<e0' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      byteArrayOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      helpFormatter0.printWrapped(printWriter0, 1323, "!@>Uz{De|m.I!Yn}OOO");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("\n", 1323, 1690);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)111;
      byteArrayOutputStream0.write(byteArray0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2304), ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1350));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.setArgName("\n");
      helpFormatter1.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getArgName();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" | ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3521);
      int int0 = 1;
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setLongOptSeparator(" | ");
      PrintWriter printWriter0 = null;
      int int0 = 74;
      String string1 = "A CloneNotSupportedException was thrown: ";
      String string2 = "";
      Options options0 = new Options();
      options0.hasOption(" | ");
      String string3 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setNewLine("");
      options0.getOptionGroups();
      String string4 = null;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("a;WaobB;/XGl11", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      options0.helpOptions();
      options0.getMatchingOptions("arg");
      mockFile0.delete();
      helpFormatter0.printUsage(printWriter0, 10, "a;WaobB;/XGl11");
      helpFormatter0.getArgName();
      mockPrintWriter0.println(429.3092);
      String string0 = "' was specified but an option from this group ";
      mockPrintWriter0.println((long) 1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[", "[", options0, 9, 0, "' was specified but an option from this group ", false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2074;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 3011, "             ");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("");
      int int0 = 1902;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1902, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1610);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("a5'uefJo0Npc=9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.setArgName(" ");
      assertEquals(" ", helpFormatter0.getArgName());
      
      StringWriter stringWriter0 = new StringWriter(121);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 1, 4335, "usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer1, 1148, 31, "usage: ");
      assertEquals("arg", helpFormatter3.getArgName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      options1.addOption("", "-", false, "--");
      helpFormatter0.setArgName("");
      options1.addOption("arg", "usage: ", false, "");
      helpFormatter0.setArgName("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      options1.addOption((String) null, "\n", true, "DQ6=kC*E{0EVX0!");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp(3, "-", "Ru", options1, "Ru", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultArgName = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(937);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 596;
      helpFormatter0.createPadding(596);
      helpFormatter0.getOptionComparator();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      String string1 = "R.\\5";
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
