/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:13:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter1.setWidth(74);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1965), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1694));
      String string0 = "=E]:X-H._hz\\js";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3586, "[", "[", options0, 3586, 2, (String) null, false);
      helpFormatter0.printHelp("5_R", "5_R", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setArgName("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "-", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "0y@n@Pt");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "_*S8I9Zp#d";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "D{qjPQ@kI!CD3", "D{qjPQ@kI!CD3", options1, 11, (-1), "_*S8I9Zp#d", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = options0.addOption("", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options0, false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp("usage: ", " ", options0, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "!Qc>.n>v", "!Qc>.n>v", options0, "=A\"5M=T~DD}b-2=e", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      helpFormatter1.setSyntaxPrefix((String) null);
      helpFormatter0.setWidth(1);
      options0.getOptions();
      Option option0 = new Option((String) null, "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options1, "S0~80Al7El*Jr.", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("\n", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("arg", "usage: ", "\n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "R'm{etG)&LWyu";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "R'm{etG)&LWyu", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "line.separator", false, "3++\"S)r1=[");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 23, "o.wdUU", options1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.printf("", objectArray0);
      mockPrintWriter0.print((-686));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]", options1);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-1005);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("9g(W{y4", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9g(W{y4", options1, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1274), options1, 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.printf("", objectArray0);
      mockPrintWriter0.print((-686));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]", options1);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3557, options0, 3557, 3557);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, "");
      Options options3 = options2.addOption((String) null, "c\"Yl", true, "JP[(8`b.8Wpj&B");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 5665, "?Qw&2*>v'Do}{8+7c*", "--", options3, 74, 3, "c\"Yl", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      mockPrintWriter0.print(0.0);
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-2), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = "wXTLe";
      Option option0 = new Option("", "wXTLe");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 73, "wXTLe", "v", options0, (-2), 40, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D{qjPQ@kI!CD3";
      String string1 = "V`hnCRfL2vQ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "usage: ");
      option0.setOptionalArg(false);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2957), "0]z2Aq(Z^n*UFu&?e", "0]z2Aq(Z^n*UFu&?e", options1, (-2957), (-1), "V;]@g'u/s&#mR Fx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(23, "c@}oUg*p;", "c@}oUg*p;", (Options) null, "c@}oUg*p;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "-");
      mockPrintWriter0.print((double) 3);
      Options options1 = new Options();
      options0.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "&>ORyHck `#)QS:gx";
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("&>ORyHck `#)QS:gx", objectArray0);
      helpFormatter1.printUsage(printWriter0, 3, "-", options1);
      helpFormatter1.getNewLine();
      helpFormatter2.setSyntaxPrefix("--");
      options0.toString();
      helpFormatter2.setSyntaxPrefix("   ");
      helpFormatter1.setWidth(3);
      Options options2 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 3, "", "$(UiFx#Ui*}*", options1, 1, 1, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      int int0 = 101;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 101, "{[ &QbW9Fy67");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "D{qjPQ@kI!CD3");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3200, "Jc@/]&_d~,2ar", "Jc@/]&_d~,2ar", (Options) null, "Jc@/]&_d~,2ar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2478));
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d?@!QF)?)srss%E", "d?@!QF)?)srss%E", options0, "~x25k,{;gjYBh");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.setWidth((-1));
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B$5GYat", "line.separator", options0, "line.separator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      helpFormatter1.printOptions(printWriter0, 5, options0, 74, 74);
      helpFormatter1.printHelp("XSPQ$nui0307}_qb", (String) null, options0, " ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "D{qjPQ@kI!CD3");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("|`ioCeHP#EyodO", objectArray0);
      int int0 = 10;
      helpFormatter0.printUsage(printWriter0, 10, "|`ioCeHP#EyodO", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("V`hnCRfL2vQ", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D{qjPQ@kI!CD3";
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"`ioCeH3#EyodO", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "\"`ioCeH3#EyodO", options0);
      helpFormatter0.getNewLine();
      int int0 = 5273;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      Options options0 = new Options();
      options0.addOption("", "\n", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options1 = options0.addOption("i", true, "--");
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.printHelp("usage: ", "--", options0, "9C*T\"Ml(qHo");
      helpFormatter0.printHelp("REx3", options1, true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"`ioCeH3#EyodO", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "\"`ioCeH3#EyodO", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2209, "j{<W.6  `Ec&bOsl", (String) null, options0, 2209, (-1807), "]PBKf73*o!*", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("i", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.printHelp("usage: ", "v1_AOA~", options1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2281, "Pa1", "-", (Options) null, 3, (-2015), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "D{qjPQ@kI!CD3");
      Options options0 = new Options();
      options0.toString();
      mockPrintWriter0.printf("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", objectArray0);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("-");
      helpFormatter0.setWidth(1);
      Options options1 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", " ", options1, 1869, 101, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1869, "jLU:Ou-cMk", "1", options1, 116, (-1), "VS6YLU0(");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      String string1 = "r)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r)");
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("r)", (Object[]) null);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("[=WZ9UYga}nk_Y%");
      helpFormatter1.setWidth(1);
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 99, "", "-", options1, 64, 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      helpFormatter1.printHelp("--", "", options0, "(b=fZ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "cmdLineSyntax not provided", options0, 1, 3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "", true, "D8");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 4, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp("XSPQ$nui0307}_qb", (String) null, options0, " ");
      helpFormatter0.printHelp("-", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-179), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter2.setLongOptPrefix("\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 96, options0, 74, 1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer1, 5273, 1, "");
      helpFormatter2.getLongOptPrefix();
      helpFormatter2.printHelp(1579, "usage: ", "\"\"i$WyB8rA$X}&\"", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1189, " ", "arg", options0, 3, (-2831), "djSWh,3w;OaKDR", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      int int0 = (-813);
      Options options0 = new Options();
      helpFormatter0.printHelp("vcCzt3GCBMw*Uwb:eW", options0);
      mockPrintWriter0.print((long) (-813));
      Options options1 = options0.addOption((String) null, "-", false, "");
      options0.hasOption("");
      Options options2 = options1.addOption("arg", false, "");
      options0.getMatchingOptions("U'.=N|YZI8p?h");
      int int1 = (-1709);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-813), "", "", options2, (-1709), (-4672), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 96, options0, 74, 1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer1, 5273, 1, "");
      helpFormatter2.getLongOptPrefix();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 2361, "usage: ", "usage: ", options0, 34, 911, "");
      StringBuffer stringBuffer2 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter3.renderOptions(stringBuffer2, 3, options0, (-773), 1189);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"`ioCeH3#EyodO", objectArray0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(printWriter0, 101, "jLU:Ou-cMk", "V`hnCRfL2vQ", options0, 101, 0, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "}<`7<C.[(", options0, 10, 0, "\"`ioCeH3#EyodO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Option option0 = new Option("", "wXTLe");
      helpFormatter0.printHelp("   ", ".U", options0, (String) null);
      helpFormatter0.printHelp(" j", "xVE", options0, "");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 39, (-1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cmdLineSyntax not provided");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("^sX");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "CY/af)k-x", options0, "-");
      helpFormatter0.printHelp("arg", "-", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "arg";
      Option option0 = null;
      try {
        option0 = new Option("-", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("i", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.printHelp("usage: ", "v1_AOA~", options1, "usage: ");
      helpFormatter1.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((byte)17);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, (byte)67, (-3334), "EW[");
      helpFormatter0.defaultNewLine = "<";
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      String string0 = "' contains an illegal character : '";
      helpFormatter0.printHelp("EW[", "C}IMj'p3Gy?9=Y!koXE", options0, "' contains an illegal character : '", false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      helpFormatter0.rtrim("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      helpFormatter0.rtrim("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter3.renderOptions(stringBuffer0, 1, options0, 1, 7);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, (-70), "");
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "arg", options0, 13, 3197, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("i", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 20, "   ");
      helpFormatter0.rtrim("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      int int0 = (-839);
      helpFormatter2.createPadding(20);
      Options options1 = new Options();
      helpFormatter1.printHelp("usage: ", options1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter3.renderWrappedText((StringBuffer) null, 3, 1215, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("-Jo+s>=Z9c");
      helpFormatter0.defaultSyntaxPrefix = " | ";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", false, "-Jo+s>=Z9c");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("9<?>!=#_xVP:", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 46;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1, options1, 74, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 20, "A");
      helpFormatter0.rtrim("D{qjPQ@kI!CD3");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("VP", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.toString();
      mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter", (Object[]) null);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setWidth(3);
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter3.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2146), "\tW3+% wcP)'P]*%zRn", "arg", options0, 1, (-993), "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.toString();
      PrintWriter printWriter0 = mockPrintWriter0.printf("|`ioCeHP#EyodO", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "|`ioCeHP#EyodO", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "V`hnCRfL2vQ", options1, "\n", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "V`hnCRfL2vQ", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.printHelp("+TVi?X!)Zo!a-o0,&q", "--", options0, "}v)i;if,");
      helpFormatter1.printHelp("usage: ", "D{qjPQ@kI!CD3", options0, "Ww7X");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "-", "D{qjPQ@kI!CD3", options0, "ZyEx(kL2<^L%{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) locale0;
      Object object1 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 14, options1, 102, 3384);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-3886), 117, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setArgName("R! t/4^n3>V$|z");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = "V`hnCRfL2vQ";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) "R! t/4^n3>V$|z";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "A";
      objectArray0[7] = (Object) "R! t/4^n3>V$|z";
      int int0 = 20;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 20, "R! t/4^n3>V$|z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.printf("|`ioCeHP#EyodO", objectArray0);
      helpFormatter0.printUsage(printWriter0, 11, "|`ioCeHP#EyodO", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "w`EG~l{((", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 74);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3110), (-1052), "W!6rLt$*szW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setArgName("R! t/4^n3>V$|z");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "R! t/4^n3>V$|z";
      objectArray0[4] = (Object) mockPrintWriter0;
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("R! t/4^n3>V$|z", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "(b=fZ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "--");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      mockPrintWriter0.printf("|`ioCeHP#EyodO", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.print((long) 1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.defaultWidth = 0;
      mockPrintWriter0.format("V`hnCRfL2vQ", objectArray0);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("h&CrNwv5dqJ!uVHL");
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(4);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ME8", options0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setArgName("R! t/4^n3>V$|z");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = "V`hnCRfL2vQ";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) "R! t/4^n3>V$|z";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "A";
      objectArray0[7] = (Object) "R! t/4^n3>V$|z";
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "R! t/4^n3>V$|z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "(b=fZ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ME8", options0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0, true);
      helpFormatter1.findWrapPos("--", 74, 27);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.PRC;
      mockPrintWriter2.printf(locale0, "--", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 3036, "'");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 247;
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 247, 1225, "arg");
      mockPrintWriter0.print((double) 1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(694);
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 694, 38, "rc");
      mockPrintWriter0.print((double) (-775));
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 33, (String) null, options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("rc");
      helpFormatter0.setWidth((-377));
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("i", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 63;
      int int1 = (-2);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 32, 1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 63;
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 0, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "[ARG...]";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "~u(=\\E[&?25R~";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("~u(=E[&?25R~", "usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~u(=E[&?25R~' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("-Jo+s>=Z9c");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 3036, 1, "'");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", (-3561), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "_)k^P~6";
      helpFormatter0.rtrim("_)k^P~6");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = 1002;
      StringWriter stringWriter0 = new StringWriter(1002);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int1 = (-3148);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-3148), 'P');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      helpFormatter0.rtrim("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 96, options0, 74, 1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer1, 5273, 1, "");
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1189, " ", "arg", options0, 3, (-2831), "djSWh,3w;OaKDR", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("LtcZJ/MnK9#");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(144);
      helpFormatter0.setLeftPadding((-1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      helpFormatter0.defaultLeftPad = 2544;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 2544, options0, 63, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("CBH", true, ".K^,cl4_|szv(^c");
      options3.addOption("", "", true, "arg");
      options3.addOption("", true, "=");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-3588), options3, (-2), (-3588));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      stringBuffer0.setCharAt(0, ',');
      helpFormatter0.setArgName("O-PG.\"3AQ.=30H2f4");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      helpFormatter0.printHelp(934, ",u9,XBC*u'&3jJU", "O-PG.\"3AQ.=30H2f4", options0, ",u9,XBC*u'&3jJU");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-166), options0, (-166), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      String string0 = "GEA~Z'J|";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("[", true, "](|r(n~hp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      int int0 = 1593;
      String string1 = helpFormatter0.createPadding(1593);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int1 = 0;
      helpFormatter0.defaultLongOptPrefix = string1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1225, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) " :: ";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" :: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 4490, "OGtgXWXRuM~$@xT?LX9");
      helpFormatter0.setOptPrefix(" :: ");
      helpFormatter0.getLongOptSeparator();
      String string0 = " | ";
      helpFormatter0.setSyntaxPrefix(" | ");
      int int0 = 0;
      String string1 = "MmC)[\"";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("|zzO", false, "T;H^(NQIKU6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|zzO' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = ":@P55";
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = "X5pL`.5?:=vd";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      // Undeclared exception!
      try { 
        options1.addOption("W_a+", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W_a+' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 459;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 459, (-1), "org.apache.commons.cli.HelpFormatter$1");
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.renderWrappedText(stringBuffer1, 459, 0, "cmdLineSyntax not provided");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("aq~#wq", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("/`Y3'C\"WYE\"Ypytt");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "kh:Z[Q.", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "(b=fZ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "y5e`=XyK,I-uu7", (Options) null, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("CBH", true, ".K^,cl4_|szv(^c");
      Options options4 = options3.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "CBH", options4, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "@B>fizNSOz3Wi-cDh", (Options) null, "bq;9O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(5123);
      String string0 = "x|#5SO3";
      helpFormatter0.setNewLine("x|#5SO3");
      int int0 = 1096;
      helpFormatter0.defaultDescPad = 1096;
      helpFormatter0.defaultLeftPad = 1096;
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("x|#5SO3");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x|#5SO3", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "   ";
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-775));
      helpFormatter0.setDescPadding(694);
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$1", false, "org.apache.commons.cli.HelpFormatter$1");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-775), options4, 694, 694);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      int int0 = (-29);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 673;
      Options options0 = new Options();
      String string0 = "NO_ARGS_ALLOWED";
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("--", "NO_ARGS_ALLOWED", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 1942, 1942);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultWidth = 3249;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      String string1 = "QX";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "arg");
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "gH6nDpv!GV\"k_FWd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2544;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, "a7RU|Nt1MC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.defaultWidth = 0;
      PrintWriter printWriter0 = mockPrintWriter0.format("V`hnCRfL2vQ", objectArray0);
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "sJW%5_g");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      String string0 = "i";
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "i");
      File file0 = MockFile.createTempFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", " ");
      String string1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.defaultOptPrefix = "<";
      helpFormatter0.setLeftPadding(0);
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultWidth = 514;
      helpFormatter0.getDescPadding();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = null;
      MockFile mockFile0 = new MockFile((File) null, "usage: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("<", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D{qjPQ@kI!CD3");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V`hnCRfL2vQ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 101, 0, "D{qjPQ@kI!CD3");
      Options options0 = new Options();
      options0.toString();
      mockPrintWriter0.printf("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", objectArray0);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("-");
      helpFormatter0.setWidth(1);
      Options options1 = new Options();
      options1.hasOption("V`hnCRfL2vQ");
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", " ", options1, 1869, 101, "-", false);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      assertEquals("D{qjPQ@kI!CD3", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = ";";
      helpFormatter0.setLongOptSeparator(";");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
