/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:18:35 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2524);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "O?b", "O?b", (Options) null, "O?b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "9Wh'<mH$R` }", "DAQ=kd`<", (Options) null, 0, 0, "DAQ=kd`<");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "", true, "I;,+JzEA@hW");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      optionGroup2.addOption(option1);
      Options options2 = options1.addOption("arg", "arg", true, "usage: ");
      options2.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("I;,+JzEA@hW", "", options0, "I;,+JzEA@hW", true);
      helpFormatter0.printHelp(1447, "I;,+JzEA@hW", "I]|<=", options1, "I]|<=", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-1238));
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Hk)Q=pOL+?.P:I", "Hk)Q=pOL+?.P:I", options0, "Hk)Q=pOL+?.P:I", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-146);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "--";
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setNewLine("bv+?Bl8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 43, "--", "arg", (Options) null, 12, 12, "iFC|]9Sk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.setArgs(47);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "Illegal option name '", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-167);
      helpFormatter0.setDescPadding((-167));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "usage: ", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultDescPad = 11;
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "|-43Hv9w2W.5{?", false, "--");
      options0.toString();
      options0.getOptionGroups();
      options1.helpOptions();
      helpFormatter0.printHelp(">", options1);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(11);
      String string0 = "dBd;_NU";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 935, " ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1958);
      helpFormatter0.defaultArgName = "S?";
      helpFormatter0.setDescPadding((-1958));
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1958), "");
      int int1 = 85;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, " ", true, "\n");
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 483, "l7,~}=-IDj^VZsEGG", "l7,~}=-IDj^VZsEGG", options0, (-1240), 483, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding((-1359));
      helpFormatter0.createPadding(9);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1161, "TZoGC?lR_HP48i3@+", "TZoGC?lR_HP48i3@+", options0, "TZoGC?lR_HP48i3@+", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("Illegal option name '");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      MockFile.createTempFile("usage: ", " | ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 2992;
      helpFormatter1.rtrim(" ");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((Object) helpFormatter0);
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("74u&yj!^-Q`I#l#Sc", "74u&yj!^-Q`I#l#Sc", options0, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "::I2M^~L");
      helpFormatter0.createPadding(58);
      helpFormatter0.renderOptions((StringBuffer) null, 58, options0, 58, 44);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "wZRu~", "", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "]^= }@jfC/:D", (String) null, options0, 13, 2806, " | ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 490, 490, "3Jk5Ru2E6g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oR+";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oR+", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.defaultDescPad = 2500;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      int int0 = 2;
      Options options0 = null;
      int int1 = 1282;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 2, (Options) null, 1282, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(31);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      mockPrintWriter0.write("-");
      helpFormatter0.printUsage(printWriter0, 44, "Fe*C9CZFl)", options0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-50);
      mockPrintStream0.write(byteArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "cmdLineSyntax not provided", "", options0, 44, 65, (String) null, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(587);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("cmdLineSyntax not provided");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      helpFormatter0.printUsage(printWriter0, 587, "cmdLineSyntax not provided", options0);
      helpFormatter0.printHelp(printWriter0, 587, "?Jx", "", options0, 0, 10, "", true);
      helpFormatter0.printUsage(printWriter0, 32, "", options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", " ");
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("--");
      mockFile1.mkdir();
      MockFile.createTempFile("arg", "arg", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-348);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      file0.createNewFile();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = new StringBuffer(587);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer1, 6, 6, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(18, "org.apache.commons.cli.OptionValidator", " | ", options0, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      options0.addOption("", "arg", true, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " | ");
      helpFormatter0.printHelp(9, "WsnD p*/z0\" XSCgdF~", " | ", options0, "arg", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 6, (-1753), "(N!pmLJT 4JETM6>%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "");
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("--");
      MockFile.createTempFile("arg", "arg", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = helpFormatter0.defaultArgName;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-80), (String) null, "1d", options0, (-860), 69, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "]^= }@jfC/:D";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "]^= }@jfC/:D";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 932, ">", "", options0, 9, 13, "org.apache.commons.cli.ParseException", true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("   ", "org.apache.commons.cli.HelpFormatter", true, "SA4C*,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "usage: ", true, "-)e:Yq=OUv>r");
      helpFormatter0.printHelp("cIH3q23~Oj", "cIH3q23~Oj", options3, "", true);
      MockFile mockFile0 = new MockFile("--", "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1648, "", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "");
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("--");
      MockFile.createTempFile("arg", "arg", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      file0.createNewFile();
      StringBuffer stringBuffer0 = new StringBuffer(")uby654r");
      StringBuffer stringBuffer1 = new StringBuffer(583);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.append('4');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 583, "@/{w!5", options0);
      StringBuffer stringBuffer2 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer2, 97, 583, ",5(~CqW,/q");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 583, "Q$J<nW7\"!,6\"$'P)Co", "Q$J<nW7\"!,6\"$'P)Co", options0, 31, 583, "@/{w!5", true);
      helpFormatter0.printHelp(583, " | ", "@/{w!5", options0, "jxt|C-wp9::");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cIH3q2i~Oj";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(", "org.apache.commons.cli.Util", (Options) null, "' was specified but an option from this group ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 15, "+H?9)C[q4)J(z\" ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 509, "", "", options0, 509, 509, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" | ", "\n", options0, "eT");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 3, " | ");
      MockFile mockFile0 = new MockFile("-", "M;e`7+)lFdzzn");
      MockFile mockFile1 = new MockFile(mockFile0, ",17\u0007SqOe>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 74, "arg", " ", options0, 1114, 345, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = (-1932);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1932), "", "", options0, 12, 12, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-", 1, 1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3591), "d ", "cmdLineSyntax not provided", options0, (-3591), 509, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" | ", "\n", options0, "eT");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1329), "usage: ", "\n", options0, (-1), 18, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      String string0 = "Nfbzt/j@qp";
      String string1 = "gfzD'0Y/~'";
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string2 = helpFormatter0.defaultSyntaxPrefix;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "Nfbzt/j@qp", "usage: ", options0, (-1), (-80), "]^= }@jfC/:D", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" | ", "\n", options0, "eT");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 3, " | ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "I", "s&7rRderH+xJ&b[", options0, 3, 1, ",17\u0007SqOe>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      String string0 = "i/yULq";
      boolean boolean1 = true;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, "i/yULq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-474), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("*", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-724), "*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1904), (Options) null, (-967), (-1904));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile(" | ", "");
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DWJ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('`');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 0, "cJ(^IZTLc;", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 1, 1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" ", "-", options0, (String) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string1 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 0, (-774), "   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 1, 6);
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      options0.addOptionGroup(optionGroup2);
      Options options2 = options0.addOption("", true, "org.apache.commons.cli.OptionValidator");
      OptionGroup optionGroup3 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 3, options2, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("XZOE=E*wH-MwxhARG^");
      helpFormatter0.renderWrappedText(stringBuffer0, 58, (-676), "org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VEbj:45+<", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('`');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "ULf*&\"";
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "ULf*&\"", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Options options2 = options0.addOption("arg", "usage: ", true, "\"");
      String string0 = "=;";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(10, "sB[tM`G}UjulMY& D", "=;", options2, "", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "sB[tM`G}UjulMY& D");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // sB[tM`G}UjulMY& D
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 0;
      int int1 = (-707);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-707), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t<";
      Options options0 = new Options();
      helpFormatter0.printHelp("t<", "org.apache.commons.cli.OptionValidator", options0, " ");
      int int0 = (-295);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-295), "\n", "arg", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "Fw";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fw");
      int int0 = 22;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(22, "--", "--", (Options) null, "#F>0P:&UDeGd hn+^P", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", true, "");
      OptionGroup optionGroup2 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 2, 3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.rtrim("\n");
      String string0 = "p2dY";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "S%\\_/]K=r'~_~3K";
      Option option0 = new Option("arg", "-", true, "S%_/]K=r'~_~3K");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      options0.addOption("", ">", true, "p2dY");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "p2dY", "", options1, "S%_/]K=r'~_~3K", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "";
      File file0 = MockFile.createTempFile("SoyTLx?ODV|", "wz8IA?Ts7W_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      helpFormatter0.printUsage(printWriter0, 4138, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "SoyTLx?ODV|", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("`", options0, true);
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptions();
      options2.addOption("", true, " ");
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.getArgName();
      helpFormatter0.defaultArgName = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.findWrapPos(" | ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" | ", (String) null, options0, "org.apache.commons.cli.OptionValidator");
      options0.addOption((String) null, "", true, (String) null);
      String string1 = "oECaQ#0=ZI";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'", "", options0, "oECaQ#0=ZI", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "* BeE@G");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "Illegal option name '";
      helpFormatter0.setLongOptPrefix("Illegal option name '");
      String string1 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos(" | ", 1, 0);
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 1;
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "org.apache.commons.cli.OptionValidato2";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", (String) null, options0, "org.apache.commons.cli.OptionValidato2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, "S%_/]K=r'~_~3K");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "wZu'~", "", options1, "S%_/]K=r'~_~3K", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "-", true, "arg");
      options1.addOption("", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(0, "usage: ", "arg", (Options) null, ">");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "");
      helpFormatter0.renderOptions(stringBuffer1, 74, options1, 1, 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "--");
      helpFormatter0.rtrim("LIVml");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos(" ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("arg", (String) null, options0, "org.apache.commons.cli.OptionValidator");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'", "", options0, "oECaQ#0=ZI", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("Illegal option name '");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      MockFile.createTempFile("-?]0G~0m[!'pAK*p", " | ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 2992;
      helpFormatter1.rtrim(" ");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1839, (-1), " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 2746, "");
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1163, " [ARG]", (String) null, options2, "usage: ", true);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1839, 3, "?bl\"y&y)0foY0+EQ4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 36, "[");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u6__F[nD[>,()0A7Y");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("u6__F[nD[>,()0A7Y");
      helpFormatter0.defaultDescPad = 83;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(608);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "X!V mbt";
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) "u6__F[nD[>,()0A7Y";
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("X!V mbt", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 180, 608, "it");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u6__F[nD[>,()0A7Y", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" | ", (String) null, options0, "org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'", "", options0, "oECaQ#0=ZI", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("The option '");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      Option option0 = new Option((String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(" | ", "The option '", options1, "dfH(^-Q%3M#Y!G<s6");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "usage: ", "arg", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('q');
      helpFormatter0.printWrapped(printWriter0, 1, (-2219), "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 97, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "p";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 17, options0, 17, 31);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      File file0 = MockFile.createTempFile("*v/0o=Y#iz<GcP)yU", "");
      MockFile mockFile0 = new MockFile(" | ", " | ");
      MockFile mockFile1 = new MockFile("--");
      MockFile.createTempFile("arg", "arg", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 58, 1, "' contains an illegal character : '");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      helpFormatter0.printUsage(printWriter0, 58, ",5(~CqW,/q", options0);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "' contains an illegal character : '", options0, "Tgd}K&o$t!(Jp&", true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      Option option0 = new Option("", true, "");
      options0.toString();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("PN1YGj", options1);
      helpFormatter1.getOptPrefix();
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append('Y');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3172), "p;w[[md'veAmE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = "?bl\"y&y)0foY0+EQ4";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1267, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasOption("#LSuNUT");
      Option option0 = new Option("", false, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("8^%^.jL%h\"UH~plN", "", options2, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-285);
      helpFormatter0.setLeftPadding((-285));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLeftPad = (-285);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      int int1 = (-626);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-626));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasOption("");
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("uhyEk'8o3[dYPJQ)p", "", options1, "sT!zJ?{N]:Clnl}\"(");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "uhyEk'8o3[dYPJQ)p", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 1839;
      int int1 = 1;
      String string0 = "?bl\"y&y)0foY0+EQ4";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1839, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4819;
      helpFormatter0.findWrapPos("~`^JI70TTe24dRJ)Y", (-1554), 4819);
      helpFormatter0.optionComparator = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("has already been selected: '", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("Illegal option name '");
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "z6cUa'f2`F/[", "|3u*ThmP@/{~hyq#g", (Options) null, "m!/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" :: ");
      int int0 = 0;
      int int1 = 70;
      int int2 = 44;
      helpFormatter0.findWrapPos("", 70, 44);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append('Q');
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3289), (-3289), "?bl\"y&y)0foY0+EQ4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("-");
      String string1 = null;
      Option option0 = new Option((String) null, false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string2 = "\\sT!zJ?{N]:Clnl}\"(";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionValidator", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2186;
      String string0 = " :: ";
      helpFormatter0.setLongOptPrefix(" :: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('2');
      helpFormatter0.printUsage(printWriter0, 580, " :: ");
      helpFormatter0.setLongOptSeparator(")~9?G ;ot@U:so7");
      helpFormatter0.setLongOptPrefix("CHOT>m]%{p");
      helpFormatter0.defaultOptPrefix = "CHOT>m]%{p";
      Options options0 = null;
      String string1 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1906), "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", (Options) null, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" :: ");
      String string0 = ")~9?G ;ot@U:so7";
      helpFormatter0.setLongOptSeparator(")~9?G ;ot@U:so7");
      String string1 = "CHOT>m]%{p";
      helpFormatter0.setLongOptPrefix("CHOT>m]%{p");
      helpFormatter0.defaultOptPrefix = "CHOT>m]%{p";
      helpFormatter0.defaultArgName = " ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2186, ")~9?G ;ot@U:so7", "CHOT>m]%{p", (Options) null, "CHOT>m]%{p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "", options0, "$HI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1839, 1, "?bl\"y&y)0foY0+EQ4");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("arg");
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption((String) null, true, " ");
      options2.getOption("-");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      options2.addOption("", "", false, "arg");
      Options options3 = options2.addOption("", "-", true, "org.apache.commons.cli.HelpFormatter$1");
      options3.toString();
      options3.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "=p tMB:F-<6.Pw66|";
      helpFormatter0.rtrim("=p tMB:F-<6.Pw66|");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append('#');
      String string1 = "";
      StringBuffer stringBuffer1 = new StringBuffer("");
      int int0 = (-2553);
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt(2356, ')');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(415);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("4yR,},l54sEcm", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4yR,},l54sEcm' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'C';
      charArray0[2] = '&';
      stringBuffer0.append('&');
      stringBuffer0.insert(0, charArray0);
      stringBuffer0.appendCodePoint(0);
      Options options0 = new Options();
      stringBuffer0.append((float) (-2144));
      helpFormatter0.setLeftPadding((-2144));
      int int0 = 379;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2144), options0, (-2144), 379);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      File file0 = MockFile.createTempFile("*v/0o=Y#iz<GcP)yU", "");
      MockFile mockFile0 = new MockFile(file0, " ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "usage: ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = 1;
      helpFormatter0.findWrapPos("usage: ", 1, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.printHelp("\n", (String) null, options0, "org.apache.commons.cli.OptionValidator");
      String string1 = "'";
      String string2 = "";
      boolean boolean0 = true;
      options0.addOption((String) null, "", true, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'", "", options0, "oECaQ#0=ZI", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.findWrapPos(" | ", 0, 0);
      File file0 = MockFile.createTempFile("*v/0o=Y#iz<GcP)yU", "-");
      MockFile mockFile0 = new MockFile(file0, "s4LZ;KMzP");
      try { 
        MockFile.createTempFile("usage: ", "*v/0o=Y#iz<GcP)yU", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 1, 0);
      File file0 = MockFile.createTempFile("*v/0o=Y#iz<GcP)yU", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "*v/0o=Y#iz<GcP)yU");
      options1.addOption(option0);
      options2.toString();
      helpFormatter0.printOptions(mockPrintWriter0, 2922, options2, 2922, 9);
      StringBuffer stringBuffer0 = new StringBuffer("Sa:nank");
      helpFormatter0.renderWrappedText(stringBuffer0, 2922, 30, "org.apache.commons.cli.Options");
      assertEquals(37, stringBuffer0.length());
      assertEquals("Sa:nankorg.apache.commons.cli.Options", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", " [ARG]", true, "arg");
      options2.addOption("", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(31, "CPCy", "", options3, "%E6jfN/~Is@t'O#o");
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?bl\"y&y)0foY0+EQ4");
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1426), (Options) null, 2712, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setWidth(906);
      helpFormatter0.setWidth(2026);
      helpFormatter0.rtrim("{)6[Y>LUOB7-cb");
      helpFormatter0.createPadding(779);
      assertEquals(2026, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultWidth = 44;
      helpFormatter0.setOptPrefix((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      int int0 = 1310;
      helpFormatter0.printWrapped(printWriter0, 1310, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "vH$C/)Es^4l";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "vH$C/)Es^4l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "?bl\"y&y)0foY0+EQ4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 427;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getOptPrefix();
      String string0 = "{5,Fb's+rmN/[[4Umv";
      helpFormatter0.setNewLine("{5,Fb's+rmN/[[4Umv");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "zh_eHB&765p3'/MJ3");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.addOption(option0);
      mockPrintWriter0.println((-4251.841));
      // Undeclared exception!
      try { 
        options1.addOption("iB4#\"", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'iB4#\"' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Yw!nC%G|Se");
      int int0 = (-1420);
      helpFormatter0.setWidth((-1420));
      String string0 = null;
      Options options0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1420), (String) null, (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1839, 1, "?bl\"y&y)0foY0+EQ4");
      assertEquals("arg?bl\"y&y)0foY0+EQ4", stringBuffer0.toString());
      
      helpFormatter0.defaultLeftPad = 1839;
      helpFormatter0.getSyntaxPrefix();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 362;
      helpFormatter0.defaultDescPad = 362;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(362);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setArgName("--");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setNewLine("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "`";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("uhyEk'8o3[dYPJQ)p", "", options1, "sT!zJ?{N]:Clnl}\"(");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "uhyEk'8o3[dYPJQ)p", options1, " | ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("   ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.setLongOptPrefix("YQE6#=oxq");
      helpFormatter0.defaultOptPrefix = "<";
      int int0 = 148;
      helpFormatter0.setLeftPadding(148);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      helpFormatter0.setLeftPadding(2159);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(148);
      helpFormatter0.setArgName("\n");
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1369));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
