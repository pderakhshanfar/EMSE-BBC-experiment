/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:18:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("yd>bF3$?%H");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r,>/<rMs+$");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 16, "> F");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-5032), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("\"");
      helpFormatter0.rtrim("\"");
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "$*.CJ&KPdwru^H/Fb");
      helpFormatter0.printHelp("\"", options2, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-415), "kMnY", "", options0, "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", (String) null, true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "usage: ");
      optionGroup1.addOption(option1);
      option1.setType("");
      optionGroup0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3016, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", false, "h.1<q4B`cVH&UF ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setType("");
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      mockPrintWriter0.flush();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "]Ft>{I|+h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "O5wxQA", true, " ");
      mockPrintWriter0.println((-1501));
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 9, options3, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "v)L(|e1/$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v)L(|e1/$");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 0;
      String string1 = "has already been selected: '";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1851);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", ">");
      Options options1 = options0.addOption(option0);
      option0.setType("%_It@NjmC");
      Options options2 = options1.addOption("arg", "", false, "tmn6g");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(".@e?dt5}~'", options2);
      // Undeclared exception!
      helpFormatter0.printHelp(".@e?dt5}~'", options3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-97));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("usage: ");
      helpFormatter0.setSyntaxPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "arg", (Options) null, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("L", (String) null, true, " ");
      int int0 = 8;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 490);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("5q#-g", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.helpOptions();
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 13, options2, 5266, 5266);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6pq?cOOj4-4x-", "i#5^KuUS@Mg#'ut 2", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("j^'P\"}U>r&Td", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "", false);
      mockPrintWriter0.println(0.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)3;
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (byte)66, options0, 2360, (-854));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Sa(\"F3))F9]0|<64q", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth((-871));
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2984, (Options) null, 2984, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2958), 2396);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 121;
      String string0 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, (String) null, true, "arg");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-687), options0, (-1), 29);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/Q(rcbw 2-<IIcuaG:");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, true, "w(_yW<j|qBs.@(><k");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3343, "X}zhqwDG", options2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.helpOptions();
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("q`5lJ1[c?0<7qh)&", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-267), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("%nkeJf.B:vz5", (String) null, options0, (String) null);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printOptions(printWriter0, 1080, options0, 64, 1908);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      int int1 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.findWrapPos("NsK[v:.@N6A^&L +h", 1, 1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "The addValue method is not/intended for client use. Subclasses should use the OddValueForP\"ocessing method izstead ");
      mockPrintWriter0.println(true);
      Option option0 = new Option("", "YIAo[IJgX^Vl", true, "");
      option0.getValues();
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1724), "The addValue method is not/intended for client use. Subclasses should use the OddValueForP\"ocessing method izstead ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 613, "--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(730, "line.separator", "line.separator", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 57);
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", false, "]");
      helpFormatter0.printHelp(9, "!6ZWp):mq", "arg", options1, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("KKEdd.JG$i9(=U$NP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "szswC.1WTY_vK-AJz", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 98, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.printHelp("p%-exZKB;Ms}!>", options0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-126), ";'<CmC~aii", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("bx, ");
      helpFormatter0.getNewLine();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, " ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.printHelp("p%-exZKB;Ms}!>", options0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1216, "p%-exZKB;Ms}!>", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "arg", "\n", options0, " ", false);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.rtrim("\n");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "fAIMf?|YDR)FX", ">", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.defaultDescPad = (-1651);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$6");
      Options options0 = new Options();
      String string0 = null;
      Options options1 = new Options();
      boolean boolean0 = true;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      String string2 = null;
      options1.addOption((String) null, true, "\n");
      String string3 = "<";
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1550, (String) null, "org.apache.commons.cli.ParseException", options1, 98, (-2240), "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-1091), "");
      helpFormatter1.rtrim("|*v7V <,Jn-/s>");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "<`|HGSx3", "", options0, 93, 10, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 63;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "<x$DR^^nJ)L-Q", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1820);
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, false, "?\".9YM*H5;s4u]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "[ option: ", "", options2, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      String string0 = "";
      int int0 = (-1029);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "z*2LU!{~LCy8D*^7=7", "qw7Tm", options0, (-1029), 10, "%=6]`}Quli4Y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("\n", options1);
      MockFile mockFile0 = new MockFile("", "4VDH$");
      File file0 = MockFile.createTempFile(",sU}BqM!tpDH.+Ty", "kwj", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwj");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "d^Bg'*_r?}o=fhpL", objectArray0);
      helpFormatter0.printHelp(printWriter0, 97, "org.apache.commons.cli.HelpFormatter$1", "' contains an illegal character : '", options1, 97, 97, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "`mYg'<O[.X/uO<)e4p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("p%-exZKB;Ms}!>", options0, true);
      String string0 = "Fg\\l'1|%";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "p%-exZKB;Ms}!>", "p%-exZKB;Ms}!>", options0, 0, 0, "Fgl'1|%");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "?\".9YM*H5;s4u]";
      options1.addOption((String) null, false, "?\".9YM*H5;s4u]");
      String string1 = "^bz[}OHwHAxSEWh?";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 15, "^bz[}OHwHAxSEWh?", "?\".9YM*H5;s4u]", options1, 4, 103, "^bz[}OHwHAxSEWh?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 77, options0, 77, 77);
      options0.getMatchingOptions("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "<", "", options0, 97, 97, (String) null, false);
      mockPrintWriter0.println(0.0F);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer(97);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      mockFile0.getAbsoluteFile();
      helpFormatter0.defaultLeftPad = (-3555);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "]";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 63, "]");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, "-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 64, (-962));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1851);
      helpFormatter0.getSyntaxPrefix();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("-");
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, false, "?\".9YM*H5;s4u]");
      int int0 = 3;
      MockFile mockFile0 = new MockFile("#wTR", "<Cl{b^O ;@l ${q(B+");
      helpFormatter0.printHelp("<Cl{b^O ;@l ${q(B+", options1, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      int int0 = 97;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 460, "", "qw7Tm", options0, 10, 44, ";lFvU<r", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = (-1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = new Option("", "}%0]0X\"_Y(", true, ".%zBIP+#/ez6aK6@@2A");
      Options options2 = options1.addOption(option0);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options3 = options2.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3206, "", "/+o/F", options3, (-1), 3206, "%hQ).j4P,_l44`R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, false, "?\".9YM*H5;s4u]");
      helpFormatter0.printHelp(15, "[ option: ", "", options2, (String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "icT3W%)c-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "qw7Tm", "", options0, 10, (-1), "qw7Tm");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      options0.addOption("", true, ">%\"?^cKw%DFrY");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      helpFormatter0.printHelp(3118, "kEhn.q)=h3|2p)?d", "]", options0, " ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1851);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim(" ");
      Option option0 = new Option("", ">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      Options options0 = new Options();
      options0.hasOption("/>xh>D^E");
      helpFormatter0.printHelp("t1=B\"grdE<", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1851);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      Option option0 = new Option("", ">");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "tmn6g");
      helpFormatter0.printHelp(".@e?dt5}~'", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "line.separator", options2, "--", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1056));
      String string0 = "{v.Vphm\\/:a9";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{v.Vphm/:a9", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "j5#d~`*E8:g3cvjsr");
      helpFormatter0.printHelp(" ", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 34, options0, 38, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "k", "org.apache.commons.cli.Util", options1, "   ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0, false);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "   ", "]PVpMYEH'?)_%L[kl=", options0, 0, 0, "vwq", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(16);
      helpFormatter0.renderOptions(stringBuffer0, 15, options2, 2, 31);
      Options options3 = new Options();
      String string0 = " ";
      Option option0 = null;
      try {
        option0 = new Option("aD@S]j*", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'aD@S]j*' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 34, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "]", false);
      mockPrintWriter0.println(0.0F);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(",iu", ",iu", options0, "|kf*'4[s\")F0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "Z0", "%5r%o{?/2/y^R[$Y", (Options) null, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "]", false);
      mockPrintWriter0.println(0.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ">%\"?^cKw%DFrY");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "Sz21@K&r*hkfo", "", options1, "");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ">%\"?^cKw%DFrY");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printHelp(printWriter0, 64, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "^<x'e@{{+ su( uX", options1, 3216, 64, "--", true);
      mockPrintWriter0.println((-1947.364F));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.printf(locale0, "y_Q-F@Sx|-kah", (Object[]) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      int int0 = (-498);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "+L^Ckl", options1, 73, (-498), "a,Sv10kSB", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      float float0 = 0.0F;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      mockPrintWriter0.print(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "IFE#N$oRhOnXe:", "[", options0, "IFE#N$oRhOnXe:");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "2/<fN#", true, "]");
      Option option0 = new Option((String) null, true, "2/<fN#");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ Options: [ short ", options3, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(",iu", ",iu", options0, "|kf*'4[s\")F0");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "]", false);
      mockPrintWriter0.println(0.0F);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3512, (Options) null, 3512, 3512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Z9C\"$BF<5^";
      options0.getMatchingOptions("arg");
      Option option0 = new Option("arg", "Z9C\"$BF<5^");
      option0.setLongOpt("-");
      option0.setValueSeparator('k');
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      options0.addOption("", true, "");
      helpFormatter0.findWrapPos("Z9C\"$BF<5^", (-2), 64);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2650);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1851, "k", "q8z0Bb>#", (Options) null, "q8z0Bb>#", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1830);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1830), "IFE#N$oRhOnXe:", "[", options0, "IFE#N$oRhOnXe:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      Option option0 = new Option("arg", "Z9C\"$BF<5^");
      option0.setValueSeparator('k');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1284));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1851, (String) null, "q8z0Bb>#", (Options) null, "k", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%Rh7bga/F";
      helpFormatter0.defaultArgName = "%Rh7bga/F";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(", ");
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("O:k");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultDescPad = 0;
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.getOptions();
      options2.addOptionGroup(optionGroup0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Z9C\"$BF<5^";
      options0.getMatchingOptions("arg");
      Option option0 = new Option("arg", "Z9C\"$BF<5^");
      option0.setValueSeparator('k');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      options0.addOption("", true, "");
      helpFormatter0.printHelp("&i", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptSeparator();
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      Options options0 = new Options();
      int int1 = 260;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, "SbiR.NHY(=:e", " ", options0, (-791), 260, "10L?3W!bgP", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, " ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "-");
      helpFormatter0.printHelp("2U", options2);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("--", "<}_}\"E");
      File file0 = MockFile.createTempFile("/UOFI>=*Q=:TXiJ!", "org.apache.commons.cli.Options", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.cli.Options";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 51, "arg");
      helpFormatter0.getDescPadding();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "arg", (Options) null, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, ",iu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.rtrim("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", (String) null, (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3220), 31, "0*2?o6RknJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth((-871));
      int int0 = (-1242);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2984, (Options) null, 2984, (-1242));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-791), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "-");
      Options options3 = options2.addOption((String) null, "cqCGC:&", false, "-rQF)u]ucI3W\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-539), (String) null, "X]_{o^&%ih", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("XT,Yb");
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      File file0 = MockFile.createTempFile("usage: ", "-");
      try { 
        MockFile.createTempFile("usage: ", "arg", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 13;
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 13, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "NO_ARGS_ALLOWED";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NO_ARGS_ALLOWED");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      Object[] objectArray0 = new Object[1];
      helpFormatter0.setLongOptSeparator("NO_ARGS_ALLOWED");
      objectArray0[0] = (Object) "-";
      mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.defaultLeftPad = 1669;
      int int0 = (-779);
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-431);
      mockPrintWriter1.print("");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1309, 0, "org.apache.commons.cli.Options");
      helpFormatter0.setDescPadding((-724));
      assertEquals((-724), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Z9C\"$BF<5^";
      options0.getMatchingOptions("arg");
      Option option0 = new Option("arg", "Z9C\"$BF<5^");
      option0.setValueSeparator('k');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 98, "%hQ).j4P,_l44`R", (String) null, options1, 98, 98, "]", false);
      mockPrintWriter0.println(0.0F);
      int int0 = 3512;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.rtrim((String) null);
      Options options1 = new Options();
      Option option0 = new Option("arg", "-");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption("", "/!f>?5!", true, "usage: ");
      helpFormatter0.printHelp("+3IZxqhVvb'H )", options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.getArgName();
      assertEquals("arg", string0);
      
      helpFormatter0.getDescPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter1.printHelp(" ] [ long ", "Zde%.e9<G0v03mb", options2, "Illegal option name '", false);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "KxRO*m/<x6-5Y72HO=";
      helpFormatter0.setLongOptPrefix("KxRO*m/<x6-5Y72HO=");
      String string1 = "_$`dS=`Ao|n";
      helpFormatter0.rtrim("_$`dS=`Ao|n");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultSyntaxPrefix = "KxRO*m/<x6-5Y72HO=";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("\n", options1);
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      helpFormatter0.getDescPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.print(1271.2);
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) " | ";
      mockPrintWriter0.print((double) 74);
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-191), "PUw|dClPy1+D2HK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1596, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "ai\\!hDW84CNX";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("iX92#|cs#", "ai!hDW84CNX", (Options) null, "iX92#|cs#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3901;
      helpFormatter0.createPadding(3901);
      String string0 = ".~|0hMc>wU|sJS+|\\?";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, ".~|0hMc>wU|sJS+|?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // .~|0hMc>wU|sJS+|?
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'mPV\"wN)y_SShq|K;2");
      helpFormatter0.setWidth((-1));
      helpFormatter0.setWidth((-1));
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(0);
      String string0 = "*g|?-E!O];";
      Options options0 = new Options();
      String string1 = "~<a";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("~<a", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~<a' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, 0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(114, "QpG", "QpG", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.ParseException";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", (Options) null, "iX92#|cs#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1851, "k", "q8z0Bb>#", (Options) null, "q8z0Bb>#", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINESE;
      mockPrintWriter0.print("   ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      int int0 = (-3798);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3798), (-3798), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
