/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:17:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(40, "+#8lT.+k(!iWh[Y8C", "+#8lT.+k(!iWh[Y8C", options0, "+#8lT.+k(!iWh[Y8C");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-619);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=f_", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.print((long) 3);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 3, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("--", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options1, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2030);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7ine.separaor", "7ine.separaor", options0, "7ine.separaor", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setDescPadding(24);
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", "", options0, "");
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 9, 9);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      // Undeclared exception!
      helpFormatter1.printHelp("   ", "-", options0, "");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.printHelp(3, "\n", "\n", options0, "-");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "{cCcooN\u0000 [9@N'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setWidth(63);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth((-499));
      optionGroup0.toString();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter2.setOptPrefix("arg");
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 40, 1029, "-");
      helpFormatter3.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-787);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", " ", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-682);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(18, "--", "", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 64, options0, 64, 2678);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ", ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("fT%`Y");
      helpFormatter0.printHelp(3, "\n", "\n", options0, "-");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("Hx", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", "arg", true, "Hx");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2180, "", options3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(9);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ysr&!<`Y8.{I`N+GjtD", "ysr&!<`Y8.{I`N+GjtD", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(9, "\n", "", options0, (String) null);
      helpFormatter1.renderOptions((StringBuffer) null, (-5228), options0, 9, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 1, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "~JbmN", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter1.printUsage(printWriter0, 625, "-", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter1.printHelp(74, "[", "--", options0, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "ZuqZ=OX yP=M", " ]", options0, " ]", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "line.separator");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("u_EU%q", options0, true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2439, (String) null, options0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "org.apache.commons.cli.OptionValidator", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-5*J?Khj3MS'";
      objectArray0[2] = (Object) stringBuffer0;
      mockPrintWriter0.printf("-5*J?Khj3MS'", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 53, "HS1uF/p", options0);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "!4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-674);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-674), 9, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      String string1 = "";
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2507), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Ne{IQd", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char char0 = '@';
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "A#l%M@FkGDw~NTrz", "Llxo~~IgT6D!", options0, 3, (-1382), "?S5p,SH3GR");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "-", "org.apache.commons.cli.HelpFormatter", options0, (-1381), (-1597), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(40);
      helpFormatter0.renderWrappedText(stringBuffer0, 40, 639, "%aVAK[0[W4I7\"f$)");
      File file0 = MockFile.createTempFile("usage: ", "X+/Nk~(9=C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 639, "line.separator", "%aVAK[0[W4I7\"f$)", options0, 530, 1445, "[");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("f1p%`Y");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", options0, "line.seplp11ator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 2214;
      helpFormatter0.defaultLeftPad = 251;
      helpFormatter0.printHelp("usage: ", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2214, (String) null, "   ", options0, 64, 1408, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "(r{d:h]M";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(r{d:h]M", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      int int0 = (-3236);
      helpFormatter0.printWrapped(printWriter1, 0, (-3236), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "!4", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter1 = mockPrintWriter1.printf("-", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "gj:X6/");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-846), "gj:X6/", "y`_", options1, (-1336), (-1336), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "", false, (String) null);
      helpFormatter1.printHelp(1104, "arg", "QR(~cKl", options1, "\"l_2TwMF_?Pn<'$%J\"g");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(9, "arg", "+#8lT.+k(!iWhnYC", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MQ");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 18, "MQ");
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter1 = mockPrintWriter1.printf((Locale) null, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 89, "39*mB1EyjwKT2Q]");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1876), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.append((CharSequence) null);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 35, "'", (String) null, options0, 35, 97, (String) null, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 727, "");
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("*{Xb<2+5", "", options0, "line.separator", false);
      helpFormatter1.printHelp(103, "usage: ", "arg", options1, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "arg", "zu^^T$(8e6X6z>|", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "--", "]", options0, "--");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1551), " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3900, "bTG#Nzo?$9EzVC,@|", "bTG#Nzo?$9EzVC,@|", (Options) null, "bTG#Nzo?$9EzVC,@|", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Dsk", "\n", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter1.printHelp(3, "--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Dd|G,g6M8g5nomc%ua");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "Dd|G,g6M8g5nomc%ua";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "a(`\u0000'GJdf%ST", (String) null, options0, 74, (-1309), "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      String string1 = "pV[khMcBn%'D[.";
      Options options0 = null;
      String string2 = "\\4u";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "pV[khMcBn%'D[.", (Options) null, "\u0004u", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("--", options0, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1184, "!0gN", "KRA", (Options) null, 3, 1184, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((String) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1636, "ib=xm!%lG)9rI8R+1c#", "7\"cE~[T/?}6j,LvrW~.", options1, 2966, (-1625), "ib=xm!%lG)9rI8R+1c#", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 3);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.setLongOptSeparator("bO17");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" /25^'jB0OFhp9E-");
      Options options0 = null;
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1618);
      int int0 = 5;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1618, 5, "");
      int int1 = 428;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 5, (Options) null, 428, 373);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 34;
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1290), "7{x<C=x9QN-R'R", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "6=1WL'q!HPa]", " ", options0, 631, 473, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.setOptPrefix("-");
      options0.addOptionGroup(optionGroup0);
      helpFormatter3.printHelp("R(;0X", "[6/|^N47", options0, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 3, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(3, "\n", "-", options0, "--");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 122;
      helpFormatter0.setWidth(122);
      String string0 = "5=8^X]XU|@(8:v";
      helpFormatter0.setSyntaxPrefix("5=8^X]XU|@(8:v");
      helpFormatter0.rtrim("E[?");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1428);
      options0.addOption("i", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "{cCcooN\u0000 [9@N'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 32, "usage: ", "nu&Z^2->. n=Ba", options1, 32, 40, "arg", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter2.setOptPrefix("arg");
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp("9&CP!Y", "usage: ", options2, "usage: ", true);
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 40, 1029, "-");
      helpFormatter4.getWidth();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options1 = options0.addOption("arg", false, "lg)");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("Gfy]nH", options1, true);
      helpFormatter1.createPadding(1765);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter3.renderOptions(stringBuffer0, 63, options0, 595, 34);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("-", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos(">", 1, (-2582));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 319;
      helpFormatter2.defaultWidth = 319;
      helpFormatter1.setDescPadding((-1158));
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption("", false, "Z(kL=G\"Cyl cFm");
      helpFormatter0.printHelp("br+", options2, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "imAZ&B>pf13_;4CP U");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("bKUJ_$FTXqnICLx", "--", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-315), " ", "imAZ&B>pf13_;4CP U", options2, 0, 1, "bKUJ_$FTXqnICLx", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("wD{E{oh", "AGB*C", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1029, "arg", "-", options0, 32, 1, "arg", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter2.setOptPrefix("--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter4.printHelp("arg", "", options1, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      helpFormatter1.printHelp("--", options0, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1787);
      stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "   ");
      helpFormatter0.printHelp(34, ";n`x&{:<L=", (String) null, options1, "\n");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, 64, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      helpFormatter1.printHelp(printWriter0, 74, "arg", "arg", options0, 9, 3, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((String) null, "-", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 1588, (-1551), " ");
      helpFormatter1.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "OP{l{c54yxzg1A#vJ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("OP{l{c54yxzg1A#vJ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      Option option0 = new Option("arg", "-", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", false, "L4m6v(&?[n");
      helpFormatter1.printHelp("L4m6v(&?[n", options0, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-984));
      int int0 = 34;
      String string0 = "";
      Options options0 = null;
      String string1 = "7{x<CH=x9QN-R'R";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1056), "7{x<CH=x9QN-R'R", "", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.printf(" ", objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) mockPrintWriter0;
      objectArray1[1] = (Object) "-";
      objectArray1[2] = (Object) locale0;
      objectArray1[3] = (Object) "-";
      objectArray1[4] = (Object) "-";
      objectArray1[5] = (Object) locale0;
      objectArray1[6] = (Object) mockPrintWriter0;
      objectArray1[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray1);
      printWriter0.println(']');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", false, "arg");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Options options2 = options1.addOption("", false, "@tLonKejIz");
      helpFormatter1.printHelp("br+", options2, true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F");
      helpFormatter1.getArgName();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "", options0, 74, (-2), "F", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1787);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append('\u0080');
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "<");
      helpFormatter0.printHelp("ix4Sm.<EL^RC", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer("*+Lq%Suv(qb uUbt");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1787, options1, 1787, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1621), "}", "0PX>1_I?#>!gPb@4#PC", (Options) null, "!L`YY:SaxKK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, 117, 1501);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, "");
      helpFormatter1.printHelp("arg", options1, false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-318), (String) null, "$JyKqJ_tlq`$tS7z#)", options0, 3170, 3170, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "!L`YY:SaxKK", "", (Options) null, "7{x<CH=x9QN-R'R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp(2813, "Z(kL=G\"Cyl cFm", " ", options1, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {Z(kL=G\"Cyl cFm=[ option: arg Z(kL=G\"Cyl cFm  :: - ]} ]");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("u/");
      helpFormatter0.printHelp("u/", "eAHjFvL(yms2uaM3^& ", options0, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Z(kL=\\G\"Cyl cFm";
      StringWriter stringWriter0 = new StringWriter(1787);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('x');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1787, "z~zEs;7T'cd,x3Ay^ci");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, "Z(kL=G\"Cyl cFm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "");
      Options options0 = new Options();
      int int0 = 0;
      int int1 = (-933);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, (-933));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "@K|sst>,PnGo", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 1501, options1, 1501, 1501);
      helpFormatter0.createPadding(1501);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 78, 78, "@K|sst>,PnGo");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1501, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter1.printHelp("arg", options1, false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "!L`YY:SaxKK", "", (Options) null, "7{x<CH=x9QN-R'R");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The option '");
      helpFormatter0.findWrapPos("zAbRro^", 74, 1);
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("The option '");
      assertEquals("The option '", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "-";
      helpFormatter0.setArgName("-");
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.printf(" ", objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) mockPrintWriter0;
      objectArray1[1] = (Object) "-";
      objectArray1[2] = (Object) locale0;
      objectArray1[3] = (Object) "-";
      objectArray1[4] = (Object) "-";
      objectArray1[5] = (Object) locale0;
      objectArray1[6] = (Object) mockPrintWriter0;
      objectArray1[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2813;
      String string0 = " | ";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "Z(kL=G\"Cyl cFm", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.clearValues();
      options1.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOptions();
      helpFormatter0.printHelp(2813, "Z(kL=G\"Cyl cFm", " | ", options2, "Z(kL=G\"Cyl cFm");
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '>';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 3, (-434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('x');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2767, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2767, ".i>");
      helpFormatter0.setLongOptSeparator("Hx!00E");
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("Hx!00E", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("}5:l$3k6,`_sqGcA^,");
      assertEquals("}5:l$3k6,`_sqGcA^,", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vWtC'Kas#i~";
      helpFormatter0.setSyntaxPrefix("vWtC'Kas#i~");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("vWtC'Kas#i~", 2354, 0);
      helpFormatter0.setSyntaxPrefix("line.separator");
      int int0 = 3593;
      helpFormatter0.setLeftPadding(3593);
      File file0 = MockFile.createTempFile("arg", ".&BMxoZdv^");
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".ZvVe[3zWATV)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-724), ".ZvVe[3zWATV)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Options options0 = new Options();
      options0.hasShortOption("--");
      helpFormatter0.printHelp(1120, "arg", "arg", options0, (String) null);
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      int int0 = 1908;
      helpFormatter0.findWrapPos(" ", 1908, 1908);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option", "us_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // us_
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "EfBA";
      Options options0 = new Options();
      helpFormatter0.printHelp("EfBA", options0);
      try { 
        MockURI.URI(" ] [ long ", "EfBA", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0:  ] [ long :EfBA#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptPrefix("We'(#Xs9{x41Wh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('x');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2767, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2767, ".i>");
      helpFormatter0.setLongOptSeparator("Hx!00E");
      assertEquals("Hx!00E", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".mXz}JFh{:~O( ,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-25), ".mXz}JFh{:~O( ,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-2);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3127;
      helpFormatter0.setLeftPadding(3127);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1552));
      int int0 = (-2206);
      String string0 = ".:t&JU-M`d\\ogrUR4";
      String string1 = " ";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("5");
      helpFormatter0.setNewLine("5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("5");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-1418);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "E45`Pq%.sNg";
      // Undeclared exception!
      try { 
        options0.addOption("--", "-", false, "E45`Pq%.sNg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setArgName("line.separator");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-3957);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3957), 1471, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultNewLine = "usage: ";
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      assertEquals("org.apache.commons.cli.Options", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      assertEquals(3, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("\"|sSG(9ow\"r2_^Z(5``");
      MockFile mockFile0 = new MockFile("arg", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      mockPrintWriter0.append(':');
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = (-3181);
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", "", true, "arg");
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
