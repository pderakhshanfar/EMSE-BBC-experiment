/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:19:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.getWidth();
      helpFormatter0.findWrapPos("\n", 0, (-419));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1581, "]", "]", (Options) null, "org.apache.commons.cli.Option", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "/6f";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.addOption("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "\n", options0, 1, 1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "\n", options0, 1, 1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "wLE";
      helpFormatter0.setLongOptPrefix("wLE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "\n", options0, 1, 1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      File file0 = MockFile.createTempFile("Cannot add value, list full.", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      optionGroup0.setRequired(true);
      options1.addOption("arg", true, "");
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2724, "QA(Ea2L", options2);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 65, "", "Cannot add value, list full.", options0, 846, 2724, "noL\"1S#,Q\"yIGvr:k", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-3469);
      helpFormatter0.defaultDescPad = (-3469);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.findWrapPos("", 3, (-1));
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("B", "@w:@EPC4{=3w^s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @w:@EPC4{=3w^s
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-861);
      helpFormatter0.setWidth((-861));
      helpFormatter0.defaultNewLine = "*_N~f>e)a6 q-tE";
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      String string1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('N');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A CloneNotSupportedException was thrown: ");
      Option option0 = new Option("arg", "\n", true, "T<P|',(`M/9pT9z4");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 17, options2, 2629, 17);
      Option option1 = null;
      try {
        option1 = new Option("-", (String) null, true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = ",K^i<2K%";
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, ",K^i<2K%", ",K^i<2K%", options0, "");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 899;
      helpFormatter0.createPadding(899);
      helpFormatter0.defaultDescPad = 46;
      String string0 = helpFormatter0.createPadding(1362);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 899, (-2952), string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "   ", "   ", options0, 9, 37, "! d", true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "*;iyR7mFX", "   ", (Options) null, (-2), (-2180), "*;iyR7mFX");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "   ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(Q%PVezobYJ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.addOption((String) null, true, "usage: ");
      int int0 = 3156;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3156, "[", (String) null, options0, 3156, (-3324), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "\n");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 13, options1, 3733, 3733);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 200, "e@lH<iW)QI)?YmH`3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option0 = new Option("", "arg", false, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("Wy.(|jgfe!8QU", options0);
      StringWriter stringWriter0 = new StringWriter();
      options0.hasShortOption(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-11), "   ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")", ")", options0, ")", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-252);
      helpFormatter0.setDescPadding((-1048));
      helpFormatter0.defaultLongOptPrefix = "YfPlk&2Be";
      helpFormatter0.defaultLeftPad = (-252);
      helpFormatter0.defaultSyntaxPrefix = "CjTwnp;h\"_\"Wc%x";
      helpFormatter0.setLeftPadding((-1048));
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("", "7z+5n?g+", false, "usage: ");
      Options options1 = options0.addOption(option0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      option0.setType("");
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 32, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-874));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vM!N= 27PFf/TID^h_", "org.apache.commons.cli.OptionGroup", options0, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "mw`'\\vp1_[0]aS";
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1484), options0, (-1153), (-1153));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      String string0 = null;
      Option option0 = new Option((String) null, "--", false, " ");
      option0.clearValues();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(80, "arg", "-", (Options) null, "=QCiY]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "   ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printHelp(printWriter0, 63, "   ", (String) null, options0, 63, 26, "[ option: ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 594, "-", "k", options0, 594, 32, (String) null, true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "#RWV)D", false, "7tngA+");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("3@;VmYe/", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      options0.hasShortOption("[ option: ");
      stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "rB", options2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", true, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", true, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, " ", options1);
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options1, 74, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("rB", "--", false, "\n");
      Options options1 = options0.addOption(option0);
      options1.getOptionGroups();
      helpFormatter0.printHelp("rB", (String) null, options1, "=SM/p>7AwVtZ8<");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "   ", "   ", options0, 26, 63, "--", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--", false, " ");
      option0.clearValues();
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = options0.addOption("", "-", false, "--");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3197), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("rB", "--", false, "\n");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~/+[", "~/+[", (Options) null, "rB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--", false, " ");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("usage: ", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ]", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, " ]", " ]", options0, 44, 46, "hpm", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 46, "hpm");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption((String) null, true, "");
      Option option0 = new Option("", "Q\"6>=\"@Ay-Y@9iRux6", true, "J-g\"\"G");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%H>*Lw>^WMv", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("rB", true, "=M/p>7AwVtZ8<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options2 = options0.addOption("arg", "!2BC{x+gd", true, "!2BC{x+gd");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2383, "org.apache.commons.cli.HelpFormatter", "rB", options2, 2383, 63, "+krAmpY=Wp4QZ)", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "arg", "arg", options0, 689, 2383, "arg", false);
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(mockPrintWriter0, 64, options0, 518, 506);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 563, "");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 1, options0, 1, 19);
      helpFormatter0.renderWrappedText(stringBuffer2, 563, (-7), "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print('7');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-284), "\n", "P-!>[pZxH;Vz", (Options) null, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "");
      MockFile mockFile0 = new MockFile("L*(J Yx9}(", "\n");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "L*(J Yx9}(");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3039), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 7, "' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ]", false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      String string1 = "arg";
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1256, options0, 2009, 1256);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1256, (-1297), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1048));
      helpFormatter0.defaultLongOptPrefix = "YfPlk&2Be";
      helpFormatter0.defaultLeftPad = (-252);
      helpFormatter0.defaultSyntaxPrefix = "CjTwnp;h\"_\"Wc%x";
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("CjTwnp;h\"_\"Wc%x", "", options0, "vPz &V$iA");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1066, "rB", "org.apache.commons.cli.HelpFormatter", options0, 63, 3, "{", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "=M/p>7AwVtZ8<";
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", true, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", true, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY%:p5J2d(P");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", true, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "F.0", false, "d@}R7LW~&pQ_");
      options1.addOption(option0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Z+T<k^QE-)xV)/Rp,Y`", (-2956), 1773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "F.0", options0, 0, 682, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ]", false);
      mockFileOutputStream0.write(3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3899, "Dmf", "", options0, 689, 74, " ]");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = (-1);
      stringBuffer0.reverse();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", ">[uJ{&", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (int) (byte) (-12), "Da4", "s}DCVN'!PT$5", options1, (int) (byte)0, (int) (byte)118, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ]", false);
      mockFileOutputStream0.write(3);
      Option option0 = new Option("", " ]", true, "arg");
      option0.clearValues();
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print('=');
      Options options0 = new Options();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ]", false);
      mockFileOutputStream0.write(3);
      helpFormatter0.printHelp(9, "Illegal option name '", "Illegal option name '", options0, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, (-2856), "2'BbO1*@U4^`6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      String string0 = "";
      String string1 = "2'/]RYY5J2d(NP";
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      options2.addOption((String) null, "", false, "=M/p>7AwVtZ8<");
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "--";
      helpFormatter1.rtrim("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "AhG@kr/", options0, "j%ees{!PbHu&~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        MockURI.create("usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 6: usage: 
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 414, "<", "<", options1, 1898, 278, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("rB", "--", false, "\n");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("op]w~BMuyj&-ZYUH", options3);
      helpFormatter0.rtrim("[");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) stringWriter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "op]w~BMuyj&-ZYUH";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ")k(@=@M", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2146, "A CloneNotSupportedException was thrown: ", "", options2, (-826), 3289, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.defaultDescPad = (-2040);
      helpFormatter0.setWidth(294);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.createPadding(0);
      mockPrintWriter1.append((CharSequence) "");
      mockPrintWriter1.print('e');
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 430, "org.apache.commons.cli.AlreadySelectedException", options0);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 430, "M!@YQto-", "M!@YQto-", options0, 430, 693, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      helpFormatter0.setArgName("2'/]RYY5J2d(NP");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(2111);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "j%ees{!PbHu&~", options0, " ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp("6Zmp", "", options1, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q])zV,(*cz5", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      File file0 = MockFile.createTempFile("Lv6..!'2KHNnlIOv+", "fn`(YZ4OOgPT@AutH");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      mockFileOutputStream1.write(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), " | ", " | ", options1, (-2), 934, "%", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("-", ")\"Gi7?x;=<", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = (-115);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.defaultDescPad = 3;
      int int0 = 294;
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "--", options0, " [ARG]", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int1 = 66;
      String string0 = "H";
      helpFormatter0.printHelp(66, " [ARG]", "H", options0, " [ARG]", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1724), (-1724), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY5J2d(NP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("MS]H.H~wV0y en}?1]+");
      helpFormatter1.printHelp(74, "--", "", options0, "dP");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "\n");
      mockPrintWriter0.print('A');
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.AlreadySelectedException", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.defaultDescPad = (-2040);
      helpFormatter0.setWidth(294);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 294, "[", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, (-3067), 34, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 294;
      Options options0 = new Options();
      String string0 = " [ARG]";
      helpFormatter0.printHelp(" [ARG]", "sGb=?5#N1&_^/~", options0, "sGb=?5#N1&_^/~", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = "org.apache.commons.cli.Option";
      String string2 = ",J$V,";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "bLT%LL-^$4K", "--", options0, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "\n");
      mockPrintWriter0.print('A');
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, (String) null, "A CloneNotSupportedException was thrown: ", options0, 91, 3, "'", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "op]w~BMuyj&-ZYUH";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "rB";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-277), (-277), "rB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", false, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", false, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("MS]H.H~wV0y en}?1]+");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 101, (Options) null, 101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2040);
      helpFormatter0.setWidth((-2040));
      Options options0 = new Options();
      String string0 = "W3S$;u;R";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/T%ER", "usage: ", options0, "W3S$;u;R", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setArgName("");
      helpFormatter0.findWrapPos("", (-1440), 2182);
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.defaultDescPad = 3;
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "--", options0, " [ARG]", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp(64, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.Option", options0, ",J$V,", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 294, 64, "org.apache.commons.cli.Option");
      mockFileOutputStream0.write(1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "--", " ", options0, 13, 294, "knW", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      int int0 = 1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 1, "");
      String string1 = ">";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string2 = "|XXa\\|;f.v0";
      boolean boolean0 = false;
      options0.getMatchingOptions("ObpBVb>");
      Option option0 = null;
      try {
        option0 = new Option("|XXa|;f.v0", false, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|XXa|;f.v0' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("rB", true, "=M/p>7AwVtZ8<");
      Option option0 = new Option("", "=M/p>7AwVtZ8<", true, "2'/]RYY5J2d(NP");
      options2.addOption(option0);
      helpFormatter0.printHelp("rB", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      File file0 = MockFile.createTempFile("Cannot add value, list full.", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2724, "Cannot add value, list full.", options0);
      helpFormatter0.rtrim("3}-@^Yr(");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print('=');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, "=t&T/a(7M0S*8H<E+b", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1048));
      helpFormatter0.defaultLongOptPrefix = "YfPlk&2Be";
      helpFormatter0.defaultLeftPad = (-252);
      helpFormatter0.defaultSyntaxPrefix = "CjTwnp;h\"_\"Wc%x";
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("--");
      String string0 = "";
      Options options1 = options0.addOption("H", "", true, "=ylKy2,pq");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YfPlk&2Be", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-252);
      helpFormatter0.setDescPadding((-1048));
      helpFormatter0.defaultLongOptPrefix = "YfPlk&2Be";
      helpFormatter0.defaultLeftPad = (-252);
      helpFormatter0.defaultSyntaxPrefix = "CjTwnp;h\"_\"Wc%x";
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "";
      String string1 = "\\=ylKy2,pq";
      Options options1 = options0.addOption("H", "", true, "=ylKy2,pq");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YfPlk&2Be", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/VN*)GJ#/7sc");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.setSyntaxPrefix("/VN*)GJ#/7sc");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "g4", false, "");
      options1.hasShortOption(">");
      helpFormatter0.printUsage(printWriter0, 3684, "0T7x{lm", options1);
      helpFormatter0.getLeftPadding();
      int int0 = 3483;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1985), "2`8{qzC)r+ag<", "g4", options1, (-1985), 3483, "/VN*)GJ#/7sc", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLongOptPrefix("MM^|YC^Pi>B)|<#K/f");
      String string0 = "[";
      helpFormatter0.setLongOptSeparator("[");
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setNewLine("");
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "[";
      String string1 = "vxP";
      StringBuffer stringBuffer0 = new StringBuffer("vxP");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("vxP", "arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption(" ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(37);
      helpFormatter0.defaultLongOptPrefix = "--";
      int int0 = 3384;
      int int1 = 74;
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setWidth(3384);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.setLongOptSeparator("G4iDXN");
      helpFormatter0.setSyntaxPrefix(" ");
      int int0 = (-2269);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2269));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1335);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.renderWrappedText(stringBuffer0, 917, 1, "usage: ");
      int int0 = 31;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "", true, "Zu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@3US`7`:;UP");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{L@x", (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 430, "", "F.0", options1, (-2956), (-2956), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("D|bx_Q?");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "arg");
      Option option0 = new Option((String) null, "[", false, " :: ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options3, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 4781, 0, "@'(M?4SP&<m(7-");
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      int int0 = (-2040);
      helpFormatter0.defaultDescPad = (-2040);
      int int1 = 294;
      helpFormatter0.setWidth(294);
      String string0 = "usage: ";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, " [ARG]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", " [ARG]", options0, "Illegal option name '", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8'#Ux~!:&t&Dr", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp(64, "Illegal option name '", "8'#Ux~!:&t&Dr", options0, "[1?r", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 294, 294, "org.apache.commons.cli.Option");
      int int0 = 13;
      mockFileOutputStream0.write(291);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "[1?r", "FWp4m@pl=L(5zJ<6;", options1, 294, 294, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      String string0 = " ]";
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      mockPrintWriter0.write(charArray0);
      Options options0 = null;
      int int0 = 989;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, " ]", " ]", (Options) null, 0, 989, " ]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"@Mk,m%0=";
      int int0 = (-871);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('l');
      helpFormatter0.setLongOptPrefix("\"@Mk,m%0=");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt((-802));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -802
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = "k)!};P,e2wa /NZT";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "k)!};P,e2wa /NZT");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print('=');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "=t&T/a(7M0S*8H<E+b", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      boolean boolean0 = false;
      helpFormatter0.printHelp("B{eR3UMdOR", "arg", options0, "B{eR3UMdOR", false);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("2(;H+e9.<;");
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      Option option0 = new Option("", "", false, "2(;H+e9.<;");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("5`\u0001G<wFe+FGP]M^Md");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth((-3704));
      helpFormatter0.setLongOptSeparator("");
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(")tU_l{3M-Z", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      helpFormatter0.printWrapped(printWriter0, 44, (-2301), "");
      PrintWriter printWriter1 = mockPrintWriter0.printf("\n", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "rr\"[t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // rr\"[t
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 301;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "<", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
