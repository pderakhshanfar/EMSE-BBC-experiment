/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:13:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 7, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "\n");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", "@T:&!sC2}`{?}2SW");
      options0.addOption(option0);
      helpFormatter0.printHelp("@T:&!sC2}`{?}2SW", " ] [ long ", options0, " ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setOptionalArg(true);
      helpFormatter0.setLeftPadding((-2));
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1608, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("_F~S+Q=uK");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("c", "X4ot%T4'QGk", true, "arg");
      Option option0 = new Option("", "usage: ", false, "3i(Xl");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "qPYD_c3%MG%*hc!");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "_F~S+Q=uK", "c", options4, 0, 63, "d'&R\"S21r&bfOj");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      options0.addOption("arg", "-", true, "arg");
      helpFormatter0.printHelp("-", "-", options0, "-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Z5fFet..N", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int int0 = 45;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("O$YV!@OM|f{r00E7", true, "@9{[2Kx}yG7zCDj9B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'O$YV!@OM|f{r00E7' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 98;
      helpFormatter0.defaultArgName = "--";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(10);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1976), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultNewLine = "ur7|-i%";
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.getOption("usage: ");
      helpFormatter0.printHelp("!K!'^.WT>!-[3", options0, false);
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "-", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-708), "-&3i1ikg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, " ");
      option0.setArgName((String) null);
      option0.addValueForProcessing("usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("\")GWY{ri#:?k", "\")GWY{ri#:?k", options0, "");
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) null, (-483), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-708), "-&3i1ikg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      int int0 = 3499;
      String string0 = "D<z";
      boolean boolean0 = true;
      String string1 = "-!wf{h)~MO";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      int int1 = 2;
      String string2 = "XH 0=jW6&'pOEqN&";
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, (-2), options0, 3499, 3499);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Options options1 = options0.addOption("", "", true, "--");
      Option option0 = new Option("arg", "usage: ", true, ">");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, ">", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("!W t)@_ftKyAi'F");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.forLanguageTag("arg");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintWriter1;
      helpFormatter0.defaultOptPrefix = "!W t)@_ftKyAi'F";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "/)(fq/Yq{)2<r tScT", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 75, (-4819), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apachecommons.cli.HelpFormatter");
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(48, "d.8*]|Y:4U\"<\\T1", "org.apache.commons.cli.HelpFormatter", (Options) null, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3063, "-", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.createPadding(3063);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "m");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3107, "^s+PXhJ>%)", "gx,RGq", (Options) null, 31, 31, "^s+PXhJ>%)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("K|-;=4qn$D~: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.defaultLongOptPrefix = " :: ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "3", "XH 0=jW6&'pOEqN&", options0, 32, 9, "", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fbe");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.AlreadySelectedException", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3491, "o}`B?hPksU", (String) null, options0, 3, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3499, "D<z", "/-!wf{h)~MO|", options1, (-2), 3, "XH 0=jW6&'pOEqN&", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", " ", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1918);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      int int0 = 43;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("+TJDPK$", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+TJDPK$' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("?", false, "usage: ");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3079, (String) null, options1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3079, "-", "arg", options2, 3079, 3079, "line.separator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      Options options0 = new Options();
      options0.hasLongOption("cmdLineSyntax not provided");
      options0.hasShortOption(" | ");
      helpFormatter0.printHelp(2088, "J~Llvc.$oF7d;Bt", "--", options0, "", true);
      helpFormatter0.setLeftPadding((-2439));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1925, (-1), "Nme8bh5>2LI5hc");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1048), options0, 34, 5360);
      mockPrintWriter0.append((CharSequence) null);
      options0.hasLongOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "arg", options0, 1925, 1925, "usage: ", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", "Nme8bh5>2LI5hc", options0, "Nme8bh5>2LI5hc", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WLo^b");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "arg", options0, "];K{:jbH} /Y}^");
      PrintWriter printWriter0 = mockPrintWriter0.append('D');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "eaiM", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 3332, "usage: ");
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("m", "^^';?^4?y6Su<L", options0, "nCA2");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;I*RjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 71;
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      String string0 = "aZ(BW";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xNd#{;I*RjP=>+", "[", options0, "aZ(BW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("'3(nN", "has already been selected: '", options0, "'3(nN");
      helpFormatter0.getOptionComparator();
      options0.getMatchingOptions("");
      helpFormatter0.setWidth(3677);
      PrintWriter printWriter0 = mockPrintWriter0.append('p');
      helpFormatter0.printUsage(printWriter0, 3677, "", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "L89U";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "L89U", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WLo^b");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "%zT;~WTp&Mr<6E?", options0, "];K{:jbH} /Y}^");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 2, "\n");
      helpFormatter1.setWidth(3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("U:.P;x09A]=cM", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 1014;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1014, "Nme8bh5>2LI5hc", "", options0, (-1), (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[ Options: [ short ", "\n", options0, "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 16, (-3192), ".RXmvRMRal# ~G.Q");
      helpFormatter1.setWidth((-43));
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ne8bh5>LI5hc");
      Options options0 = new Options();
      String string0 = "a!ly+)uDBRH.X[Vz";
      String string1 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string2 = "arg";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1100, "--", "arg", options0, 197, 53, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Option option0 = new Option("arg", "\n", true, " ");
      Options options0 = new Options();
      options0.addOption(option0);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(115);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(10, "|U^Cyp k{j.b'Dv F", "arg", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "k;4Hmw9e", options0, 3, 1, "i?)D}'", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5726), "\n", "EJ<iQqO@Oy9{;=&h_}F", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1797));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.addOption("arg", true, "!(=*~nY");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W@8E7;(csl", (String) null, options0, "W@8E7;(csl");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      String string0 = "<";
      Options options0 = new Options();
      String string1 = "";
      options0.hasLongOption("Nme8bh5>2LI5hc");
      String string2 = null;
      int int0 = 41;
      int int1 = (-808);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4573), (String) null, (String) null, options0, 41, (-808), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1726), 341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 104, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(271);
      helpFormatter0.printHelp("                                                                                                                                                                                                                                                                               ", (String) null, options1, "                                                                                                                                                                                                                                                                               ", true);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W^Pc7h", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 37, 50, "a!ly+)uDBRH.X[Vz");
      helpFormatter0.setWidth(28);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "dJ@");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("yJ}Mm ", "yJ}Mm ", options0, "+NG}$*U_t8(88zGQo}.");
      helpFormatter0.printHelp("`YBq@>Be)IGE3:^|", options1, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = null;
      String string0 = ".c_B]C?fXHz<{)U";
      helpFormatter0.setSyntaxPrefix(".c_B]C?fXHz<{)U");
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "M";
      String string2 = "YxL<T9";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 63, (Options) null, 64, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      Options options0 = new Options();
      String string0 = "";
      options0.hasLongOption("cmdLineSyntax not provided");
      options0.hasShortOption(" | ");
      String string1 = "jht+P1jyW";
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2088, "", "", options0, 2088, 2088, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "-");
      helpFormatter0.setWidth(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v", "\"", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
      helpFormatter0.setArgName("Z>K");
      helpFormatter0.setLeftPadding(1016);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("9=rwF", string0, options0, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      options2.addOption("", true, "usage: ");
      String string1 = "+NG}$*U_t8(88zGQo}.";
      String string2 = "+MKp+,-A8";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<i[]^Nh+rx^f{A", "<i[]^Nh+rx^f{A", options2, "+MKp+,-A8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2088;
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
      helpFormatter0.setArgName("Z>K");
      helpFormatter0.setLeftPadding(1016);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("\n", options1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1016, "Z>K", "@h'(Gx*),K=$", options0, 1016, 158, "", false);
      helpFormatter0.printHelp("l2\"x!Q%qMSoV#", options0, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 3332, "");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer(1807);
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 3332, "");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter1.getLongOptSeparator();
      int int0 = 31;
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 74;
      boolean boolean0 = true;
      Options options1 = options0.addOption("m", "-", true, " ");
      // Undeclared exception!
      try { 
        options1.addOption("[", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Z..vrsM'zl", 1593, 1593);
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("--", "arg", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "(", false, "-");
      options1.hasLongOption("");
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2986), "<", "*eYA", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, 1014, " ");
      helpFormatter0.setWidth((-3551));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 3332, "");
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 16, options0, 16, 16);
      MockFile mockFile1 = new MockFile("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 13, 9, "s");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      int int0 = 5;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "a!ly+)uDBRH.X[Vz", "", options1, "b:9^L.}+N*hl'r");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
      helpFormatter0.setArgName("Z>K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", string0, options0, " jt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(1);
      helpFormatter0.printHelp("m", " ", options0, " ", true);
      helpFormatter0.setArgName("l%,C2f\"e_lD");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), " ", "W At@+\"M", options1, 69, 2924, "`40|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 370, 64, " ");
      helpFormatter0.setWidth(33);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 30, "UcThA!MMH_oIK+kON%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println("k");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "-");
      helpFormatter1.setWidth(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      int int0 = 1925;
      String string0 = "<";
      Options options0 = new Options();
      options0.hasLongOption("");
      mockPrintWriter0.println((String) null);
      options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.createPadding(74);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Wr`C`r\"dLDI}", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      String string1 = ", ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-294), "Z>K", "", options1, 2, (-2), ", ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2075);
      helpFormatter0.setLongOptSeparator("Z>K");
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth(2075);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockFile mockFile1 = new MockFile("' was specified but an option from this group ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 3332;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 1999, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.addOption("", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V:S##MW");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2986), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options1 = options0.addOption("", "", false, (String) null);
      helpFormatter0.printHelp(111, "m", "org.apache.commons.cli.Option", options1, "org.apache.commons.cli.Option", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("m");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "~?8zwhqDE", (Options) null, (-1764), 111, "=#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "-");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "UcThA!MMH_oIK+kON%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", true, "--");
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2986), "", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 31;
      int int1 = (-826);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, (Options) null, 31, (-826));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      helpFormatter0.setSyntaxPrefix("\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, (-2), options1, 90, 90);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
      helpFormatter0.setArgName("Z>K");
      helpFormatter0.setLeftPadding(90);
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 626, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("xNd#{;IRjP=>+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "-");
      helpFormatter1.setWidth(1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1406, "UcThA!MMH_oIK+kON%");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.printHelp(1925, " ", ">w+", options1, "-");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 5473, options1, 64, 13);
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Options");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 114, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2Lw5hc");
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, "usage: ", true);
      int int0 = (-17);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-17), "org.apache.commons.cli.OptionGroup", "Nme8bh5>2Lw5hc", options1, "Nme8bh5>2Lw5hc", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      int int0 = 0;
      helpFormatter0.printHelp("yJ}Mm ", "yJ}Mm ", options0, "+NG}$*U_t8(88zGQo}.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-2997), options1, 74, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options3 = options2.addOption("", "-", false, "--");
      Option option0 = new Option("", "arg", true, "arg");
      option0.setRequired(true);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(" [ARG]", options4);
      Options options5 = options1.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("Zt<", options5);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("<", options4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 3332, "");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) locale0;
      locale0.clone();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1087), " [ARG]", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, "usage: ", true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", "Nme8bh5>2LI5hc", options1, "Nme8bh5>2LI5hc", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 30, 9, "' was specified but an option from this group ");
      StringBuffer stringBuffer1 = new StringBuffer(127);
      helpFormatter0.renderWrappedText(stringBuffer1, 440, 0, "' was specified but an option from this group ");
      String string0 = " :: ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, 10, options1, 10, 0);
      helpFormatter0.setWidth(74);
      helpFormatter0.printHelp(74, "jv\"zIt", "org.apache.commons.cli.HelpFormatter", options1, "jv\"zIt", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1925, "", ">w+", options1, "c]Nn;!70wk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";,RiG(|8+\\2hq]M";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(";,RiG(|8+\u0002hq]M", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, (-2), options1, 90, 90);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
      helpFormatter0.setArgName("Z>K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 90, string0, "c&:FB,J-v#r$3A", options0, (-2), 90, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options3 = options2.addOption("", "-", false, "--");
      Option option0 = new Option("", "arg", true, "arg");
      option0.setRequired(true);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(" [ARG]", options4);
      Options options5 = new Options();
      helpFormatter0.printHelp("Zt<", options5);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(547);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, 10, options1, 10, 0);
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setWidth(74);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options3 = options2.addOption("", "-", false, "--");
      Option option0 = new Option("", "arg", true, "arg");
      option0.setRequired(true);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(" [ARG]", options4);
      Options options5 = new Options();
      helpFormatter0.printHelp("Zt<", options5);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("<", options4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, "line.separator");
      helpFormatter0.rtrim("org.apache.commons.cli.Options");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, "org.apache.commons.cli.Options", options0, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options1, (-614), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-364), (-364), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
      String string1 = "[ Options: [ short ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = ";XE4";
      Option option0 = null;
      try {
        option0 = new Option(";XE4", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';XE4' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, (String) null, true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", "Nme8bh5>2LI5hc", options1, "Nme8bh5>2LI5hc", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      int int0 = (-1);
      String string0 = null;
      String string1 = ":LA\"K)%gA<|C-&fw!LO";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "JHK)\"u|9";
      Options options0 = new Options();
      String string1 = "BrEcCe?}z*";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("BrEcCe?}z*", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BrEcCe?}z*' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = (-344);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-344), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "']^<7k";
      helpFormatter0.setLongOptPrefix("']^<7k");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", "", true, "}.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3545));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 3660;
      String string0 = "\\\\_zxR#B&5\"<O**";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 3660, "\\_zxR#B&5\"<O**");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setSyntaxPrefix(".c_B]C?fXHz<{)U");
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 0;
      Options options0 = new Options();
      String string0 = "<";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("<", "usage: ", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option(",|Ee8y7,", ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',|Ee8y7,' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "j=x");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j=x
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-2997);
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, true, (String) null);
      int int1 = 0;
      helpFormatter0.printHelp("yJ}Mm ", "yJ}Mm ", options0, "+NG}$*U_t8(88zGQo}.");
      Option option0 = null;
      try {
        option0 = new Option("@XF3[am8)q%&m4", "--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@XF3[am8)q%&m4' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
