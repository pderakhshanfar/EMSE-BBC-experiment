/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:19:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "usage: ");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.printHelp(74, "usage: ", (String) null, options0, "--", true);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.addOption((String) null, true, "usage: ");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp(74, "usage: ", (String) null, options0, "--", true);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 5114, options1, 4113, 5114);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-415));
      helpFormatter0.defaultLeftPad = (-1712);
      helpFormatter0.setDescPadding((-1712));
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.trimToSize();
      stringBuffer0.append(63);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-415), 63, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("7FUM?.$EGZv#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7FUM?.$EGZv#", "EooG\"XSkou[Y>", (Options) null, "ea3:!,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("v6", "arg", true, "O[q^`]}@RZ?du-;9odO");
      helpFormatter0.printHelp("[", options0, true);
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) "v6";
      Object object0 = new Object();
      mockPrintWriter0.append('X');
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "v6";
      objectArray0[6] = (Object) "v6";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 17, 17, "'r!pzvR2Y~`f7}d/o");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "\n");
      OptionGroup optionGroup1 = new OptionGroup();
      option0.toString();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup0.toString();
      helpFormatter0.printHelp(64, "[-arg \n]", "%aUWa6", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0=l>!a&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "-");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      int int0 = 8;
      helpFormatter0.printHelp(8, "}WEreE-X&4MP1(!", "", options0, "EN^Ahd_/j0-Q{!; 2Aq", true);
      helpFormatter0.printHelp("arg", options0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("VBm%~z;|B2GP#");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option1 = new Option((String) null, "L9|+Ct_ cOt#r");
      options0.addOption(option1);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "-", "", options1, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("Qf+{2KP1{28@ihX|IsN");
      helpFormatter0.printHelp(1, "\n", "-", options0, "-", false);
      helpFormatter0.renderOptions((StringBuffer) null, 1218, options0, 1218, 1218);
      helpFormatter0.renderOptions((StringBuffer) null, 1218, options0, 1218, 1218);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("Qf+{2KP1{28@ihX|IsN");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1891));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultLongOptPrefix = "";
      String string1 = ",";
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(27);
      Options options0 = new Options();
      int int0 = 117;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options1 = options0.addOption("", "", true, "b?,x^U&463mNX-M:");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options2, "N<S|LDEM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("v6", "arg", true, "");
      helpFormatter0.printHelp(56, "v6", "", options0, "v6");
      Options options1 = new Options();
      helpFormatter0.printHelp(105, "@n?N6", "s|mL", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 15, 15, "7zZ\"~");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 15, " | ", "", options0, 15, 15, "FG'/E-=?Md3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NX");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Us<");
      helpFormatter0.optionComparator = null;
      helpFormatter0.setLongOptSeparator("f0Z<Fi^w*pojRi!(");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 20;
      helpFormatter0.findWrapPos("", 20, 20);
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("<^N8DyV!QWrNgw{G", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", "' contains an illegal character : '", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("P", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("4", "arg", false, "P");
      helpFormatter0.printHelp(56, "4", "P", options0, "4");
      helpFormatter0.printHelp("[", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "CLdz/QLi^", "bPA", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "v6";
      helpFormatter0.printHelp(33, "[", "5", options0, (String) null);
      boolean boolean0 = true;
      helpFormatter0.defaultLeftPad = (-494);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("P", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("v6", "arg", true, "P");
      int int0 = 56;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(56, "v6", "P", options0, "v6");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("P", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(56, "v6", "P", options0, "v6");
      helpFormatter0.printHelp("[", options0, true);
      helpFormatter0.printHelp(56, "v6", "iNz#2y=!U`KuAx8w/d", options0, "[", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "v6";
      boolean boolean0 = true;
      String string1 = "P";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("P", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("v6", "arg", true, "P");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(56, "v6", "P", options0, "v6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 994, 994, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "{Z)\" 3HxEI{E%(<(!MV");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      Options options1 = new Options();
      Option option0 = new Option("", "--");
      Options options2 = options0.addOption(option0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp(74, " ", "", options2, "b*edzXf", true);
      helpFormatter0.printHelp("usage: ", options1);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "b*edzXf", options2, 636, 2033, "Ro", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b6`v;Z");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) "b6`v;Z";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-879), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      helpFormatter0.setSyntaxPrefix("Qf+42KP1328@ihX|IsN");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(1, "\n", "-", options0, "-", false);
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "[", "[", options0, (-1), 1641, "Amw=)tp.dK90\"oni", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1041;
      helpFormatter0.setLeftPadding(1041);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding((-756));
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim(".|n($gczq<$me,]");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultArgName = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-756), options0, 0, 0);
      helpFormatter0.findWrapPos("ywd!2vZ8y1n.", 2, 117);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "DxJ", (Options) null, (-1), (-756), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim((String) null);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.reverse();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("--");
      int int0 = 1606;
      StringBuffer stringBuffer0 = new StringBuffer(1606);
      int int1 = 2623;
      stringBuffer0.append("Mgu;%o");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2623, (Options) null, 2, 1606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('');
      int int0 = (-1860);
      String string0 = "org.apache.commons.cli.Util";
      mockPrintWriter0.write(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1860), (-1860), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("Qf+42KP1328@ihX|IsN");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "-", options1, "-", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      String string0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "db,M'Q";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(13, "db,M'Q", " ", (Options) null, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      mockPrintWriter0.append('#');
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1920, "sd0ilk", "", options0, 12, 956, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "arg", (String) null, options0, 15, 15, "/.-nFPE", false);
      helpFormatter0.rtrim("arg");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("%=#GPhi6.E]3");
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 3346, 2);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.rtrim("Cannot add value, list full.");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.", "1%sr.I");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1%sr.I
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 0;
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      options0.getMatchingOptions("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 40, "\n");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Cq");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "-", "-", options0, "-", true);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 56, (-527));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "l6", options0, "arg");
      helpFormatter0.rtrim("l6");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(115, "--", (String) null, options0, (String) null);
      MockFile mockFile0 = new MockFile("\n");
      helpFormatter0.setWidth((-3273));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      mockPrintWriter0.print(20);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.Options", (String) null, options0, (-164), (-1845), "8@m@52hu_:P");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = new Options();
      helpFormatter0.printHelp(3299, "pPm[V", "g`[_ w50:[:#I@$-", options0, "H$E*mK)6lF^<iSv}Y`W", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options1, 1, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 74, 1910, "g`[_ w50:[:#I@$-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, 1, 74, "P3p ~jW3PxLR8)d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", false, "\n");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option1 = new Option("", "-");
      options1.addOption(option1);
      helpFormatter1.defaultLeftPad = (-36);
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(64, "-", "]", options1, "]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, (String) null, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Nme8bh5>2LI5hc");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      options0.getOptions();
      helpFormatter0.printHelp(1925, "<", "Cannot add value, list full.", options0, "jnuK<", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-186), "jnuK<", " cvIm:;FOAjep<w&kY", options0, 34, 34, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, (String) null, true);
      helpFormatter0.printHelp(1925, "<", "Cannot add value, list full.", options0, "jnuK<", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("&eCwB", 1913, 117);
      helpFormatter1.getWidth();
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "", "usage: ", options0, (-1), (-2), "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "<";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "<", objectArray0);
      helpFormatter0.printHelp(printWriter0, 64, "c}]>vMaI(@}:40,", "                                                                ", options0, 64, 21, "", false);
      helpFormatter0.printHelp(27, " ", (String) null, options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "&lQ-f(|", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.printHelp(64, "\"", "cjLM:8G/HxAM", options0, "s;)6_", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'.W+A7f", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("#NwA'A,GWo1O", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(false);
      helpFormatter0.printHelp(107, "#NwA'A,GWo1O", "'.W+A7f", options0, "usage: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(74);
      helpFormatter1.printHelp("$n(`~nY=oTLt", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      options1.helpOptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bUZ!m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<@e<:", (Object[]) null);
      printWriter0.close();
      helpFormatter0.printHelp(printWriter0, 9, "-", "[", options0, 1, 1, "[", false);
      mockPrintWriter0.print(false);
      helpFormatter0.printHelp(2165, "'.W+A7f", "kOr)fU", options1, "'.W+A7f", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("ZR", options1);
      helpFormatter1.createPadding(1);
      helpFormatter1.printHelp("<@e<:", options0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("kOr)fU", 20, (-2746));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      options1.helpOptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bUZ!m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<@e<:", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 9, "-", "[", options0, 1, 1, "[", false);
      mockPrintWriter0.print(false);
      helpFormatter0.printHelp(2165, "'.W+A7f", "kOr)fU", options1, "'.W+A7f", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("ZR", options1);
      helpFormatter1.createPadding(1);
      helpFormatter1.printHelp("<@e<:", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      options0.toString();
      options1.hasShortOption("Nme8bh5>2LI5hc");
      helpFormatter0.rtrim("Nme8bh5>2LI5hc");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Nme8bh5>2LI5hc", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 9, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 1925, 1925, ".NO)");
      helpFormatter0.printHelp(".NO)", options0, false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.rtrim(" ");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 548, " ");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'a';
      charArray0[2] = 'b';
      charArray0[3] = '9';
      charArray0[4] = '.';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2213, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.hasLongOption("pI.qTo+Z|&");
      String string0 = "";
      options0.addOption("", true, "Krb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "vvq-qWpPlOY-";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "z@U9~^&", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "l6", options0, "arg");
      helpFormatter0.rtrim("l6");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(115, "--", (String) null, options0, (String) null);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(20);
      mockPrintWriter0.print(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "v6";
      boolean boolean0 = true;
      helpFormatter0.printHelp("v6", " ", options0, " ");
      helpFormatter0.rtrim("v6");
      helpFormatter0.getLeftPadding();
      String string1 = "l+0Ax>iD";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "N<BvvCgPqJD:.HD5g", "l+0Ax>iD", options0, "N<BvvCgPqJD:.HD5g");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, " ");
      options1.getOption((String) null);
      options1.getOptions();
      helpFormatter0.printHelp("A'6oL$A", "line.separator", options1, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptSeparator();
      String string1 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("v6", "arg", true, "O[q^`]}@RZ?du-;9odO");
      helpFormatter0.printHelp("[", options0, true);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ", true, "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      helpFormatter0.printHelp(" ", options0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter1.printUsage(printWriter0, 1892, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, (String) null, true);
      helpFormatter0.printHelp(1925, "<", "Cannot add value, list full.", options1, "jnuK<", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4126), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      String string0 = "Z>K";
      helpFormatter0.setLongOptSeparator("Z>K");
      Options options0 = new Options();
      options0.hasLongOption("-");
      Options options1 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2088, "", "Z>K", options0, 2088, 2088, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("v6", "arg", true, "O[q^`]}@RZ?du-;9odO");
      helpFormatter0.printHelp("[", options0, true);
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) "v6";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "v6";
      objectArray0[6] = (Object) "v6";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 17, 17, "'r!pzvR2Y~`f7}d/o");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("v6", "arg", true, "O[q^`]}@RZ?du-;9odO");
      helpFormatter0.printHelp("[", options0, true);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ", true, "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "' was specified but an option from this group ");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "U#YQ<>");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption((String) null, false, ",dl}m|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("6XE4", "--");
      helpFormatter0.getArgName();
      option0.setType(helpFormatter0);
      option0.clone();
      helpFormatter0.getNewLine();
      options0.getOptions();
      option0.setArgs(3);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      optionGroup0.setRequired(false);
      options2.getMatchingOptions("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "cmdLineSyntax not provided", "[ Options: [ short ", options2, ">w+");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.hasLongOption("pI.qTo+Z|&");
      StringBuffer stringBuffer0 = new StringBuffer("{0v*R7s/Q*E9h(");
      int int0 = 74;
      helpFormatter0.printHelp("(;6%WUriEH/:+(#I", options0, false);
      Options options2 = new Options();
      helpFormatter0.setArgName("{0v*R7s/Q*E9h(");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "usage: ", options2, "pI.qTo+Z|&", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("v6", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "]";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1840), "\n", (String) null, options2, 36, 34, "org.apache.commons.cli.Util", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.hasLongOption("pI.qTo+Z|&");
      options0.addOption("", true, "Krb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("vvq-qWpPlOY-", options1, false);
      Options options2 = new Options();
      helpFormatter0.setArgName("Yk[p$*Zs%Ex'&}");
      Options options3 = options2.addOption((String) null, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "CS$Yk", "", options3, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "' was specified but an option from this group ");
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" =::", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
      Options options1 = new Options();
      helpFormatter0.setArgName("!$}n2p'cL&BRAjV[IH");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp(810, "The option '", "16|", options1, "   ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, options0, 9, (-4342));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U(};[c");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "c\"}$14Q9G2:*", true, "-");
      Option option1 = new Option("", true, "c\"}$14Q9G2:*");
      options2.addOption(option1);
      helpFormatter0.printHelp("S8F)U{zgvju{!#IVTM", "U(};[c", options3, "                                                                ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptions();
      String string0 = "";
      Options options3 = options2.addOption("arg", "", false, "");
      Option option0 = new Option("", "k%|H@ ~/,B1N", false, "usage: ");
      option0.setRequired(false);
      options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      int int0 = 1925;
      Options options0 = new Options();
      helpFormatter0.printHelp(1925, " | ", "Nme8bh5>2LI5hc", options0, "Nme8bh5>2LI5hc");
      String string0 = "org.apache.commons.cli.OptionGroup";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("_dN~hL{:`ik", "Z>K", options1, "_dN~hL{:`ik", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("<", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("v6", "arg", true, "O[q^`]}@RZ?du-;9odO");
      helpFormatter0.printHelp("[", options0, true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("yJ}Mm ", "yJ}Mm ", options0, "+NG}$*U_t8(88zGQo}.");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2997), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      String string1 = "8u+Y:ryk#I-9g{";
      Options options0 = new Options();
      Option option0 = new Option("", "CIK8khCw3%", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3008), "", "8u+Y:ryk#I-9g{", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      helpFormatter0.createPadding(64);
      helpFormatter0.setSyntaxPrefix("                                                                ");
      helpFormatter0.rtrim("                                                                ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U(};[c");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "c\"}$14Q9G2:*", true, "-");
      // Undeclared exception!
      try { 
        options3.addOption("S8F)U{zgvju{!#IVTM", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'S8F)U{zgvju{!#IVTM' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Zt<";
      String string1 = " [ARG]";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      options0.getOptions();
      Options options3 = options2.addOption("", "-", false, "--");
      Option option0 = new Option("", "arg", true, "arg");
      boolean boolean0 = true;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 591, (String) null, "", options3, (-1), 10, "Zt<", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = new Options();
      options0.hasLongOption("pI.qTo+Z|&");
      String string0 = null;
      boolean boolean1 = true;
      options0.addOption("", true, "Krb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "]", "arg", options0, 1, 3, "pI.qTo+Z|&", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      MockFile mockFile0 = new MockFile("arg", "Hx1Q2FT,<ckj");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.print(110);
      mockPrintWriter0.print(true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 110, ">08nqW=|ua;s");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "cmdLineSyntax not provided";
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          helpFormatter0.optionComparator = comparator0;
          int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
          Options options0 = new Options();
          OptionGroup optionGroup0 = new OptionGroup();
          String string1 = "6XE4";
          Option option0 = new Option("6XE4", "--");
          helpFormatter0.getArgName();
          option0.setType(helpFormatter0);
          option0.clone();
          options0.toString();
          options0.getOptions();
          option0.setArgs(3);
          OptionGroup optionGroup1 = optionGroup0.addOption(option0);
          Options options1 = options0.addOptionGroup(optionGroup1);
          options0.addOption(option0);
          Options options2 = options1.addOption(option0);
          options2.hasLongOption("usage: ");
          optionGroup0.setRequired(false);
          options2.getMatchingOptions("");
          String string2 = "\\>w+";
          // Undeclared exception!
          helpFormatter0.printHelp(0, "cmdLineSyntax not provided", "[ Options: [ short ", options2, ">w+");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
      Options options1 = new Options();
      helpFormatter0.setArgName("!$}n2p'cL&BRAjV[IH");
      helpFormatter0.printHelp(810, "The option '", "16|", options1, "   ", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5i(vl+|;KD(l?TWp");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "~2z", (String) null, options0, 0, 2832, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.getOptions();
      optionGroup0.setRequired(false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(";XE4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "2'L-`", "", options0, 64, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 30;
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 30, 30);
      String string1 = "[ Options: [ short ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = ";XE4";
      Option option0 = null;
      try {
        option0 = new Option(";XE4", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';XE4' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "", options0, "arg");
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(115, "--", (String) null, options0, (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("v6", "arg", false, "O[q^`]}@RZ?du-;9odO");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "_dN~hL{:`ik", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2088);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setLongOptSeparator("Z>K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, (-2), options1, 90, 90);
      String string0 = helpFormatter0.createPadding(1016);
      helpFormatter0.printHelp(string0, string0, options1, string0, false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1118);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 64, 64);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, 10, options1, 10, 0);
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setWidth(74);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options3 = options2.addOption("", "-", false, "--");
      Option option0 = new Option("", "arg", true, "arg");
      option0.setRequired(true);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(" [ARG]", options4);
      Options options5 = new Options();
      helpFormatter0.printHelp("Zt<", options5);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("<", options4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, "line.separator");
      helpFormatter0.rtrim("org.apache.commons.cli.Options");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, "org.apache.commons.cli.Options", options0, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options1, (-614), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-364), (-364), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
      String string1 = "[ Options: [ short ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = ";XE4";
      Option option0 = null;
      try {
        option0 = new Option(";XE4", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';XE4' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nme8bh5>2LI5hc");
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", true, "jht+P1jyW");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1925, "<", "", options0, 1925, 1925, (String) null, true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", "Nme8bh5>2LI5hc", options1, "Nme8bh5>2LI5hc", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      int int0 = (-1);
      String string0 = null;
      String string1 = ":LA\"K)%gA<|C-&fw!LO";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3332, 3332, "");
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "JHK)\"u|9";
      Options options0 = new Options();
      String string1 = "BrEcCe?}z*";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("BrEcCe?}z*", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BrEcCe?}z*' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = (-344);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-344), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "']^<7k";
      helpFormatter0.setLongOptPrefix("']^<7k");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", "", true, "}.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3545));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 3660;
      String string0 = "\\\\_zxR#B&5\"<O**";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 3660, "\\_zxR#B&5\"<O**");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setSyntaxPrefix(".c_B]C?fXHz<{)U");
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 0;
      Options options0 = new Options();
      String string0 = "<";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("<", "usage: ", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option(",|Ee8y7,", ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',|Ee8y7,' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "j=x");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j=x
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-2997);
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, true, (String) null);
      int int1 = 0;
      helpFormatter0.printHelp("yJ}Mm ", "yJ}Mm ", options0, "+NG}$*U_t8(88zGQo}.");
      Option option0 = null;
      try {
        option0 = new Option("@XF3[am8)q%&m4", "--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@XF3[am8)q%&m4' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
