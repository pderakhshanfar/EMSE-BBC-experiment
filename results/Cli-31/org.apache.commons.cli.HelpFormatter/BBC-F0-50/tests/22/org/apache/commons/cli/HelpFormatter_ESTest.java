/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:25:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 0, 0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, " ", objectArray0);
      String string0 = " dKJOsz";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 1602, " dKJOsz");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      int int0 = 32;
      String string1 = "has already been selected: '";
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      int int1 = 6;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 6, (-341), "has already been selected: '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print("O.E61MNJ`HqEC_e");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.AlreadySelectedException", "arg", options0, 0, 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-519));
      helpFormatter0.printHelp(32, "'!Y", "'!Y", options0, "DrS''h;K$O");
      options0.toString();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp(292, "'!Y", "", options0, "3>wkYPEoh~OI;n", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      String string1 = " k{<wr)F";
      helpFormatter0.defaultArgName = " k{<wr)F";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", false, "h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vs\"3e8#VJ%S00k&,CY|");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1030, "vs\"3e8#VJ%S00k&,CY|", options0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "ZJ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 3134;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 1639, 3134);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      Option option1 = new Option("h", true, "h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "usage: ", true, "\n");
      option1.setRequired(true);
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "h", " ", options1, (-115), 110, "FwSE1\" !_djpl$", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", true, "h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "V%3p-KXb9", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FwSE1\" !_djpl$");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "cmdLineSyntax not provided", "h", options1, (-115), 115, "jN", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", true, "h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "V%3p-KXb9", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FwSE1\" !_djpl$");
      helpFormatter0.printHelp("V%3p-KXb9", options1);
      helpFormatter0.printHelp(5209, "Io~qM|SK", " ", options1, "");
      helpFormatter0.printHelp(63, "~-t[i`Y=#_iwjEH", "< ,7[{( $p,", options0, "h", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "h";
      Option option0 = new Option("h", true, "h");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "V%3p-KXb9", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      String string1 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "cmdLineSyntax not provided", "h", options1, (-115), 115, "jN", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", " ", options0, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-589);
      Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
      options1.getMatchingOptions("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultLeftPad = (-1891);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[1];
      options0.addOption("qnAvKCF", "", false, "arg");
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.getWidth();
      int int0 = 0;
      String string0 = " :: ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "   ", options0, " :: ", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "6");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 74, (-1220));
      helpFormatter2.getDescPadding();
      helpFormatter1.rtrim("arg");
      helpFormatter1.findWrapPos("", 3, 44);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("_y", "-", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "4,x?Ja&1C[ze", (String) null, options1, 0, 382, "4,x?Ja&1C[ze", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(16);
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(16);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 103, options0, 63, 54);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 220, 16, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      helpFormatter0.getWidth();
      String string0 = "   ";
      helpFormatter0.setLeftPadding((-1530));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "   ", "   ", options0, "   ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", " | ", false, "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" | ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), " | ", (String) null, options0, (-2), (-1), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("tdqjx`!X", "' contains an illegal character : '", (Options) null, "6R7O8!%IbBIj>5o", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      int int0 = 610;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 610, (-3821));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-508));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(412, " ", "", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".1)Q1joK-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, " ");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2237, ".1)Q1joK-", "L", options2, 2237, 2237, "", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("ow]Xxy?v6h}gu", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      String string0 = "_osU";
      Options options1 = options0.addOption("arg", false, "_osU");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter1, 0, options1, 5349, 5349);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2964), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = options1.addOption("", false, " ");
      Option option0 = new Option("arg", "4`x6L");
      Options options3 = options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "X$.y9Mvj0-S", false, "R%&4Q37Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2391, "'", (String) null, options1, 3688, 462, "R%&4Q37Z", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("usage: ", options0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "--", options0, "--");
      helpFormatter0.printHelp(3, "\n", "\n", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pm7u%", "\n", (Options) null, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("DRc[;NqB{%Y_b", (String) null, options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1399);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1386, 1386, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 1348, 1930, "");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 50;
      StringBuffer stringBuffer0 = new StringBuffer(50);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 50, 1173, "arg");
      helpFormatter0.rtrim("esyQ;!/zW+<;$");
      helpFormatter0.getLongOptPrefix();
      stringBuffer1.chars();
      String string0 = "Gqlqv&Ph2+#y";
      helpFormatter0.renderWrappedText(stringBuffer1, 1173, 1173, "Gqlqv&Ph2+#y");
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1173, "esyQ;!/zW+<;$", ";A", options0, 50, (-1), "esyQ;!/zW+<;$");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.rtrim("F UH5lSPm`Oo\"}pTS");
      MockPrintStream mockPrintStream0 = new MockPrintStream("F UH5lSPm`Oo\"}pTS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 2);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2745, "F UH5lSPm`Oo\"}pTS", "", options0, 87, 398, (String) null, false);
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 151;
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, (String) null);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, " :: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "-3 e@R/ddvwoks~S", "dS%yg_)iv4TP", options1, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.createPadding(89);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1, "   ", "usage: ", options0, "                                                                                         ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 1, "\n", "", options0, (-2333), 87, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1474);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1474), 17, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 44, options0, 2, 44);
      options0.addOption((String) null, "arg", true, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 50, options0, 4412, 50);
      helpFormatter0.setNewLine("-");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<2";
      Options options0 = new Options();
      options0.addOption("", "", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, 92, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(74, "DRU", "", options2, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Locale locale0 = Locale.CANADA_FRENCH;
      Options options1 = new Options();
      options1.toString();
      Options options2 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, "|r/}\",H=7w|X[", " ]", options2, 32, 32, "Zwap}a4a");
      helpFormatter0.printHelp(")O$(^-P", options2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter1.printHelp(74, "-", "", options0, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "[ Options: [ short ");
      helpFormatter0.printHelp(74, "\n", "   ", options0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.rtrim("F UH5lSPm`Oo\"}pTS");
      MockPrintStream mockPrintStream0 = new MockPrintStream("F UH5lSPm`Oo\"}pTS");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H:<^*D)|oOm*P[!oR");
      helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 452, 1156);
      helpFormatter1.setNewLine("--");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(4501);
      helpFormatter0.renderOptions(stringBuffer0, 646, options0, 88, 9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3037);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("3yf", (String) null, true, "--");
      helpFormatter2.printHelp(570, "-", "", options1, "--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printStream0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 3037, 2, "-");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter3, (-741), (-1703), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, (String) null);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("*eVC57@a");
      helpFormatter0.getArgName();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("cmdLineSyntax not provided", options1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 61, "OePr;W{~%v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "-");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator(">OqD.Bc{Ce.P2<r-");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("6}.", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "usage: ");
      Option option0 = new Option("", " | ");
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter1.getArgName();
      helpFormatter0.printHelp("\n", options2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintStream mockPrintStream1 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      helpFormatter0.renderOptions(stringBuffer0, 63, options0, 34, 1707);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(34);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H:<^*D)|oOm*P[!oR");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1343, "-", " ", options0, 63, 34, "Cannot add value, list full.", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("'W26B(,/n9dbLzJCM");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "'W26B(,/n9dbLzJCM", options0, "'W26B(,/n9dbLzJCM", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "usage: ");
      Option option0 = new Option("", " | ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("~'vw'ibd [{^/:6", "", options2, "qTC~`OtH9)Tg&h\"", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.printHelp(74, "-", "", options0, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setNewLine("-");
      helpFormatter0.rtrim("");
      PrintWriter printWriter0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(38);
      int int0 = 124;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, (-2049));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setWidth(1);
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "usage: ", options0, "");
      Option option0 = new Option("", true, "org.apache.commons.cli.Util");
      option0.setArgs(1);
      helpFormatter2.getNewLine();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter2.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("h49|p");
      helpFormatter1.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(74, "X", "arg", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("ozV\"1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(6);
      helpFormatter1.setDescPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter2.printHelp("-", " ", options0, "ozV\"1");
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, (String) null);
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("kwvk^{)~pIllvUm''", "<", options1, "<");
      option0.setArgs((-2932));
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("_MvZrt9QSfJJ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "", options0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "_MvZrt9QSfJJ");
      options0.toString();
      helpFormatter0.defaultDescPad = 78;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 72, ">TZ[</", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage(printWriter0, 1090, ">TZ[</", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      PrintWriter printWriter0 = null;
      int int0 = 32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(115, "2uEa#oUr/[S~!+}", "[ option: ", (Options) null, "2uEa#oUr/[S~!+}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "org.apache.commons.cli.HelpFormatter", "", options0, 74, 1728, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(31, "-", "-", options0, "(+ZUc!rzh", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) " ";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) byteArrayOutputStream0;
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 34, "                                                                          ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setDescPadding((-2266));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "-", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      PrintWriter printWriter0 = null;
      int int0 = 1728;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3715, "a+&+g?9`z<Bx", " ", options0, 65, 3, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("<2");
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(69);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      helpFormatter0.getWidth();
      helpFormatter1.printHelp(1742, "arg", "|F22y+@V} Oo(:ORr", options0, "wpb3D=gnZ&Q?", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "usage: ", options0, (-179), 1, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "--", "", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.setLength(1);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      PrintWriter printWriter0 = null;
      int int0 = 1728;
      String string1 = "Y6i}Q2";
      String string2 = "W";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "Y6i}Q2", options0, 1728, 3715, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("_MvZrt9QSfJJ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "", options0);
      mockPrintWriter0.append((CharSequence) "_MvZrt9QSfJJ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 0, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 5;
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      int int1 = 2;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1246, 3, "_MvZrt9QSfJJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1728, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      mockPrintWriter0.println('A');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "]q6U#>]^~", options0, 124, 2, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding(151);
      helpFormatter0.setLongOptSeparator("--");
      String string0 = "EW#Ji#S~${+T.jp6|";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EW#Ji#S~${+T.jp6|");
      mockPrintWriter0.append((CharSequence) "");
      String string1 = "Knsbd-J|V k*brOt\\u^";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      String string0 = ">TZ[</";
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("", "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "6j.bT", (String) null, options0, "tAoui'#'$ycv", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1472, "-", "]q6U#>]^~", options0, 124, 2, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(89);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(1087, " ", "arg", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "                                                                                         ", "", options1, 64, 64, "o3V'ywaZ6$R:R", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 44, 44, "u");
      String string0 = "]-Ho[^&{Ci801Wz";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(":B</Z0#", 3201, (-1637));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "", (Options) null, 891, (-716), ":B</Z0#", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      String string0 = "nSP![";
      options0.getOption("nSP![");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, ">", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      mockPrintWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 105, "fyi~>572h8@ZP7=nY(0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1728, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1472, "-", "]q6U#>]^~", options0, 124, 2, "", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1775));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options0.getOption("SZ");
      options0.getOptionGroups();
      Options options2 = options1.addOption("J", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1), "3{SqAPp_}:-~Ba>{?", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 1728, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 124, "v-{", "' contains an illegal character : '", (Options) null, 74, 0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1728, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 1254, 2, "5%eXw^~TF&ay)j5*?", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.trimToSize();
      helpFormatter0.renderOptions(stringBuffer0, 124, options0, 124, 177);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(1255);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(63, "Ial=T$lIBaL{*Y._7CD", "arg", options0, "U'7", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "oga", "hOt#.|", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = (-2916);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2916), (String) null, "I", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("_MvZrt9QSfJJ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "", options0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "_MvZrt9QSfJJ");
      String string0 = "Knsbd-J|V k*brOt\\u^";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 5, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setDescPadding((-2266));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("--", "1HXy+AL/g", options0, "");
      Option option0 = null;
      try {
        option0 = new Option("-", true, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", false, "\n");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("", "-", false, (String) null);
      optionGroup0.setSelected(option1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim((String) null);
      options0.addOption("arg", "cmdLineSyntax not provided", true, " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 151, options0, 50, 452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Wo1A6\"G6Najv&&[O";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 5;
      helpFormatter0.setWidth(5);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      String string0 = ">TZ[</";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      helpFormatter0.setDescPadding(151);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", "usage: ", options0, "arg");
      Option option0 = null;
      try {
        option0 = new Option("--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "$t`4");
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "org.apache.commons.cli.ParseException", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-4491), options1, 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      String string1 = "-";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, (Options) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1775));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "-", options0, "G{j;W&XXnT.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      options0.getOption("nSP![");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      Options options0 = new Options();
      Option option0 = new Option("", false, "]");
      option0.toString();
      option0.clone();
      helpFormatter0.setLongOptPrefix("[ option:   :: ] ]");
      options0.addOption(option0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp(" ", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      PrintWriter printWriter0 = null;
      String string0 = "_MvZrt9QSfJJ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      mockPrintWriter0.append((CharSequence) " [ARG]");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3451, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 117;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(117);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 12, "--");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1728, "Y6i}Q2", "W", (Options) null, 1728, 1728, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 1069;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.AlreadySelectedException", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      helpFormatter0.getNewLine();
      String string0 = null;
      helpFormatter0.setLongOptSeparator("[ARG...]");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(5);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QSfJJ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      String string1 = "Knsbd-J|V k*brOt\\u^";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 5, string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('>');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 9, 74, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, (String) null);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", "cmdLineSyntax not provided", true, " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 151, options0, 50, 452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = 151;
      Options options0 = new Options();
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1728, "Y6i}Q2", "", (Options) null, 1728, 1728, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1355;
      String string0 = "org.apache.commons.cli.ParseException";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int1 = (-1346);
      Options options0 = null;
      int int2 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1346), (Options) null, (-5), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 632;
      helpFormatter0.setDescPadding(632);
      helpFormatter0.defaultArgName = "QUqr4-a8.";
      helpFormatter0.setLongOptPrefix("[");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      Options options0 = new Options();
      Option option0 = new Option("", false, "]");
      option0.toString();
      option0.clone();
      helpFormatter0.setLongOptPrefix("[ option:   :: ] ]");
      options0.addOption(option0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp(" ", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      helpFormatter0.setNewLine("Rr6xYntCSF40m0");
      String string0 = "arg";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Rr6xYntCSF40m0", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "r4z.lU+\\dtv";
      helpFormatter0.setLeftPadding((-1846));
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("C.");
      MockFile mockFile0 = new MockFile((String) null, "C.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, (Options) null, 187, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "D!kk@JQ 9TU./6cr";
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix(",_~KzF");
      helpFormatter0.setOptPrefix("D!kk@JQ 9TU./6cr");
      helpFormatter0.setNewLine("arg");
      helpFormatter0.setLongOptPrefix("D!kk@JQ 9TU./6cr");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("I1g_K&Et1v>F{N 18:x", "8UUO", false, "lkC4sAt\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'I1g_K&Et1v>F{N 18:x' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1728, options0, 124, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(124);
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(124, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "-", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'C';
      charArray0[2] = 'Z';
      charArray0[3] = '';
      charArray0[4] = 'Q';
      charArray0[5] = 'f';
      charArray0[6] = '\'';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter1.print((float) 1);
      int int0 = 1907;
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) "usage: ", 1907, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("RY=eQ=4^ES*EUpm");
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "c,!)");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(1587);
      helpFormatter0.setSyntaxPrefix(">TZ[</");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_MvZrt9QS=JJ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      String string0 = "Knsbd-J|V k*brOt\\u^";
      helpFormatter0.printWrapped(printWriter0, 1587, string0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter1, 2830, "");
      assertEquals(1587, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UD";
      helpFormatter0.setLongOptSeparator("UD");
      int int0 = 2393;
      helpFormatter0.createPadding(2393);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('m');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "arg", 74, 439);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3528));
      assertEquals((-3528), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "u`";
      helpFormatter0.defaultNewLine = "u`";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("arg", "&");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("<2");
      int int0 = (-1135);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1135), "<2", "<2", options2, "m", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
