/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:53:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.printHelp(108, "-", "-", options0, "-", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3ECP.w6(&\"C");
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2090), options0, 1240, (-2090));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("CWb|P");
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("D9W");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("kCx]5J", "CWb|P", options0, "CWb|P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Z", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 878);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) "Z";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "Z";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption("Z", "arg", true, "usage: ");
      Option option0 = new Option("Z", true, "arg");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 407, "Z", options3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      options0.hasOption("has already been selected: '");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printHelp(printWriter0, 3064, "usage: ", " ", options0, 0, 3064, (String) null, false);
      helpFormatter0.printWrapped(printWriter0, 588, "usage: ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      helpFormatter0.renderOptions(stringBuffer0, 5, options0, 136, 923);
      helpFormatter0.defaultSyntaxPrefix = "=uSjpf/*A";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "\n", options0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("N<'25HkB\"}q;=<4G)H", "N<'25HkB\"}q;=<4G)H", (Options) null, "N<'25HkB\"}q;=<4G)H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      mockPrintWriter0.append('(');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4475, "", options0);
      helpFormatter0.renderOptions((StringBuffer) null, (-2661), options0, 2320, 68);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      int int0 = 8;
      String string0 = "rK)XS+";
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth(385);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "g<F,", "arg", options0, 3064, 0, "g<F,", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = helpFormatter0.createPadding(1360);
      helpFormatter0.findWrapPos(string0, 102, 102);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setSyntaxPrefix("[");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "&k|q", options0, "5&a szf\"Yv&,n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " :: ", options0, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(37, "%DV-N6 l", "[", options0, "O?$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter1.printOptions(mockPrintWriter0, 3, options0, 32, 15);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "G=";
      helpFormatter0.defaultNewLine = "G=";
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G=", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "xHezj", (String) null, options1, 194, 2025, "xHezj", false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1187);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 58;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.getValues();
      String string0 = " ]";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "g<F,", " ]", options0, 3064, 0, "g<F,", true);
      StringBuffer stringBuffer0 = new StringBuffer(13);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (-809), options2, 3064, 31);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      option0.getValues();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "g<F,", " ]", options0, 3064, 0, "g<F,", false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "XGs1R}", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("To91Rw~pF}.H=~C&");
      helpFormatter0.defaultArgName = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Qzc*t:Y\"Qi>i9O");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "C2!E'!K\"3w", options1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.getValues();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3064, "[", "I]$2^$]qX", options0, 68, 611, "", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.printHelp("XSe RwEj`U2I", options1, false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("To91Rw~pF}.H=~C&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Qzc*t:Y\"Qi>i9O");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "C2!E'!K\"3w", options1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1293, 1293);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("7b]Uf~U|", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", false, "!^k,mx0cnC#U");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 63, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 3, 1, "Bi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      Options options0 = new Options();
      options0.hasShortOption("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">RZ+HJD-w='c@3", "", options0, "?Qi+BC-}", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "[", options0);
      Option option0 = new Option((String) null, true, "M|_me");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      Options options1 = options0.addOption("kKiinxkRcVXaV7JuF", "org.apache.commons.cli.Util", false, "-");
      Option option0 = new Option("Z", false, "<");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(683, " ", "N", options2, "arg", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      String string0 = "!^k,mx0cnC#U";
      helpFormatter0.setArgName("|tzNR2Ty");
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      String string1 = "[";
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      int int0 = 8;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "[", options0);
      Option option0 = new Option("arg", (String) null);
      options0.addOption(option0);
      String string2 = "5&a szf\"Yv&,n";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "|tzNR2Ty");
      helpFormatter0.renderWrappedText(stringBuffer0, 3119, 773, " ]");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "!^k,mx0cnC#U", "&k|q", options0, "5&a szf\"Yv&,n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.getValues();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "[", "l2Z?ro{yoq%6p/oL?", options1, 3064, 115, ">fVa!;1(q((ak", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "--", options0, "a3zN/NlxF4y", true);
      helpFormatter0.createPadding(3);
      helpFormatter0.findWrapPos("Q22f", 1, 54);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 48;
      String string0 = "&e.'51/BTH";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&e.'51/BTH");
      String string1 = ",kEuje'";
      Options options0 = null;
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string2 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&e.'51/BTH", ",kEuje'", (Options) null, "org.apache.commons.cli.Option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "ZCr@|!o=", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1561, "line.separator", "!^k,mx0cnC#U", (Options) null, 8, 1561, "oWBUdgJFvYQ9>PH8zF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "ZCr$|!h=", options0);
      helpFormatter0.printHelp(" | ", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "' was specified but an option from this group ", " | ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      String string0 = "!^k,mx0cnC#U";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      Option option0 = new Option("", "arg", false, "!^k,mx0cnC#U");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "z~B9-x", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      helpFormatter0.createPadding(3786);
      helpFormatter0.setDescPadding(3786);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-516), 1925, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(5754);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1615, 270, "");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.renderWrappedText(stringBuffer1, 1615, (-213), "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream("--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(4495);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1054), (Options) null, 80, 4495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      pipedOutputStream0.close();
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("t,5");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|.\"z@Yrot=P5iPb", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      int int0 = 8;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "ZCr$|!h=", options0);
      Option option0 = new Option((String) null, true, "M|_me");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "!^k,mx0cnC#U", "&k|q", options0, "5&a szf\"Yv&,n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "ZCr$|!h=", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "o!ES7:el;J&,", "&k|q", (Options) null, "ZCr$|!h=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 32;
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      int int0 = (-2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "   ");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "L~+*`lwH+K>}CP7", "#{.gX!8#;`;l?%$>5zb", options0, 704, 32, "L~+*`lwH+K>}CP7");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 1, (-144), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.rtrim("' was specified but an option from this group ");
      Options options0 = new Options();
      Options options1 = options0.addOption("kKiinxkRcVXV7JuF", "org.apache.commons.cli.Util", true, "");
      Option option0 = new Option("", false, "<");
      Options options2 = options1.addOption(option0);
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      helpFormatter0.createPadding(579);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "' was specified but an option from this group");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, 579, 579);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, " | ", options0);
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.getOptPrefix();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.format("--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 80, options0, 74, 117);
      Option option0 = new Option("arg", "t", true, "-");
      option0.getValues();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 68, "C4*^", (String) null, options1, 11, 611, "C4*^", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(771, "arg", (String) null, options1, "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Nq-8=*lE+wF");
      Options options0 = new Options();
      String string0 = "z~B9-x";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3752), "$Nq-8=*lE+wF", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "FO/VK", "--", options2, (-498), 3064, "ULf^r?aa5*Bz", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      String string0 = "!^k,mx0cnC#U";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f)J8*3cBY|P", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, (-1), options0, 572, 9);
      helpFormatter1.printUsage(printWriter0, 2176, "usage: ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte byte0 = (byte) (-95);
      helpFormatter0.setArgName("]m1;NJ4e-7Nf\"10");
      Options options0 = null;
      int int0 = 83;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(83, "]m1;NJ4e-7Nf\"10", "]m1;NJ4e-7Nf\"10", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      int int0 = 7;
      helpFormatter0.renderOptions(stringBuffer0, 55, options0, 7, 117);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, "", options0);
      helpFormatter1.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4165, "usage: ", "usage: ", options0, 3, (-809), "h");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      optionGroup0.addOption(option0);
      options0.hasOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.getValues();
      options1.toString();
      helpFormatter0.printHelp(printWriter0, 611, "[", "", options0, 1105, 1105, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3752), "[", "[", options1, 611, 63, "line.separator", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=VQTiZ#La~/A4b|v}";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=VQTiZ#La~/A4b|v}");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "z~B9-x", options0);
      helpFormatter0.setOptPrefix("!^k,mx0cnC#U");
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "=VQTiZ#La~/A4b|v}", "!^k,mx0cnC#U", options0, 3, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("dqdj%", options0);
      Option option0 = new Option((String) null, "{");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      options0.hasOption("cmdLineSyntax not provided");
      options0.hasLongOption("--");
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.toString();
      optionGroup2.addOption(option0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 56, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(1792, "]x4qYAZ:U= 3\"d}l", (String) null, options0, (String) null, true);
      helpFormatter0.getLongOptPrefix();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream1, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) " ");
      helpFormatter0.printWrapped(printWriter0, 74, 74, ">");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "LqLitl= b>");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      optionGroup0.setSelected(option0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3064, 31, " ");
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 96, (String) null, "LqLitl= b>", options1, 3064, 104, "LqLitl= b>", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 3136, "[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("[");
      helpFormatter0.renderWrappedText(stringBuffer0, 3064, (-2769), "[");
      options0.addOptionGroup(optionGroup0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2769), (String) null, "--", options0, "\"D={Y,DM8[2P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "nz=aB=");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 1105, "");
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", (String) null, options1, 31, (-1), "+L", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "-", (Options) null, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 117, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append(',');
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(17, "aEi~C]Xg{J9W0OW", "arg", options0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.println(true);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "(:D;. a<VW:I");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("usage: ", " ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "[";
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 557, "org.apache.commons.cli.ParseException", "[", options0, (-1663), 541, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("[");
      helpFormatter0.renderWrappedText(stringBuffer0, 3064, (-2769), "[");
      options0.addOptionGroup(optionGroup0);
      option0.getValues();
      helpFormatter0.printHelp(printWriter0, 611, "[", "", options0, 1105, 1105, "", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "-", "", (Options) null, 31, 34, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockFile mockFile0 = new MockFile("--", "]%e?");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter1.append('z');
      helpFormatter0.printUsage(printWriter0, 1801, "]%e?");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("]%e?");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2189), "]", "]%e?", (Options) null, 1028, (-1247), "Q$=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=VQTiZ#La~/A4b|v}";
      helpFormatter0.defaultLongOptPrefix = "=VQTiZ#La~/A4b|v}";
      String string1 = "!^k,mx0cnC#U";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      String string2 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=VQTiZ#La~/A4b|v}");
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "z~B9-x", options0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.rtrim("' was specified but an option from this group ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("kKiinxkRcVXaV7JuF", "org.apache.commons.cli.Util", true, "");
      String string1 = "";
      Option option0 = new Option("", false, "<");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, "' was specified but an option from this group ", "", options2, "", true);
      options1.getMatchingOptions("'!6QfuX'?;9fQ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 2742;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 654, options0, 2742, (-778));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=VQTiZ#La~/A4b|v}";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=VQTiZ#La~/A4b|v}");
      mockPrintWriter0.append('z');
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1140), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3752);
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 74, 74, " ");
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "@.r8E3d`";
      Option option0 = null;
      try {
        option0 = new Option("@.r8E3d`", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@.r8E3d`' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp(1792, "]x4qYAZ:U= 3\"d}l", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "\"8omKO";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "\"8omKO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append(',');
      StringWriter stringWriter2 = stringWriter0.append('^');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptPrefix("s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("l~0[y\u0003k:SFnG", "", options0, "B", false);
      helpFormatter0.getArgName();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "B";
      objectArray0[1] = (Object) "--";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "s";
      Object object1 = new Object();
      stringWriter1.write(1766);
      objectArray0[4] = object1;
      objectArray0[5] = (Object) stringWriter1;
      objectArray0[6] = (Object) "arg";
      objectArray0[7] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "l~0[y\u0003k:SFnG", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "s");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "B,e.";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("B,e.", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockFileOutputStream0.flush();
      mockPrintWriter1.append('8');
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=VQTiZ#La~/A4b|v}";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=VQTiZ#La~/A4b|v}");
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      helpFormatter0.printUsage(printWriter0, 1801, "!^k,mx0cnC#U");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("=VQTiZ#La~/A4b|v}");
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("=VQTiZ#La~/A4b|v}", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals("arg", helpFormatter1.getArgName());
      
      helpFormatter1.defaultArgName = "--";
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      String string0 = helpFormatter1.getNewLine();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('');
      stringWriter0.append('^');
      Options options0 = new Options();
      options0.hasShortOption("**DHuat");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-435), "**DHuat", " ] [ long ", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 3004);
      helpFormatter0.setOptPrefix("s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "s", "s", options0, 0, 10, "l~0[y\u0003k:SFnG");
      String string0 = helpFormatter0.createPadding(816);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEqualsstring0);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('');
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptPrefix("s");
      Options options1 = new Options();
      options1.addOption("s", true, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "_:#`=x?qrAyX&a", options0, 0, 0, "k`r =", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3752);
      helpFormatter0.setWidth((-3752));
      helpFormatter0.getOptionComparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      String string0 = "";
      helpFormatter0.printWrapped(printWriter0, 74, 74, "");
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("@.r8E3d`", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@.r8E3d`' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("B,e.", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('8');
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, 0, 0, "B,e.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = (-2189);
      String string0 = "oSY(viOJI!5";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2189), "oSY(viOJI!5", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding((-2411));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2411), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      String string0 = "\"8omKO";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "\"8omKO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("D0d93rt.'5_a^&B14", "\"8omKO", options1, "ELt^k");
      helpFormatter0.setOptPrefix("^G_");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("\"8omKO");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=VQTiZ#La~/A4b|v}";
      helpFormatter0.setNewLine("!^k,mx0cnC#U");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=VQTiZ#La~/A4b|v}");
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      helpFormatter0.printUsage(printWriter0, 1801, "!^k,mx0cnC#U");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("=VQTiZ#La~/A4b|v}");
      helpFormatter0.setSyntaxPrefix("33vuYRUM");
      assertEquals("!^k,mx0cnC#U", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      try { 
        MockURI.URI("-", "usage: ", " ", "Gmg/BRfdc0_", "% yV_rOlS!3^");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: -://usage:%20%20?Gmg/BRfdc0_#%25%20yV_rOlS!3%5E
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Locale locale0 = new Locale("arg", "org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 557, ",$1.p=Dg<boLs\"'L6", "[", options0, 557, 557, "org.apache.commons.cli.ParseException");
      helpFormatter0.defaultArgName = ",$1.p=Dg<boLs\"'L6";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(",$1.p=Dg<boLs\"'L6", "'X$[x*QX", options0, "", true);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("");
      String string0 = "&ezSr|Xy>";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "", true, "");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        options0.addOption("--", "org.apache.commons.cli.HelpFormatter$1", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "oD(";
      helpFormatter0.setArgName("oD(");
      helpFormatter0.setLongOptSeparator("3g}@Q^+7iwI-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "oD(");
      int int0 = (-1042);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("Ad?[CXz/", "Ad?[CXz/", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ad?[CXz/' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "]";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultLongOptPrefix = "i7X";
      helpFormatter0.createPadding(4302);
      helpFormatter0.getLongOptSeparator();
      String string0 = helpFormatter0.createPadding(4302);
      helpFormatter0.setArgName(string0);
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = (-2);
      String string1 = null;
      mockPrintWriter0.print(1L);
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", (String) null, options0, (-2), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      String string0 = "--";
      helpFormatter0.setArgName("--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "--", "--", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-2));
      String string0 = "]";
      String string1 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 44;
      helpFormatter0.createPadding(44);
      helpFormatter0.setNewLine((String) null);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-10), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("**DHuat");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3004, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("[");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "SU<j[1MAG?GX?(`";
      helpFormatter0.rtrim("g5A%p|7{FK~_F}B1t0x");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\n", "SU<j[1MAG?GX?(`");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // SU<j[1MAG?GX?(`
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "\n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('');
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.setOptPrefix("s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "l~0[y\u0003k:SFnG", "--", options0, 44, 0, "s");
      helpFormatter0.createPadding(44);
      assertEquals("s", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Sl,QZ9*ukI*7";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
