/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:51:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("NO_ARGS_ALLOWED", "EH/");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", options0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.defaultLeftPad = 3;
      helpFormatter0.setOptPrefix("c1ER<Jy<})9@ &");
      String string0 = "g4%/t#|r:PW-";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("g4%/t#|r:PW-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      helpFormatter0.setWidth(3);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      int int1 = 12;
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'RLh*", "'RLh*", (Options) null, "\\c{!;ii;", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "^|so(nQnv!>`o";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("VP'(5%@lZ^", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'VP'(5%@lZ^' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.defaultSyntaxPrefix = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      int int0 = 31;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.println(841);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VOD450Ct&b~c`%U//zg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "VOD450Ct&b~c`%U//zg", options0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      helpFormatter0.defaultDescPad = (-4298);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!JfEswrm", "", (Options) null, "**_gM GC<j5lD$8{x");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2433);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultWidth = 1958;
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -640
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-988);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "%Fs3J}qk9DB6[& ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'mw0afm+2WSu");
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("9ba");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3@ileNrBY/ph:2,xi~", "3@ileNrBY/ph:2,xi~", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`s!?";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(280, "`s!?", "`s!?", (Options) null, "`s!?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!GUMmi-x*8Qy<!wOc3");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-101));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "=7E4RNRT?U");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.optionComparator = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", options0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pv]gN%xW]\"F:x8ter9");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((byte)74);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding((byte)53);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((-319));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-4777));
      Options options1 = options0.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2707, "arg", (String) null, options0, 2707, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("$", true, "-");
      option0.toString();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("$", options0, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, " ] [ on ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 32, " ] [ on ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("$", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "$", options1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-4491);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commns.cli.HelpFormatter$1", " ", options0, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "-", (String) null, options0, " ", false);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      int int1 = 12;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'RLh*", "'RLh*", (Options) null, "\\c{!;ii;", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 65, options0, 44, 65);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 115, (-3621), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(8);
      MockFile mockFile0 = new MockFile("E>6_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.toPath();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "K", "zm&s?ebw.]!ap`dyY@s", options0, 0, 8, "");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "%^ohX53@[X'*3";
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("%^ohX53@[X'*3", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 105, options1, 13, 13);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "]", true, "");
      options1.addOption("", false, "?w");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 44;
      helpFormatter1.setWidth((-255));
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 44, options0, 3, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultDescPad = 2689;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLongOptSeparator("&t?IW.e8*yMNYn1$w");
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("A!=TzCycSEPr@G*aO", "D|Hko==?dItkWC%)4}", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A!=TzCycSEPr@G*aO' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3323, "[ Options: [ short ", "[ Options: [ short ", options1, 3323, 3323, (String) null);
      helpFormatter0.printHelp("-", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3323, options0, 3323, 3323);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "ycInW'DS");
      boolean boolean0 = false;
      String string0 = "";
      MockFile mockFile1 = new MockFile("--", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(52, "", "", options0, ",MF}O>>#~r[;n3:t?v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "ycInW'DS");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.renderOptions((StringBuffer) null, 2701, options0, 3908, 971);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(7, "arg", "YxYJe!Qg=<1mJ(xAA/", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("X9gf[g>}");
      helpFormatter0.defaultNewLine = "VrRSV'";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = helpFormatter0.createPadding(1014);
      helpFormatter0.findWrapPos(string0, 34, 13);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(582, "-", (String) null, options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.HelpFormatter$OptionComparator", "usage: ", options0, (-1), 10, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(":", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(0L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2712, "_p_owe?W9irh7W", (String) null, options0, 2687, 63, ":", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/ycI{nAW'DRgS");
      FileSystemHandling.createFolder(evoSuiteFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("", "ycI{nAW'DRgS");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      mockFile1.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = "0>2G@Rb6n,f:A;~h$";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-1828), options0, (-1828), 3196);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "zgYpbXNh", true, (String) null);
      options0.addOption("JDRI", true, "");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", options0, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "\n");
      MockFile mockFile1 = new MockFile(mockFile0, "iV*:");
      mockFile1.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2712, "myFt", "", options0, (-1), (-1554), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("\n", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 11, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "");
      String string0 = "2r ))5ul5pE\"";
      String string1 = "";
      int int0 = 1478;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(":");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, ":", "$SjG0{:o!.kb", options0, "~Evt5", true);
      MockFile mockFile0 = new MockFile("~Evt5", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 120, "0>2G@Rb6n,f:A;~h$", "PW1'U(q^", options0, 2712, 74, "", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "[ tions: [ shor ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "-", "[ tions: [ shor ", options0, 3, 1, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      options0.hasOption("arg");
      helpFormatter0.printHelp(13, ":F.b&-^", "", options0, "A#s1/Zc-]Wpf1", false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-357), "");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "EYwLprpAtHBhnlWL%");
      String string0 = "VE]&WJ/0IUo&a4v";
      options1.addOption((String) null, true, "VE]&WJ/0IUo&a4v");
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "+>r|Z(5", "'0L<^%)HwB'.G", options1, "[ option: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[8];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "#tzpA4P8kFU";
      objectArray0[3] = (Object) "#tzpA4P8kFU";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "#tzpA4P8kFU", objectArray0);
      helpFormatter0.printHelp(printWriter0, 64, "wUgx*2epy=1;^x", "", options0, 34, 34, "wvW{", true);
      Options options2 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, true);
      helpFormatter0.findWrapPos("[", 64, 64);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      options1.addOption("arg", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter2.printf(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "--", " ", options0, (-2), 10, "", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = new Options();
      String string1 = "gEbDOz\\\\\\UD/";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ynt]t");
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      int int0 = 12;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-706), "gEbDOz\\UD/", "", options0, 12, (-4198), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(139);
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "# X_z(dR.,bMxD?7uR";
      helpFormatter0.printHelp(46, "                                                                                                                                           ", "[ option: ", options0, "l3:+;rR", true);
      helpFormatter0.getArgName();
      Options options1 = options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("[ option: ", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "line.separator";
      Options options1 = options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1960;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "line.separator", "0o1J 80;y", options1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("JDRI", true, "");
      helpFormatter0.printHelp(2109, "<", " ", options0, "JDRI", true);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(139);
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 109, options0, 2109, 2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOption("\n");
      int int0 = (-2819);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) null;
      helpFormatter1.setDescPadding(74);
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      String string0 = "n>)4.e0Jm.Y`";
      Options options2 = new Options();
      int int1 = (-1);
      String string1 = ";l`#>5\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1084, (String) null, "", options0, 2240, (-1), "([LK/8Ra{}$)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<!?*=od'Q");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "arg";
      helpFormatter1.printHelp("usage: ", "", options0, " ");
      helpFormatter1.printHelp(3, "\n", "p", options0, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "3", "%~oeC*me16mL}V/zR0", options0, "%~oeC*me16mL}V/zR0", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "line.separator";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1960;
      int int1 = 13;
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, " ]", "k4bR+;6GjSWd", options0, 19, 5510, "gEDOiz\\?UD/*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "";
      MockFile mockFile0 = new MockFile("nSEd+cA\"_;", "");
      boolean boolean0 = true;
      String string1 = "rv28";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2349, "Nu<ZDxK+,4/C:>jwT&n", "rv28", (Options) null, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "p";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLeftPad = 1717;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2819), "", "", options0, 1717, 1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("nSEd+cA\"_;", ">jIT<IY9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      mockPrintWriter1.println((Object) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "--");
      helpFormatter0.printHelp(9, ">jIT<IY9", "arg", options1, "' was specified but an option from this group ", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "arg", options0, 1, 2079, "(QR", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-464), "arg", "--", options1, 3, 3, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1960, "-", "-", options0, 13, (-2819), "line.separator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("nSEd+cA\"_;", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Option option0 = new Option("arg", false, "\"");
      mockPrintWriter0.println((Object) option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped(printWriter0, 1, "-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = null;
      String string0 = ":?:AWDVm~Y";
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", "<", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "RO$JSD");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 119, options0, 119, 119);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      MockFile mockFile0 = new MockFile("--", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1717, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1693, "$", "[ARG...]", options0, "", true);
      helpFormatter0.printHelp(" ", "$", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-510), 981, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3";
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 0;
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setSyntaxPrefix("~wSz}h*-s,s_yGH");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "org.apache.commons.cli.Options", "~wSz}h*-s,s_yGH", options0, "N!B#3-0u%0@'].", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", false, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options3, 1858, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 328, "y");
      helpFormatter0.findWrapPos("y", 44, 1456);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("JDRI", true, "");
      helpFormatter0.printHelp(74, "W", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1), 3, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.append((StringBuffer) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1587), "]");
      helpFormatter0.printHelp(582, "/k}A`Ry}R1LP", "]", options0, "'6nMQ#-hi\"U", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-338), 2922, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 882, 882, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(102);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", ".1Y{");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("knv", options2, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1731);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?F7_%KW||");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 582, "1iQ3%>aI0vUPF8E");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "J}.D}any\"K4f&S<v%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "line.separator";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "line.separator";
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) "line.separator";
      PrintWriter printWriter0 = mockPrintWriter0.printf("c8YcG$@$*Y5y]p]O", objectArray0);
      helpFormatter1.printUsage(printWriter0, 74, "1^Vdnh]??O<2U", options1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(139);
      Options options0 = new Options();
      helpFormatter0.printHelp(46, "                                                                                                                                           ", "[ option: ", options0, "l3:+;rR", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1587), "]");
      helpFormatter0.printHelp(582, "/k}A`Ry}R1LP", "]", options0, "'6nMQ#-hi\"U", false);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer1, 0, 764);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 764
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "p";
      helpFormatter0.defaultNewLine = "p";
      int int0 = 1717;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      String string1 = "~wSz}h*\\55s,s_yGH";
      Options options0 = new Options();
      String string2 = ";Ej^EEnzQ5B=BNN/y";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "~wSz}h*-s,s_yGH", "N!B#3-0u%0@'].", options0, ";Ej^EEnzQ5B=BNN/y", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 643;
      helpFormatter0.createPadding(643);
      helpFormatter0.getLeftPadding();
      String string0 = "^0Hm yp.$B6'6z";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "joM]n:.ihy~Y#v 1P", options0, ";)*8+Tvkiq(I8w");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(64, "^0Hm yp.$B6'6z", (String) null, options0, (String) null);
      options0.addOption("arg", "\n", false, " ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "='0", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("!u>D9'~N");
      helpFormatter0.setArgName("!u>D9'~N");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("[ Options: [ short ");
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(10);
      Options options1 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(139, "   ", "          ", options1, "l3:+;rR", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("kV");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("kV", false, "");
      Option option0 = new Option("", (String) null, false, ".lA");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "kV", false, "3q_%A!C");
      OptionGroup optionGroup0 = new OptionGroup();
      options3.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("kV");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      int int0 = 1820;
      helpFormatter0.renderWrappedText(stringBuffer1, 1820, 32, "arg");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("hs<0-e,5Ls74");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(582, "/k}A`Ry}R1LP", (String) null, options0, " |UU\u0006", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "vbgFJt|wO3YK";
      String string2 = "ik'9=n\\JkG'Ww,k";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ik'9=nJkG'Ww,k", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(139);
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(114);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "/3:;rR";
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) "                                                                                                                                           ";
      objectArray0[7] = (Object) "                                                                                                                                           ";
      PrintWriter printWriter0 = mockPrintWriter0.format("T`hA-sM]:^ 9T,wj5", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-481), "g$NY.R5w+/;V-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "--", options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(139);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 139);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      options0.helpOptions();
      helpFormatter0.printWrapped(printWriter0, 1022, 139, "");
      options0.getMatchingOptions("3O[qv6j:_!vv$");
      helpFormatter0.printHelp(1022, "usage: ", "/3:;rR", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      objectOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "arg");
      Options options1 = options0.addOption(option0);
      String string0 = null;
      option0.clone();
      Options options2 = options1.addOption((String) null, true, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1109));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-2717);
      String string1 = " ";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      int int0 = 31;
      helpFormatter0.defaultLeftPad = 31;
      int int1 = (-330);
      helpFormatter0.setLeftPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("]", (-330), (-330));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = (-120);
      helpFormatter0.setLeftPadding((-120));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-120), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~wSz}h*-s,s_yGH", "~wSz}h*-s,s_yGH", options0, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3";
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("~wSz}h*-s,s_yGH");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "org.apache.commons.cli.Options", "~wSz}h*-s,s_yGH", options0, "N!B#3-0u%0@'].", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(139);
      Options options0 = new Options();
      helpFormatter0.printHelp(1022, "usage: ", "/3:;rR", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "p", options0, "--", true);
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "", "3", options1, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 582, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("c*g`VXnC<csE>Z[GB");
      MockFile mockFile0 = new MockFile("k:8B6\": r=l-gLX{c");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "[ Options: [ short ", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), "HZH`H.w|4=ILS6$", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "kX";
      helpFormatter0.setSyntaxPrefix("@T`");
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'X';
      charArray0[2] = '&';
      charArray0[3] = 'Z';
      charArray0[4] = 'w';
      charArray0[5] = 'k';
      charArray0[6] = 'n';
      charArray0[7] = 'G';
      charArray0[8] = ']';
      stringBuffer0.append(charArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3330, 2726, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2726, (Options) null, 2079, 3330);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(107);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 6, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "p";
      helpFormatter0.defaultNewLine = "p";
      int int0 = 1717;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultLeftPad = 1717;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      int int1 = 0;
      String string1 = "~wSz}h*\\55s,s_yGH";
      Options options0 = new Options();
      String string2 = ";Ej^EEnzQ5B=BNN/y";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~wSz}h*-s,s_yGH", "N!B#3-0u%0@'].", options0, ";Ej^EEnzQ5B=BNN/y", true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("kV");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("kV", false, "");
      Option option0 = new Option("", (String) null, false, ".lA");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "kV", false, "3q_%A!C");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options4, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "vbgFJt|wO3YK";
      String string2 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3704));
      File file0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 4191;
      StringWriter stringWriter0 = new StringWriter(4191);
      stringWriter0.close();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.reverse();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 4191, 4191, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      String string0 = " :: ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" :: ", "i?7J.4/`^y$X!/d3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // i?7J.4/`^y$X!/d3
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1419, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }
}
