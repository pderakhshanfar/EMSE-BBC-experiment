/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:19:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1202;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      mockPrintWriter0.format("org.apache.commons.cli.OptionValidator", objectArray0);
      String string0 = "f'A'K2C#e8P Ol";
      Options options0 = null;
      int int1 = 6651;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1202, "FO1yBrqEM.", "f'A'K2C#e8P Ol", (Options) null, 6651, 6651, "FO1yBrqEM.", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 1119;
      int int1 = 103;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1119, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";r,.6&");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "-";
      objectArray0[5] = (Object) printWriter0;
      objectArray0[6] = (Object) "_oho)mmGN8vW#";
      mockPrintWriter1.format(locale0, "_oho)mmGN8vW#", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1592, ":*YQ>j:%uh!BNR=U", "A", options1, 74, 74, "-", false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1592, (-2487), "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 74, 701);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GD:i");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1606), "GD:i", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "O.bd\"");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yv;)d+qE";
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("yv;)d+qE", options0, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 97, 3, "o4:35Y)P2D &");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 97, 456, "o4:35Y)P2D &");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1006), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(645, "[ option: ", "", options0, "zs$]X|$");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "-");
      helpFormatter0.printHelp("#M!O2g3zC|WYh", "#M!O2g3zC|WYh", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3008, options0, 3008, 3214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("Dl Xv  ");
      helpFormatter0.defaultDescPad = (-1900);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Dl Xv  ", "Dl Xv  ", options0, "Dl Xv  ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultDescPad = (-563);
      Options options1 = options0.addOption("arg", "usage: ", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3@%6-x-K}=hl!D`5", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "}e.D!yaoj>dOD";
      helpFormatter0.optionComparator = null;
      helpFormatter0.printHelp("P==Za:.6`f.weT!", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "}e.D!yaoj>dOD", "}e.D!yaoj>dOD", options0, "VBu:dVzI-*S4@/]#uZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = null;
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Hi#-|Ho1", "", (Options) null, "{f_a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("yv;)d+qE", options0, true);
      Options options1 = new Options();
      options0.addOption("arg", "", true, "has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "has already been selected: '";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "has already been selected: '";
      objectArray0[5] = (Object) "has already been selected: '";
      PrintWriter printWriter0 = mockPrintWriter0.printf("has already been selected: '", objectArray0);
      helpFormatter1.printHelp(printWriter0, 31, "-", "/6mu$", options0, 31, 110, " ", true);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter1.findWrapPos("-", 74, 3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`}yA:t27+.", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "-", (Options) null, "'LE\"n6H?^)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(14, "}e.D!yaoj>dOD", "", options0, "");
      helpFormatter0.getLeftPadding();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockFile mockFile0 = new MockFile("PCN<r-8@'@8W[t kVq");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "PCN<r-8@'@8W[t kVq";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "PCN<r-8@'@8W[t kVq";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "}e.D!yaoj>dOD";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("}e.D!yaoj>dOD", objectArray0);
      helpFormatter0.printOptions(printWriter0, 1, options0, 9, 9);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "'LE\"n6H?^)", "BY;jVmNBG(", options0, "=A9o'Gx'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "+c V-|B N5qu0\"~";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt(")v'Sgu22&R]|oeB]");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      options0.getOption("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("`x\"Tk_.$5qP==?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Options", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 115, "+c V-|B N5qu0\"~", (String) null, options1, 74, (-1), " | ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, (-3133), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?>$ext-_9Lt'+8g");
      helpFormatter0.setSyntaxPrefix("7sD1\"~}=+(y<LY");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "+c V-|B N5qu0\"~";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "");
      options0.addOption(option0);
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Option option1 = new Option("", false, (String) null);
      options1.hasShortOption("org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 344, "arg", "4K[p(w8BVpC%dm6N|ok", options1, 1589, (-998), "+c V-|B N5qu0\"~", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", false, "-I r'=");
      optionGroup0.setSelected(option0);
      helpFormatter0.printHelp(32, "\n", "\n", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "PNw>gh\"", (String) null, options0, 259, 1, "PNw>gh\"", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) "[";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "L:#", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.hasShortOption("--");
      helpFormatter2.printHelp(printWriter0, 1589, "arg", "", options0, 5, 1589, (String) null, true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-559), options1, 54, (-559));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-29);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}", "}", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = null;
      String string0 = "'LE\"n6H?^)";
      String string1 = "AUO";
      helpFormatter0.defaultSyntaxPrefix = "AUO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "-", (Options) null, "'LE\"n6H?^)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      options0.hasShortOption("--");
      Options options1 = options0.addOption("", "usage: ", true, "org.apache.commons.cli.HelpFormatter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, options1, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 74, 136);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, (-2), "arg");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = " ";
      Options options0 = new Options();
      String string1 = "2";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "Jg2)km}$F:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Object object0 = new Object();
      String string0 = ";r,.6&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(97, "J}1", "fxBW", (Options) null, "fxBW", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("v");
      options0.hasShortOption("DsY}j/");
      options0.addOption((String) null, false, "~");
      helpFormatter0.printHelp("-", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      StringBuffer stringBuffer0 = new StringBuffer("~");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2008), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1422);
      String string0 = "jU";
      int int1 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string2 = "JG/W8?\"[<en";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u&,PE", "JG/W8?\"[<en", options0, " ");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "+c V-|B N5qu0\"~";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt(")v'Sgu22&R]|oeB]");
      Options options2 = options1.addOption("arg", "", true, (String) null);
      helpFormatter0.printHelp(3074, "A`oNz;$[D;@", "", options2, "+c V-|B N5qu0\"~");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("+c V-|B N5qu0\"~", (String) null, true, "+c V-|B N5qu0\"~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+c V-|B N5qu0\"~' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";r,.6&");
      mockPrintWriter0.append((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      helpFormatter1.printHelp(10, " | ", "--", options2, "dsd");
      MockFile mockFile0 = new MockFile("\n", "--");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.addOption("arg", (String) null, false, "-");
      helpFormatter0.printHelp(74, "n<=j", "NIV", options0, (String) null, true);
      helpFormatter0.printHelp("NIV", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter0.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-181), "--", "U_Vn{(", options0, 21, 1548, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = "$d)$";
      Options options0 = new Options();
      String string1 = "NV";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1438, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 1, 3);
      String string0 = "_oho)mmGN8vW#";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "-", "_oho)mmGN8vW#", (Options) null, "&>rzHkl^~,vSM&Tx2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Locale locale0 = Locale.KOREA;
      MockFile mockFile0 = new MockFile("usage: ", "H<Q+/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "]";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "H<Q+/";
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "H<Q+/", "usage: ", options0, 3, (-3117), "#0}", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Locale locale0 = Locale.KOREA;
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 21, "", "--", options0, 21, 21, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("r");
      Options options0 = new Options();
      Option option0 = new Option("", false, "47f\">DzR");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 610, ",SJ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&>rzHkl^~,vSM&Tx2", "&>rzHkl^~,vSM&Tx2", (Options) null, "q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      options0.getMatchingOptions("l2(VW_B B");
      Options options1 = options0.addOption("", "-", false, "-");
      helpFormatter0.printHelp("l2(VW_B B", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      mockPrintWriter0.println('\\');
      Options options2 = options0.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-531), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 6;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 6, 3, "arg");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.renderWrappedText(stringBuffer1, 1902, 1907, "\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp("~", (String) null, options2, " :: ", false);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " :: ";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 21, (String) null, " ] [ long ", options2, 21, 21, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(165, "org.apache.commons.cli.AlreadySelectedException", "usage: ", options0, "arg");
      helpFormatter0.getOptPrefix();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      options0.getOption("v");
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      options0.hasShortOption("di");
      helpFormatter0.setLeftPadding(1005);
      Options options1 = options0.addOption("arg", "", false, "O<!-z+NZz;1Qd?@M");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "'", "y6A7^{`xDb;C>lYho", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 103, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter1.close();
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 95, "usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("NIV", false, "UFziJ$?b*");
      helpFormatter0.printHelp("$d)$", options1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "_oho)mmGN8vW#";
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "rGf?ACI|gu/#wW";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.format("rGf?ACI|gu/#wW", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 49, 58, "!|{8-Qmpq");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("\n");
      helpFormatter2.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp("_<1qt5;0n", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      options0.hasShortOption("--");
      options0.addOption("", "usage: ", true, "org.apache.commons.cli.HelpFormatter");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 111, 111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "l2(VW_B B";
      Options options0 = new Options();
      options0.getMatchingOptions("l2(VW_B B");
      Options options1 = options0.addOption("", "-", false, "-");
      boolean boolean0 = true;
      helpFormatter0.printHelp("l2(VW_B B", options1, true);
      String string1 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      mockPrintWriter0.println('\\');
      options1.hasShortOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("--", "org.apache.commons.cli.HelpFormatter", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("v");
      Options options1 = new Options();
      helpFormatter0.printHelp("~", "v", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer("50_{1 1.|Y)lt,GIK");
      helpFormatter0.renderWrappedText(stringBuffer0, 2317, 2317, "ivW`u96OIFx)z");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.format("rGf?ACI|gu/#wW", objectArray0);
      printWriter0.println(',');
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      options0.addOption("", (String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3571), (String) null, "--", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3009));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = '-';
      charArray0[2] = '_';
      charArray0[3] = '^';
      printWriter0.print(charArray0);
      helpFormatter0.printWrapped(printWriter0, 76, 2503, ":d)5_");
      helpFormatter0.defaultDescPad = 2503;
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "rGf?ACI|gu/#wW";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.format("rGf?ACI|gu/#wW", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 6, 29, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderWrappedText(stringBuffer1, 1267, 6, "Ewq:!usK)bYVH /\"");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3009));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 76, 2503, ":d)5_");
      helpFormatter0.defaultDescPad = 2503;
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setSyntaxPrefix("Vf'3#1*u");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1162, "", "has already been selected: '", (Options) null, "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setSyntaxPrefix("Vf'3#1*u");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 229, "");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3541, "WR$ASpf98Q", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      int int1 = 0;
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, " | ", (String) null, options0, " | ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(35);
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 35, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 35, 54, "vr$E`mwXiT^");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "vr$E`mwXiT^", options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setSyntaxPrefix("Vf'3#1*u");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "WR$ASpf98Q", options0, "l", false);
      StringBuffer stringBuffer0 = new StringBuffer("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "WR$ASpf98Q", (String) null, options0, 64, 64, "l");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "_oho)mmGN8vW#";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "$xH=yKjZ+3Wc.", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 32;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", false, "-I r'=");
      optionGroup0.setSelected(option0);
      Option option1 = null;
      try {
        option1 = new Option(",", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      helpFormatter0.setOptPrefix("l9z:1C(I ");
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "Al`oNz;$[D;@";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Al`oNz;$[D;@", objectArray0);
      helpFormatter0.defaultNewLine = "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 31;
      String string0 = "UG.;,-dv4:$LUaz1|k";
      Options options0 = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "UG.;,-dv4:$LUaz1|k", "UG.;,-dv4:$LUaz1|k", (Options) null, 31, 31, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      int int0 = 0;
      int int1 = (-2);
      helpFormatter0.setLeftPadding(9);
      int int2 = (-1018);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1018));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "[ Optios: [ short ");
      helpFormatter0.defaultLeftPad = 2182;
      int int0 = 0;
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        locale0.getExtension('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: |
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.format("rGf?ACI|gu/#wW", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = null;
      String string0 = " ]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "UG.;,-dv4:$LUaz1|k", " ]", (Options) null, (-489), 31, " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setSyntaxPrefix("Vf'3#1*u");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "WR$ASpf98Q", options0, "l", false);
      StringBuffer stringBuffer0 = new StringBuffer("'");
      helpFormatter0.renderWrappedText(stringBuffer0, 2317, 2317, "Vf'3#1*u");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.printf("y6A7^{`xDb;C>lYho", objectArray0);
      options0.hasShortOption("--");
      options0.addOption("", "usage: ", true, "org.apache.commons.cli.HelpFormatter");
      String string0 = "--";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "s&n>1", "v", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v";
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.printf("y6A7^{`xDb;C>lYho", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-742), 2, "[XP{ *6E_  \"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "Al`oNz;$[D;@";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Al`oNz;$[D;@", objectArray0);
      helpFormatter0.defaultNewLine = "-";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(1801);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "arg", (Options) null, "&>rzHkl^~,vSM&Tx2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      String string0 = "NIV";
      options0.hasShortOption("usage: ");
      options0.addOption("arg", (String) null, false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "n<=j", "NIV", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "has already been selected: '", "has already been selected: '", (Options) null, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "_oho)mmGN8vW#", (Options) null, "&>rzHkl^~,vSM&Tx2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 70, 1032);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 212, (-4567), "");
      helpFormatter0.setDescPadding((-946));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("kuJ]/uZ2hFz+Q|DgqB", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultOptPrefix = "+c V-|B N5qu0\"~";
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "Al`oNz;$[D;@";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Al`oNz;$[D;@", objectArray0);
      helpFormatter0.defaultNewLine = "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 31;
      String string0 = "UG.;,-dv4:$LUaz1|k";
      Options options0 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 31, "UG.;,-dv4:$LUaz1|k", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      String string0 = helpFormatter0.getArgName();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("vNZbcAO");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "");
      options0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("%`8FOf._`|&a=^kI`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '6';
      mockPrintWriter0.println(charArray0);
      Locale locale0 = Locale.forLanguageTag(".z$l~Q{EhH/t0I[");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "vNZbcAO", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-334), "_oqX,ysG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 1632, "org.apache.commons.cli.OptionGroup", options0);
      assertEquals("--usage: org.apache.commons.cli.OptionGroup\n", stringWriter0.toString());
      
      stringWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1632, "", " L]-<*-!R", options0, 1632, 1632, " L]-<*-!R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = "<6-a141d>P";
      helpFormatter0.setSyntaxPrefix("<6-a141d>P");
      helpFormatter0.rtrim("<6-a141d>P");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 606;
      stringBuffer0.append(false);
      Options options0 = new Options();
      String string1 = "11~gvM]NAmDb&wbt/";
      boolean boolean0 = false;
      Option option0 = new Option("arg", "<6-a141d>P");
      option0.setArgs(74);
      options0.addOption(option0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(606, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 606
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-852);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-852));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+c V-|B N5qu0\"~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[1] = (Object) "+c V-|B N5qu0\"~";
      objectArray0[2] = (Object) "Al`oNz;$[D;@";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Al`oNz;$[D;@", objectArray0);
      helpFormatter0.defaultNewLine = "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 31;
      String string0 = "UG.;,-dv4:$LUaz1|k";
      Options options0 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "UG.;,-dv4:$LUaz1|k", "UG.;,-dv4:$LUaz1|k", (Options) null, 31, 31, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", (-617), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      String string0 = "[XP{ *6E_  \"";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "[XP{ *6E_  \"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("vNZbcAO");
      String string0 = " :: ";
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      options1.getOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-334), "vNZbcAO", "vNZbcAO", options1, (-334), (-2), "9V$~H%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('9');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 212, (-4567), "");
      helpFormatter0.setDescPadding((-946));
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("kuJ]/uZ2hFz+Q|DgqB", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-2));
      assertEquals((-2), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("B>P*@clc");
      helpFormatter0.getOptionComparator();
      assertEquals("B>P*@clc", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 5954;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v";
      Options options0 = new Options();
      helpFormatter0.printHelp("v", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y6A7^{`xDb;C>lYho";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.println('9');
      objectArray0[3] = (Object) "v";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter";
      PrintWriter printWriter0 = mockPrintWriter0.printf("y6A7^{`xDb;C>lYho", objectArray0);
      options0.hasShortOption("--");
      options0.addOption("", "usage: ", true, "org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 1, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      int int0 = 551;
      helpFormatter0.printWrapped(printWriter0, 551, "arg");
      helpFormatter0.printUsage(printWriter0, 551, " | ");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int1 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, false, "Rq0I3g8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-465);
      helpFormatter0.setWidth((-465));
      PrintWriter printWriter0 = null;
      String string0 = "";
      String string1 = "AVh]fR}`[E";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("1E0`$", "AVh]fR}`[E", false, "AVh]fR}`[E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1E0`$' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("kt9fV", "arg", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "org.apache.commons.cli.Options", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-1018), options2, (-949), 678);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Vf'3#1*u";
      helpFormatter0.setSyntaxPrefix("Vf'3#1*u");
      helpFormatter0.defaultArgName = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "Ir>xIJ[rvxzq23{*^&*", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "02MUBn=.}R%";
      helpFormatter0.defaultSyntaxPrefix = "02MUBn=.}R%";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("@662Wx+#o");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y?;5M-e?L*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = Locale.JAPAN;
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Y?;5M-e?L*";
      mockPrintWriter0.format(locale0, "", objectArray0);
      int int0 = (-3056);
      String string1 = "N+\\q%=N4<)G";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "K9eou3?e&;npru4PG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "L SIdjce");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
