/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:17:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3465, 64, " ");
      stringBuffer1.trimToSize();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "!S&u4ht{~ox");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 537, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3192, "[", "&hyAV|g", options0, "wv\"h0r ^7u>", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("usage: ", 0, 1);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 0, "arg", "\n", options0, 1, 0, "--", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "has already been selected: '");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      File file0 = MockFile.createTempFile("t?lH[e)/1 M0Q", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "t?lH[e)/1 M0Q");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("af@");
      helpFormatter0.defaultSyntaxPrefix = "z";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-422));
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("VWE3Ei#2K", "usage: ", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 24, "VWE3Ei#2K", (String) null, options1, 24, 24, "VWE3Ei#2K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "\n";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1897);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "Hq5aC");
      options1.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultLeftPad = 9;
      Comparator<Locale> comparator0 = (Comparator<Locale>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      options0.hasLongOption("6!Fz3G%y!asn!`");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 856, options1, 9, (-2888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1833);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding((-1833));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YUfUp`uD]k.7");
      mockPrintWriter0.append((CharSequence) " ");
      mockPrintWriter0.checkError();
      mockPrintWriter0.print((double) 3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 979, "--");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "   ";
      // Undeclared exception!
      try { 
        options0.addOption("pUynqJo*77hk", "usage: ", false, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pUynqJo*77hk' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1319));
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Locale locale0 = Locale.UK;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.setNewLine("|2o]jL:iWS'%W_T");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('t');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 58, (-4474), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("sx[Z/*6hs)", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1444), (Options) null, 31, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$#`(%`*KB");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding((-1231));
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "$#`(%`*KB", "$#`(%`*KB", options1, ";BZa)flg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-678), (-678));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("E", true, "--");
      options0.addOption("nk", "has already been selected: '", false, "line.separator");
      helpFormatter0.printHelp(518, "Y\"Xlv+oVN!RG", "", options0, "*a3VVhG4 `ly", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7:{Fp5ZIedTBOz{C5/", "--", (Options) null, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      int int0 = 995;
      Options options0 = new Options();
      options0.hasOption("381Y k74?h% k");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      helpFormatter0.defaultSyntaxPrefix = "[";
      helpFormatter0.setLeftPadding((-3560));
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.print((double) 3);
      String string1 = "";
      String string2 = "5^+}(`@yV^3*~MPE6";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(995, "?Cj&W", "", options0, "5^+}(`@yV^3*~MPE6");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "--";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cmdLineSyntax not provided");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, "cmdLineSyntax not provided", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2);
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2, "[29Ppjj( ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 609, 609);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "CI%fJ'@XT@+", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(62);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 93, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 93, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(101, "oA", "oA", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "4WjJ7Z9fQzX*>yg:j");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1876), options1, 0, 1313);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 3;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", " ", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth((-693));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 589, "org.apache.commons.cli.Options", "\n", options0, 1, 74, (String) null, true);
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#HG3c7J]C+KU(oH");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "u4jH~*>! tmx/'U", "N6crO%JZh=$A", (Options) null, 34, 34, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('\u0011');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped(printWriter0, 3, "\n");
      helpFormatter0.getOptPrefix();
      helpFormatter2.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7q";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3832), "7q", "7q", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 11;
      String string0 = "riJ\"Q41V!i})7o3";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 11, 3557, "riJ\"Q41V!i})7o3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName("");
      assertEquals("", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(2351);
      helpFormatter0.getArgName();
      String string0 = "riJ\"Q41V!i})7o3";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 11, "riJ\"Q41V!i})7o3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 764, "usage: ", (String) null, options0, 764, 1, "?uRz4Z?9h~");
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options0 = new Options();
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 644, (Options) null, 4207, 644);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("yg&_1ou#q]", "G68n-(P_[EARc", options0, "usage: ");
      helpFormatter2.findWrapPos("89Z/Q%{", 1, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 273, (String) null, "arg", options0, 1, 32, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "arg", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append('H');
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1282), "", "line.separator", options0, 3, 3, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "arg", options0, " ");
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("YjTsd6@uGg0u", (String) null, options2, "YjTsd6@uGg0u");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">Z");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3696, "y`|+{ALafK-");
      helpFormatter0.setLeftPadding(3696);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 2, 2);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      int int0 = (-3430);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "D$X.oeIX'&>X+W");
      options1.addOption((String) null, true, "org.apache.commons.cli.Util");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "arg", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "?25Ov0Xm6?XEHQ$c$5x", "66Dmn)}", options1, 74, 9, "arg", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1618, "arg", "-", options0, (-143), 1618, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 104, "<");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "}RGP'(tn.", options0, "a\"uBh\"j= ");
      Options options2 = new Options();
      int int0 = 3099;
      helpFormatter1.renderOptions((StringBuffer) null, 74, options2, 3, 3099);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "arg", options0, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "K;3a&J>iv:/0a:R4", options0, ",t9h2$\".s{", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append('8');
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "*jcgPOy9w", (String) null, options1, (-1282), 74, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "arg", options0, "s");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1381, options0, 4620, 1381);
      helpFormatter0.renderOptions(stringBuffer1, 1, options0, 493, 1381);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printHelp(printWriter0, 150, "l:wL8yA4", "", options1, 3, 1, "   ", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("af@");
      helpFormatter0.defaultSyntaxPrefix = "z";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-422));
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("m{q[");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";ee<j#P");
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3089, " ", (String) null, options0, 74, 1, "trb#)rdf^TmO<M", true);
      helpFormatter1.printHelp("line.separator", "e^&aN/Ir2jE4]=I", options0, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('/');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 155, "CgYCD@G f.xebdDw(1", "\n", options1, 155, 2, "usage: ", false);
      helpFormatter1.printHelp("Ww2Etgb}k ", "line.separator", options1, "(zET:{O^Lt\"(%z");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding((-683));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(118, "\n", "(", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.printHelp("\n", "arg", options0, "s");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp("<", "", options1, ", ");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 584, (-294));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      Option option0 = new Option((String) null, true, "usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(212, "8/5)HG^bP$)$", (String) null, options0, "gu>%1 E", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "The option '", "\"", options0, 74, 995, "Pz)4-0I{+3dPs|0T~T", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "#+2=:Sj7ejnE", "|.", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.printf("arg", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", (String) null, options1, (-1775), 444, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      filterOutputStream0.close();
      int int0 = 0;
      String string0 = "EkfV*WA:;H";
      String string1 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), ".dC<ecr)vcKj4w", "EkfV*WA:;H", options0, (-1), 0, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("[");
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 995, "", "[", options0, (-1276), 1351, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(13, "tPRL2'sqc|3?$ ", "", options1, "5", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 290, "\n", ".dC<ecr)vcKj4w", options1, (-1), 74, "EkfV*WA:;H", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2494));
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "arg", options0, "s");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("arg", true, "\n");
      Options options2 = new Options();
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("epdr?{`2Efg0i^", "", (Options) null, "c4I=]I!;PzQfo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("A_Pp/eA^,I23p{0TRqb", "A_Pp/eA^,I23p{0TRqb", options0, "");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "A_Pp/eA^,I23p{0TRqb", true, "");
      options0.addOption(option0);
      options0.addOption(option0);
      helpFormatter0.printHelp("?", "", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options2 = new Options();
      Options options3 = options1.addOption(option0);
      helpFormatter0.printHelp("=U>P0/SL7+*x?\" 5B", ".$JLL5", options3, "vk0hk");
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1445), "HvC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(32);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "--");
      Options options2 = new Options();
      Options options3 = options1.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commoscli.HelpFormatter", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, "srF8H)`IEM.a");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printUsage(printWriter0, 7, "]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-3507));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1040);
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setDescPadding((-1040));
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      String string1 = "-";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("R^['m*EBa", false, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R^['m*EBa' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "Hrs`g)7!hZ:i", false, "");
      options0.addOption(option0);
      helpFormatter0.setWidth(989);
      helpFormatter0.printHelp("#Omxsr'R#pW", (String) null, options0, "", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 995, "");
      helpFormatter0.setWidth(862);
      helpFormatter0.rtrim("SYxH}@");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      helpFormatter0.defaultSyntaxPrefix = "[";
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.print((double) 3);
      helpFormatter0.printHelp(995, "?Cj&W", "", options0, "5^+}(`@yV^3*~MPE6");
      helpFormatter0.defaultDescPad = 995;
      helpFormatter0.printWrapped(printWriter0, 32, 3166, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[", options0, "5^+}(`@yV^3*~MPE6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("P", false, "\n");
      Options options2 = options1.addOption("", "J<Bp[", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-258), "Ogiz`w2@R8i6da;5i", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "\n");
      helpFormatter0.printHelp("arg", options1, true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1590), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "", true, "");
      options0.addOption(option0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "A{ZyF_oUWlu)";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "ZTtdI", "A{ZyF_oUWlu)", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "\n");
      Options options1 = options0.addOption("arg", true, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(1913, "Pz[7M1nL", (String) null, options2, "Pz[7M1nL", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3186, "                               ", " [ARG]", options0, "-");
      helpFormatter1.printHelp(3, " ", "", options0, " ", false);
      helpFormatter0.printHelp("usage: ", options0, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-4740), options0, 64, (-4740));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1264, "riJQ41V!i})7o3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 5;
      String string0 = "riJQ41V!i})7o3";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5, "riJQ41V!i})7o3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.defaultNewLine = "Q|btu_`z]";
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-962), "--", "F9Khg", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "\n");
      Options options1 = options0.addOption("arg", false, " ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "Pz[7M1nL", (String) null, options2, "Pz[7M1nL", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "", options0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "*]c:rPDE jN-", " [ARG]", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "~", "{JULl/", options0, "]", false);
      helpFormatter0.printHelp("~", options0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print("");
      mockPrintWriter0.append((CharSequence) "-");
      int int0 = 2023;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "F3*_5,}vW", (String) null, options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      mockPrintWriter0.printf("", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", false, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options2);
      Options options3 = new Options();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "\n");
      Options options1 = new Options();
      options1.addOption(option0);
      helpFormatter0.printHelp("=U>P0/SL7+*x?\" 5B", "Pz[7M1nL", options1, "org.apache.commoscli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "H`rs`C)7!h::i", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp("CR2Vef", "[ARG...]", options0, "H`rs`C)7!h::i");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      Option option0 = new Option("", "--", false, "--");
      options0.addOption(option0);
      helpFormatter0.printHelp("' was specified but an option from this group ", "", options0, "YB*");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, " ", "", options0, " ", false);
      helpFormatter0.printHelp("usage: ", options0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(31);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "-", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.createPadding(1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5, "riJQ41V!i})7o3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&2}9l6sW`BWPc,Z(");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Options options0 = new Options();
      helpFormatter0.printHelp("k~", "k~", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("_ypul{:<");
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      MockFile mockFile0 = new MockFile("6;", "6;");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string1 = null;
      int int0 = (-1545);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1545), (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter$1");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      int int0 = 0;
      filterOutputStream0.close();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = (-1);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("K]O", "", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'K]O' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.setNewLine("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, " ", "", options0, " ", false);
      helpFormatter0.printHelp("usage: ", options0, false);
      assertEquals("arg", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setNewLine("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      int int0 = 3636;
      Options options0 = new Options();
      String string1 = "arg";
      boolean boolean0 = true;
      options0.addOption("arg", "v5XoOtjXhF8a66<IpVB", true, "l1B#2(!1i");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "=F5(PNp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&2}9l6sW`BWPc,Z(");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1970), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 819, 819, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter2.append('/');
      helpFormatter0.printUsage(printWriter1, 3090, "6w");
      helpFormatter0.setWidth(10);
      assertEquals(10, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setSyntaxPrefix("58");
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 3, 5749);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      helpFormatter0.setArgName("=\"T\"R8");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("=\"T\"R8", helpFormatter0.getArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = " [ARG]";
      helpFormatter0.setLongOptSeparator(" [ARG]");
      String string1 = "FIh-'Z *X81T;|'";
      Options options0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\n", "'LkQ8DS*>lH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 'LkQ8DS*>lH
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = 'q';
      charArray0[3] = 'c';
      charArray0[4] = 'q';
      charArray0[5] = 'K';
      charArray0[6] = 'h';
      charArray0[7] = '~';
      charArray0[8] = ',';
      mockPrintWriter1.write(charArray0);
      Options options1 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 31, options1, 31, 31);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp("`(", "", options0, "?Cj&W");
      assertEquals("?Cj&W", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      int int0 = (-556);
      helpFormatter0.setLeftPadding((-556));
      File file0 = MockFile.createTempFile("arg", "--");
      MockFile mockFile0 = new MockFile(file0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(821, "", "]", options0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("?", "?", false, "arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ">", options2, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3085;
      helpFormatter0.createPadding(3085);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("-", "=#bDOFS{cqhV1>", true, ";CcKgUTwn^{;.i<t!3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("o?}H)KDLKMAE", "o?}H)KDLKMAE", options0, "kb");
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      String string1 = "-";
      Options options0 = new Options();
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) dataOutputStream0;
      objectArray0[2] = (Object) dataOutputStream0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) dataOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options0, 0, (-803));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = " ";
      helpFormatter0.setLongOptPrefix(" ");
      String string1 = "@I";
      MockFile mockFile0 = new MockFile("-");
      File file0 = MockFile.createTempFile("usage: ", "@I", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "\n");
      String string2 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "cmdLineSyntax not provided");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Cj&W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "?Cj&W", options0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?Cj&W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.getDescPadding();
      assertEquals("?Cj&W", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "\n", "ZTtdI", options0, "-", false);
      assertEquals(3, helpFormatter2.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", " ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
