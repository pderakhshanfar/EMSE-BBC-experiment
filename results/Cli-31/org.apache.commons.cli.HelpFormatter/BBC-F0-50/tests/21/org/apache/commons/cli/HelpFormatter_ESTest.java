/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:18:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2201;
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2201, 2201, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      String string0 = "58H4H";
      Options options2 = options1.addOption("arg", "58H4H", true, "\n");
      options2.getMatchingOptions("-");
      helpFormatter0.printHelp("h", "tn2q81P}Xo~Z* 2+", options2, "`}y~cscHWdJSp=~Hr", true);
      // Undeclared exception!
      helpFormatter0.createPadding(4643);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.defaultWidth = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "T.}eID+Ir");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T.}eID+Ir", "]", options1, "aqP?@P79X}fslo", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos(" &r{Q6", 3, (-1));
      helpFormatter0.createPadding(32);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("p", "L~*\"wC!sxN1[Ci.yu1Y", true, "--");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "", true, "usage: ");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("x,w9gMP!,-d6Ef5&Z", (Object[]) null);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, ".h\"WK\"_ n8:*3?\u0000mYS");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "\n");
      helpFormatter0.defaultWidth = (-2145);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R5'G5 ~3imu\"DHj4zh", "~)[X?JN3wO+q! wO", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2521));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "=']zU00(2");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 93, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      String string0 = ".gzg,wNc6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 686, ".gzg,wNc6", "--", options1, (-1), 34, "17");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("q8,=&z-?a~%8j.@");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      String string0 = "KzHu[XUh";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "q8,=&z-?a~%8j.@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 116;
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 116, 2, "arg");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 0, options1, 18, 1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-552));
      options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "-", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1220;
      helpFormatter0.defaultDescPad = (-405);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-4267);
      helpFormatter0.setLeftPadding(64);
      String string0 = "|nK~(8znnnE";
      helpFormatter0.setLongOptSeparator("|nK~(8znnnE");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("`?5I2", (-4267), 4873);
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|nK~(8znnnE", "`?5I2", (Options) null, "|nK~(8znnnE", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      options0.hasShortOption("--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "\n", options1, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("LR.f&A4B@4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) optionGroup1;
      objectArray0[4] = (Object) optionGroup1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) optionGroup1;
      objectArray0[7] = (Object) options1;
      Object object2 = new Object();
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "' contains an illegal character : '", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 2522, "usage: ", "s*B]", options0, 44, (-1), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVSJ%WC}0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "m";
      objectArray0[7] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "m", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 22, 22, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2);
      options1.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 1276, 1276);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("\n", "\n", options1, "\n", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 1055, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.Util";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string1 = "has already been selected: '";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "5 q$h", "has already been selected: '", options0, "org.apache.commons.cli.Util", false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = options0.addOption((String) null, false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3192, "M)t}bM<2/!L?DX[/D;", "]", options1, 14, 3192, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "cmdLineSyntax not provided", "", options0, 607, 10, "SN", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#K\"", (String) null, (Options) null, "#K\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", (String) null, true, (String) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1560, "c/aEa|7", "-", options1, 50, 3, "-", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = options0.addOption((String) null, "*<gb_hhM1KQV]#C'", true, "r{Su+yn%\"6lL");
      helpFormatter0.printHelp(" ", options1, true);
      int int0 = (-582);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-3015));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getLongOptSeparator();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "\n", options1, "\n", true);
      MockFile.createTempFile("arg", "aya$:G");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setLeftPadding((-1711));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@S", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "usage: ", "", options0, 1209, (-1258), "(", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      boolean boolean0 = true;
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "arg", "&=Cn~B) lqsn?g;q3", options0, 74, 64, "arg", true);
      helpFormatter1.getLongOptSeparator();
      int int0 = 1170;
      helpFormatter1.renderOptions((StringBuffer) null, (-343), options0, 1170, 2165);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-910), (Options) null, (-658), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.printHelp("5qai*2Jx[ic`fE-{", "", options1, "", false);
      MockFile.createTempFile("^[E'_IGC=b;", ", ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "J]V< *6+5_f&Op", (String) null, (Options) null, "{]oQ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "--");
      Options options1 = options0.addOption("arg", false, "cILEa +y,=}EQoO");
      helpFormatter0.printHelp("o]C28=U17S/Zcd", options1, true);
      options1.hasOption("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(32, "o]C28=U17S/Zcd", "Q#FVg#+cPddlNBS*3dc", options1, "[ option: ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 32, (-753), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      options1.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, ")t6/bhcX$5W) ");
      helpFormatter0.findWrapPos(")t6/bhcX$5W) ", 1, 1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wH;h");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2349, "", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "JZT|E%I+8If^iJ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 74, options1, 0, 74);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      mockPrintWriter0.println("X{:+cP|");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "0d8/";
      objectArray0[3] = (Object) "Qy!M{sH_|TOXN";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("Qy!M{sH_|TOXN", options0, true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 0);
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("[ARG...]");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("   ", "", options0, "org.apache.commons.cli.Option", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append('G');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "3Op`YYv|,4dh", (String) null, options0, 70, 70, "org.apache.commons.cli.Option", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 74, options1, 0, 74);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ option: ", true);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = null;
      Option option0 = new Option((String) null, "-", true, "usage: ");
      option0.setArgs((-1629));
      mockPrintWriter0.println((Object) option0);
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      int int0 = (-831);
      String string2 = "";
      Options options0 = null;
      int int1 = 267;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-831), "[ option: ", "", (Options) null, (-831), 267, "[ option: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 115, (-1619), "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printUsage(printWriter0, 115, "7[p[e/T-%(ARZ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.setLongOptPrefix("ws3Lr{e ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("ws3Lr{e ", "GvB2S", options0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append('G');
      MockFile mockFile0 = new MockFile(":k,TP*?$\"sHO", "--");
      File file0 = MockFile.createTempFile("arg", "GvB2S", (File) mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1199, "GvB2S", "", options0, 1733, 1009, "", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(")", ")", options0, "org.apache.commons.cli.ParseException");
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setOptPrefix("usage: ");
      mockFile0.setExecutable(true, false);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp(">", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('(');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1290, "", (String) null, options0, (-1512), (-1512), "!rr*9 #Fbl", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", "--", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      StringBuffer stringBuffer2 = helpFormatter2.renderOptions(stringBuffer1, (-1607), options0, 63, 21);
      helpFormatter1.renderWrappedText(stringBuffer2, 13, 21, "0d8/");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3357);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.setLeftPadding(3357);
      helpFormatter0.defaultDescPad = 899;
      int int0 = (-1);
      helpFormatter0.defaultWidth = (-1);
      stringBuffer0.insert(0, 757.2664);
      stringBuffer0.append((CharSequence) " ");
      String string0 = "   ";
      helpFormatter0.setNewLine("   ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringBuffer0.append(1216L);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, (-2307), "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.findWrapPos("?6", 3, 3);
      int int1 = (-979);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-979));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      options0.getOptions();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 886, "");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "0d8/";
      objectArray0[3] = (Object) "Qy!M{sH_|TOXN";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("Qy!M{sH_|TOXN", options0, true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("~'`RN:y~t)KQqcFS");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1465, "");
      helpFormatter0.getOptionComparator();
      helpFormatter1.printWrapped(printWriter0, 34, "bT");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-18);
      String string0 = "";
      String string1 = " ] [ long ";
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.delete();
      objectArray0[0] = (Object) "usage: ";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Locale locale0 = Locale.KOREAN;
      mockPrintWriter1.printf(locale0, "   ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-46), 10, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "--", options1, 74, 425, "");
      helpFormatter0.rtrim(";r@qiiK5h}=gi?x=Q'");
      helpFormatter0.getWidth();
      helpFormatter2.setLeftPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1498, "", "A CloneNotSupportedException was thrown: ", options1, "Ne3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter1.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "w Va{hBHaPb)2C=pNfA", "w Va{hBHaPb)2C=pNfA", (Options) null, "--");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      helpFormatter0.defaultLongOptPrefix = "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      options0.addOption("", "", true, "arg");
      Collection collection0 = new LinkedList<OptionGroup>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3006, "0d8/", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "--");
      helpFormatter0.defaultArgName = "$5=1d#/,Uuq";
      int int0 = 74;
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.defaultWidth = 1972;
      helpFormatter0.printHelp(34, "h7!X~nL[|hTMH)-c6", "", options0, "0 8");
      String string0 = "%I#Ma-sf]d?tal,j.";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("%I#Ma-sf]d?tal,j.", "$5=1d#/,Uuq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $5=1d#/,Uuq
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 216;
      StringBuffer stringBuffer0 = new StringBuffer(216);
      int int1 = 3017;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 216, (Options) null, 216, 3017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      options0.getOptions();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 886, "\n");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter1.getWidth();
      helpFormatter1.setLeftPadding(63);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(34, "\n", ":tNy`E)\">", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 1428, options1, 0, 4384);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, (String) null, "tW@El8wi_+:zi", options1, 4384, (-633), "eD>6'Gs3CaOa}X!>", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(892);
      String string0 = "";
      Options options1 = options0.addOption("", "IJs4MF@O{}jWdxLJx", true, "h7!X~nL[|hTMH)-c6");
      helpFormatter0.printHelp(34, " ] [ long ", "", options1, "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("(RT<mw0r^&HZ", "%I#Ma-sf]d?tal,j.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %I#Ma-sf]d?tal,j.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 1428, options1, 0, 4384);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "Y3Wq%MOXGP5y/aX32?";
      Option option1 = new Option("", "Y3Wq%MOXGP5y/aX32?");
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp("@^,$[k3", "Y3Wq%MOXGP5y/aX32?", options0, "Y3Wq%MOXGP5y/aX32?", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1399);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(621, "usage: ", "usage: ", options0, "D", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      String string0 = ".gzg,wNc6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth(0);
      options1.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("17", options0, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      boolean boolean0 = false;
      String string1 = "Z7H:tKQ7";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Z7H:tKQ7", options0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      PrintWriter printWriter0 = mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("0d8/", options0, true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(printWriter0, 93, options0, 2389, 2389);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((-1339), "\n", "usage: ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "0d8/";
      objectArray0[3] = (Object) "Qy!M{sH_|TOXN";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("Qy!M{sH_|TOXN", options0, true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", "V~%Y&3vn1Yrx_ydN#(", options2, "arg", false);
      helpFormatter0.printHelp(printWriter0, 9, "arg", "", options2, 74, 9, "--", true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.setLongOptPrefix("pwsLr{e ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp(9, "PYjwu%(N", "PYjwu%(N", options0, "D4.WKGZ PmbHjzS/Q");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf((Locale) null, "--", objectArray0);
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      bufferedOutputStream0.flush();
      helpFormatter0.printOptions(mockPrintWriter0, 1428, options1, 4, 4384);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1617, "--", "usage: ", options0, (String) null);
      String string0 = "~*W7;\\[Tc,q(r";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream("%", "%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      Options options2 = options1.addOption("arg", "usage: ", false, "");
      options1.getOptions();
      PrintWriter printWriter0 = null;
      int int0 = (-2111);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2111), "\n", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      helpFormatter0.printHelp("17", options0, false);
      helpFormatter0.getLongOptSeparator();
      options1.toString();
      helpFormatter0.printHelp(" ]", ".gzg,wNc6", options1, "", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "T2";
      String string1 = "NO_ARGS_ALLOWED";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "T2", "NO_ARGS_ALLOWED", (Options) null, 0, 0, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      String string0 = ".gzg,wNc6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 686, ".gzg,wNc6", "--", options1, (-1), 34, "17");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 750, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      String string0 = ")T,+-}P(~m";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 7, 2005);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      String string0 = ".gzg,wNc6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("17", false, ":jw=A");
      Options options3 = options2.addOption("arg", ":jw=A", false, "hy('2d]b|X$u~OWVDF@");
      options3.getOptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "ZWq", options3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")T,+-}P(~m");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ] [ long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      PrintWriter printWriter0 = mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("0d8/", options0, true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", "--", options1, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "N", "0d8/", options1, 1, (-1512), "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0d8/";
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      int int0 = (-685);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-685), "[ option: ", "0d8/", (Options) null, 17, 1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "2Y";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), "2Y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "=2Nf]@:4x]X_}", false, "-");
      helpFormatter0.defaultArgName = "=2Nf]@:4x]X_}";
      Options options2 = options1.addOption(option0);
      option0.setType((Object) null);
      Options options3 = options2.addOption("arg", false, "arg");
      option0.clone();
      options3.hasShortOption("");
      options0.addOption((String) null, "gNtLp1*@`&}TwF`:", false, "--");
      options1.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption((String) null, "~Z\"h9q.'QHF7[gjUm", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "", (String) null, options4, "`L%u", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "[ option: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("0d8/", options0, true);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp(" ", "-", options1, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-941), "usage: ", "m\"M", options0, 44, (-941), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.setLongOptPrefix("pwsLr{e ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "pwsLr{e ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setLeftPadding((-1934));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1934), "", "D1R7},a\"N2iYN%R}'NE", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 54;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 54, 117, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0d8/";
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1;
      String string1 = "Qy!M{sH_|TOXN";
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "0d8/", "CaM}0Dr.f/Ue,Kca=g", options1, "0d8/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "x9,{G";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "Yl>fs-jQ6RvZK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.setNewLine("   ");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 4168, "line.separator");
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth((-960));
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print('Y');
      MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "");
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.flush();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter2.print('2');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 4168, (Options) null, 57, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("pwsLr{e ", options0, false);
      helpFormatter0.setSyntaxPrefix("pwsLr{e ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ", (Options) null, "<df9&'+ClbZP", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("c6C", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("pwsLr{e ", options0, false);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "[ option: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("pwsLr{e ", options0, true);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, "[ option: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.printf("arg", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter1, (-408), options0, 1089, 74);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setLeftPadding(1089);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-305), (-305), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("pwsLr{e ", options0, false);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 967, "[ option: ");
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 839;
      helpFormatter0.createPadding(839);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      int int1 = 58;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "arg", (-1334), 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "-");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0d8/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1;
      Object[] objectArray0 = new Object[1];
      mockFile0.delete();
      objectArray0[0] = (Object) "0d8/";
      mockPrintWriter0.printf("Qy!M{sH_|TOXN", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("xgny2/BdM fOJB(5", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4224);
      helpFormatter0.setDescPadding((-4224));
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-4224));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|");
      String string0 = "usage: ";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "|";
      mockPrintWriter0.format("usage: ", objectArray0);
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 32;
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) options1;
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      helpFormatter0.printHelp("<A$g", options1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 32;
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "x9,{G";
      helpFormatter0.setLongOptPrefix("Yl>fs-jQ6RvZK");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-398), 0, "Yl>fs-jQ6RvZK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2404;
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-346), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Option option0 = new Option("arg", ">Xk$g xY!d/O0");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1517), options1, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("pwsLr{e ", options0, false);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, "[ option: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      int int0 = 0;
      String string0 = "";
      String string1 = ".gzg,wNc6";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", ".gzg,wNc6", (Options) null, 0, 0, ".gzg,wNc6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lR&ES<";
      helpFormatter0.setLongOptPrefix("lR&ES<");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string1 = "N]-D!7|";
      MockFile mockFile1 = new MockFile(mockFile0, "N]-D!7|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 1449;
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string3 = "-";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(";%KHtcQMuV6Re}>nRV");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/TlkFJ/LE'E{I[{M");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "NX");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "pp2W.t_;rk9DJF^";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "t";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "pp2W.t_;rk9DJF^", "", options1, "t", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 1428, options1, 0, 4384);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) options1;
      mockPrintWriter0.printf("^}=&", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1428, options1, 0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1157));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1554);
      helpFormatter0.defaultLeftPad = (-1554);
      helpFormatter0.defaultDescPad = (-1554);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "oi$x4cO@[Z";
      helpFormatter0.setSyntaxPrefix("oi$x4cO@[Z");
      String string0 = "kB[|>wJ_\\J";
      helpFormatter0.setSyntaxPrefix("kB[|>wJ_J");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("oi$x4cO@[Z", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      Options options0 = null;
      double double0 = (-171.236639);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1198, (CharSequence) "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1198
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2651, "IA7MRR(CZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("5");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "5");
      helpFormatter0.setArgName("5");
      helpFormatter0.renderWrappedText(stringBuffer0, 2468, (-305), "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("kOpmk11|", "5", true, "sePdGcPq[w_8o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'kOpmk11|' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("P*J u,|$");
      helpFormatter0.createPadding(0);
      helpFormatter0.getArgName();
      int int0 = (-539);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
