/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:13:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "usage: ");
      helpFormatter0.optionComparator = null;
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 2245, (-1010), "ISKSB_");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = " ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SR");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-262), (-262), "SR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-194);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$FtT", "$FtT", (Options) null, "7C_{3*w", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(10);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(48);
      helpFormatter0.setNewLine("N0Mie3yKwUJw");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("N0Mie3yKwUJw", "N0Mie3yKwUJw", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 22, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(8);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, " ", "\n", options0, "-");
      helpFormatter1.findWrapPos("=y;&9e LZTI", 4, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "(KUYoNys+F>ik%V-iB;";
      Options options0 = new Options();
      String string2 = "";
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("' contains an illegal character : '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 103, "' contains an illegal character : '", "", options0, 1, (-1935), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "^YMO6h{[Xh", "Xi({", (Options) null, "Xi({", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2898, "usage: ", "2GHowKD`[G_nB Obd", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "o|`U\"K9S\"D");
      helpFormatter0.printHelp("[", options1, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "H!b0;#E", "H!b0;#E", (Options) null, "H!b0;#E", false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("");
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", "arg", true, "usage: ");
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption((String) null, "--", false, "-");
      String string0 = "k'x6f$";
      helpFormatter0.printHelp("J|JMeF@", options0, true);
      // Undeclared exception!
      try { 
        options0.addOption("U'\"6lxA0;#\"F", "-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U'\"6lxA0;#\"F' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      options1.addOption("JIZV8", "W", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1721, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", "arg", true, "usage: ");
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 63, (Options) null, 63, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.getOption(" ");
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, " ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "tg";
      helpFormatter0.setOptPrefix("");
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "tg");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.renderOptions((StringBuffer) null, 1461, options0, 1461, 114);
      helpFormatter0.printHelp(114, "-", "-", options0, "-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 4, options0, 114, 268);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      helpFormatter0.printHelp("arg", options0, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options1, (-2), (-1375));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1647, "p@|8-g~iqa*FEEy_", "p@|8-g~iqa*FEEy_", options0, 1647, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer1, 606, 1, "");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("#dBqZY!#9ni:", "-");
      helpFormatter0.printHelp("#dBqZY!#9ni:", "", options0, "\"J6?sHbp>");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-529);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", (Options) null, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("--", "`ewU9u8PKj&0\u0000Vz", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hd+Umm>");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.Util", (String) null, options0, (-1), 31, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "!d?(]cr8w#m;f8 'u";
      helpFormatter0.defaultLeftPad = (-3915);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!d?(]cr8w#m;f8 'u", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      Options options2 = options1.addOption("", "GM_>%=raEi1", false, "");
      options2.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "-");
      MockFile mockFile0 = new MockFile("wrZ0F5eM2Ew", "+~OUk#D");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "+~OUk#D");
      Options options0 = new Options();
      Options options1 = options0.addOption("wrZ0F5eM2Ew", true, "usage: ");
      Options options2 = options1.addOption("arg", "usage: ", false, "d8j");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1017), "wrZ0F5eM2Ew", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, ".hFn)tzAEK7fF{d6");
      Options options3 = options2.addOption("", "[", false, "");
      options3.getMatchingOptions("arg");
      helpFormatter0.printHelp("Z+5yT;$%4zd<[]", "", options3, " :: ", true);
      helpFormatter0.createPadding(4818);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2402;
      int int1 = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2402, options0, 0, 1362);
      // Undeclared exception!
      try { 
        stringBuffer1.setLength((-1974));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1974
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('7');
      stringWriter0.append('7');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "rH^gLcs~j\\%^";
      String string1 = "e`@\"";
      String string2 = "";
      String string3 = ":s9IZUF{4dcFXn>,";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-757), "", "U1kkzgO", options0, 813, 31, ":s9IZUF{4dcFXn>,", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "'", "e`@\"", options0, 1481, 1340, "", true);
      helpFormatter0.printHelp(1340, "'", "Illegal option name '", options0, "");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1960;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(10, "2}`=WzmQ", "", options1, "", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(7);
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Tt}=@P", "_k(6", (Options) null, "'/Btq(`I{H(^ QK$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Option option0 = new Option("arg", true, "--");
      mockPrintWriter0.println(0L);
      mockPrintWriter0.println("");
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setSyntaxPrefix(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[ARG...]");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ", 0, 0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, true);
      mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[ARG...]", options1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      String string0 = "arg";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      mockPrintWriter0.println(0L);
      options0.addOption(option0);
      String string1 = "e`@\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1587, "arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-2), 0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "'", " ", options1, 31, 31, "G~!A", true);
      helpFormatter0.findWrapPos("", 2764, (-1182));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("(rBC");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-1008);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-1008), options0, 111, 111);
      helpFormatter0.getArgName();
      int int1 = (-1130);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(">");
      Options options0 = null;
      int int0 = 25;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      String string0 = "%m294s5";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, (String) null, "%m294s5", (Options) null, 728, (-1363), "%m294s5", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.createPadding(974);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 974, 974, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1587, 5, "}|>MwfGS^");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1587, "rH^gLcs~j%^", "rH^gLcs~j%^", options0, 1587, 1587, "ansH~%bwu0zC7c", false);
      helpFormatter0.printHelp(1587, "BcFO>1", "}|>MwfGS^", options0, "+4W.o");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2388), (-45));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "83d";
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 3, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "F57!ZfNUhN~gTJ5l";
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      String string1 = "b#k\\'V\\H(1yGf[|7";
      StringBuffer stringBuffer1 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, (-851), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":k4*qid@)gE!d>AZXsk", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "-64JSKBT7Q");
      Options options3 = options2.addOption("", "--", true, "");
      Option option0 = new Option("", "KS],4*=_\"f^A", true, "arg");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(printWriter0, 74, "--", "arg", options4, 8, 1, "");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1564), " A0J{", "Y06`6", (Options) null, "Y06`6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      int int0 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "whU79Es";
      int int1 = 25;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "*", "whU79Es", options0, 25, 25, "BcFO>1", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("F57!ZfNUhN~gTJ5l", ")P", options0, "z^{r\"|aD<GJKzq|]3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "qs?/uggU#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("-", "usage: ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      Options options2 = options1.addOption("", "]6 i,H2hWUF [9uN9", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "[ Options: [ short ", "[ Options: [ short ", options2, 3, 3, "rkq$7+U8#vsS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      mockPrintWriter0.println(0L);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", true, "--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&)trnf.F zKGfj");
      options2.helpOptions();
      Options options3 = options2.addOption("arg", true, "");
      options3.getOptions();
      mockPrintWriter0.println("");
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "&)trnf.F zKGfj";
      helpFormatter0.printHelp("usage: ", "7'af", options3, "--", true);
      helpFormatter1.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      Options options0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " A0J{";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SJeAy+f+38~CsRnX", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "*", "SJeAy+f+38~CsRnX", (Options) null, 0, 0, " A0J{", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "--");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 3, "~wG2$ph \"O?f}&t1I1");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{iD/m*vV>y8^QLy1");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 5554, (Options) null, 5554, 5554);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("-", "org.apache.commons.cli.ParseException", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(",]iUPjwQ2#sIg!6c", 3, (-487));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('s');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      mockPrintWriter0.println(0L);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", true, (String) null);
      options2.helpOptions();
      options2.addOption("arg", true, "");
      mockPrintWriter0.println("");
      options1.helpOptions();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp("#^Tl/{']uj", "arg", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("-", "usage: ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      String string0 = "\"upEtFVZFx~B_UIUNCO";
      MockFile mockFile0 = new MockFile("EDs_,5[9n2fj", "\"upEtFVZFx~B_UIUNCO");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.getOptionComparator();
      int int0 = 3568;
      String string1 = "{;xi";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3568, "{;xi", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      options0.hasOption("dV''~d f.m1mo5M");
      Option option0 = new Option("Q", true, "arg");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, "Q", true, "Od");
      helpFormatter0.printHelp("UJ=N^O", ">", options1, "UJ=N^O");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("EDs_,5[9n2fj", "\"upEtFVZFx~B_UIUNCO");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      helpFormatter0.printHelp("0*Q)*?.qN=n", "0*Q)*?.qN=n", options0, "0*Q)*?.qN=n");
      helpFormatter0.printHelp("wmo9A:C{", "0*Q)*?.qN=n", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("arg", "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile("arg", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 229, "arg", options1);
      Locale locale0 = new Locale("-", "usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " `n55jzb|O4";
      objectArray0[1] = (Object) fileSystemHandling0;
      mockPrintWriter0.format(locale0, " `n55jzb|O4", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 74, options1, (-3287), 228);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('j');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 411, (Options) null, 286, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2893, "vEi#}We.J+LY", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2895);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2876), "Kn?Gv}]8XB", "arg", (Options) null, 2895, (-2876), "j5N6zJ?Q;@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "OXJ5t1AEpLkhu;DT ";
      helpFormatter0.defaultNewLine = "OXJ5t1AEpLkhu;DT ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-3466), options1, 2929, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setArgName("-");
      helpFormatter0.findWrapPos("nbt:FWn@", 921, 1981);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2126));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setArgName("   ");
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "G]:R717Ie", options0, "=g,B<gf>(s");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " | ", "=p*a>[Jb", options0, (-2204), (-2204), " | ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", "", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "OXJ5t1AEpLkhu;DT ";
      helpFormatter0.defaultNewLine = " YBNUN.";
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2789, "OXJ5t1AEpLkhu;DT ", "Kn?Gv}]8XB", (Options) null, (-2876), (-2876), "Kn?Gv}]8XB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("|iS60VGC7Mtksaz::'");
      helpFormatter0.printHelp(" ]", "org.apache.commons.cli.Options", options1, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 31, 1188);
      String string0 = "-";
      helpFormatter0.setOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1285), (-1650), "Q@ghT7=(`zjiiZz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("'", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 0;
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-197), "(g=O[62VYM%#,,=.", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2803;
      String string0 = "K";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("K", options0);
      String string1 = helpFormatter0.createPadding(2803);
      options0.getOptionGroups();
      helpFormatter0.setArgName(string1);
      int int1 = 0;
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, string1, ">", options0, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1172);
      helpFormatter0.setDescPadding(3092);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      locale0.clone();
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) " ]";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) " ]";
      mockPrintWriter0.format(locale0, " ]", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 581, 3092, ")#8?uKv");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2782;
      String string0 = "";
      Options options0 = new Options();
      options0.toString();
      String string1 = helpFormatter0.createPadding(2782);
      options0.getOptionGroups();
      helpFormatter0.setArgName(string1);
      int int1 = 0;
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, string1, ">", options0, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      String string0 = "arg";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, (Options) null, 266, (-827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ypETDtm");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setArgName("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "$X'SqT^F;1Z>;ZeBp9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k~E-HF[t%ayG");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "k~E-HF[t%ayG";
      objectArray0[1] = (Object) "k~E-HF[t%ayG";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "k~E-HF[t%ayG";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-217), "k~E-HF[t%ayG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "(n0x,QAu{O6Zm";
      helpFormatter0.defaultOptPrefix = "(n0x,QAu{O6Zm";
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2), options0, 1814, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("F57!ZfNUhN~gTJ5l");
      stringBuffer0.insert(0, 0.0);
      Options options0 = new Options();
      int int0 = 1188;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 31, 1188);
      String string0 = "-";
      helpFormatter0.setOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1285), (-1650), "Q@ghT7=(`zjiiZz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3799);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options0.helpOptions();
      Options options2 = options1.addOption("", false, "Q5");
      String string1 = "0#fv";
      options2.hasLongOption("0#fv");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3799), "", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "c4toO)9~2";
      String string2 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "";
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options1, "VR;FHp9;BrmqT", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1100);
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "\n", true, "+p%m,p-jH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(0);
      String string1 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("u,Z3N4)Y ");
      helpFormatter0.setLongOptSeparator("");
      int int0 = 13;
      String string2 = "M \\Vb9pDB,W8Z";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix(" :: ");
      helpFormatter0.setLongOptPrefix("s5@OO;M5z/_lS|C03");
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2803;
      String string0 = "";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "[";
      MockFile mockFile0 = new MockFile("", "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string2 = "";
      String string3 = " | ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", " | ", options0, 0, 0, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "[";
      MockFile mockFile0 = new MockFile("", "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string2 = "";
      Options options0 = new Options();
      String string3 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", " | ", options0, 0, 0, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      PrintWriter printWriter0 = null;
      int int0 = (-575);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      String string0 = " ] [ long ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "J<Yy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      String string0 = null;
      String string1 = "t=";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "<";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "<";
      objectArray0[7] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("<", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3410, ">");
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[ Options: [ short ");
      // Undeclared exception!
      try { 
        options1.addOption("[ Options: [ short ", "arg", true, "q7)|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "OXJ5t1AEpLkhu;DT ";
      helpFormatter0.defaultNewLine = " YBNUN.";
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, ",B> ?bK%z", "", (Options) null, "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1437);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "$YDyZ");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-5081);
      String string0 = "   ";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5081), "   ", "   ", options0, "   ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("'", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("A;<p");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("sy", "sy", (Options) null, "sy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      mockPrintWriter0.println(0L);
      Options options1 = options0.addOption(option0);
      String string0 = null;
      Options options2 = options1.addOption("", "usage: ", true, (String) null);
      String string1 = "";
      options2.helpOptions();
      Options options3 = options2.addOption("arg", true, "");
      mockPrintWriter0.println("");
      options1.helpOptions();
      helpFormatter0.defaultOptPrefix = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "", options3, 1896, (-1), (String) null, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      String string0 = null;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[\\";
      helpFormatter0.setLongOptSeparator("[");
      int int0 = 0;
      String string1 = "&z##yVN";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("org.apache.commons.cli.HelpFormatter$1");
      Option option0 = null;
      try {
        option0 = new Option("c=", "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'c=' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getSyntaxPrefix();
      assertEquals("--", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
