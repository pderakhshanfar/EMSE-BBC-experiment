* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 7764
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 623938658
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 16:59:57.301 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 1020 generations, 393123 statements, best individual has fitness: 119.0
* Minimizing test suite
[MASTER] 17:11:12.752 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 205
* Number of covered goals: 205
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 154
* Number of covered goals: 143
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 514
* Number of covered goals: 482
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 87%
* Total number of goals: 46
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 154
* Number of covered goals: 143
* Generated 140 tests with total length 1883
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:12:12.639 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.95695% of time used, but only 23/140 tests minimized), falling back to using all assertions
[MASTER] 17:12:16.069 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 17:12:22.179 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_82_1629220342179
[MASTER] 17:12:22.179 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 17:12:22.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:12:22.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:12:22.585 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:12:26.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_122_tmp__ESTest.test0(HelpFormatter_122_tmp__ESTest.java:166)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:12:26.040 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(helpFormatter0);

String string0 = "0hrkzqrM";
String string1 = "";
helpFormatter0.setArgName("");
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getArgName());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);

Options options0 = new Options();
assertNotNull(options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertNotNull(optionGroup0);

String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
Option option0 = new Option("0hrkzqrM", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
assertFalse(option0.hasArg());
assertNull(option0.getLongOpt());
assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
assertEquals("0hrkzqrM", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertEquals(48, option0.getId());
assertFalse(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArgName());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.isRequired());
assertEquals((-1), option0.getArgs());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(option0);

OptionGroup optionGroup1 = optionGroup0.addOption(option0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertFalse(option0.hasArg());
assertNull(option0.getLongOpt());
assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
assertEquals("0hrkzqrM", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertEquals(48, option0.getId());
assertFalse(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArgName());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.isRequired());
assertEquals((-1), option0.getArgs());
assertFalse(optionGroup1.isRequired());
assertNull(optionGroup1.getSelected());
assertSame(optionGroup0, optionGroup1);
assertSame(optionGroup1, optionGroup0);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNotNull(optionGroup1);

String[] stringArray0 = option0.getValues();
assertFalse(option0.hasArg());
assertNull(option0.getLongOpt());
assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
assertEquals("0hrkzqrM", option0.getOpt());
assertFalse(option0.hasOptionalArg());
assertEquals(48, option0.getId());
assertFalse(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArgName());
assertEquals("arg", option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.isRequired());
assertEquals((-1), option0.getArgs());
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertNull(stringArray0);

byte byte0 = (byte)107;
byte byte1 = (byte)64;
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

String string3 = helpFormatter0.createPadding(6259);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getArgName());
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string2));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(string3);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)1;
mockFileOutputStream0.write(byteArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/3
* Done!

* Computation finished
