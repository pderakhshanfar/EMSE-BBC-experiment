* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 2014
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 1293303405
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 17:04:39.938 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 289 generations, 124619 statements, best individual has fitness: 131.0
* Minimizing test suite
[MASTER] 17:15:55.883 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 205
* Number of covered goals: 204
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 154
* Number of covered goals: 140
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 56
* Number of covered goals: 56
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 514
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 46
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 154
* Number of covered goals: 140
* Generated 119 tests with total length 1823
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:16:38.415 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6772666666666667% of time used, but only 24/119 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 17:17:08.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.448 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.538 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.577 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.654 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.745 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:08.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:17:25.282 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_234_tmp__ESTest.test0(HelpFormatter_234_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:17:25.283 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertNotNull(helpFormatter0);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(dataOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
assertNotNull(mockPrintWriter0);

mockPrintWriter0.flush();
assertFalse(fileDescriptor0.valid());

helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4198, 4198, "4");
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertFalse(fileDescriptor0.valid());
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter("|`3'BRxWkX");
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

StringBuffer stringBuffer0 = new StringBuffer("\n");
assertEquals(1, stringBuffer0.length());
assertEquals("\n", stringBuffer0.toString());
assertNotNull(stringBuffer0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertNotNull(helpFormatter1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);

helpFormatter1.setArgName("|`3'BRxWkX");
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("|`3'BRxWkX", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertNotSame(helpFormatter1, helpFormatter0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);

Options options0 = new Options();
assertNotNull(options0);

int int0 = 33;
Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.Option");
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

helpFormatter1.printOptions(mockPrintWriter0, (-1), options1, 110, 1);

[MASTER] 17:17:30.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 17:17:30.172 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertNotNull(helpFormatter0);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.setWidth(0);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(0, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(0, helpFormatter0.defaultWidth);

String string0 = helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(0, helpFormatter0.getWidth());
assertNotNull(string0);
assertEquals("org.apache.commons.cli.HelpFormatter", string0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(0, helpFormatter0.defaultWidth);

Option option0 = options0.getOption("6kpwkrF/Hmi8r}");
assertNull(option0);

helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/23
* Done!

* Computation finished
