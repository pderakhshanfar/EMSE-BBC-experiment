/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:51:26 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "G=&,c5m u[g8S/uk");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultWidth = 0;
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp("uQ", "has already been selected: '", options0, "has already been selected: '", true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 44, options2, 3969, 3969);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "\n");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1409, options0, 1409, 1409);
      helpFormatter0.createPadding(1409);
      // Undeclared exception!
      helpFormatter0.createPadding(5403);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 254;
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("KALz6XpI", "--");
      option1.setDescription("ys!GC");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "KALz6XpI", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      int int0 = 12;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.ensureCapacity(1);
      int int1 = (-1547);
      stringBuffer0.append(0.0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "E^N7Q\"&z_w:j", "E^N7Q\"&z_w:j", options0, (-955), 912, "b},umn\"u/<7'RfO");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption((String) null, "\n", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("usage: ", 1, 2965);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.printf("usage: ", (Object[]) null);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.setDescPadding((-2386));
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "T#qD)RmQ0_", ". T$ Z]", options0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "[", (Options) null, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp("5", "5", options0, "5", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2386));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2630, options0, 2630, 2630);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 2422, "0e[ }");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 12, options0, 2422, 2630);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.findWrapPos("\n", 2669, (-503));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(4832);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "NO_ARGS_ALLOWED";
      helpFormatter0.defaultOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.setWidth((-708));
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-708), options0, 32, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-708), (-708), "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "' contains an illegal character : '";
      helpFormatter0.setSyntaxPrefix("' contains an illegal character : '");
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\n", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1779, (Options) null, 1779, 1779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-4032);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "--", options0, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 32, (-290), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("1:n", "1:n", options1, "1:n", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultDescPad = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      String string0 = "a";
      String string1 = "f";
      helpFormatter0.setNewLine("f");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "~-OaP^rmuPAmIq.q0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(819);
      helpFormatter0.findWrapPos("", 819, 819);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "RZ");
      Option option0 = null;
      try {
        option0 = new Optiontrue, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The optioncontains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, (Options) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, "E#o{phKI,^:'Me");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setOptPrefix("");
      int int0 = 2598;
      helpFormatter0.setLeftPadding(2598);
      helpFormatter0.getWidth();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(2598);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Options options0 = new Options();
      Option option0 = new Option("EU", "]OY0ftj%KV[6tGI", false, "Ovs,mpbtY&b+");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, options2, 74, (-1828));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setDescPadding((-3735));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setWidth((-357));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "\n", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      String string0 = "s!Gy9";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 553, "s!Gy9", "", options0, 553, 1, " {!W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.setWidth((-2573));
      helpFormatter0.setLeftPadding((-2573));
      options0.addOption("", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "arg", "arg", options0, "Q8", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "\n", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultOptPrefix = null;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      helpFormatter0.setLeftPadding((-1578));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter1.setLongOptPrefix("--");
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 1, options0, 18, 3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1330, "}]", (String) null, options0, 9, 1330, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("j", "usage: ", options0, "usage: ", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1143, "j");
      helpFormatter0.printHelp(1143, "j", "wHa{6\"''J[h", options0, "wHa{6\"''J[h");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      options0.hasShortOption("B");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1239, "4W\"Yo#rt05&(_Bk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = ",&";
      helpFormatter0.printHelp(",&", "usage: ", options0, "usage: ", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 2046, options0, 3, 3);
      int int0 = 67;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("?7;jC9/X", "r?4~@j4[@ueP.z:", false, "gS0yPh>SR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?7;jC9/X' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.rtrim("' contains an illegal character : '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", false, (String) null);
      helpFormatter0.printHelp("' contains an illegal character : '", options1, true);
      options1.hasShortOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal character : '", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "arg");
      helpFormatter0.setWidth((-1100));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 14;
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      options0.hasShortOption("B");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "OHRMmKzHW~\")IF@");
      Option option1 = new Option((String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(",rNi1Gf<", " ", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "\n", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setDescPadding((-2386));
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(18, "org.apache.commons.cli.OptionGroup", "", options0, "Q8", true);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "--", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, "_;eiEmYj;as@J{U", "_;eiEmYj;as@J{U", options0, 34, 34, ">", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("\n");
      options0.addOption((String) null, true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B7f]7E1U|p:;";
      mockPrintWriter0.format("B7f]7E1U|p:;", objectArray0);
      helpFormatter0.printHelp(" | ", "", options0, "", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "\n", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "arg", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1142), (-1142), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B7f]7E1U|p:;";
      PrintWriter printWriter0 = mockPrintWriter0.format("B7f]7E1U|p:;", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "Q", "--", options0, 181, 181, "", true);
      helpFormatter0.printHelp(" ", "", options0, "-", true);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2318), "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 117, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "fC1zU88", options0, 13, (-1749), "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("7T04=Di2ef/[S", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7T04=Di2ef/[S' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionValidator", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 74, (-680));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("GDk_Gn?-ODQ|wA", options0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) options0;
      mockPrintWriter0.print(false);
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "GDk_Gn?-ODQ|wA";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "GDk_Gn?-ODQ|wA", "0l/+{*OR;&AY?Xb=?sE", options0, 181, 89, "--", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 181, "", options0);
      helpFormatter0.printOptions(printWriter0, 89, options0, 117, 181);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("GDk_Gn?-ODQ|wA", options0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("W@hgh-Mg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "W@hgh-Mg", (String) null, options0, 89, 1209, "]", false);
      helpFormatter0.printUsage(printWriter0, 181, "Z", options0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("NI&[7T]NY`eMFC9b");
      Options options0 = new Options();
      helpFormatter0.printHelp("aZ\"M8qTr", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      helpFormatter0.printHelp("\n", "usage: ", options0, "arg", true);
      helpFormatter1.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NI&[7T]NY`eMFC9b");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 74, "-");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("_2");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      mockPrintWriter0.checkError();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "_2", "[)|!O", options0, 0, 0, "?", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("GDk_Gn?-ODQ|wA", options0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "GDk_Gn?-ODQ|wA";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "GDk_Gn?-ODQ|wA", "0l/+{*OR;&AY?Xb=?sE", options0, 181, 89, "--", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "--", options0, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B7f]7E1U|p:;";
      PrintWriter printWriter0 = mockPrintWriter0.format("B7f]7E1U|p:;", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "Q", "\"", options0, 181, 181, "Q", true);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "arg");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 64;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "$y-Kcd @_Y", "$y-Kcd @_Y", options0, 1, 1, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 154, "}]", " ", options0, (-371), (-371), " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Options options0 = new Options();
      helpFormatter0.printHelp(" Eicq@S.NE|LU", options0, true);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B7f]7E1U|p:;";
      mockPrintWriter0.format("usage: ", objectArray0);
      String string1 = "Q";
      String string2 = "\"";
      String string3 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "The option '", " ", options0, (-2737), 0, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp("GDk_Gn?-ODQ|wA", options0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "GDk_Gn?-ODQ|wA";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 181, "", "0l/+{*OR;&AY?Xb=?sE", options0, 181, 89, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "arg");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      String string1 = "/c";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1247, "org.apache.commons.cli.AlreadySelectedException", "/c", options1, 1247, 788, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("@J", (-440), (-440));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B7f]7E1U|p:;";
      PrintWriter printWriter0 = mockPrintWriter0.format("B7f]7E1U|p:;", objectArray0);
      helpFormatter0.printHelp(printWriter0, 181, "Q", "\"", options0, 181, 181, "", true);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(" ", "gpD21", options0, "gpD21", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 890, options0, (-1468), 1590);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1500, options1, (-1), 3721);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 97;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("\n", "a6--]G`5U5= <kZ'+S6", false, "O4hAe9*:1dmMU4wXO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "usage: ", "):23", (Options) null, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-537), "[", "[", options0, 2061, 2061, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 609, options1, 609, 609);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "-", options1, 1, 74, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 539, (String) null, options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 539, (String) null, "[ option: ", options0, (-1340), 539, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.rtrim("");
      assertEquals("", string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLeftPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(101);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp("|", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "arg", options0, (String) null, true);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 0;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 0, "-", "xws_'~?p", options0, 0, 114, (String) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "jN~", "", options0, 1, 1, "jN~");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "'", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(" ", options0, true);
      String string0 = null;
      File file0 = MockFile.createTempFile("arg", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 1544;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1544, "", options0);
      String string1 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "NO_ARGS_ALLOWED", options0, 1856, 1544, "~I.CLb{");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "tXh_}3/R";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp("arg", "C?", options0, "tXh_}3/R");
      Options options1 = options0.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string1 = "0p.u\\}'|LQ\\&]f#^Q5E";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0p.u}'|LQ&]f#^Q5E");
      mockPrintWriter0.println((-2488));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2488), 1520, "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("--", options0, false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("rs1AR],Md&P5", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "[D<IzN", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "' was specified but an option from this group ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "\n", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "eY$FuW#v`");
      helpFormatter0.printHelp(1411, "--", "arg", options1, "-", false);
      helpFormatter0.printHelp(33, "arg", "-", options0, "};<EROLiwi*^2w{I");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options0, "y4]oR$k5V%L0", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("--", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      options0.getOption("arg");
      helpFormatter0.printUsage(printWriter0, 31, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1752, "usage: ", "<wQv6l/'s", options0, "--", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "--", (String) null, options0, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("tXh_}3/R");
      Options options1 = new Options();
      helpFormatter0.printHelp("*_)n~xu", options1, true);
      helpFormatter0.printHelp("f.", "tXh_}3/R", options1, "wx}::yL6b", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "EkPf%faQm", options0, " ");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\n");
      options0.addOption(option0);
      Option option1 = new Option("", "wShk'Mz1| q6");
      optionGroup0.addOption(option1);
      Option option2 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option2);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0, true);
      options0.addOption((String) null, true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "]", " ", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      options0.hasShortOption("B");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("FB$:(\"Y\"s");
      helpFormatter0.setNewLine("FB$:(\"Y\"s");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "CcF_";
      options0.hasLongOption("");
      boolean boolean0 = false;
      Options options2 = options1.addOption("CcF_", false, "arg");
      String string1 = "w";
      Option option0 = new Option("arg", "-", false, "w");
      Options options3 = options2.addOption(option0);
      String string2 = null;
      options3.addOption("", "FB$:(\"Y\"s", false, (String) null);
      options1.hasLongOption("FB$:(\"Y\"s");
      options1.getMatchingOptions("usage: ");
      options0.addOptionGroup(optionGroup0);
      File file0 = MockFile.createTempFile("2!FP~n", "org.apache.commons.cli.Option");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "CcF_", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, "\n");
      helpFormatter0.printHelp(3, "--", "usage: ", options1, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(6285, "#?,tJ7[8V{a@j+", "\n", options0, "/oX7");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("@wkY;<N!slRjKm", "NSUJwx9qXJ", true, "NSUJwx9qXJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@wkY;<N!slRjKm' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DzPN*4LQr#%~Xv3w/";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append((long) 74);
      int int0 = 1065;
      helpFormatter0.renderWrappedText(stringBuffer0, 1065, 0, "DzPN*4LQr#%~Xv3w/");
      int int1 = (-300);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-300), (CharSequence) "-", 0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -300
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(315);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("NI&[7T]NY`eMFC9b");
      helpFormatter0.setLongOptSeparator("NI&[7T]NY`eMFC9b");
      int int0 = 0;
      helpFormatter0.setLeftPadding(2038);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "aZ\"M8qTr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-261), options0, (-261), (-261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      helpFormatter0.setWidth((-161));
      Options options0 = null;
      String string1 = "PC<SXs(";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-910), "", "", (Options) null, "PC<SXs(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("2R", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      options0.toString();
      options0.hasLongOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[ option: ");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "<`x@/@9ten~PHi {>";
      helpFormatter0.setLongOptSeparator("2M&0W*?k");
      String string0 = "l\\wQM";
      helpFormatter0.setOptPrefix("lwQM");
      helpFormatter0.defaultArgName = "<`x@/@9ten~PHi {>";
      int int0 = 589;
      helpFormatter0.setDescPadding(589);
      helpFormatter0.setDescPadding(589);
      int int1 = (-1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("R:oNefN^?xhYjn];[Hd");
      int int0 = 0;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.createPadding(0);
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(145, "^V", "^V", (Options) null, "^V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-27), "W", "W", (Options) null, "W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.appendCodePoint(1);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.getArgName();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.defaultLongOptPrefix = "#B]yj-F>7@-i|)u";
      // Undeclared exception!
      try { 
        options0.addOption("line.separator", "arg", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("", true, (String) null);
      String string2 = "line.separator";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string3 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), (-1), "igkI[mh] ]f>%LF9 T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "arg");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.printHelp(" ", ";),]m;sT]ticUX", options1, (String) null, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      options1.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      helpFormatter0.printHelp("-", "-", options1, "-", false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Q8", true, "--");
      helpFormatter0.printHelp(1411, "Q8", "\n", options1, "[", false);
      helpFormatter0.printHelp(1411, "--", "[", options1, "");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      options1.addOption((String) null, (String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("FB$:(\"Y\"s");
      helpFormatter0.setNewLine("FB$:(\"Y\"s");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      Options options2 = options1.addOption("CcF_", false, "arg");
      Option option0 = new Option("arg", "-", false, "w");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "FB$:(\"Y\"s", false, (String) null);
      options4.addOption("", false, "");
      helpFormatter0.printHelp(1820, "FB$:(\"Y\"s", "4T*p]U", options4, "FB$:(\"Y\"s");
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      String string0 = "inZ7MLZ!7>$#Sm OH";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("usage: ");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "[", (Options) null, "[", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Q8", "usage: ", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3307), "Q8", "\n", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "\n", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "--", "--", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "arg";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.defaultLongOptPrefix = " | ";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(2890);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      assertEquals(2890, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1758));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3309));
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("]@hm/@");
      assertEquals("]@hm/@", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2939);
      helpFormatter0.setDescPadding((-2939));
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-553));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionGroup", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "C?", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "tXh_}3/R";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "C?", options0, "tXh_}3/R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "--", options0, " ", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "\n", options0, "arg", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("usage: ");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage:", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("=&!N", options0);
      String string0 = helpFormatter0.rtrim("usage: ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage:", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "arg", options0, "arg", true);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "-");
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("C!0cV:?\"", options0, false);
      helpFormatter0.rtrim("-");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "--", options0, "--", false);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }
}
