/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:54:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setWidth(2022);
      String string0 = "v+8[p\"S/\")";
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "v+8[p\"S/\")");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-818);
      helpFormatter0.defaultSyntaxPrefix = "=@2LKT@w:n*?UiY-Jp";
      helpFormatter0.rtrim("=@2LKT@w:n*?UiY-Jp");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " | ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" | ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 1252, " | ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("'[DO$GvG gv");
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 1, options2, 116, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, (-24), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 3821;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "8Zpom");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3821, options1, 3821, 3821);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("%!)abq` :b");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "W!}du!e", "W!}du!e", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultDescPad = 2374;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getOptionComparator();
      String string1 = "Q%pCJt\"\\)y'z.PA ";
      helpFormatter0.defaultArgName = "Q%pCJt\")y'z.PA ";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("has already been selected: '", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1721);
      helpFormatter0.setNewLine("<");
      helpFormatter0.defaultWidth = (-1721);
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3319);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "s1E9p}%%uxwSX{fP\"*";
      helpFormatter0.defaultArgName = "s1E9p}%%uxwSX{fP\"*";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.defaultDescPad = (-1617);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string1 = "Bvx sB[Mp\\<Y7mX";
      try { 
        MockURI.URI("usage: ", "s1E9p}%%uxwSX{fP\"*", "Bvx sB[Mp<Y7mX");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 6: usage: :s1E9p%7D%25%25uxwSX%7BfP%22*#Bvx%20sB[Mp%3CY7mX
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.findWrapPos(" | ", 1, 1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("j", "j");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "j", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("j", "j");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "j", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("$SBnd%O.$*l8$cR+F", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "usage: ", (String) null, options0, 9, 74, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 302, options0, 66, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setDescPadding(118);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println((long) 1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "O5l]/|", "a*YWPjc.6{9", options0, 3, 1713, "&N(", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 115, 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x6A!pxo47=q");
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "usage: ", (String) null, options0, (-1), 73, "CO", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 3;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("g&*UC>al'y>n~O?{", "g&*UC>al'y>n~O?{", options0, "", true);
      helpFormatter0.setLongOptPrefix("g&*UC>al'y>n~O?{");
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultWidth = (-2791);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 3, "P!=[5:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "", false, "ThM,k4gw;}kM<F(_+*f");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4128, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(9, "P!=5:", "P!=5:", options0, "P!=5:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", "dJ&a gl*WAR3", options0, 9, (-2656), "P!=5:");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      Options options1 = options0.addOption((String) null, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, 34, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      Options options1 = options0.addOption("arg", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Options options0 = new Options();
          HelpFormatter helpFormatter0 = new HelpFormatter();
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) null, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.append('Y');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.getOptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ] [ long ").when(comparator0).toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P<)DT,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('-');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 589, "P<)DT,", "P<)DT,", options2, 589, 32, "", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((long) 1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.setLength(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1650), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((long) 74);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options0, (-3755), 3, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "--", options0, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      helpFormatter2.printHelp(printWriter0, 1755, "Illegal option name '", "usage: ", options0, 3, 3, "Z", false);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("$SBnd%O.$*l8$cR+F", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "--", options0, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      helpFormatter2.printHelp(printWriter0, 1755, "Illegal option name '", "", options0, 3, 3, "Z", false);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('D');
      helpFormatter0.printUsage(printWriter0, 687, "@Cp", options0);
      helpFormatter0.printHelp(9, "laip)", "laip)", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim("'");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.findWrapPos("B.[b|w", 1801, 1801);
      helpFormatter0.rtrim("ke3'");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "B");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("t", "usage: ", false, "hpepp");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, "B", options3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption((String) null, "-", true, "arg");
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1384), (String) null, options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("'", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      helpFormatter0.printHelp("f*15ENfUo-yr;", options2);
      int int0 = (-1323);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1323), "rPk1`kIArHD'", "", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3952));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2152, "]", "]", options0, 2, 2152, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "0g('a2K2^~n>e?", " | ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultNewLine = "uU";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 909;
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2109, 909, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "h";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2737), "h", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "/S(hnzc{V", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "--");
      String string0 = "% @L10c";
      helpFormatter0.printWrapped(printWriter0, 623, 1643, "% @L10c");
      Options options0 = new Options();
      Option option0 = new Option("arg", "/S(hnzc{V", false, "org.apache.commons.cli.OptionValidator");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("arg");
      Options options2 = options1.addOption("", true, "arg");
      helpFormatter0.printOptions(printWriter0, 2462, options2, 63, 1643);
      int int0 = 390;
      // Undeclared exception!
      try { 
        options2.addOption("\n", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-243), "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 1;
      Options options1 = new Options();
      String string0 = "c";
      MockPrintStream mockPrintStream0 = new MockPrintStream("c");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      helpFormatter0.printHelp("f*15ENfUo-yr;", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((float) 1);
      helpFormatter0.renderWrappedText(stringBuffer0, 909, 2109, " ");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "laip^)", "l867YO?'j7", options0, "l867YO?'j7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasShortOption("[ Options: [ short ");
      optionGroup0.setRequired(true);
      options1.getOptionGroups();
      optionGroup0.setRequired(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options2 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 909, options2, 909, 6);
      int int0 = 63;
      String string0 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 63, 63, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "usage: ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2137, "l867YO?'j7", "-", options0, "");
      helpFormatter0.printHelp("l867YO?'j7", options0, false);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1695, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(40, "PrE:w5/t}VkO|I!", "PrE:w5/t}VkO|I!", (Options) null, "^|ch\"0/U?^*86O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      Options options2 = options1.addOption("", "--", true, "usage: ");
      helpFormatter0.printHelp("d(+jvm:2*=v;tfOj", options2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2137, "l867YO?'j7", "-", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", "+K#iSn", false, "pmh_}h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.setArgName("'G?YG%{d0\"I4$");
      MockFile mockFile1 = new MockFile("   ", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 36, ";vc.g9");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "-", options0, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasShortOption("[ Options: [ short ");
      optionGroup0.setRequired(true);
      options1.getOptionGroups();
      optionGroup0.setRequired(false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "` \"sRbnB\u0005tq", (String) null, options2, "W`tw`XFU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^LUc5gwoc<5gWe", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;IrmF!Ri<hIbneZU", false, "Ns;IrmF!Ri<hIbneZU");
      helpFormatter0.printHelp("f*15ENfUo-yr;", options2);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append('<');
      helpFormatter0.renderWrappedText(stringBuffer0, 909, 2109, " ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 32, (Options) null, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      Options options0 = new Options();
      helpFormatter0.printHelp("}ta4h/T", "}ta4h/T", options0, "}ta4h/T");
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "l867YO?'j7", "F tf?;Yqnwr[", options0, "qS!J6Xa5Wj", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('y');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "\"", "\"", options0, 0, 0, "\"");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", "+K#iSn", false, "pmh_}h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", false, (String) null);
      Option option0 = new Option((String) null, "kSC-;lEyQ7[2 :e/p", false, "+K#iSn");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 36, "   ", "pmh_}h", options3, 3931, 36, "   ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("z800xA0", true, "-");
      options1.addOption("arg", true, "-");
      helpFormatter0.printHelp("60I[~Kr^C-rm", options0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, (String) null);
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "FXO?yf*X`1a", true, "usage: ");
      helpFormatter0.printHelp("FXO?yf*X`1a", options0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("YY\"U<oX", options0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("-", options0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9^l]", options1, false);
      String string0 = "U[f/fnY_1T:H{o9~";
      optionGroup1.toString();
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      optionGroup0.setRequired(false);
      options1.getOptionGroups();
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(6, "021", (String) null, options1, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zH~_S%l2QwKR^E");
      Options options2 = options1.addOption("uNNHS", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "021", options2, (-1020), 1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      String string0 = "P!=5:";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      optionGroup0.setRequired(false);
      options1.getOptionGroups();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(6, "021", (String) null, options1, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName((String) null);
      MockFile mockFile0 = new MockFile("", ";vc.g9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, ";vc.g9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      helpFormatter0.printHelp("f*15ENfUo-yr;", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 909, 2109, " ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("-", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "", options1, 0, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "\n");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4467, " :: ", " :: ", options0, 34, 34, " :: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Option", " :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format(" [ARG]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 2, " [ARG]", " [ARG]", (Options) null, 44, 0, " :: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "!=5\\";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 58, options0, (-1940), 28);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2125);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(2125);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(2125);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "  Q;E7danP");
      helpFormatter0.setLongOptSeparator("*#J*$jdKvV0)7&Ju");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2052), (Options) null, 2111, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1873), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-408), 2, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Option option0 = new Option((String) null, "cmdLineSyntax not provided", false, "");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      options1.getOptions();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("arg", "<", options1, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3220), "[ option: ", " [ARG]", options0, "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setNewLine("ncl.I? ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(486, (String) null, "ncl.I? ", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(74, " ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2137, "org.apache.commons.cli.HelpFormatter", "", (Options) null, " [ARG]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2358, "--", "--", options0, "--", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.write(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1421, 2358);
      helpFormatter0.renderOptions(stringBuffer1, 1662, options0, 0, 2137);
      helpFormatter0.rtrim(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-134));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2152, "Ig{k_q2mhw@sJ2j{ner", (String) null, (Options) null, 735, 735, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1657), "has already been selected: '", "has already been selected: '", options0, (-1657), (-1657), "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFile mockFile0 = new MockFile("Q&>-8gV<mB,0BMNRw", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) " ");
      String string0 = "   ";
      int int0 = 735;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2940, "   ", "' contains an illegal character : '", (Options) null, 735, 2152, "Ig{k_q2mhw@sJ2j{ner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'M';
      charArray0[2] = 'r';
      charArray0[3] = ',';
      charArray0[4] = '!';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      stringWriter0.write(charArray0, 3, 3);
      int int0 = 9;
      Options options0 = new Options();
      options0.hasShortOption("-");
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 9, 9);
      int int1 = 0;
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 9, 2157);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(34);
      helpFormatter0.setLongOptSeparator("                                  ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(563);
      int int0 = (-134);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-134), options0, (-134), 2151);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      helpFormatter0.printHelp("f*15ENfUo-yr;", options2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("-", options0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3144, (String) null, (String) null, (Options) null, 3144, 1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = new Locale("\n");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      Option option0 = new Option("arg", "-", true, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3329, "", "org.apache.commons.cli.Option", options3, 3329, (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1888), options0, (-1888), (-1888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("F tf?;Yqnwr[", options0);
      helpFormatter0.printHelp("qS!J6Xa5Wj", options0);
      helpFormatter0.printHelp("qS!J6Xa5Wj", "[", options0, "]", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "l867YO?'j7", "F tf?;Yqnwr[", options0, "qS!J6Xa5Wj", true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(8, "arg", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      optionGroup0.setRequired(false);
      options1.getOptionGroups();
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(6, "021", (String) null, options1, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "TBI6`fH*}-}(", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "e?!<[3nY\"*z\"3?DK");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // e?!<[3nY\"*z\"3?DK
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Ns;Irmn!Ri<hIbneZU", true, "Ns;Irmn!Ri<hIbneZU");
      // Undeclared exception!
      try { 
        options2.addOption("f*15ENfUo-yr;", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'f*15ENfUo-yr;' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "1I\"!'nTKU&";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      MockFile mockFile0 = new MockFile(" ", "-");
      String string0 = "g0Nr3";
      mockFile0.setWritable(false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "g0Nr3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // g0Nr3
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-971), (-971), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2852), (-1350), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "l867YO?'j7", "--", options0, "qS!J6Xa5Wj", true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "arg", "arg", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("`sQm%Omw^.:");
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("usage: ");
      String string0 = "?6D2vxe{u-9\"l-n";
      Options options0 = new Options();
      String string1 = "usage: ";
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", false, "KKRuWsFh{'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.hasShortOption("-");
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 9, 9);
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 9, 2157);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'.6h5b{=LT3B!G");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "'.6h5b{=LT3B!G", "'.6h5b{=LT3B!G", options0, 1, 1, "'.6h5b{=LT3B!G", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4698), "Ig{k_q2mhw@sJ2j{ner", "Ig{k_q2mhw@sJ2j{ner", (Options) null, 44, 0, "org.apache.commons.cli.Option", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3146));
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("s");
      helpFormatter0.setOptPrefix("s");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2845));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2454);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "]";
      String string1 = "^A0KLg?!FW\"BwN";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JCY+*r&P*Wq";
      helpFormatter0.setOptPrefix("JCY+*r&P*Wq");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "JCY+*r&P*Wq";
      String string1 = "JjYUjd_~D9(#yM.u\"z(";
      String string2 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string3 = "";
      options0.getOptions();
      options0.hasOption("");
      String string4 = "$&r @vV [F{";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "$&r @vV [F{", false, "JjYUjd_~D9(#yM.u\"z(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-959));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "62pgZ9E:<KX";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1016));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      int int1 = (-272);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((long) 1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "arg", options0, 1, 1, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l};M~k#c#p4g,?Mh^G'", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", "org.apache.commons.cli.Options", (Options) null, "org.apache.commons.cli.Options", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.addOption("", false, "--");
      String string0 = "Cp[?Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options0, "Cp[?Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", "--", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "dX3N`y32";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "dX3N`y32", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(74, "-", "-", options0, "-");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp(2358, "--", "--", options0, "--", true);
      // Undeclared exception!
      try { 
        options0.addOption("--", "--", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "l867YO?'j7", "F tf?;Yqnwr[", options0, "qS!J6Xa5Wj", true);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "has already been selected: '", options0, "[ option: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-3158), "\n", "9iyA AFjxC9SU,8I", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.addOption("", "[`c{#HLI|O:t:F", false, "]xi$\"htt9");
      helpFormatter0.printHelp("q", options3);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("arg");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("arg", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "--", options0, "usage: ");
      assertEquals(74, helpFormatter0.defaultWidth);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.rtrim("-");
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(3);
      assertEquals("   ", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      optionGroup0.setRequired(true);
      options1.getOptions();
      helpFormatter0.printHelp("P|6DW", "<", options1, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3220), "[ option: ", " [ARG]", options0, "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
