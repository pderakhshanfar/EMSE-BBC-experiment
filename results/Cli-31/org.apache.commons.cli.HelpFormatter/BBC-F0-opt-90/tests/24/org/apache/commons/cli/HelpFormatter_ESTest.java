/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:17:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      int int0 = (-2338);
      String string1 = null;
      helpFormatter0.defaultDescPad = (-2338);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S/{XZfd/ZnDq$K<B?e", (String) null, options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 1208, " ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.println('L');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = 'K';
      mockPrintStream0.print(charArray0);
      mockPrintWriter0.append('_');
      helpFormatter0.createPadding(640);
      helpFormatter0.setLongOptSeparator("t^sN|&{L<1h");
      helpFormatter0.setLeftPadding(0);
      Options options1 = new Options();
      helpFormatter0.printHelp(9, " :: ", "", options1, "[ Options: [ short ", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2366);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "|n6^LQ8)528=]P,jF", false, "-");
      Options options2 = options1.addOption((String) null, false, "KeNaMVO< np$8zlr($");
      options2.addOption("hxo", "", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(589, "N'r$T0}i$", "rDM!;Hy{B}<'", options2, " ]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.HelpFormatter");
      String string1 = "j|x?6KqlSE0";
      // Undeclared exception!
      try { 
        options1.addOption("j|x?6KqlSE0", "a", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'j|x?6KqlSE0' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "   ", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "   ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(63);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 22, (-1827), "                                                               ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 45;
      helpFormatter0.printHelp(1217, "   ", "   ", options0, "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      Options options1 = new Options();
      Options options2 = options1.addOption("", false, " ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4735, "cmdLineSyntax not provided", "   ", options2, 4735, 677, "", false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "Pt``?c[bS");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("9_q", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1712, "x1U5", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.addOption("arg", "or.apache.commns.cli.Option", true, ":u/D8FVGZzd<v");
      helpFormatter0.defaultLeftPad = (-1654);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", " ", options0, "?gM");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.addOption("", "-:n,5$@69Moroe!k!", true, ", ");
      mockPrintWriter0.println("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1515, "usage: ", "\"", options0, 1, 1, "", true);
      helpFormatter1.printHelp("arg", options0, true);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1108), options0, 1, 1235);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", false, "1e})");
      Options options1 = new Options();
      Options options2 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.renderWrappedText(stringBuffer0, 9, (-2), "CAie6~");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(9, "org.apache.commons.cli.HelpFormatter$1", "CAie6~", options3, (String) null, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2086;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      String string0 = helpFormatter0.defaultOptPrefix;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 49;
      int int1 = 602;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 4, 2086, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("1_E *1u.m");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "1_E *1u.m");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-953), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 3, (Options) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "d!RKx0PT53", "8>xknhv<eO*&qtFM#", options0, "-");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 27, "O2XM(vA", "O2XM(vA", options0, 91, 91, "Cannot add value, list full.", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter0.setArgName((String) null);
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 3, " ", (String) null, options0, 9, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      mockPrintWriter0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 3, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, "Ques", true, "CAie6~");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "w|+", options0, (String) null);
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.renderWrappedText(stringBuffer0, 9, (-2), "CAie6~");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(9, "org.apache.commons.cli.HelpFormatter$1", "CAie6~", options3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", false, "1e})");
      Options options1 = options0.addOption(option0);
      options0.addOption("arg", "--", true, "");
      helpFormatter0.printHelp(9, "  > ", "Ques", options1, "Ques");
      PrintWriter printWriter0 = mockPrintWriter0.append('V');
      helpFormatter0.printHelp(printWriter0, 60, "s1cDI>#HogfUy", "", options1, 9, 29, "", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.write("");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      int int0 = 63;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      options0.addOption(option0);
      options0.addOption("u", "--", true, (String) null);
      options0.addOption(option0);
      Options options1 = options0.addOption((String) null, "Ques", true, " ");
      helpFormatter0.printHelp(9, "-", "u", options1, (String) null);
      helpFormatter0.getSyntaxPrefix();
      Options options2 = options1.addOption("O", true, "O");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1783), "Ques", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";B<;B#zx-}T109:)hO7");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, " ");
      helpFormatter0.setNewLine("\n");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";B<;B#zx-}T109:)hO7");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      helpFormatter0.setLeftPadding(58);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(58, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      String string0 = "(*d\"9y^_n~n${}>slX{";
      String string1 = null;
      Option option0 = new Option((String) null, "-", false, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, "|", options0, 2354, (-778), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      mockPrintWriter0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption((String) null, "Ques", true, "CAie6~");
      helpFormatter0.printHelp(9, "\"", "u", options2, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "Ques", "u", options1, 60, 60, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(27);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "rGE}");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(27, "nxWQx-'J0", " ", options2, " ", true);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("-", "");
      File file0 = MockFile.createTempFile("nxWQx-'J0", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Al|F", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "nxWQx-'J0", "]xt.&PZC?DU", options0, 27, 82, "nFykbqjp", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1613, "", " ", options0, (-1910), (-240), "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      int int0 = 40;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 37, 40, "[");
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "(*d\"9y^_n~n${}>slX{");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 40, "[", (String) null, options1, (-1957), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2086;
      helpFormatter0.defaultDescPad = 2086;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 49;
      int int2 = 602;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 49, 602);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("4]~z=*#(j+Rk5");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(27);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "rGo}");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(27, "n'xWQx-'J0", " ", options2, " ", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 618, 74, " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 618, options0, 18, 1);
      helpFormatter0.renderOptions(stringBuffer1, 64, options0, 1, 2762);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal option name '");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("'", 3, 3745);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      options0.addOption(option0);
      String string0 = "u";
      String string1 = null;
      Options options1 = options0.addOption((String) null, "Ques", true, "CAie6~");
      helpFormatter0.printHelp(9, "\"", "u", options1, (String) null);
      helpFormatter0.printHelp(" ", options0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "+8SNtJxGdugPs|wh";
      helpFormatter0.defaultWidth = (-11);
      helpFormatter0.setLongOptSeparator("+8SNtJxGdugPs|wh");
      helpFormatter0.setArgName("+8SNtJxGdugPs|wh");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) null, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 74, 63, "[ Options: [ short ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 1, 1276, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      options1.hasOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "lY~B9UhW\";5_4U", options0, "P\";<k\"%*=2%c`O|2v%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("<dl");
      helpFormatter0.setLeftPadding(1620);
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("XJl%~yJ x-", "usage: ", options0, (String) null);
      helpFormatter0.renderOptions(stringBuffer0, 1620, options1, 1, 57);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.hasOption("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "v", options0, "d5gE~2l_E#^}G7(P9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2172));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 640;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      Locale locale0 = new Locale("--");
      Object[] objectArray0 = new Object[1];
      printWriter0.println();
      objectArray0[0] = (Object) mockPrintStream1;
      mockPrintWriter0.format(locale0, "OMSP(e", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale1 = Locale.KOREA;
      printWriter0.printf(locale1, "--", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 70, 44, "[");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "%d+");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1607, options1, 4112, 4112);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 9, 63, " ");
      Option option0 = new Option((String) null, "arg", true, "1e})");
      options0.addOption(option0);
      Options options1 = options0.addOption((String) null, "Ques", true, "CAie6~");
      helpFormatter0.printHelp(9, "\"", "u", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, "xQo[Ay", false);
      String string0 = "=JP~>FA[}4?n=$";
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string2 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      stringWriter0.append((CharSequence) stringBuffer0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("~+gV1", (-598), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      Options options1 = options0.addOption("", "?]Gt`D.F", false, "g");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "[n3=Q", "?]Gt`D.F", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "rGo}");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "n'xWQx-'J0", " ", options2, " ", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      mockPrintWriter0.append('_');
      helpFormatter0.createPadding(640);
      helpFormatter0.setLongOptSeparator("t^sN|&{L<1h");
      helpFormatter0.setLeftPadding(0);
      Options options1 = new Options();
      helpFormatter0.printHelp(9, " :: ", "", options1, "[ Options: [ short ", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.append((CharSequence) "--");
      int int0 = 74;
      String string1 = "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "-";
      // Undeclared exception!
      try { 
        options1.addOption(" ", "zxhnxC*V;(W.f8K~K6p", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      int int0 = 9;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", (String) null, options0, 9, 63, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "+8SNtJxGdugPs|wh";
      helpFormatter0.defaultWidth = (-11);
      helpFormatter0.setLongOptPrefix("v");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.findWrapPos("+8SNtJxGdugPs|wh", 1614, 1614);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append((CharSequence) "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Option option0 = new Option("v", "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2450, ".");
      helpFormatter0.setNewLine("v");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("+8SNtJxGdugPs|wh");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "", "-", options0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp("q", options0);
      String string1 = "+sI~2:\\H(2_Bxcp?*";
      helpFormatter0.setLongOptSeparator("+sI~2:H(2_Bxcp?*");
      StringBuffer stringBuffer0 = null;
      int int0 = (-610);
      int int1 = 396;
      helpFormatter0.renderOptions((StringBuffer) null, (-610), options0, 396, 396);
      String string2 = "-o-qir[:l7rvJ+|KF>";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-610), 396, "-o-qir[:l7rvJ+|KF>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "uhR>?)z]7 IvB", (String) null, options0, (-2720), 63, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append('_');
      String string0 = helpFormatter0.createPadding(1620);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(125);
      Options options0 = new Options();
      helpFormatter0.printHelp(64, string0, "t^sN|&{L<1h", options0, "arg", true);
      helpFormatter0.printHelp("!3", options0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter2);
      stringWriter2.append((CharSequence) "usage: ");
      Options options0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Option option0 = new Option("arg", "");
      mockPrintWriter0.println((Object) null);
      stringWriter0.close();
      int int0 = (-1475);
      mockPrintWriter0.write((-1475));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1620, "`hLy1ih/mWzhT*%`", "8-J_KvAEJ1L*$sC", (Options) null, 2290, (-1475), "-leMMCvIJ#DK4");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 1607, options0, 1277, 4112);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.setLongOptSeparator("k;C.u\tPr}K>r)N]>Z");
      int int0 = 55;
      helpFormatter1.setLeftPadding(55);
      Options options0 = new Options();
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ]", "arg", options0, "rG?+_", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("_Vu=<wf~kq|Y2K@", "_Vu=<wf~kq|Y2K@", options0, "_Vu=<wf~kq|Y2K@", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 63, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.defaultLongOptPrefix = "arg";
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int0 = 1987;
      helpFormatter0.renderOptions(stringBuffer0, (-2503), options0, 0, 1987);
      int int1 = 0;
      String string2 = "i-/ET+";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-331), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dHEi&475X ZD");
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-3958), "fs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultLeftPad = 1320;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", (String) null, options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      mockPrintWriter0.append('_');
      helpFormatter0.createPadding(640);
      helpFormatter0.setLongOptSeparator("t^sN|&{L<1h");
      helpFormatter0.setLeftPadding(0);
      Options options1 = new Options();
      helpFormatter0.printHelp(9, ">ZVAo*_>xBxMf3xUpw", "", options0, " :: ", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options0, (-2), 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(2737);
      Options options0 = new Options();
      String string0 = null;
      int int0 = 74;
      String string1 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      Locale locale0 = new Locale("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream1;
      mockPrintWriter0.format(locale0, "OMSP(e", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale1 = Locale.KOREA;
      printWriter0.printf(locale1, "--", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 70, 44, "[");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 'K11;EI?%|]");
      helpFormatter0.defaultDescPad = 1060;
      helpFormatter0.setArgName("");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("=JP~>FA[}4?n=$");
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int1 = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "=JP~>FA[}4?n=$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      String string0 = "]";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("6)<IXhd*,y1ec");
      String string0 = "b9-*JG";
      Options options0 = null;
      boolean boolean0 = true;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "--");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = (-507);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1049, (CharSequence) "--", 74, (-507));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1049
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("7#~xu,8/zMIg", (String) null, false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7#~xu,8/zMIg' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("--");
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1852), "[ option: ", ".Ba]w58oWRj6{HgA", options0, "[ option: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1308);
      helpFormatter0.setLongOptPrefix("");
      String string0 = "Xxy]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.print("arg");
      mockPrintWriter0.print((float) 74);
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.print((double) 1);
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1308), "Xxy]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Options options2 = options1.addOption("", "q[_", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1620, "org.apache.commons.cli.HelpFormatter", options2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.createNewFile();
      PrintWriter printWriter0 = mockPrintWriter0.append('m');
      int int0 = 765;
      String string0 = "";
      helpFormatter0.printUsage(printWriter0, 765, "");
      String string1 = "&DpN\"zsdzb";
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("-", true, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      int int0 = 409;
      options0.getOptions();
      mockPrintWriter0.close();
      helpFormatter0.setWidth(1339);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1731), options0, (-1731), 409);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter0.append('T');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option("", "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2444, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine(" ");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-129);
      helpFormatter0.setDescPadding((-129));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setLeftPadding(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      mockPrintWriter0.append('y');
      int int0 = (-2834);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("JF3LIm_f-5ygo-aHW", "IZ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'JF3LIm_f-5ygo-aHW' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, "\n", false, "0nSeDD.tC1:b;^6");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "g=,{FwW", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "--";
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setArgName("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "O9Q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.append(false);
      String string0 = "<";
      stringBuffer0.append("<");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-3224), " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "j5D|M";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "j5D|M", (String) null, options0, "j5D|M", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "+8SNtJxGdugPs|wh";
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.setLongOptPrefix("v");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.findWrapPos("+8SNtJxGdugPs|wh", 1614, 1614);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append((CharSequence) "usage: ");
      Options options0 = null;
      int int1 = 10;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Option option0 = new Option("v", "--");
      mockPrintWriter0.println((Object) option0);
      stringWriter0.close();
      mockPrintWriter0.write((-2686));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "+8SNtJxGdugPs|wh", "+8SNtJxGdugPs|wh", (Options) null, 10, 3, "`hLy1ih/mWzhT*%`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setSyntaxPrefix("?)LBp Nf7FA(");
      assertEquals("?)LBp Nf7FA(", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 640;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "??sH)upGa}?sEfHR";
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1309), "e??p|oy", "", options0, 44, 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\"M9S5e*Ba!|#");
      String string0 = "QgEAa@;1#MUpH{\\dSQ";
      helpFormatter0.rtrim("QgEAa@;1#MUpH{dSQ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("--", "--", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
