/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:12:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ".";
      helpFormatter0.renderOptions((StringBuffer) null, 1268, options0, 2, 1268);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, ".", "H0BLuY!", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7$$|_Isq");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "7$$|_Isq");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ZonkoM>|9ucG.1";
      String string1 = "";
      Options options0 = new Options();
      options0.hasShortOption("%u3pau");
      int int0 = 0;
      String string2 = ">";
      String string3 = "G2Vpw/S3`)iWCPC";
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", "G2Vpw/S3`)iWCPC", options1, " [ARG]", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("arg");
      Options options2 = options1.addOption("", (String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3450), "VT-b3p3,", "5Gn$mn", options2, (-3450), (-3450), "q?3$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W@4gZ3(");
      helpFormatter0.defaultWidth = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("tcEd6cH&Y8M", "tcEd6cH&Y8M", options0, "tcEd6cH&Y8M");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-1974);
      helpFormatter0.setDescPadding((-1974));
      Options options1 = options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultDescPad = 1501;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 249, (String) null, options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", "arg", options1, "arg", true);
      helpFormatter0.printHelp("y7v$", "y7v$", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[3];
      helpFormatter0.findWrapPos("-]i]P#a*KJ-> #", 6, 6);
      charArray0[0] = 'g';
      charArray0[1] = 'A';
      charArray0[2] = 'W';
      stringBuffer0.insert(0, charArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2906);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-143);
      Options options0 = new Options();
      Options options1 = options0.addOption("?", " ", true, "W')!`2{i,BX)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1687, "W')!`2{i,BX)", "", options1, "?");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", "arg", options1, "arg", true);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 3901, 5354);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("Fup$|'BIP");
      int int0 = 1054;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", (String) null, true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = null;
      String string1 = ")rO>?Ve:':)%p2cA8";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-302);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-302), ")rO>?Ve:':)%p2cA8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "c~cOkvH/3,yUyZsDx", "c~cOkvH/3,yUyZsDx", options0, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("He", false, "");
      Option option0 = new Option("arg", "");
      Options options4 = options3.addOption(option0);
      options4.getOption("-");
      options0.addOption("", "", false, "-");
      helpFormatter0.printHelp("He", "", options3, "OkzD\"}7%cBuNw3l");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "5U#&6{", " B65K'_BIw", (Options) null, (-2707), 63, " B65K'_BIw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "WY");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2202, (String) null, "<", options1, 1167, 74, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", true, "%6eXbBt`K(|");
      helpFormatter0.printHelp("org.apache.commons.cliOptionValidator", "-", options0, "%6eXbBt`K(|", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(64);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 1, options1, 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      String string0 = "m&>{@+\"fdyUO<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2865), "J", "m&>{@+\"fdyUO<", (Options) null, 1167, (-2865), "J", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "WY");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1420, "1o$%t0K[&MF.k-OE", (String) null, options0, 1420, 1167, "line.separator", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options1 = options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 354, "<", "-", options1, 101, 354, (String) null, false);
      helpFormatter0.printHelp("-", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "[ Options: [ short ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "y).n- V", "", options1, 794, 0, "$KUPcq.(9KB", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-7), " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", ">");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option1 = new Option("", "n_x>", false, ", ");
      optionGroup0.addOption(option1);
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "WY", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      String string0 = "=HG73ZRef";
      options0.addOption("arg", true, "=HG73ZRef");
      helpFormatter0.defaultLeftPad = 5021;
      // Undeclared exception!
      helpFormatter0.printHelp("\"yXET<YZ=A%*M!1q-)g", "=HG73ZRef", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "(XOt4ka");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 88, "4D", "oNNa#lCoyY]S?#", options1, 1, 2012, "", true);
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "");
      optionGroup0.addOption(option0);
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-976), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("x", "", false, "");
      Option option0 = new Option("", false, "S5C:^6:=W9:/.)i");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", false, "usage: ");
      helpFormatter0.printHelp("[", "[", options4, "]");
      int int0 = 2093;
      helpFormatter0.createPadding(2093);
      int int1 = (-320);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      int int0 = 5021;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "A CloneNotSupportedException w&s thrown: ";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 8, (Options) null, 8, 5021);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "=HG73ZRef");
      options1.hasOption("=HG73ZRef");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5021, "=HG73ZRef", "", options0, 1036, (-2454), "2j&W7V<", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?_Hp9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("-Tuu31YJ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 172, options0, 3, 74);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, 3, 335, "6&}4 pIQOwF|N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 289, options0, 289, (-213));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = new Options();
      options1.hasLongOption("arg");
      options1.addOption((String) null, true, "-");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.addOption((String) null, false, "");
      options3.hasOption(" ");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      options0.hasLongOption("--");
      Options options1 = null;
      boolean boolean0 = false;
      String string1 = "=HG73ZRef";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-2480), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?_Hp9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("-Tuu31YJ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1167, "arg", "arg", options0, 2012, 13, "6&}4 pIQOwF|N", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dB*a#2|pY{a(z";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dB*a#2|pY{a(z");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1314));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setArgName(" [ARG]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "J^$w PgWffk0rS@hy5", " [ARG]", options1, 1528, (-2820), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "=HG73ZRef");
      options1.hasOption("=HG73ZRef");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "<", "=HG73ZRef", options0, 9, 1623, "=HG73ZRef", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(5021, "A&7M#+u)2)", "=HG73ZRef", options0, "A&7M#+u)2)", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xHTHs%ko");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, 64, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 3;
      String string0 = null;
      String string1 = "I0Qh";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2458), (String) null, "I0Qh", (Options) null, "I0Qh", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q)g");
      int int0 = 5021;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.close();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", "b 0)Jg%>X ==n<_+", true, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 126, "", options1);
      Options options2 = new Options();
      int int1 = 4;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "", "K;", options1, 6, 1621, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp(7, "--", "arg", options0, " ] [ long ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "arg", options0, "");
      int int0 = (-1237);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 74, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append("--");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHTHs%ko";
      helpFormatter0.setNewLine("xHTHs%ko");
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY", options2);
      Option option0 = new Option("", "-");
      Options options3 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1020), "", (String) null, options3, (-1020), 1623, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "=HG73ZRef");
      options1.hasOption("=HG73ZRef");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.HelpFormatter$1", (String) null, options1, 1071, 5021, (String) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aQTmQz~g/hx,q&j!");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4208));
      helpFormatter0.createPadding(34);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("0>)jBA[)/3");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("--");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 58, 235, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "--", "d", (Options) null, "r1|", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.setWidth(0);
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp("--", (Options) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(71, "xErzd", "0", (Options) null, "0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "\"yXET<YZ=A%*M!1q-)g");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "=HG73ZRef");
      options1.hasOption("=HG73ZRef");
      helpFormatter0.printHelp(",>{NnLo", "A CloneNotSupportedException w&s thrown: ", options1, ",>{NnLo");
      helpFormatter0.printHelp(",>{NnLo", options1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5013, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5013, "WY", options2);
      Options options3 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5013, "#~!-%zS<|A9~oRT");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("(Dj<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 196, "WY", "#~!-%zS<|A9~oRT", options2, 5013, (-4796), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      Options options0 = new Options();
      options0.getMatchingOptions("xHTHs%ko");
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.printHelp(74, "org.apache.commons.cli.OptionGroup", "Wv", options1, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 1437, options0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("--");
      Options options0 = null;
      Options options1 = new Options();
      options1.getMatchingOptions("-");
      options1.getOption("\n");
      helpFormatter0.printHelp("\n", "", options1, "kJ#4~8g-Oj^4DQ'", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, "   ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y[7Aw7k1a");
      mockPrintWriter0.print(0L);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options0);
      Options options1 = new Options();
      helpFormatter1.printUsage(printWriter0, 34, "\n", options1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5013, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5013, "WY", options2);
      Options options3 = new Options();
      helpFormatter0.printHelp("3vt,!St@^H0\"c", "#~!-%zS<|A9~oRT", options2, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-158), "-", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "\n", options0, "[ARG...]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2485, (String) null, "", options0, "4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = new Options();
      options1.addOption((String) null, true, "-");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.addOption((String) null, false, "");
      options3.hasOption(" ");
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      Options options0 = null;
      helpFormatter1.createPadding(1556);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string1 = "Cannotadd value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "Cannotadd value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(3, "\n", "-", options1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, false, "' contains an illegal character : '");
      options1.hasLongOption("6|``ZbB");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      options0.getOptionGroups();
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printHelp("The addValue method is not intended fo2 client use.}Subclasses should use the addValueForProcessing method inst>ad. ", "6|``ZbB", options0, (String) null, false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, ".OZ rw;;mj", options1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2410, 3, "6|``ZbB");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("]", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-9), options0, 74, 18);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      Options options1 = new Options();
      helpFormatter0.printHelp("xHTHs%ko", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2519), "--", "arg", options1, "M@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      String string0 = " ] [ long ";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~#\"F*!I=s?IdnOZ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "usage: ", options0, "~#\"F*!I=s?IdnOZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v2A1MlHK9&?T?yA-ej");
      Object object0 = new Object();
      mockPrintWriter0.print((Object) mockFile0);
      String string0 = "";
      boolean boolean0 = false;
      String string1 = "z_fmY;R0ruq)i/pY";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "z_fmY;R0ruq)i/pY", (Options) null, "aEFY*pfr%", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY", options2);
      Option option0 = new Option("", "-");
      Options options3 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1020), "b 0)Jg%>X ==n<_+", (String) null, options3, (-1020), 1623, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegal option name '");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 3168, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3168, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, false, "' contains an illegal character : '");
      Options options2 = new Options();
      Options options3 = options1.addOption((String) null, true, "-");
      options3.getMatchingOptions((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.addOption((String) null, false, "");
      options2.hasOption(" ");
      helpFormatter0.printHelp(",>{NnLo", "rMs4L6S}", options3, (String) null);
      helpFormatter0.printHelp("-", options2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-2307));
      helpFormatter0.setArgName("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5021, "K8<|#", "", (Options) null, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("627pU+T4X/NLog\"");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(74);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, "   ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6w7pU+T4X/uL%y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "--");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      StringBuffer stringBuffer0 = new StringBuffer("Iq??08SJ_fX");
      StringBuffer stringBuffer1 = stringBuffer0.append(".g");
      helpFormatter0.renderWrappedText(stringBuffer1, 2114, 2114, "mZ uV&#J\"Z,luz1k");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("b 0)Jg%>X ==n<_+");
      helpFormatter0.printHelp(",>{NnLo", "\"yXET<YZ=A%*M!1q-)g", options0, "WY");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "\n");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = stringBuffer0.append("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 13, 13, " ]");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      helpFormatter0.printHelp(" ", " ", options0, " ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", "", options1, "[ARG...]");
      options0.addOption("", "usage: ", true, "");
      Options options2 = new Options();
      helpFormatter0.printHelp("-", options2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("xHTHs%ko");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      List list0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 74;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      mockPrintWriter0.print((Object) null);
      helpFormatter1.printHelp("The addValue method is not intended fo2 client use.}Subclasses should use the addValueForProcessing method inst>ad. ", "", options0, "", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "H{?2E3Z|_.", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, false, "' contains an illegal character : '");
      options1.hasLongOption("6|``ZbB");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      options0.getOptionGroups();
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printHelp("The addValue method is not intended fo2 client use.}Subclasses should use the addValueForProcessing method inst>ad. ", "6|``ZbB", options0, (String) null, false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, ".OZ rw;;mj", options1);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("]", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Ni!?+N'", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 78, "<");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("627pU+T4X/NL%>y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yXET<YZ=A%*M!1q-)g");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("b 0)Jg%>X ==n<_+");
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5021, "WY", options2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 111, "arg");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("*^}Y?61ErskKxI64", "*^}Y?61ErskKxI64", options0, "[ Options: [ short ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1113, "arg", options0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = stringBuffer0.append("--");
      String string0 = " ";
      int int0 = 101;
      helpFormatter0.renderWrappedText(stringBuffer1, 101, 0, " ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHTHs%ko";
      helpFormatter0.setNewLine("xHTHs%ko");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 74;
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, " ");
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("6t:/f7`", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6t:/f7`' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      int int0 = (-1);
      helpFormatter0.printHelp(" ", " ", options0, " ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("arg", objectArray0);
      int int0 = (-1067);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1067), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, false, "' contains an illegal character : '");
      options1.hasLongOption("6|``ZbB");
      Option option0 = new Option((String) null, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("P'(1 b_O-", (String) null, options0, "-", true);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(18);
      StringWriter stringWriter2 = stringWriter1.append('i');
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) null, 44, (-407));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "WF{.R-G";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "gB&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.createPadding(44);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("]Q}k#bSt}", "A&}[R`Qdz#KQnP", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']Q}k#bSt}' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?_Hp9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("-Tuu31YJ");
      Options options1 = options0.addOption("arg", true, "rrNL@Dbfuesd _");
      helpFormatter0.printHelp("-", "u,lVSl0=D$H9E", options1, "usage: ", true);
      helpFormatter0.printHelp("?_Hp9", options1);
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", 3, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      helpFormatter0.findWrapPos("", 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-677), (-677));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "H% Ta?yB8(/X~*";
      Options options0 = null;
      String string1 = ")rO>?Ve:':)%p2cA8";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("H% Ta?yB8(/X~*", "]FyGXTgb}dz4@!", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = null;
      String string1 = ")rO>?Ve:':)%p2cA8";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", (Options) null, ")rO>?Ve:':)%p2cA8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 64, "");
      Options options1 = options0.addOption((String) null, true, (String) null);
      options1.hasOption("--");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultDescPad = 1;
      int int0 = 3168;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3168, 3168, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "C";
      int int0 = 2514;
      helpFormatter0.setWidth(2514);
      String string0 = "]";
      helpFormatter0.defaultOptPrefix = "]";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 2514, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      String string1 = "*^}Y?61ErskKxI64";
      helpFormatter0.setNewLine("*^}Y?61ErskKxI64");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(348);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "k(`";
      helpFormatter0.defaultOptPrefix = "k(`";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("OH$kN", 2, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-466));
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      int int0 = 44;
      String string0 = "--";
      String string1 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption(" ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultArgName = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      int int0 = 32;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "Hs]w3`ud9[L+VxP";
      String string3 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      try { 
        options0.addOption("Hs]w3`ud9[L+VxP", true, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Hs]w3`ud9[L+VxP' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter");
      int int0 = (-1081);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[z&@", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[z&@' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHTHs%ko";
      String string1 = " ";
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp(" ", " ]", options0, " ]", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), " ]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockFile mockFile0 = new MockFile(" ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp(" [ARG]", "--", options0, ">Rl>N7=IF", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2rJ%HF$dSB>Acpnu7[";
      Options options0 = new Options();
      String string1 = "A CloneNotSupportedException was thrown: ";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 78, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1488);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "arg", (Options) null, "%)9v|yL%M ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("7i4X", options0, true);
      helpFormatter0.setLongOptSeparator("#Nf`EYdfN:[)\u0004");
      int int0 = (-2);
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.setWidth((-2));
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      String string0 = "^+cCUI%*d9'[&@~R],{";
      helpFormatter0.setSyntaxPrefix("#Nf`EYdfN:[)\u0004");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, (CharSequence) "#Nf`EYdfN:[)\u0004");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("H6U3>1", "H6U3>1", (Options) null, "H6U3>1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "\\f'Z";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "\f'Z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \f'Z
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", "xnV6mZF/w");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
