/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:45 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding((-8));
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "q");
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "arg", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(":y3P9wS-l+Uw|*", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "{1d[%%-PE Z 6:");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("usage: ", 103, 98);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = " ";
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('A');
      int int0 = (-1063);
      Options options0 = new Options();
      mockPrintWriter0.println((-1063));
      String string1 = "n>_yWT&lrE]yXI";
      mockPrintWriter0.print((double) 3);
      // Undeclared exception!
      try { 
        options0.addOption("n>_yWT&lrE]yXI", "-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'n>_yWT&lrE]yXI' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-569);
      Options options0 = new Options();
      helpFormatter0.setWidth((-569));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0QH;v", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-569);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0QH;v", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "GK},9ds0eYyQ,Khq", "GK},9ds0eYyQ,Khq", options0, "GK},9ds0eYyQ,Khq", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 2063, 1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1381;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultLeftPad = 1381;
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int1 = 1148;
      String string0 = "iF";
      Options options0 = new Options();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintWriter0.format("iF", objectArray0);
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "Lug&x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = null;
      int int0 = (-1969);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "--", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2679));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      String string0 = "N9>oB3_}U:I0";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ", "N9>oB3_}U:I0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // N9>oB3_}U:I0
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sh";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setWidth(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 397;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(397, "py-<|F 8.8Iu~vpyW", "w\fR'", (Options) null, "py-<|F 8.8Iu~vpyW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "usage: ", options0, 3, 3, "\n");
      helpFormatter0.rtrim("R-%KHd? >cY");
      helpFormatter0.findWrapPos("R-%KHd? >cY", 3, 3);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setDescPadding((-2409));
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2409), "\n", "", options0, (-2409), (-2409), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "arg", options0, (-2), 2, " | ", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      String string0 = "org.apache.commons.cli.Option";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "]";
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.printf("org.apache.commons.cli.Option", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultDescPad = 23;
      helpFormatter0.defaultSyntaxPrefix = "";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.createPadding((byte)63);
      helpFormatter0.findWrapPos("", (byte)63, (byte)63);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "usage: ";
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 10;
      String string1 = "uO";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option(" ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream1, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "k=z/,re.P)=n|U15x#";
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "ijlxsEV4YA", "ijlxsEV4YA", options0, 7, (-3099), "k=z/,re.P)=n|U15x#");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getLongOptPrefix();
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "S2|%fJt";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 80, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.setWidth((-2344));
      helpFormatter0.setDescPadding(592);
      options0.toString();
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.clone();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options1, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      helpFormatter0.defaultNewLine = "x!(sDC:&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(477, "^-PA&0#9b", (String) null, (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "(an_-rNE";
      helpFormatter0.printHelp("Z??<l.2=fEx;zi~`a", "Z??<l.2=fEx;zi~`a", options0, "(an_-rNE");
      helpFormatter0.getDescPadding();
      Options options1 = null;
      int int0 = 1559;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, (Options) null, 3, 1559);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      Options options0 = new Options();
      Option option0 = new Option("", false, "Pj2s|>WtR/\"\"");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "usae ", options0, ",5E`0pp6Co", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "usae ", (Options) null, 74, 74, "V&# sMV8ngx", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", " ", (Options) null, "TJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 546, 546, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1287);
      options0.addOption("arg", true, "q");
      MockFile mockFile0 = new MockFile("ZpKaXP!5j)j^bROF", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 27, "usage: ", "A#;t1(l9+2W2StX!|1{", options0, 0, 74, (String) null, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1910, "", options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      Option option0 = new Option("arg", false, "\n");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2967;
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2967, "q", options1);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-736), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "arg", options0, "2G0,+Y:N", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      helpFormatter1.defaultOptPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1433, "Fo", (String) null, options0, 16, (-2511), " | ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      MockFile mockFile0 = new MockFile("ZpKaXP!5j)j^bROF", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, 1, 3, "{te&ZDQi-JW}5E)/kJ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "[", options0, ",5E`0pp6Co", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      options0.hasLongOption("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "V)[qz xV(We22,0fDlY", "')kY?mN9", options0, 123, (-1), "org.apache.commons.cli.Option", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("8N9J", "-", false, "n /O5ik@7&");
      helpFormatter0.printHelp("21q!(i]bB]", "21q!(i]bB]", options1, "8N9J", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rS*: c,");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 998, "=n]47!VCPf9g;gJC-O", "", options0, 31, 251, "\n", false);
      helpFormatter0.printOptions(mockPrintWriter0, 74, options1, 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-462), " ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Wogzj7>$am", "Wogzj7>$am", options1, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "usage: ", options0, ",5E`0pp6Co", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "usage: ", options0, 74, 13, "_&ld_I$$Jm0R6cR$ZIT", false);
      helpFormatter1.printOptions(mockPrintWriter0, (-6), options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "", "usage: ", (Options) null, 1117, (-4203), "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "usage: ", options0, ",5E`0pp6Co", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "usage: ", options0, 74, 13, "_&ld_I$$Jm0R6cR$ZIT", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 3, options0, 13, (-1781));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "1GXhM");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" BXj)w:N|LwCRC", "", options2, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 100, "\n", "[", options1, 100, 111, "--");
      helpFormatter1.getNewLine();
      helpFormatter1.getOptPrefix();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(",5E`0pp6Co", "usage: ", options0, "zhdqdoue6T@#9FIDj", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", "arg", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp(",5E`0pp6Co", "9", options0, ",5E`0pp6Co", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "arg", "", options0, (-2668), 74, "[=k2/%JG;<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "usage: ", (Options) null, "`mrdl'U", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "q");
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(22, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      option0.clearValues();
      helpFormatter1.renderOptions(stringBuffer0, 162, options2, 13, 493);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, (String) null, "ord4{6", options1, (-2289), (-693), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "usage: ", options0, ",5E`0pp6Co", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "p,/zN", options0, 3, 33, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      options0.addOption("arg", true, "q");
      MockFile mockFile0 = new MockFile("%YJ8m47O", "org.apache.commons.cli.HelpFormatter$1");
      MockFile mockFile1 = new MockFile(" ", "0Km");
      MockFile mockFile2 = new MockFile(mockFile1, "%YJ8m47O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      int int1 = 1;
      Options options1 = options0.addOption("q", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(2075);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 26, "rh,");
      Options options1 = new Options();
      Collection collection0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("rh,");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      helpFormatter0.setLeftPadding(18);
      Options options0 = new Options();
      options0.addOption("arg", true, "E5K");
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", (String) null, options1, "g`4fS-Yj1Z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      Option option0 = new Option("arg", false, "\n");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2967, "q", options1);
      options1.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 10, options2, (-1), 2967);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "{", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1604, " ", "cmdLineSyntax not provided", options2, 10, (-1184), "UT", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("gs KSI");
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("", ";*Dxq/2yKp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "gs KSI");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(15);
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 13, options1, 117, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(")", "org.apache.commons.cli.AlreadySelectedException", options0, "rh,", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "line.separator", "", options0, 3, (-1524), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("ZpKaXP!5j)j^bROF", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "q", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(40);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options1 = options0.addOption("arg", true, "q");
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      option0.setLongOpt(" [ARG]");
      helpFormatter0.printHelp(22, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ",*Wh!3B", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile(">}sYd7", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, (String) null);
      Options options2 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("MTieHuH*ePL0 R", options2, false);
      helpFormatter0.getOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("' was specified but an option from this group ", "-", options1, "[", false);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      helpFormatter0.printHelp("q", "usage: ", options0, "usage: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "--", options1, 3, 74, "GsM+jTFsdH OdVO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1604;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "{", true, "-");
      Option option0 = new Option("", "usage: ", true, "");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[ARG...]", (-2), (-965));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.addOption("", "]", false, "--");
      Options options1 = new Options();
      List list0 = options0.helpOptions();
      helpFormatter0.printHelp("]'{~q}I(%C", options0, false);
      helpFormatter0.getOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "Wogzj7>$am");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]'{~q}I(%C", "[ARG...]", options2, "4DB'IRE9%OJ\"/[yZ3f$", true);
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "4DB'IRE9%OJ\"/[yZ3f$";
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) list0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "[ARG...]", "h5p{{.F<AKp>", options1, 1, 1, "[ARG...]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "rh,", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 22, 22, "--");
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption("NO_ARGS_ALLOWED", false, "'T8|*PK= 4<VXl.");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "--", (String) null, options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2610, options0, (-94), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(74);
      helpFormatter0.rtrim("                                                                          ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 6, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "--", options0, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter2.findWrapPos("--", 63, 74);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options1 = options0.addOption("arg", true, "q");
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(22, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(265);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-1), options0, 13, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("iD0:Vh8", "@d0!7_nqM", options0, "@d0!7_nqM");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 111, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      Options options1 = new Options();
      options0.helpOptions();
      String string0 = "]'{~q}I(%C";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*R>6Jzr2Xd^f?`)", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("!nB<eK]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.getOptPrefix();
      String string1 = null;
      Option option0 = new Option((String) null, "");
      Object object0 = new Object();
      option0.setType(object0);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options0, 0, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "q");
      Option option0 = new Option("arg", true, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(22, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)0;
      mockPrintStream0.write(byteArray0, 1117, (int) (byte)0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "}&g@urmj", options0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("` V");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 177, " ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.printHelp("Ip(pdIXLI ;", "w0(^nvde9KyulyQ&", options0, "gE/yq8Jz(yW%", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", false, "--");
      helpFormatter0.renderOptions(stringBuffer0, 33, options1, 0, 187);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ip(pdIXLI ;", "", options1, "w0(^nvde9KyulyQ&", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding(2072);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1371, 676, "F(zPE:a]r@");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "{", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("{", "--");
      helpFormatter0.setDescPadding(40);
      helpFormatter0.setArgName("'DvP]e@2CEnXA6");
      helpFormatter0.setLongOptPrefix("'DvP]e@2CEnXA6");
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp(" ", options1, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", "'DvP]e@2CEnXA6", options1, "Ip(pdIXLI ;", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.renderOptions((StringBuffer) null, 2684, options0, 2684, 2078);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      helpFormatter0.setSyntaxPrefix("g");
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("KWw%V_.ez%A`{7c4z", options0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "]", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(17);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(22, "org.apache.commons.cli.OptionValidator", "g`4fS-Yj1Z", options2, "q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(265);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, (-1), options0, 17, 74);
      helpFormatter0.renderOptions(stringBuffer2, 74, options1, 45, 1);
      helpFormatter0.getArgName();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "JJjEw2]T,4UU";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "[ Options: [ short ";
      String string3 = "rh,";
      boolean boolean0 = true;
      String string4 = ")scfw8F#>5Y\"[]_";
      PrintWriter printWriter0 = null;
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 13);
      options1.hasOption("l`XwS~a=]\"V");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "rh,", options1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = new Locale("usage: ", "usage: ", "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "org.apache.commons.cli.OptionGroup";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "org.apache.commons.cli.OptionGroup", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("\n", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      PrintWriter printWriter0 = null;
      Option option0 = null;
      try {
        option0 = new Option("Z ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "{", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1604, "V0dMKC9DZUi&6 i?/@", "", options2, 3, (-1184), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("Ip(pdIXLI ;", "w0(^nvde9KyulyQ&", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultLeftPad = 980;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = new Locale("usage: ", "usage: ", "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "org.apache.commons.cli.OptionGroup";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "org.apache.commons.cli.OptionGroup", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)0;
      mockPrintStream0.write(byteArray0, 1117, (int) (byte)0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "%5Fg1ICPe4sS(49", options1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLeftPadding(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      Option option0 = new Option("arg", true, " ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "g`4fS-Yj1Z", options2, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2576);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      String string0 = "";
      int int1 = (-2518);
      String string1 = "252HMtgJccm9OshMsNp";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "9]IfI<<8[$rj'uMdg");
      // Undeclared exception!
      try { 
        options1.addOption("-", "-", true, "=6n(^V.b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setLongOptPrefix(">");
      String string1 = ".9hSn|x0!5c':E";
      StringBuffer stringBuffer0 = new StringBuffer(".9hSn|x0!5c':E");
      int int0 = (-2728);
      stringBuffer0.insert(0, (double) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2728), (-2728), ".9hSn|x0!5c':E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ] [ long ");
      helpFormatter0.getDescPadding();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setSyntaxPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.rtrim(" ] [ long ");
      MockFile mockFile0 = new MockFile("|K8HrT");
      mockFile0.setWritable(false, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[ option: ";
      helpFormatter0.createPadding(0);
      int int0 = (-2713);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2713), "", "[ option: ", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(518);
      String string0 = "";
      MockFile mockFile0 = new MockFile("usage: ", "HB(!e&F6wdf1%");
      MockFile mockFile1 = new MockFile(mockFile0, "6T191h(619X<|V");
      mockFile0.delete();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.flush();
      int int0 = 0;
      mockFile1.getCanonicalPath();
      mockFile1.setReadOnly();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sh";
      StringBuffer stringBuffer0 = new StringBuffer("s&E}Q_z<j5X");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "s&E}Q_z<j5X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", false, "--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 187);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$yrg~fQ");
      helpFormatter0.defaultSyntaxPrefix = "$yrg~fQ";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-654));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 1248;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("vhmEe[r%4U*", "%HCb#z", true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'vhmEe[r%4U*' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3926;
      helpFormatter0.defaultDescPad = 3926;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("|b5tTS", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|b5tTS' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(")", "org.apache.commons.cli.AlreadySelectedException", options0, "rh,", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      helpFormatter0.defaultWidth = 1;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, true);
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "line.separator", "", options0, 3, (-1524), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("usage: ");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = (-1048);
      String string1 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      options0.toString();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = " [ARG]";
      options1.toString();
      String string3 = "";
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue(".pUf\"lUn-Bn0cNLXR9 ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      int int0 = (-2);
      helpFormatter0.defaultWidth = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "{", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1604, "V0dMKC9DZUi&6 i?/@", "", options2, 10, (-1184), "UT", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("   ");
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      String string1 = "The option '";
      Option option0 = null;
      try {
        option0 = new Option(" ", "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
