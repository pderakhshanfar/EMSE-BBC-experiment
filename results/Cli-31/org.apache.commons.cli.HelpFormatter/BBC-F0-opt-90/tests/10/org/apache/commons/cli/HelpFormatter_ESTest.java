/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:29:28 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setDescPadding(64);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(64, helpFormatter0.defaultDescPad);
      assertEquals(64, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      assertNotNull(stringBuffer0);
      assertEquals("arg", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      helpFormatter0.defaultWidth = (-3014);
      assertEquals(64, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-3014), helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-3014), helpFormatter0.defaultWidth);
      assertEquals(64, helpFormatter0.defaultDescPad);
      assertEquals(64, int0);
      assertEquals(64, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-3014), helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int1 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-3014), helpFormatter0.defaultWidth);
      assertEquals(64, helpFormatter0.defaultDescPad);
      assertEquals((-3014), int1);
      assertEquals(64, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-3014), helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = 0;
      String string0 = "!H5/";
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "A~F$ISfX-", false, " ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 40, 97);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-J%GC3+m2Ro|||Y.", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", "arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      helpFormatter0.defaultNewLine = "";
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.defaultLeftPad = (-2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals((-2), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3342, "d.HCtGbHk1=", "", (Options) null, "5l<]J=p}B>}0aED%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setDescPadding((-650));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      helpFormatter0.printUsage(printWriter0, 1577, "   ");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-650), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-650), helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultOptPrefix = null;
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setSyntaxPrefix((String) null);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.createPadding(203);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("                                                                                                                                                                                                           ", string0);
      assertNotNull(string0);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, int0);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string1 = "Z)>XZ";
      int int1 = helpFormatter0.findWrapPos("Z)>XZ", 74, 203);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), int1);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(int1 == int0);
      
      String string2 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(string2);
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setWidth((-2156));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2156), helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2156), helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      int int0 = (-1829);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1829), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "y%+5TE{uiZVQ[5v`-tj", (Options) null, ",n ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultOptPrefix = "";
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string1 = "D~<$X6K~Ql`kq-$E?";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("usage: ", "D~<$X6K~Ql`kq-$E?", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/experiment", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("usage: 0D~<$X6K~Ql`kq-$E?", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/usage: 0D~<$X6K~Ql`kq-$E?", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/experiment", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("usage: 0D~<$X6K~Ql`kq-$E?", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/usage: 0D~<$X6K~Ql`kq-$E?", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 96;
      String string2 = "";
      String string3 = "bC*VB8_N!";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("JYv9t6FF*P#sNX8JC", false, "qr#02krEMGfiS&v*hy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'JYv9t6FF*P#sNX8JC' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", " :: ", options1, " :: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C$dZ1>-zz]fWNoD");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(0, objectArray0.length);
      
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "C$dZ1>-zz]fWNoD", "p0)`w: [!^", options0, 0, 0, "a9rr;Z5D*qt..@x0`<");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Option option0 = new Option("", "", true, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      
      String string0 = optionGroup0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Option option1 = new Option("arg", "-", true, "arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertTrue(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals(1, option1.getArgs());
      assertEquals(97, option1.getId());
      assertFalse(option1.hasValueSeparator());
      assertFalse(option1.isRequired());
      assertEquals("-", option1.getLongOpt());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getOpt());
      assertFalse(option1.hasArgs());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertEquals("arg", option1.getDescription());
      assertFalse(option1.equals((Object)option0));
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertTrue(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals(1, option1.getArgs());
      assertEquals(97, option1.getId());
      assertFalse(option1.hasValueSeparator());
      assertFalse(option1.isRequired());
      assertEquals("-", option1.getLongOpt());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getOpt());
      assertFalse(option1.hasArgs());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertEquals("arg", option1.getDescription());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(option1.equals((Object)option0));
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertTrue(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals(1, option1.getArgs());
      assertEquals(97, option1.getId());
      assertFalse(option1.hasValueSeparator());
      assertFalse(option1.isRequired());
      assertEquals("-", option1.getLongOpt());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getOpt());
      assertFalse(option1.hasArgs());
      assertEquals('\u0000', option1.getValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertEquals("arg", option1.getDescription());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(option1.equals((Object)option0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Option option0 = new Option("aB", "", true, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("aB", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("aB", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Option option1 = new Option((String) null, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.isRequired());
      assertNull(option1.getOpt());
      assertFalse(option1.hasValueSeparator());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("arg", option1.getArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasArgs());
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.equals((Object)option0));
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      assertNotSame(option0, option1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("aB", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.isRequired());
      assertNull(option1.getOpt());
      assertFalse(option1.hasValueSeparator());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("arg", option1.getArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasArgs());
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(option0.equals((Object)option1));
      assertFalse(option1.equals((Object)option0));
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertNotSame(option0, option1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("aB", option0.getOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(option0.equals((Object)option1));
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "--", true, "\n");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals("\n", option0.getDescription());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      
      option0.setArgName("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals("\n", option0.getDescription());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options1);
      assertEquals("\n", option0.getDescription());
      assertEquals("--", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      
      helpFormatter0.printHelp("arg", "", options0, "arg");
      assertSame(options0, options1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      helpFormatter0.defaultLongOptPrefix = null;
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "-", false, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("arg", true, " ]");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(" ]", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(" ]", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Options options3 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(" ]", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printHelp(74, "P<RBy", (String) null, options3, (String) null);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(" ]", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D<^>6zOuLX1");
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = (-401);
      helpFormatter0.setLeftPadding((-2549));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2549), helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2549), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultWidth = (-401);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2549), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-401), helpFormatter0.getWidth());
      
      int int1 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-401), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2549), helpFormatter0.defaultLeftPad);
      assertEquals((-2549), int1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2549), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-401), helpFormatter0.getWidth());
      assertFalse(int1 == int0);
      
      String string0 = helpFormatter0.rtrim("hEkp");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-401), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2549), helpFormatter0.defaultLeftPad);
      assertEquals("hEkp", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2549), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-401), helpFormatter0.getWidth());
      
      StringWriter stringWriter0 = new StringWriter(808);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 63, (-2819), "");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-401), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2549), helpFormatter0.defaultLeftPad);
      assertNotNull(stringBuffer1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2549), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-401), helpFormatter0.getWidth());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "Z _eB~AqDw0)[", "D<^>6zOuLX1", (Options) null, "hEkp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("Ad", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1354, "DkfUsXP=wa>A-ga", "-", options0, 1093, 1354, (String) null, false);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.defaultArgName = null;
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Option option0 = new Option("", "arg", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      option0.setArgName("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      option0.setRequired(false);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      Options options2 = options1.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      List list0 = options1.getMatchingOptions("usage: ");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(list0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      helpFormatter0.printHelp("sy#}^<2_", "org.apache.commons.cli.OptionValidator", options2, "org.apache.commons.cli.OptionValidator");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getDescription());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u9aZR@");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("]", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-391), 11, "A~eD;.$]5PPJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = "\\NWb}1\\";
      String string1 = helpFormatter0.rtrim("NWb}1");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("NWb}1", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 9;
      helpFormatter0.setWidth(9);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string2 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string3 = helpFormatter0.rtrim("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(9, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(9, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      boolean boolean0 = options1.hasOption("--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertFalse(boolean0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      boolean boolean1 = false;
      Options options2 = options1.addOption("arg", false, "-");
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Collection collection0 = options2.getOptionGroups();
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertNotNull(collection0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = null;
      try {
        option0 = new Option(" ", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.defaultLeftPad = (-2829);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-2829), helpFormatter0.getLeftPadding());
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "CCin@>&", "CCin@>&", options0, "|}e0~VjvRl", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "`)j1}/LeB&zeyDf]!+";
      String string1 = helpFormatter0.createPadding(1509);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, (-1037), "2x&VuG{f()M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      assertNotNull(mockPrintWriter0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string1.equals((Object)string0));
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1148, "dF?pgf/4_");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1148, 1148, "-");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(stringBuffer1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      assertEquals("-", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertNotNull(optionGroup1);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      
      Option option0 = new Option((String) null, "arg", true, "=HyBGlE@#`WlpIon");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("=HyBGlE@#`WlpIon", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      OptionGroup optionGroup3 = optionGroup1.addOption(option0);
      assertNotSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup3);
      assertNotSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup2);
      assertSame(optionGroup3, optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup3);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("=HyBGlE@#`WlpIon", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup2));
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      
      Options options1 = options0.addOptionGroup(optionGroup3);
      assertSame(options0, options1);
      assertNotSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup3);
      assertNotSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup2);
      assertSame(optionGroup3, optionGroup1);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("=HyBGlE@#`WlpIon", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup2));
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      
      OptionGroup optionGroup4 = new OptionGroup();
      assertNotNull(optionGroup4);
      assertNull(optionGroup4.getSelected());
      assertFalse(optionGroup4.isRequired());
      assertFalse(optionGroup4.equals((Object)optionGroup1));
      assertFalse(optionGroup4.equals((Object)optionGroup3));
      assertFalse(optionGroup4.equals((Object)optionGroup0));
      assertFalse(optionGroup4.equals((Object)optionGroup2));
      
      Options options2 = options1.addOptionGroup(optionGroup4);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup3);
      assertNotSame(optionGroup1, optionGroup4);
      assertNotSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup3, optionGroup4);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup2);
      assertSame(optionGroup3, optionGroup1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(optionGroup4, optionGroup1);
      assertNotSame(optionGroup4, optionGroup3);
      assertNotSame(optionGroup4, optionGroup0);
      assertNotSame(optionGroup4, optionGroup2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("=HyBGlE@#`WlpIon", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(97, option0.getId());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup4.getSelected());
      assertFalse(optionGroup4.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup2));
      assertFalse(optionGroup1.equals((Object)optionGroup4));
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup4));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      assertFalse(optionGroup4.equals((Object)optionGroup1));
      assertFalse(optionGroup4.equals((Object)optionGroup3));
      assertFalse(optionGroup4.equals((Object)optionGroup0));
      assertFalse(optionGroup4.equals((Object)optionGroup2));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 228, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", "", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertNotNull(optionGroup1);
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)32;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)95, (byte)7, (byte) (-37), (byte)82, (byte) (-111), (byte)13, (byte)32}, byteArray0);
      
      Option option1 = new Option("j", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals("j", option1.getOpt());
      assertNull(option1.getLongOpt());
      assertFalse(option1.isRequired());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasArgs());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("", option1.getDescription());
      assertFalse(option1.hasValueSeparator());
      assertEquals((-1), option1.getArgs());
      assertEquals(106, option1.getId());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArgName());
      assertFalse(option1.equals((Object)option0));
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      assertSame(optionGroup1, optionGroup2);
      assertNotSame(optionGroup1, optionGroup0);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup1);
      assertNotSame(optionGroup2, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(option1.hasLongOpt());
      assertEquals("j", option1.getOpt());
      assertNull(option1.getLongOpt());
      assertFalse(option1.isRequired());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasArgs());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("", option1.getDescription());
      assertFalse(option1.hasValueSeparator());
      assertEquals((-1), option1.getArgs());
      assertEquals(106, option1.getId());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArgName());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertFalse(option1.equals((Object)option0));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOptionGroup(optionGroup2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(optionGroup1, optionGroup2);
      assertNotSame(optionGroup1, optionGroup0);
      assertNotSame(option1, option0);
      assertSame(optionGroup2, optionGroup1);
      assertNotSame(optionGroup2, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(option1.hasLongOpt());
      assertEquals("j", option1.getOpt());
      assertNull(option1.getLongOpt());
      assertFalse(option1.isRequired());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasArgs());
      assertNull(option1.getValue());
      assertEquals("arg", option1.getArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("", option1.getDescription());
      assertFalse(option1.hasValueSeparator());
      assertEquals((-1), option1.getArgs());
      assertEquals(106, option1.getId());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArgName());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertFalse(option1.equals((Object)option0));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setNewLine("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setOptPrefix("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", string1);
      assertNotNull(string1);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.getArgName();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(string2.equals((Object)string1));
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int0);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setDescPadding((-2085));
      assertEquals((-2085), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals((-2085), helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3Sr0udQHl0S%\"+``N", "~XZN&MVnL-x", options0, "3Sr0udQHl0S%\"+``N");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 12, "H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      String string0 = helpFormatter1.getLongOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      StringWriter stringWriter2 = new StringWriter();
      assertNotNull(stringWriter2);
      assertEquals("", stringWriter2.toString());
      assertFalse(stringWriter2.equals((Object)stringWriter1));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringWriter0, stringWriter2);
      assertNotNull(stringBuffer0);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertFalse(stringWriter0.equals((Object)stringWriter2));
      
      int int0 = helpFormatter2.getWidth();
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, int0);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      int int1 = helpFormatter1.findWrapPos("usage: ", 3, 1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(helpFormatter1, helpFormatter2);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(6, int1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.rtrim("--");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option((String) null, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("Xr|[ODGU*3{ctGJea", " ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Xr|[ODGU*3{ctGJea", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Xr|[ODGU*3{ctGJea/ ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      OptionGroup optionGroup3 = new OptionGroup();
      assertNotNull(optionGroup3);
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      
      OptionGroup optionGroup4 = optionGroup2.addOption(option0);
      assertSame(optionGroup0, optionGroup4);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup4);
      assertSame(optionGroup1, optionGroup2);
      assertNotSame(optionGroup1, optionGroup3);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      assertNotSame(optionGroup2, optionGroup3);
      assertSame(optionGroup2, optionGroup4);
      assertSame(optionGroup4, optionGroup2);
      assertSame(optionGroup4, optionGroup1);
      assertNotSame(optionGroup4, optionGroup3);
      assertSame(optionGroup4, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup4);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup4.isRequired());
      assertNull(optionGroup4.getSelected());
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup1.equals((Object)optionGroup3));
      assertFalse(optionGroup2.equals((Object)optionGroup3));
      assertFalse(optionGroup4.equals((Object)optionGroup3));
      
      Options options2 = options1.addOptionGroup(optionGroup3);
      assertSame(optionGroup0, optionGroup4);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup3, optionGroup1);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup4);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      assertFalse(optionGroup3.equals((Object)optionGroup4));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      boolean boolean0 = options1.hasLongOption(" ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertFalse(boolean0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", "^T2bfz0P9", true, "arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("^T2bfz0P9", option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArg());
      
      Options options3 = options2.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("^T2bfz0P9", option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArg());
      
      Options options4 = options3.addOption("uj4foe8", true, "--");
      assertSame(options0, options1);
      assertSame(options0, options4);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options4);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options4);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options4);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("^T2bfz0P9", option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArg());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-5015), "9fLf", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("traG", "-", true, "");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("traG", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("traG", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("i]qLVNaKiM2d", "traG");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/i]qLVNaKiM2d", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("traG", mockFile0.getName());
      assertEquals("/experiment/i]qLVNaKiM2d/traG", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNotSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      assertNotSame(optionGroup2, optionGroup1);
      assertNotSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup3);
      assertSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup1);
      assertNotSame(optionGroup3, optionGroup0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup3);
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("traG", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      
      optionGroup3.setRequired(true);
      assertNotSame(optionGroup2, optionGroup1);
      assertNotSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup3);
      assertSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup1);
      assertNotSame(optionGroup3, optionGroup0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("traG", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertTrue(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      
      Options options2 = options1.addOptionGroup(optionGroup3);
      assertNotSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup0, optionGroup3);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup2, optionGroup1);
      assertNotSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup1);
      assertNotSame(optionGroup3, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasLongOpt());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("traG", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertTrue(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "cdTVT=@ 5\"v^h<)7,", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-51), (byte) (-49), (byte) (-105), (byte)31, (byte)117, (byte) (-1)}, byteArray0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6(<{r;U3e`+FC");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "6(<{r;U3e`+FC", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.rtrim("PN9uz*|QEY");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("PN9uz*|QEY", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      String string1 = helpFormatter1.getLongOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("--", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "--");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter1.toString());
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter2);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 7, options0, 16, 64);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(stringBuffer0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 16, 351, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("line.separator", "x9862#('_~l");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotNull(printWriter0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("x9862#('_~l", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/line.separator/x9862#('_~l", mockFile0.toString());
      assertEquals("/experiment/line.separator", mockFile0.getParent());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      OptionGroup optionGroup3 = new OptionGroup();
      assertNotNull(optionGroup3);
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.isRequired());
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      
      Options options2 = options0.addOptionGroup(optionGroup3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(optionGroup3, optionGroup1);
      assertNotSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertNull(optionGroup3.getSelected());
      assertFalse(optionGroup3.isRequired());
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup2));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      
      helpFormatter0.printUsage(printWriter0, 74, "", options0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("x9862#('_~l", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/line.separator/x9862#('_~l", mockFile0.toString());
      assertEquals("/experiment/line.separator", mockFile0.getParent());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      // Undeclared exception!
      helpFormatter0.printHelp(0, "QnF.|S;", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 2, (Options) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("", "s-*;1 !");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "");
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotNull(printWriter0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("s-*;1 !", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/s-*;1 !", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      Options options2 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotSame(optionGroup1, optionGroup2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      assertFalse(optionGroup1.equals((Object)optionGroup2));
      
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "\"", options1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("s-*;1 !", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/s-*;1 !", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = 1307;
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "jkE";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jkE");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption("", true, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1307, options1, 1307, 1307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("", "s-*;1 !");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "");
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotNull(printWriter0);
      assertEquals("/s-*;1 !", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("s-*;1 !", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      Options options2 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup2);
      assertNotSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("--", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      assertFalse(optionGroup1.equals((Object)optionGroup2));
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "H!LplSUW0x{CO_Qc", "", options2, 2801, (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "has already been selected: '", "[ Options: [ short ", options0, "[ Options: [ short ", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultArgName = null;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(63);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2714, options0, 8, 2714);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      assertEquals("usage: ", string0);
      assertNotNull(string0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.rtrim("cmdLineSyntax not provided");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("cmdLineSyntax not provided", string1);
      assertNotNull(string1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter2);
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("\n", stringBuffer0.toString());
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter3);
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      
      StringBuffer stringBuffer1 = helpFormatter3.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(helpFormatter3, helpFormatter0);
      assertNotSame(helpFormatter3, helpFormatter1);
      assertNotSame(helpFormatter3, helpFormatter2);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals("\nusage:\n ", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals(9, stringBuffer1.length());
      assertEquals("\nusage:\n ", stringBuffer1.toString());
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      
      Options options3 = new Options();
      assertNotNull(options3);
      assertFalse(options3.equals((Object)options2));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "-", " ", options2, "Qs?}O]h(nDP[[4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.rtrim("ABe:x^");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("ABe:x^", string0);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", string1);
      assertNotNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " ");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("v ", stringWriter0.toString());
      assertEquals("v ", stringWriter1.toString());
      assertEquals("v ", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("v ", stringWriter0.toString());
      assertEquals("v ", stringWriter1.toString());
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 70, "l8H]ee", (String) null, options0, 3, 2802, ":~MT(s]HMFOw{(f", true);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals("v usage: l8H]ee\n\n:~MT(s]HMFOw{(f\n", stringWriter0.toString());
      assertEquals("v usage: l8H]ee\n\n:~MT(s]HMFOw{(f\n", stringWriter1.toString());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 124, "d+2=:0[Z%wan<Nw%", options0);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("v usage: l8H]ee\n\n:~MT(s]HMFOw{(f\nusage: d+2=:0[Z%wan<Nw%\n", stringWriter0.toString());
      assertEquals("v usage: l8H]ee\n\n:~MT(s]HMFOw{(f\nusage: d+2=:0[Z%wan<Nw%\n", stringWriter1.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      String string1 = helpFormatter1.getLongOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("--", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "--");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter1.toString());
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1148, "8B{XU8c,NBC81bSJG", "org.apache.commons.cli.HelpFormatter$1", options0, 3, 3, "-", true);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("v--usage: 8B{XU8c,NBC81bSJG\norg.apache.commons.cli.HelpFormatter$1\n\n-\n", stringWriter0.toString());
      assertEquals("v--usage: 8B{XU8c,NBC81bSJG\norg.apache.commons.cli.HelpFormatter$1\n\n-\n", stringWriter1.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = new StringWriter(44);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      StringWriter stringWriter2 = stringWriter1.append('S');
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("S", stringWriter1.toString());
      assertEquals("S", stringWriter2.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      
      String string0 = helpFormatter1.getLongOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("--", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "arg");
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter3, stringWriter1);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter2);
      assertNotNull(stringWriter3);
      assertEquals("Sarg", stringWriter1.toString());
      assertEquals("Sarg", stringWriter3.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter3);
      assertNotNull(mockPrintWriter0);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      
      stringWriter2.flush();
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter3);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertEquals("Sarg", stringWriter1.toString());
      assertEquals("Sarg", stringWriter2.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      
      String string1 = helpFormatter0.getOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ";P=", "\n", options0, 14, 44, "", true);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(options0, options1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter3, stringWriter1);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("Sargusage: ;P=\n\n", stringWriter1.toString());
      assertEquals("Sargusage: ;P=\n\n", stringWriter3.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(options0.equals((Object)options1));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter3.equals((Object)stringWriter0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = new StringBuffer(117);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2250, options1, 13, 19);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(options1, options0);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertFalse(options1.equals((Object)options0));
      
      Option option0 = new Option("", "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      StringBuffer stringBuffer2 = stringBuffer1.append((Object) option0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(options1, options0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(stringBuffer2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("[ option:   ::  ]", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      assertEquals("[ option:   ::  ]", stringBuffer1.toString());
      assertEquals(17, stringBuffer1.length());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals(17, stringBuffer2.length());
      assertEquals("[ option:   ::  ]", stringBuffer2.toString());
      assertFalse(options1.equals((Object)options0));
      
      Options options2 = options0.addOption("p", "org.apache.commons.cli.OptionValidator", false, "");
      assertNotSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotNull(options2);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer3 = helpFormatter1.renderWrappedText(stringBuffer0, 108, 3, "org.apache.commons.cli.HelpFormatter$1");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(stringBuffer3);
      assertEquals(55, stringBuffer0.length());
      assertEquals("[ option:   ::  ]org.apache.commons.cli.HelpFormatter$1", stringBuffer0.toString());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(55, stringBuffer3.length());
      assertEquals("[ option:   ::  ]org.apache.commons.cli.HelpFormatter$1", stringBuffer3.toString());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      int int0 = helpFormatter1.getWidth();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, int0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(10);
      int int0 = 2628;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2628, " ~", "M) !dP00[phZzF((C#[", options0, 0, (-2562), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1918, 1918, "");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(stringBuffer1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("uiDO68\"F pG5,P:a4");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 24, 1918, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      String string0 = "IkRx;x,T',S\\h{mleA";
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      assertNotNull(stringBuffer0);
      assertEquals("usage: ", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "IkRx;x,T',Sh{mleA");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("usage: IkRx;x,T',Sh{mleA", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      assertEquals(24, stringBuffer1.length());
      assertEquals("usage: IkRx;x,T',Sh{mleA", stringBuffer1.toString());
      
      Options options2 = options1.addOption("", "", false, " ");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      StringBuffer stringBuffer2 = new StringBuffer(3);
      assertNotNull(stringBuffer2);
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer2.length());
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      
      int int0 = (-4605);
      int int1 = 1398;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, (-4605), options2, 1398, 1398);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.rtrim("b(WU;-(N");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("b(WU;-(N", string2);
      assertNotNull(string2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j<+~ rW*=85h/");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(1046);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1031, "M) !dP00[phZzF((C#[", "usage: ", options0, 74, 1017, " ", false);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertNotNull(helpFormatter2);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      helpFormatter2.setLeftPadding(3);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(3, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      helpFormatter1.printHelp("-", (String) null, options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      assertNotSame(helpFormatter1, helpFormatter2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(options0, options1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(options0.equals((Object)options1));
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ");
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      MockFile mockFile0 = new MockFile("ZwO+<H$D$x{u*})", "exbzuocn']j\"Z:Y]yM,");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("usage: ", "[ Options: [ short ", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/ZwO+<H$D$x{u*})", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("exbzuocn']j\"Z:Y]yM,", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,/usage: 0[ Options: [ short ", file0.toString());
      assertEquals("usage: 0[ Options: [ short ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/ZwO+<H$D$x{u*})", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("exbzuocn']j\"Z:Y]yM,", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/experiment/ZwO+<H$D$x{u*})/exbzuocn']j\"Z:Y]yM,/usage: 0[ Options: [ short ", file0.toString());
      assertEquals("usage: 0[ Options: [ short ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      Options options2 = options1.addOptionGroup(optionGroup2);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotSame(optionGroup2, optionGroup0);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 8, "v\"+yJ5F", "The option '", options2, 74, 1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter0.defaultNewLine;
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.rtrim(" ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j<+~ rW*=85h/");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(1046);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1031, "M) !dP00[phZzF((C#[", "usage: ", options0, 74, 1017, " ", true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      List list0 = options1.getMatchingOptions("");
      assertNotSame(options1, options0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(options1.equals((Object)options0));
      
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("usage: ", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options1, 1653, 74);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(options1, options0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(7, stringBuffer0.length());
      assertEquals("usage: ", stringBuffer0.toString());
      assertEquals(7, stringBuffer1.length());
      assertEquals("usage: ", stringBuffer1.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(options1.equals((Object)options0));
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "J}Y9:Wm9hx5^", options1, ">", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", "", true, "\n");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      Options options2 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "sy#}^<2_", "", options0, "sy#}^<2_", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.defaultNewLine;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = helpFormatter1.getLeftPadding();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      String string2 = helpFormatter0.getOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = helpFormatter2.rtrim("--");
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string3);
      assertNotNull(string3);
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(helpFormatter3);
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      HelpFormatter helpFormatter4 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter4.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter4.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter4.defaultLeftPad);
      assertNotNull(helpFormatter4);
      assertEquals(74, helpFormatter4.getWidth());
      assertEquals("--", helpFormatter4.getLongOptPrefix());
      assertEquals(3, helpFormatter4.getDescPadding());
      assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
      assertEquals(" ", helpFormatter4.getLongOptSeparator());
      assertEquals("arg", helpFormatter4.getArgName());
      assertEquals(1, helpFormatter4.getLeftPadding());
      assertEquals("\n", helpFormatter4.getNewLine());
      assertEquals("-", helpFormatter4.getOptPrefix());
      assertFalse(helpFormatter4.equals((Object)helpFormatter3));
      assertFalse(helpFormatter4.equals((Object)helpFormatter2));
      assertFalse(helpFormatter4.equals((Object)helpFormatter1));
      assertFalse(helpFormatter4.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      assertNotNull(stringBuffer0);
      assertEquals("arg", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      
      HelpFormatter helpFormatter5 = new HelpFormatter();
      assertEquals(1, helpFormatter5.defaultLeftPad);
      assertEquals(74, helpFormatter5.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter5.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter5);
      assertEquals("\n", helpFormatter5.getNewLine());
      assertEquals(3, helpFormatter5.getDescPadding());
      assertEquals("arg", helpFormatter5.getArgName());
      assertEquals("usage: ", helpFormatter5.getSyntaxPrefix());
      assertEquals("--", helpFormatter5.getLongOptPrefix());
      assertEquals(74, helpFormatter5.getWidth());
      assertEquals("-", helpFormatter5.getOptPrefix());
      assertEquals(1, helpFormatter5.getLeftPadding());
      assertEquals(" ", helpFormatter5.getLongOptSeparator());
      assertFalse(helpFormatter5.equals((Object)helpFormatter0));
      assertFalse(helpFormatter5.equals((Object)helpFormatter3));
      assertFalse(helpFormatter5.equals((Object)helpFormatter4));
      assertFalse(helpFormatter5.equals((Object)helpFormatter2));
      assertFalse(helpFormatter5.equals((Object)helpFormatter1));
      
      StringBuffer stringBuffer1 = new StringBuffer(74);
      assertNotNull(stringBuffer1);
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      // Undeclared exception!
      try { 
        helpFormatter5.renderWrappedText(stringBuffer1, 76, (-3729), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      helpFormatter0.defaultOptPrefix = "The option '";
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("The option '", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Option option0 = options1.getOption("zvK1N)");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNull(option0);
      
      Option option1 = new Option("", "usage: ");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option1);
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasOptionalArg());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertEquals("usage: ", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasOptionalArg());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertEquals("usage: ", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      Option option2 = new Option("arg", "--", false, "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option2);
      assertTrue(option2.hasLongOpt());
      assertEquals("--", option2.getLongOpt());
      assertFalse(option2.hasArg());
      assertEquals("arg", option2.getArgName());
      assertEquals("usage: ", option2.getDescription());
      assertNull(option2.getValue());
      assertEquals("arg", option2.getOpt());
      assertFalse(option2.isRequired());
      assertFalse(option2.hasArgs());
      assertFalse(option2.hasValueSeparator());
      assertEquals((-1), option2.getArgs());
      assertEquals(97, option2.getId());
      assertEquals('\u0000', option2.getValueSeparator());
      assertTrue(option2.hasArgName());
      assertFalse(option2.hasOptionalArg());
      assertFalse(option2.equals((Object)option1));
      
      option1.setType(option2);
      assertNotSame(option1, option2);
      assertNotSame(option2, option1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasOptionalArg());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertEquals("usage: ", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      assertTrue(option2.hasLongOpt());
      assertEquals("--", option2.getLongOpt());
      assertFalse(option2.hasArg());
      assertEquals("arg", option2.getArgName());
      assertEquals("usage: ", option2.getDescription());
      assertNull(option2.getValue());
      assertEquals("arg", option2.getOpt());
      assertFalse(option2.isRequired());
      assertFalse(option2.hasArgs());
      assertFalse(option2.hasValueSeparator());
      assertEquals((-1), option2.getArgs());
      assertEquals(97, option2.getId());
      assertEquals('\u0000', option2.getValueSeparator());
      assertTrue(option2.hasArgName());
      assertFalse(option2.hasOptionalArg());
      assertFalse(option1.equals((Object)option2));
      assertFalse(option2.equals((Object)option1));
      
      option1.setLongOpt("-@q_'w");
      assertNotSame(option1, option2);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals("-@q_'w", option1.getLongOpt());
      assertTrue(option1.hasLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasOptionalArg());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("usage: ", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      assertFalse(option1.equals((Object)option2));
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options3 = options1.addOption(option1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertNotSame(option1, option2);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options3);
      assertEquals("-@q_'w", option1.getLongOpt());
      assertTrue(option1.hasLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasOptionalArg());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("usage: ", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArgs());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      assertFalse(option1.equals((Object)option2));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(111, (String) null, "", options0, "+pD", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertNotNull(helpFormatter2);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("usage: ", stringBuffer0.toString());
      
      helpFormatter2.setDescPadding(1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultDescPad);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(1, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "zD");
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(stringBuffer1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(9, stringBuffer0.length());
      assertEquals("usage: zD", stringBuffer0.toString());
      assertEquals("usage: zD", stringBuffer1.toString());
      assertEquals(9, stringBuffer1.length());
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options3 = options2.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      helpFormatter0.setLeftPadding(1163);
      assertEquals(1163, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1163, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options4 = options1.addOption("W", "IkRx;x,T',Sh{mleA", false, "arg");
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options1, options2);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertSame(options4, options0);
      assertNotNull(options4);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3440, options4, 1163, (-552));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "DXS6<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "'b*v(b-+ F", "usage: ", options0, "^J>)P;pk4au.+MR|4jB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.rtrim("-");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('!');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("!", stringWriter0.toString());
      assertEquals("!", stringWriter1.toString());
      
      String string3 = helpFormatter2.getLongOptPrefix();
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", string3);
      assertNotNull(string3);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "-");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("!-", stringWriter0.toString());
      assertEquals("!-", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      assertNotNull(mockPrintWriter0);
      
      stringWriter2.flush();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("!-", stringWriter0.toString());
      assertEquals("!-", stringWriter2.toString());
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(helpFormatter3);
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      
      int int1 = 31;
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 31, "\n", " ", options0, (-314), 12, "*UdHv^ownO");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string0 = helpFormatter0.rtrim("H{M9/jQ\"");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("H{M9/jQ\"", string0);
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = new StringWriter(28);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      StringWriter stringWriter2 = stringWriter1.append('(');
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertNotNull(stringWriter2);
      assertEquals("(", stringWriter1.toString());
      assertEquals("(", stringWriter2.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "H{M9/jQ\"");
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertSame(stringWriter3, stringWriter1);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter2);
      assertNotNull(stringWriter3);
      assertEquals("(H{M9/jQ\"", stringWriter1.toString());
      assertEquals("(H{M9/jQ\"", stringWriter3.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(31);
      int int0 = 1017;
      String string1 = "<DiS9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1013, "", "<DiS9", options0, 7, (-5618), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter1.rtrim(" ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter2);
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(helpFormatter3);
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      assertNotNull(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(stringBuffer1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-\n ", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals(3, stringBuffer1.length());
      assertEquals("-\n ", stringBuffer1.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter3));
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.rtrim(" ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('(');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("(", stringWriter0.toString());
      assertEquals("(", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("(usage: ", stringWriter0.toString());
      assertEquals("(usage: ", stringWriter1.toString());
      assertEquals("(usage: ", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j<+~ rW*=85h/");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(1046);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1031, "M) !dP00[phZzF((C#[", "usage: ", options0, 74, 1017, " ", true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      helpFormatter2.printOptions(mockPrintWriter0, 196, options0, 1, 31);
      assertNotSame(options0, options1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(options0.equals((Object)options1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      String string3 = helpFormatter2.rtrim("");
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter0.rtrim("-");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertNotNull(helpFormatter2);
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      String string3 = helpFormatter0.getLongOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string3);
      assertNotNull(string3);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter1.toString());
      assertEquals("v--", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("v--", stringWriter0.toString());
      assertEquals("v--", stringWriter1.toString());
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "", options0, 1, 101, "--");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("v--usage:\n \n\n--\n", stringWriter0.toString());
      assertEquals("v--usage:\n \n\n--\n", stringWriter1.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      
      String string4 = helpFormatter0.getOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string4);
      assertNotNull(string4);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--", " ", options0, 1, 1, "arg", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", true, "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options3 = options2.addOption("", "", true, "usage: ");
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Collection collection0 = options0.getOptions();
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertNotNull(collection0);
      
      helpFormatter0.printHelp("R,}&ZS-U<UO^)H\"5v/", "R,}&ZS-U<UO^)H\"5v/", options3, "");
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options4 = new Options();
      assertNotNull(options4);
      assertFalse(options4.equals((Object)options0));
      assertFalse(options4.equals((Object)options3));
      assertFalse(options4.equals((Object)options2));
      assertFalse(options4.equals((Object)options1));
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, (String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      option0.setArgName((String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      helpFormatter0.printHelp("pCOl|Z!f6br/Z,gvC", (String) null, options1, (String) null);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", true, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      
      helpFormatter0.printHelp("Uyv:", "", options1, "}JL@");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", true, "+]YMMB9h0s,QPt;/*Z");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getLongOpt());
      assertEquals("usage: ", option0.getDescription());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      Options options2 = options1.addOption((String) null, "-", true, "yZ{");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertNotNull(optionGroup1);
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer0 = new StringBuffer("kW$9F]");
      assertNotNull(stringBuffer0);
      assertEquals(6, stringBuffer0.length());
      assertEquals("kW$9F]", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 47, options0, 66, 3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(98, stringBuffer0.length());
      assertEquals(98, stringBuffer1.length());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 44, (-4101), "");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer2);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(98, stringBuffer0.length());
      assertEquals(98, stringBuffer1.length());
      assertEquals(98, stringBuffer2.length());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      
      String string0 = helpFormatter0.getNewLine();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      
      StringBuffer stringBuffer3 = helpFormatter1.renderOptions(stringBuffer1, 37, options1, 1231, 47);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer3);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer3);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(190, stringBuffer0.length());
      assertEquals(190, stringBuffer1.length());
      assertEquals(190, stringBuffer3.length());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertNotNull(helpFormatter2);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter2.getOptPrefix();
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      assertEquals("--", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter1.defaultWidth = 124;
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(124, helpFormatter1.getWidth());
      
      Options options1 = options0.addOption("arg", "[", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      helpFormatter0.printHelp("=<m}#lP#", options2);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter1.rtrim(" ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter3);
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      
      helpFormatter0.printHelp("\n", "", options0, (String) null);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter3);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter3));
      
      HelpFormatter helpFormatter4 = new HelpFormatter();
      assertEquals(3, helpFormatter4.defaultDescPad);
      assertEquals(1, helpFormatter4.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter4.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter4);
      assertEquals(3, helpFormatter4.getDescPadding());
      assertEquals("arg", helpFormatter4.getArgName());
      assertEquals("\n", helpFormatter4.getNewLine());
      assertEquals(74, helpFormatter4.getWidth());
      assertEquals("--", helpFormatter4.getLongOptPrefix());
      assertEquals(1, helpFormatter4.getLeftPadding());
      assertEquals("-", helpFormatter4.getOptPrefix());
      assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
      assertEquals(" ", helpFormatter4.getLongOptSeparator());
      assertFalse(helpFormatter4.equals((Object)helpFormatter1));
      assertFalse(helpFormatter4.equals((Object)helpFormatter2));
      assertFalse(helpFormatter4.equals((Object)helpFormatter0));
      assertFalse(helpFormatter4.equals((Object)helpFormatter3));
      
      helpFormatter3.setLeftPadding(44);
      assertNotSame(helpFormatter3, helpFormatter1);
      assertNotSame(helpFormatter3, helpFormatter4);
      assertNotSame(helpFormatter3, helpFormatter0);
      assertNotSame(helpFormatter3, helpFormatter2);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(44, helpFormatter3.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals(44, helpFormatter3.getLeftPadding());
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter4));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      
      String string2 = helpFormatter2.rtrim("\"As*Uqd8&-`h");
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\"As*Uqd8&-`h", string2);
      assertNotNull(string2);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(helpFormatter3);
      assertEquals(3, helpFormatter3.getDescPadding());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      
      HelpFormatter helpFormatter4 = new HelpFormatter();
      assertEquals(74, helpFormatter4.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter4.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter4.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter4);
      assertEquals("--", helpFormatter4.getLongOptPrefix());
      assertEquals(3, helpFormatter4.getDescPadding());
      assertEquals("arg", helpFormatter4.getArgName());
      assertEquals(74, helpFormatter4.getWidth());
      assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
      assertEquals(" ", helpFormatter4.getLongOptSeparator());
      assertEquals(1, helpFormatter4.getLeftPadding());
      assertEquals("\n", helpFormatter4.getNewLine());
      assertEquals("-", helpFormatter4.getOptPrefix());
      assertFalse(helpFormatter4.equals((Object)helpFormatter2));
      assertFalse(helpFormatter4.equals((Object)helpFormatter0));
      assertFalse(helpFormatter4.equals((Object)helpFormatter1));
      assertFalse(helpFormatter4.equals((Object)helpFormatter3));
      
      helpFormatter4.printHelp(827, "-", (String) null, options0, "-", false);
      assertNotSame(helpFormatter4, helpFormatter2);
      assertNotSame(helpFormatter4, helpFormatter0);
      assertNotSame(helpFormatter4, helpFormatter1);
      assertNotSame(helpFormatter4, helpFormatter3);
      assertEquals(74, helpFormatter4.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter4.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter4.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", helpFormatter4.getLongOptPrefix());
      assertEquals(3, helpFormatter4.getDescPadding());
      assertEquals("arg", helpFormatter4.getArgName());
      assertEquals(74, helpFormatter4.getWidth());
      assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
      assertEquals(" ", helpFormatter4.getLongOptSeparator());
      assertEquals(1, helpFormatter4.getLeftPadding());
      assertEquals("\n", helpFormatter4.getNewLine());
      assertEquals("-", helpFormatter4.getOptPrefix());
      assertFalse(helpFormatter4.equals((Object)helpFormatter2));
      assertFalse(helpFormatter4.equals((Object)helpFormatter0));
      assertFalse(helpFormatter4.equals((Object)helpFormatter1));
      assertFalse(helpFormatter4.equals((Object)helpFormatter3));
      
      helpFormatter0.printHelp("g", "arg", options0, "line.separator");
      assertNotSame(helpFormatter0, helpFormatter4);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter3);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter4));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter3));
      
      String string3 = helpFormatter2.createPadding(74);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter4);
      assertNotSame(helpFormatter2, helpFormatter3);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("                                                                          ", string3);
      assertNotNull(string3);
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter4));
      assertFalse(helpFormatter2.equals((Object)helpFormatter3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "}JL@";
      helpFormatter0.optionComparator = null;
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 423, (-79), "}JL@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(".", " ", options0, (String) null, true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter1.rtrim(" ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      Options options2 = options1.addOption("", "", false, "ll684e}V9L>e~Sby");
      assertSame(options1, options2);
      assertNotSame(options1, options0);
      assertNotSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(options1.equals((Object)options0));
      assertFalse(options2.equals((Object)options0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kD 3VXXRB=4(w");
      assertNotNull(mockFileOutputStream0);
      
      helpFormatter0.printHelp("kD 3VXXRB=4(w", "<cJx<Z", options1, "usage: ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options1, options2);
      assertNotSame(options1, options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(options1.equals((Object)options0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "`enK _hUW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      File file0 = MockFile.createTempFile("arg", "");
      assertNotNull(file0);
      assertEquals("/tmp/arg0", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("arg0", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) file0;
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      helpFormatter0.printHelp("usage: ", "MnPO%xuHW", options0, "\n");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      
      helpFormatter1.setLeftPadding(3);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string0 = helpFormatter0.rtrim("7fYxWbwG*");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("7fYxWbwG*", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('3');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", string1);
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("3usage: ", stringWriter0.toString());
      assertEquals("3usage: ", stringWriter1.toString());
      assertEquals("3usage: ", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      assertNotNull(mockPrintWriter0);
      
      stringWriter0.flush();
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("3usage: ", stringWriter0.toString());
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "--", "--", options0, 3, 34, "Q=*ii<|c;;&$]W(");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("3usage: usage: --\n--\n\nQ=*ii<|c;;&$]W(\n", stringWriter0.toString());
      assertEquals("3usage: usage: --\n--\n\nQ=*ii<|c;;&$]W(\n", stringWriter1.toString());
      assertEquals("3usage: usage: --\n--\n\nQ=*ii<|c;;&$]W(\n", stringWriter2.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("-", string2);
      assertNotNull(string2);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2010), "org.apache.commons.cli.OptionValidator", "--", options0, 101, 7, "3", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Options options2 = options1.addOption("", "usage: ", false, "usage: ");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("--", option0.getDescription());
      assertTrue(option0.hasArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("--", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options3 = options2.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("--", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      Options options4 = options3.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options4);
      assertSame(options3, options1);
      assertSame(options4, options0);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options4);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("--", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      helpFormatter0.printHelp(34, "`enK _hUW", "", options4, "", false);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options4);
      assertSame(options3, options1);
      assertSame(options4, options0);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("--", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "`enK _hUW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      
      String string1 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("-", string1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = helpFormatter1.rtrim(" ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter2);
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('b');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("b", stringWriter0.toString());
      assertEquals("b", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("b-", stringWriter0.toString());
      assertEquals("b-", stringWriter1.toString());
      assertEquals("b-", stringWriter2.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "usage: ", options0, 3, 74, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(1);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.write(16);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "--", options0, 43, 3, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter2;
      mockPrintWriter1.format(locale0, "{i?XI0LT", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1022, "{i?XI0LT", ")sd", (Options) null, 44, 0, "n>A*P^5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1059;
      helpFormatter0.setLeftPadding(1059);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(1059, "W%M=", "W%M=", options0, "E%%2Jz0<W|JcBU");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      try { 
        MockURI.URI("]dbK6.kP|?", "--", "]dbK6.kP|?", "]dbK6.kP|?");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ]dbK6.kP|?://--%5DdbK6.kP%7C%3F#]dbK6.kP%7C?
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.createPadding(1);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "", false, "ll684e}V9L>e~Sby");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "DXS6B", (Options) null, "E@^Q:k_^Zl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1059);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, (String) null, "[ Options: [ short ", options0, 1059, 392, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      byte byte0 = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = 3880;
      Options options0 = new Options();
      options0.addOption("arg", false, "*S&m&&Mhks7mq:gc");
      Option option0 = null;
      try {
        option0 = new Option("m? 4kg{&_pV", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'm? 4kg{&_pV' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 7;
      byteArrayOutputStream0.write(1568);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 7, "");
      Locale locale0 = new Locale("arg", "?RDwL>5t.'LXO#JLS@");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "?RDwL>5t.'LXO#JLS@", objectArray0);
      String string0 = "";
      helpFormatter0.rtrim("");
      Locale locale1 = Locale.ROOT;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) locale1;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) locale1;
      mockPrintWriter0.format(locale1, "=b,c=y|MC: CvYf./", objectArray1);
      String string1 = "\"+8+ :lIV#=te^?S";
      Options options0 = new Options();
      String string2 = "arg";
      // Undeclared exception!
      try { 
        options0.addOption("|nJ^6:\"m*kRKlni", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|nJ^6:\"m*kRKlni' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHo$~o1S)pOa";
      helpFormatter0.setSyntaxPrefix("xHo$~o1S)pOa");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "xHo$~o1S)pOa", ">", (Options) null, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) mockPrintWriter2;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "";
      mockPrintWriter2.format(locale0, "xH}xlFmDw", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xH}xlFmDw", "", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "--";
      helpFormatter1.setSyntaxPrefix("--");
      helpFormatter0.setLongOptSeparator("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "' was specified but an option from this group ", "usage: ", (Options) null, "X/#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1059;
      helpFormatter0.setLeftPadding(1059);
      PrintWriter printWriter0 = null;
      String string0 = "QdAeF,UU/^";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1059, "org.apache.commons.cli.AlreadySelectedException", "QdAeF,UU/^", options0, 2898, 1, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1059);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      helpFormatter0.printHelp("[", options1);
      helpFormatter0.setNewLine("QT");
      assertEquals("QT", helpFormatter0.getNewLine());
      
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, false);
      assertEquals(3, helpFormatter1.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2430);
      helpFormatter0.renderWrappedText(stringBuffer0, 3510, 2430, "");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "LBeD3`cZqnDAp5n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "}JL@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1059;
      helpFormatter0.setLeftPadding(1059);
      PrintWriter printWriter0 = null;
      String string0 = "QdAeF,UU/^";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      int int1 = 2898;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1059, "org.apache.commons.cli.AlreadySelectedException", "QdAeF,UU/^", options0, 2898, 1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1854));
      assertEquals((-1854), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHo$~o1S)pOa";
      helpFormatter0.setSyntaxPrefix("xHo$~o1S)pOa");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "xHo$~o1S)pOa", "DXS6<", (Options) null, "'b*v(b-+ F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      boolean boolean0 = false;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5116), "~z&JqkE9Sy", "~z&JqkE9Sy", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(0);
      assertEquals("", string0);
      
      Options options0 = new Options();
      helpFormatter0.printHelp("/7Ydm77r>ERl", "/7Ydm77r>ERl", options0, "/7Ydm77r>ERl");
      helpFormatter0.setLeftPadding(1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(" ", string0);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "ll684e}V9L>e~Sby");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("--", options2);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "frM~";
      helpFormatter0.setLongOptSeparator("frM~");
      helpFormatter0.rtrim("OKU~=D,)N8>b");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("a{rn9;?iD");
      helpFormatter0.defaultSyntaxPrefix = "OKU~=D,)N8>b";
      helpFormatter0.setSyntaxPrefix("OKU~=D,)N8>b");
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("pQF8 >&");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_4N)";
      helpFormatter0.findWrapPos("_4N)", 54, 1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Options");
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\n", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3353;
      helpFormatter0.createPadding(3353);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("+4VCS[");
      String string0 = " |Q!";
      try { 
        MockURI.URI("arg", " |Q!", "-", "\n", "+4VCS[");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: arg://%20%7CQ!-?%0A#%7F+4VCS[
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1865), (-1204), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xHo$~o1S)pOa";
      helpFormatter0.setSyntaxPrefix("xHo$~o1S)pOa");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "xHo$~o1S)pOa", "DXS6<", (Options) null, "'b*v(b-+ F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultWidth = 2;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "", options0, (String) null);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter3.setLeftPadding(44);
      assertEquals(44, helpFormatter3.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-64), (-1139));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1904;
      helpFormatter0.setLeftPadding(3027);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=f6";
      helpFormatter0.setLongOptSeparator("=f6");
      int int0 = (-3143);
      String string1 = "";
      String string2 = "Cannot add value, list full.";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("=f6", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=f6' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "IkRx;x,T',Sh{mleA");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "K";
      String string1 = "J|FvM[gHBYdm@[V~{y";
      helpFormatter0.setLongOptPrefix("");
      MockFile mockFile0 = new MockFile("H](DDvhW|5^N", "J|FvM[gHBYdm@[V~{y");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\n", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      mockPrintWriter1.print(true);
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) mockPrintWriter2;
      objectArray0[6] = (Object) mockPrintWriter0;
      helpFormatter0.findWrapPos(":-:k'E>41Mf>lAqr{(", 1566, 2);
      helpFormatter0.setDescPadding(1632);
      helpFormatter0.setWidth(4291);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      assertEquals(1632, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "(*zu=";
      String string1 = "";
      helpFormatter0.setWidth(112);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "arg");
      options0.addOption(option0);
      Option option1 = null;
      try {
        option1 = new Option("usage: ", "c#[K1?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3425);
      StringWriter stringWriter1 = stringWriter0.append('p');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 3425, 3425, "");
      helpFormatter0.defaultWidth = (-557);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3462));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) mockPrintWriter2;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter2.format(locale0, "xH}xlFmDw", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1962), "", "", (Options) null, (-3828), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("QS|N");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      assertEquals("QS|N", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 204;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "org.apache.commons.cli.OptionGroup");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "org.apache.commons.cli.Option";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printUsage(printWriter0, 204, "", options0);
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("++h^{Q{", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '++h^{Q{' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      String string0 = "e3t5";
      Options options0 = new Options();
      String string1 = "YO\\\"5*=&}BXV?.|}";
      // Undeclared exception!
      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "YO\"5*=&}BXV?.|}", true, "bZ-{DqH2&B>dx.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      int int0 = (-356);
      String string0 = null;
      mockPrintStream0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-356), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
