/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:12:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 111;
      helpFormatter0.createPadding(111);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "M";
      int int1 = (-1568);
      helpFormatter0.defaultWidth = (-1568);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      helpFormatter0.setDescPadding(0);
      byteArray0[0] = (byte) (-82);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)44;
      byte byte0 = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (byte) (-82), (byte)8, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";(U>g[.D@S||5q");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.getWidth();
      String string0 = "Q>L+=Cr<~q)u";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = false;
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        options0.addOption("XUH!h", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'XUH!h' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3583), "C", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("ZbuJqQ");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setLongOptSeparator((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", "<", (Options) null, "ZbuJqQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("LdES");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1118, "arg");
      helpFormatter0.findWrapPos(" ", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.AlreadySelectedException", "kDZ/X.", options0, "HO^.:");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultLeftPad = 1169;
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(" | ", "", options0, " X/RfqO882e=");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(74);
      MockFile mockFile0 = new MockFile("-", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 1345;
      mockFile0.mkdir();
      mockFile1.mkdirs();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1345, "", "_=jklsUOe}+ i", options0, 13, 1272, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("e6qny!e.e#x17AA", options0, true);
      helpFormatter0.setWidth(6);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.renderOptions((StringBuffer) null, 6, options0, 6, 6);
      PrintWriter printWriter0 = null;
      options0.hasLongOption("c%;");
      options0.toString();
      int int0 = (-791);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 6, "", "", options0, (-791), (-5132), "e6qny!e.e#x17AA", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding((-1642));
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.defaultLongOptPrefix = "~vVd]w -Pb=";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 0, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "arg", true, "_>#)=Gc#Mo}");
      option0.setArgName((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "-");
      Options options3 = options2.addOption("xD", (String) null, false, "_>#)=Gc#Mo}");
      Options options4 = options3.addOption(option0);
      options4.addOption(option0);
      optionGroup0.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", (String) null, options4, "WpALck*3LeMvS'(r+*");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "b}ospx^b#^?p");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("0B9", "0B9", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("b}ospx^b#^?p", "t(we:}[[53So\"Za>", options2, "b}ospx^b#^?p");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "=&c?!Q", "=&c?!Q", (Options) null, "=&c?!Q", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('d');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options1, 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      int int0 = 911;
      Options options0 = null;
      int int1 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "NV*q0l*:fO0]", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "p";
      String string1 = "";
      Option option0 = new Option("p", "*WT~", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      String string2 = "pun{LHA\". &yJC~2[";
      MockFile mockFile0 = new MockFile("");
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(24, "", "*WT~", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("?!p'OEt8p`6T[mG");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      int int0 = (-793);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -793
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "line.seKarator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.renderOptions((StringBuffer) null, (-3680), options0, 9, 0);
      helpFormatter0.renderOptions((StringBuffer) null, 41, options0, 191, 64);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "line.seKarator", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1416, (Options) null, 1416, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      String string0 = "dlJ{P%et@\"33s>!|7%";
      helpFormatter0.setNewLine("");
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      int int0 = (-1259);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOption("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2583;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2583, "}}AT;*/%TqSfQy<.", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("rz", "arg", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 74;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, "4j|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      MockFile mockFile0 = new MockFile("usage: ", "]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFile0.setWritable(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1345, "(AVfS@");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1345, 1133, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.renderOptions(stringBuffer1, 20, options1, 64, 996);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "(AVfS@", options1, "T$0JY+sM?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, "KOBH", "KOBH", (Options) null, 34, 5391, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 77, 509, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 77, (Options) null, 2, 5274);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultWidth = (-5119);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^!, <lq.hQV=Ad8", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Nce LaQP)Ef:,|IXD");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The]?ption '");
      Options options0 = new Options();
      Option option0 = new Option("", "Bxe]csPa5z4e", true, (String) null);
      option0.setOptionalArg(true);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SW8DjFRHNLc2A", "has already been selected: '", true, "arg");
      Options options2 = options1.addOption("", false, "");
      options2.hasLongOption("WeR.p<K3YJ{");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "has already been selected: '", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]%M";
      helpFormatter0.setLeftPadding(1367);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.defaultWidth = 31;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "usage: ", true, "\n");
      String string1 = "";
      Options options3 = options2.addOption("", false, "-");
      Option option0 = new Option((String) null, false, "\"");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]%M", options4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3411, "<<({jSTF,]l-Lt/y;Q'", "--", options0, "cmdLineSyntax not provided");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "]", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Nce LaQP)Ef:,|IXD");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("-");
      Option option0 = new Option((String) null, "usage: ", true, "arg");
      Options options2 = options0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), ":>8%w/aPcCxtCIc", "", options2, 1, 1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("-");
      File file0 = MockFile.createTempFile("!(&YttE,+u\"Y/-", "K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 72, "7k)B]", "", options0, 3, (-3073), "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("&6cFd- 0J-eHMV+1K", options0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "&6cFd- 0J-eHMV+1K", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-951);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-951), 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("(gYlQQREB", "org.apache.commons.cli.ParseException");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "(gYlQQREB", "org.apache.commons.cli.Option", options0, 31, 31, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "+]eQ!TGP[", (String) null, options0, 31, 31, "", true);
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 2, 19);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U),l;No`PWF`@PF.";
      MockFile mockFile0 = new MockFile("U),l;No`PWF`@PF.", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ")Y/\";e&q(ZjImSb");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("F<#(X", "U),l;No`PWF`@PF.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 143, (-2499), "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("F<#(X", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      options1.toString();
      helpFormatter0.printHelp(883, "SW8DjFRHNLc2A", "Cannot add value, list full.", options1, "Cannot add value, list full.", false);
      Options options2 = options0.addOption("", true, "SW8DjFRHNLc2A");
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.printHelp("Cannot add value, list full.", options2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      options0.getOption((String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "k0&YQ)]/Zej";
      String string1 = "org.apache.commons.cli.OptionGroup";
      try { 
        MockURI.URI("line.separator", "k0&YQ)]/Zej", "org.apache.commons.cli.OptionGroup", "--", "arg");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: line.separator://k0&YQ)]%2FZejorg.apache.commons.cli.OptionGroup?--#arg
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 2824, 2824, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 288, 74);
      String string1 = "&6cFd- 0J-eHMVq+1K";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      String string2 = "`*.\\uo?2<Az";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1826, string2, "", options0, (-1), (-1), "&6cFd- 0J-eHMVq+1K");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The]option '");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 460, ",JC\"6a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("F<#(X", "U),l;No`PWF`@PF.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "F<#(X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("The option '", 3653, 3);
      Options options1 = new Options();
      options0.toString();
      options0.getOption("The option '");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("aOOq45`X`TiQ2Rl?&Pt", (String) null, (Options) null, "iI@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-205));
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SW8DjFRHNLc2A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("-");
      Option option0 = new Option((String) null, "usage: ", true, "arg");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":>8%w/aPcCxtCIc", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sOh.Z(0\"/.F.I|/vtM");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "");
      Options options1 = new Options();
      options0.toString();
      options0.getOption("usage: ");
      helpFormatter1.printHelp("arg", "", options1, "arg");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 3, 3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("$F<K|", "U),l;No`PWF`@PF.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "$F<K|");
      helpFormatter0.setArgName("JOq@");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("n?;/i2~`F);$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println(143L);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1062, "--", "", options0, 74, 1, "--");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2486, "vbmIX>o%M:\"$~", "vbmIX>o%M:\"$~", options0, "vbmIX>o%M:\"$~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1781, options0, (-3850), 3087);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      options0.addOption("", true, "SW8DjFRHNLc2A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1025, "The option '", "3KPNQv", options0, "lLjm.b0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-768), "f*:uIE0.hKM'", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("rz", "k", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.helpOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1825, "sNML>A#00fQ4EI=I2Ub", "", options0, 7, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SW8DjFRHNLc2A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('(');
      helpFormatter1.printHelp(printWriter0, 481, "SW8DjFRHNLc2A", "", options1, 3, 74, " ");
      options1.hasOption("-");
      Option option0 = new Option((String) null, "usage: ", true, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp(":>8%w/aPcCxtCIc", options1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.createPadding(101);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'v';
      charArray0[2] = '\"';
      charArray0[3] = '5';
      charArray0[4] = '6';
      charArray0[5] = 'c';
      charArray0[6] = 'M';
      charArray0[7] = '@';
      charArray0[8] = '}';
      stringWriter0.write(charArray0);
      helpFormatter0.renderOptions(stringBuffer0, (-710), options0, 101, 1878);
      Option option0 = new Option((String) null, false, "<");
      options0.addOption(option0);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      locale0.getUnicodeLocaleAttributes();
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      options0.getOptionGroups();
      helpFormatter1.printHelp(printWriter0, 63, "s<", "arg", options0, 1, 10, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bufferedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "-", "-q13Zs74N?", options0, 97, 0, "=se@ro", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1417, "8OW) n,gCFy", "", options0, "");
      helpFormatter0.setLongOptSeparator("8OW) n,gCFy");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("CT", options0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1915);
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      options0.addOption(option0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, (-104), 74, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      String string0 = "_sS|+%22g?dmTH}hJF\\";
      String string1 = "'s5(X2/Yv+s.&=J7";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("O4,BB*Pg ^k&~+)|", "", true, "S;xl>%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'O4,BB*Pg ^k&~+)|' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "cmdLineSyntax not provided", "Cannot add value, list full.", options0, 74, 0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText((StringBuffer) null, 3, 3, "Qm w%>/!NrW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((long) 1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "?TXzq%#JQ+i%", "?TXzq%#JQ+i%", options1, 1417, 0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "-");
      options1.getOptionGroups();
      options1.addOption("", false, ") |c.5fiCx'-=y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("YExMrIKV]-3i]$U'");
      Option option0 = new Option("", "usage: ", true, "XWh:|j[1");
      options0.addOption(option0);
      helpFormatter1.printHelp("YExMrIKV]-3i]$U'", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SW8DjFRHNLc2A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("-");
      Option option0 = new Option((String) null, "usage: ", true, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp(":>8%w/aPcCxtCIc", options1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
      Options options0 = new Options();
      helpFormatter1.setLongOptSeparator("arg");
      helpFormatter1.printHelp("usage: ", options0);
      int int0 = (-360);
      helpFormatter1.renderOptions(stringBuffer1, (-360), options0, 3, 2902);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "s`u'G=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // s`u'G=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 64, (String) null, "\n", options0, (-695), 2, "!gs>J a =", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "\n");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "xg(mw~3tN>";
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(295);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("xg(mw~3tN>", "usage: ", false, "fpyQe_L }%E~^r)r,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xg(mw~3tN>' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The]option '");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      options0.getOption("usage: ");
      helpFormatter0.printHelp("?YoFS981:ZMpQ=A/", "org.apache.commons.cli.OptionValidator", options0, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.printHelp(74, "IZ?rec11hE(o", "", options2, "");
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("The option '");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.printHelp("[ARG...]", options1);
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-266), "5r.sq940Y7(:Zu", "arg", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(8);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3557), "]");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-1), "The option '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("", 288, 126);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-1), int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.setLongOptSeparator("?&zu=hT");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("line.separator");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4788), "", "", options0, (-15), (-549), "SW8DjFRHNLc2A", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1675, (String) null, "c^t/&x,(G-flvyh", options1, "j1~h_[x9g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "d%um`HQC#", "8OW) n,gCFy", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Qr_*aE}V>";
      helpFormatter0.setOptPrefix("Qr_*aE}V>");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Gw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.getChannel();
      Options options1 = new Options();
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3), "ND~'mnwGy0q:Q ", "", options1, 1370, (-3), "8ooJ{jJU5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1596;
      String string0 = "8OW) n,gCFy";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1596, "d%um`HQC#", "8OW) n,gCFy", options1, (String) null);
      helpFormatter0.setLongOptSeparator(" | ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1596, 1406, "MM0*6T'{NAlxL,O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "Cannot add value, list full.", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 288, 126);
      Options options0 = new Options();
      options0.toString();
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "&6cFd- 0J-eHMVq+1K", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1356, "6;K&KaFI");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      helpFormatter0.printHelp("t!i~RRn|U-lt;Nw", "=5oJ8\"|", options0, "4J", true);
      // Undeclared exception!
      try { 
        options0.addOption("+,?K[)t.", false, "SW8DjFRHNLc2A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+,?K[)t.' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      options0.addOption("", true, "SW8DjFRHNLc2A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1025, "-", "D!Lj0l2", options0, 63, 10, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      options0.helpOptions();
      helpFormatter0.printHelp("nh9.'6|YX", "GA^\"H_", options0, ":v97>y8Z4K{3", true);
      // Undeclared exception!
      try { 
        options0.addOption(":v97>y8Z4K{3", true, "nh9.'6|YX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':v97>y8Z4K{3' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine(" | ");
      String string1 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("k#hU@q5>bja+2bsn", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k#hU@q5>bja+2bsn' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("\n", "W=2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("%W3ki");
      helpFormatter0.setSyntaxPrefix("%W3ki");
      helpFormatter0.defaultWidth = 10;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "%W3ki", 13, (-1416));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1);
      String string0 = ",9)/qomF\\#^";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), ",9)/qomF#^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "W,<\"q1";
      int int0 = (-2803);
      helpFormatter0.defaultLeftPad = (-2803);
      helpFormatter0.defaultSyntaxPrefix = "iD%CF2qD";
      helpFormatter0.setOptPrefix("E1)F//?+kF7o7Z{Bh");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W,<\"q1", "W*Hs4P%", options0, "W*Hs4P%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getDescPadding();
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, (-1496), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SW8DjFRHNLc2A");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "The option '", "The option '", options1, 0, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-840);
      helpFormatter0.setWidth((-840));
      helpFormatter0.getOptionComparator();
      String string0 = "--";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "I&2l4RS4yF[eH7WDK");
      try { 
        MockFile.createTempFile("usage: ", "--", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      String string0 = "e2\"XhvbyI";
      helpFormatter0.setLongOptPrefix("e2\"XhvbyI");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("e2\"XhvbyI", (-1239), (-1239));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("rz", "k", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(58, "<<({jSTF,]l-Lt/y;Q'", "", options1, "sNML>A#00fQ4EI=I2Ub");
      helpFormatter0.setLongOptSeparator("rz");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Qr_*aE}V>";
      helpFormatter0.setOptPrefix("Qr_*aE}V>");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1326), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1);
      helpFormatter0.setOptPrefix("Qr_*aE}V>");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1326), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Options");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 702;
      helpFormatter0.createPadding(702);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      String string0 = ", ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(", ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "$$j-f.h$@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-3628);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("1pETEdh=E={1", "--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1pETEdh=E={1' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1596, "d%um`HQC#", "8OW) n,gCFy", options1, (String) null);
      helpFormatter0.setLongOptSeparator(" | ");
      assertEquals(" | ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("p1hR3,*30'2+i K[xT");
      String string0 = "hQV%=fYYi1c7PkW+";
      StringBuffer stringBuffer0 = new StringBuffer("hQV%=fYYi1c7PkW+");
      int int0 = (-2000);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(827, (CharSequence) "-", 0, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 827
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = null;
      boolean boolean0 = false;
      String string1 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", "[ Options: [ short ", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = "*+hm)SCjGe)sWy";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1647), (-1647), "*+hm)SCjGe)sWy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = 204;
      String string0 = "' was specified but an option from this group ";
      String string1 = "%_?Dh``xg8@0/C'?o\\";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("R(8P<VT,(3Nwo\"m4AZ", "7NNf<Ay{PLPUFZ6<0", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R(8P<VT,(3Nwo\"m4AZ' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setWidth(31);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int1 = (-2);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      Options options0 = new Options();
      mockPrintWriter0.println((long) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1807), "", (String) null, options0, (-1807), 0, "ND~'mnwGy0q:Q ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("/a$}a+q/D~txu-uL[?");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append(0);
      stringBuffer0.append(0);
      Options options0 = new Options();
      int int0 = 0;
      stringBuffer0.append(3845.16F);
      options0.getOption("Hbun7J<OD!LkQ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2115), options0, (-2115), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(753);
      helpFormatter0.getLongOptPrefix();
      assertEquals(753, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2854);
      helpFormatter0.setLeftPadding((-2854));
      String string0 = "y'+y~>d";
      helpFormatter0.setLongOptPrefix("y'+y~>d");
      String string1 = "";
      String string2 = "*<!}K6E]/c\"<lkZpMV";
      String string3 = "";
      try { 
        MockURI.URI("-", "usage: ", "", "*<!}K6E]/c\"<lkZpMV", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: -://usage:%20?*%3C!%7DK6E]/c%22%3ClkZpMV#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.defaultOptPrefix = "]";
      helpFormatter0.defaultDescPad = 687;
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
