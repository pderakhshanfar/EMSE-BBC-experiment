/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:49:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultArgName = "Y] ,^O^8TGY";
      helpFormatter0.defaultNewLine = " ";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "Y] ,^O^8TGY";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      helpFormatter0.printOptions(printWriter0, 89, options0, 89, 89);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.defaultOptPrefix = "Y] ,^O^8TGY";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.setArgName("Y] ,^O^8TGY");
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(109);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ITALIAN;
      String string0 = "*i3VM`vB_XFp(";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "*i3VM`vB_XFp(", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format(" ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", true, "]\u0006Xf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "\n");
      helpFormatter0.findWrapPos("usage: ", 3, 3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2298));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", ":S", options0, "dKN:icVP+.+5$FV}1]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "--");
      Option option1 = new Option("arg", "", true, "*B]#aaMoxBdC");
      option0.setArgName("");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "6;lYcZ^K'", options0, "P# 8pbi!/F=", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "--");
      option0.setArgName("\n");
      helpFormatter0.setArgName((String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("C6aHNVf", "--", options0, "-", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "--");
      option0.setArgName("\n");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "N|Zq;\"0]-'M", "^J%38sWGn\"", options0, "N|Zq;\"0]-'M", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1881);
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "--");
      option0.setArgName("\n");
      Options options1 = options0.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("C6aEHNVf", "", options0, "-", true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(31, "cmdLineSyntax not provided", (String) null, options1, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-734);
      int int0 = (-1910);
      String string0 = "]";
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Uu:S;CE3Y`;xV2:8:", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, "F[f-o)-9K1", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Option option0 = new Option((String) null, "arg", true, (String) null);
      option0.setArgName((String) null);
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.printHelp("P3%y][Od5;`xI[?k:cF", "}u\"*>-M2oFy E[a7", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, " ", (String) null, options0, 31, 5275, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(2913);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2913, options0, 2913, 2913);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 2913, options0, 3417, (-971));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, ">", "--", (Options) null, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      Option option0 = new Option("arg", (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), ";,m[NeYe.'", "arg", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = new Locale("--", " ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.println("usage: ");
      objectArray0[2] = (Object) "R*OSN1l";
      mockPrintWriter0.printf(locale0, "R*OSN1l", objectArray0);
      int int0 = 65;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "InP`8LqB$[S=2{";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "jK/QFC+clW)NR<4E");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp("InP`8LqB$[S=2{", options1, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 71, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      stringBuffer1.append(0.0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "Vww8dPz0y~R5G#2,|";
      String string1 = "?!:0*vqFz\\<QP\"'\\~";
      Options options0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(848, "Vww8dPz0y~R5G#2,|", "?!:0*vqFz<QP\"'~", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("jTy~~p`", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      helpFormatter1.setSyntaxPrefix("");
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;Kq", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      helpFormatter1.renderOptions((StringBuffer) null, (-123), options0, 1090, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 70, 74, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultDescPad;
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      String string0 = helpFormatter0.defaultNewLine;
      int int0 = 2;
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5=v@2B\"pJwE>(");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "5=v@2B\"pJwE>(";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "5=v@2B\"pJwE>(";
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 3951, "sr|B", "", options0, 64, 3951, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3907);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.setSyntaxPrefix("\n");
      helpFormatter4.getLongOptPrefix();
      helpFormatter4.rtrim((String) null);
      // Undeclared exception!
      helpFormatter4.createPadding(2330);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1588), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = true;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = ">@NO|2Bb[}3WN";
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ":`dv\"bqrIEd63");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, ":`dv\"bqrIEd63", ":`dv\"bqrIEd63", (Options) null, 31, 9, ":`dv\"bqrIEd63", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-3742), (-1096));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9p";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 58, 14, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      Options options2 = options1.addOption((String) null, "-", false, (String) null);
      Option option0 = new Option("", true, "");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      options4.addOption((String) null, "\n", true, "");
      helpFormatter0.printHelp("--", (String) null, options4, ">';n", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2, "\n", "", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "| sHw", options0, (-2), 74, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9p";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      int int0 = 38;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 74, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string0 = "c0R";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintWriter0.print("b=C+}7=^");
      mockPrintStream0.format("c0R", objectArray0);
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      mockPrintStream0.write(byteArray0, 2, 3716);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3716, (Options) null, 3716, 3716);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim((String) null);
      String string0 = "=n@N8nwf'/`";
      File file0 = MockFile.createTempFile("usage: ", "=n@N8nwf'/`");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "arg", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultDescPad = helpFormatter0.defaultDescPad;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-7), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.setWidth(10);
      Option option0 = new Option("arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("9p", true, "-");
      helpFormatter0.printHelp("9p", options3);
      helpFormatter0.setLongOptSeparator("9p");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "sr|B", "--", options0, 3951, 1, "\n", true);
      helpFormatter1.defaultOptPrefix = "]";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.setSyntaxPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(762);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Cannot add value, list full.", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, true, "");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(2);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-2), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setArgName((String) null);
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp("--", "9p", options1, "9p", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X*G.*,DXo&", "l;=Qplv|>L#", (Options) null, "l;=Qplv|>L#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-8);
      int int1 = (-3579);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-3579), 'M');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "sr|B", "--", options0, 3951, 1, "\n", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(3951);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.printHelp(3951, "org.apache.commons.cli.Option", "iU", options0, "p3 2jU", true);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter1.rtrim(".9d_K");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter4.getLongOptPrefix();
      helpFormatter4.printUsage((PrintWriter) mockPrintWriter0, 160, " ", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3951, "sr|B", "Q%3bN6", options0, 44, 92, "0W)bJ<n;-*s)(H)j9", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(92);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "sr|B", "--", options0, 3951, 1, "\n", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter2.createPadding(3951);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.setSyntaxPrefix(string0);
      helpFormatter5.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, true, "");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.setWidth(2);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3h:T&:*Z{aJM#", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, true, "");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(2);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 38, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-902), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
          HelpFormatter helpFormatter2 = new HelpFormatter();
          helpFormatter2.getLongOptSeparator();
          helpFormatter2.setWidth(1);
          StringBuffer stringBuffer0 = new StringBuffer("i==py~s-\":Y");
          StringBuffer stringBuffer1 = new StringBuffer();
          // Undeclared exception!
          helpFormatter2.renderWrappedText(stringBuffer1, 0, 1170, " ");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "`=~v_4krLP,Put", "-", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">@NO|2Bb[}3WN", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "arg", "--", options1, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      options0.addOption("A", "arg", false, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((float) 3);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(77);
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      option0.setRequired(false);
      Options options2 = options1.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1128, "' was specified but an option from this group ", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      int int0 = helpFormatter0.defaultDescPad;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options1, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 3951;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "sr|B", "--", options0, 3951, (-2), "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      MockFile.createTempFile("1&B1~3XS1QtE!!;q", "#w92[?", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "#w92[?", "6IE<//pZgxrw<y+&5", (Options) null, (-2), 2965, "6IE<//pZgxrw<y+&5", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 3951;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "sr|B", "   ", options0, 3951, (-2), "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, false, "--");
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.setWidth(2);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      options0.addOption((String) null, "|U?mB%mh{", false, "&oO-\u0004m 3*]U|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|U?mB%mh{", "9tG%m'7<s|", options2, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      helpFormatter1.defaultOptPrefix = " ";
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 5099, "BVX?v'Rr{u", " ", options0, 16, (-3155), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(77);
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "usage: ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockFile0.mkdirs();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options1 = options0.addOption((String) null, "ns!pi", true, (String) null);
      options1.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options0, (-5164), 19, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", (String) null, true, "usage: ");
      String string0 = "[";
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "usage: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 28, 1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(64);
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      options0.getMatchingOptions("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 175, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      options0.getMatchingOptions("<");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "1&B1~3XS1QtE!!;q", "<", options0, 74, 32, "1&B1~3XS1QtE!!;q");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("VnrH>n", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("VnrH>n", "VnrH>n", options0, "", true);
      Options options1 = new Options();
      helpFormatter0.printHelp("   ", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.setLongOptPrefix("0e");
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 13, " ");
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      options0.getMatchingOptions("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "1&B1~3XS1QtE!!;q", "usage: ", options0, 74, (-1), "1&B1~3XS1QtE!!;q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.printHelp("--", "9p", options1, "9p", true);
      helpFormatter0.setLongOptPrefix("9p");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)87;
      helpFormatter0.setWidth((byte)87);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (byte)116, options0, (byte)87, 2139);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2496), (byte)116, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("x5ise");
      String string0 = "oZ";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp("oZ", options1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 3;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "has already been selected: '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.printHelp("--", "9p", options1, "9p", true);
      helpFormatter0.setLongOptPrefix("9p");
      options1.hasLongOption("GH3Ki{kP_mv0");
      String string0 = "*( J=P4";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "\n", (String) null, options1, "v/b3ve{f$!");
      helpFormatter0.getWidth();
      String string1 = "5";
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockFile.createTempFile("h$+/q;os8", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(32);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) pipedInputStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 32, 2862, "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Og32d");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Og32d", "Og32d", (Options) null, "Og32d", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(77);
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("`r@ HgHHovg\"&lg+");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 2993, " ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      Options options1 = new Options();
      helpFormatter0.printHelp("   ", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(74);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 25, (-1), "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.setNewLine("[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, (String) null, false, "usage: ");
      Options options1 = options0.addOption("arg", "$", false, " ]");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("6Sq0s", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", "", false, (String) null);
      OptionGroup optionGroup2 = new OptionGroup();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9p";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      String string1 = "--";
      helpFormatter0.printHelp("--", "9p", options1, "9p", true);
      helpFormatter0.setLongOptPrefix("9p");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5164), 9, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(")DOOuuzT{", (String) null, options0, "--", true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix("`r@ HgHHovg\"&lg+");
      helpFormatter0.setLongOptPrefix("(\"cE~i/C(:a&&");
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5164), (-5164), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.setNewLine("[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, ">", "}#Bl54IcI4d>M", options0, 28, (-414), "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      Option option0 = new Option("arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      options2.addOption("9p", true, "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "9p";
      objectArray0[1] = (Object) "9p";
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "n";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.format("e|am4#1$_s", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options3 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "w,kv;Mo{BVVJY.", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.findWrapPos("", 74, 18);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        options1.addOption("[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "has already been selected: '";
      helpFormatter0.printHelp(" ", " ", options0, " ");
      String string0 = "nHSz gN^kYaU1Ok8S[/";
      options0.getOptionGroups();
      options0.hasLongOption("p/1tiH5AVJF^");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "*( J=P4", " ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("VnrH>n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 3579, " ");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(64);
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;q", "\n", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer("Zc%%nOe/[u?M,L2)eQB");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 12, " ");
      helpFormatter1.printHelp("\n", "c)EPiO&c9ZKU", options0, "c)EPiO&c9ZKU", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(64);
      File file0 = MockFile.createTempFile("1&B1~3XS1QtE!!;q", "jY}yK|.-gU=%?<Fn", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      options0.getMatchingOptions("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "1&B1~3XS1QtE!!;q", "<", options0, 74, (-1), "1&B1~3XS1QtE!!;q");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", (String) null, true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer("xQt_n");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "9p");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 2055;
      helpFormatter0.createPadding(2055);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getNewLine();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n", false);
      options0.hasLongOption(" :: ");
      String string1 = null;
      options0.hasShortOption((String) null);
      int int0 = 2;
      String string2 = "]";
      // Undeclared exception!
      try { 
        options0.addOption("]", "-", false, "<2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 3270;
      String string0 = "-";
      Options options0 = new Options();
      String string1 = "U.IxlS,.";
      boolean boolean0 = false;
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("~p", "U.IxlS,.", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~p' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      String string0 = "u)/j\"uFHyr[8Rf(2z7y";
      helpFormatter0.defaultArgName = "u)/j\"uFHyr[8Rf(2z7y";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("xR$$0);m;*qS", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      int int0 = (-744);
      helpFormatter0.setWidth((-744));
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "s]Y=})`";
      StringWriter stringWriter0 = new StringWriter(1741);
      StringWriter stringWriter1 = stringWriter0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.FRANCE;
      mockPrintWriter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.setNewLine("");
      String string0 = "vDNqFz/ajfT~Kx5#";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, ":V}NEh?l", "vDNqFz/ajfT~Kx5#", (Options) null, 913, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(64);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-5164), "?v:(40W1Z_MDE#rE$N.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix(";azGDxV");
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.setLongOptPrefix("Rl{<UV");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('8');
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 1909, 74);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", options1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", (String) null, true, "usage: ");
      options2.hasOption("");
      Option option0 = new Option("arg", true, "usage: ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("9p", true, ">3-X(h9");
      helpFormatter0.printHelp("9p", options4);
      helpFormatter0.setLongOptSeparator("9p");
      helpFormatter0.setSyntaxPrefix(".)q.$x0:.");
      helpFormatter0.createPadding(2199);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      Option option0 = new Option("arg", true, "usage: ");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('8');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1592), options1, (-2072), 1970);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setOptPrefix(" YeA/");
      mockPrintWriter0.println(false);
      helpFormatter0.defaultSyntaxPrefix = "-";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1652), options0, 190, (-1652));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", (String) null, true, "usage: ");
      Option option0 = new Option("arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("9p", true, "-");
      helpFormatter0.printHelp("9p", options3);
      helpFormatter0.setLongOptSeparator("9p");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "zwvA.|", options2, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "s]Y=})`";
      StringWriter stringWriter0 = new StringWriter(1741);
      StringWriter stringWriter1 = stringWriter0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.println();
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) stringWriter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      String string0 = ">";
      helpFormatter0.setNewLine(">");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1741, "", "", (Options) null, 0, 434, "^w", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      File file0 = MockFile.createTempFile("3&P#", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      helpFormatter0.setNewLine("]");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("line.separator");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultSyntaxPrefix = "'";
      helpFormatter0.rtrim("n9(V2^u");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "arg");
      Options options2 = options1.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "p?>sYcX]b}*3V", true, "--");
      optionGroup1.addOption(option1);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options3, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1873));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(32);
      StringBuffer stringBuffer0 = new StringBuffer("_4");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 32, (-1), "mJW'*Zh");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("J2B#", options0);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getNewLine();
      int int0 = 1791;
      helpFormatter1.setWidth(1791);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2085);
      helpFormatter0.setDescPadding((-1522));
      helpFormatter0.setWidth((-338));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("", true, "[ option: ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", "org.apache.commons.cli.HelpFormatter$1", true, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      String string0 = "u)/j\"uFHyr[8Rf(2z7y";
      helpFormatter0.defaultArgName = "u)/j\"uFHyr[8Rf(2z7y";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("xR$$0);m;*qS", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      int int0 = (-744);
      helpFormatter0.setWidth((-744));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      stringWriter1.getBuffer();
      int int0 = (-2310);
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "has already been selected: '";
      helpFormatter0.printHelp(" ", " ", options0, " ");
      String string0 = "nHSz gN^kYaU1Ok8S[/";
      options0.getOptionGroups();
      options0.hasLongOption("p/1tiH5AVJF^");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "*( J=P4", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "has already been selected: '";
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.setLongOptPrefix("nHSz gN^kYaU1Ok8S[/");
      MockFile mockFile0 = new MockFile("-");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix(";azGDxV");
      String string0 = "|DP(NgSMIy~";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "";
      options0.hasLongOption("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "h", "|DP(NgSMIy~", options0, "*( J=P4");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      options0.getMatchingOptions("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1050, (String) null, "<", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "--");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2342, 2342, "SzYz-V8/(T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-505);
      helpFormatter0.setDescPadding((-505));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 209, 1);
      PrintWriter printWriter0 = null;
      String string0 = "";
      options0.getOption("usage: ");
      Options options1 = new Options();
      String string1 = "";
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      boolean boolean0 = false;
      String string2 = " ]";
      Options options3 = options2.addOption("arg", "--", false, " ]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options4.addOption(" ]", "-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("-");
      assertEquals("-", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", (String) null, true, "usage: ");
      Option option0 = new Option("arg", true, "usage: ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("9p", true, ">3-X(h9");
      helpFormatter0.printHelp("9p", options4);
      helpFormatter0.setLongOptSeparator("9p");
      helpFormatter0.getDescPadding();
      assertEquals("9p", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3206), "org.apache.commons.cli.HelpFormatter", "kd5JxFM`3U{-", options4, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName((String) null);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.forLanguageTag("--");
      String string0 = "&`b{_1waE=dcm&s";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "&`b{_1waE=dcm&s", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 1637, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "\"baz_szd^_-UOJS";
      String string1 = "]";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", " va!Wci+bwZz", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
