/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:38:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", false, "usage: ");
      optionGroup0.addOption(option0);
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.findWrapPos("'k?6]JM\"r!Wz@/K#Bq", 3493, (-2));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      int int0 = (-4388);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 3, (-4388));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(2491, "8'mo}KUH.X#6ZT", "8'mo}KUH.X#6ZT", options0, "8'mo}KUH.X#6ZT", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 1462, (-1139), "");
      helpFormatter0.setWidth((-1139));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("k", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 51;
      helpFormatter0.createPadding(51);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 51, "                                                   ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "'!>g&Qp:S$sxqh4uxs");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "}V!4jrVX&Z7mY;Ss&=", " :: ", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLeftPadding(623);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1157;
      helpFormatter0.setSyntaxPrefix("VdG1+,RUpbH");
      helpFormatter0.setWidth(1157);
      EvoSuiteFile evoSuiteFile0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("VdG1+,RUpbH", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("~*763LE|8c");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      int int0 = (-1901);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "--", (-1901), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-807);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim(" ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      helpFormatter0.rtrim("Xu>\">!C2hV]I");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "gh.s{&XQ<e!#O@");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "J", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 2, 2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-67);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_jgT_1-X{>Z ", ".", options0, "INeSQfJ^F>*'{Oi=SF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "]uHZA.:0299mr", true, "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, ":", ":", options2, "]uHZA.:0299mr", true);
      option0.setArgName("");
      helpFormatter0.printHelp("-", "Vz}0_N8>NN*a&_jD", options0, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, (String) null);
      option0.getValues();
      helpFormatter0.setWidth((-583));
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("%{*Qo+A'` ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      String string1 = "G";
      boolean boolean0 = true;
      Options options1 = options0.addOption("tfiYjt9doA", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "x~$d", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      helpFormatter0.rtrim("Xu>\">!C2hV]I");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "Xu>\">!C2hV]I", "L,UpLSF=#p.", options0, 0, 0, "", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1648;
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp(1648, ")*hAaWdEumfmu^}XZ", "org.apache.commons.cli.OptionValidator", options0, "arg");
      helpFormatter0.defaultLeftPad = (-1372);
      helpFormatter0.createPadding(1608);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
      options1.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("-", "has already been selected: '", options1, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 0, options0, 74, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultArgName = " [ARG]";
      helpFormatter0.defaultArgName = "";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 13, (-1869), "U;I4>.kEL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "\n", "QnH6pOOP", options0, "Qbr-&Es}$Rn,I`K", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 846, "\n");
      Locale locale0 = Locale.CANADA;
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 0, "nSY?PE?ObIq|R(ZWu");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      helpFormatter0.printHelp("\n", "", options0, "");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "\n", "", options0, 1, 1517, "[ARG...]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y\\ X8Cl^-A~fiX";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options0, 9, 908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "G", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "\n", true, (String) null);
      Options options2 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(74, "#H_n'g{g", "y<SoaeikLqqh+8,]%$", options2, "/rHa&NmuM", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-500), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "H";
      Option option0 = new Option("H", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "H", false, "Qt4ikbd0U*T(");
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options3.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 2802;
      String string1 = "--";
      helpFormatter0.printHelp(2802, "--", "", options0, (String) null, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, (String) null, "", options0, 1, 0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp(71, "}mp", "(m", options1, "}mp", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("SK/R2g#wu_N", "5urj<-}}cbkAG9])", (Options) null, "5urj<-}}cbkAG9])");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "' was specified but an option from this group ", "5W+as\"vPGB=#@o", options0, 31, 31, "L9QlKvOmF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(74);
      helpFormatter0.setDescPadding(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2292, (-1882), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "\n", true, (String) null);
      Options options3 = options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(39, "-", "--", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "(WAI<B}fld<LK!=M}'";
      helpFormatter0.defaultArgName = "+=2MU=P[c";
      helpFormatter0.setDescPadding((-118));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3265, 3, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptioOValidator", "org.apache.commons.cli.OptioOValidator", options0, "org.apache.commons.cli.OptioOValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "+=2MU=P[c";
      helpFormatter0.setDescPadding((-118));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3265, 3, "\n");
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'X';
      charArray0[2] = '^';
      charArray0[3] = '@';
      charArray0[4] = 'd';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "m\"}Nu");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultLeftPad = (-2);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(71, "}Vp", "S}A SA`h", options1, "}Vp", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "\n", true, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "The option '", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y\\ X8Cl^-A~fiX";
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append(';');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-926), "y X8Cl^-A~fiX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(74);
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "f.Yev8:!H'I/wd`<;!I";
      Options options0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter$1", "--", (Options) null, "f.Yev8:!H'I/wd`<;!I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "\n");
      helpFormatter0.printHelp("}]WyCLG_\u0000&n/|4z~", "", options1, "}]WyCLG_\u0000&n/|4z~");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options1.addOption("", false, "");
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", " VVz+=$wPtA#^", options2, " VVz+=$wPtA#^");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 335, "org.apache.commons.cli.Options", "", options0, 335, 335, "LZYWc[ni0|@MnL3z>", true);
      helpFormatter0.printHelp("LZYWc[ni0|@MnL3z>", "LZYWc[ni0|@MnL3z>", options0, "LZYWc[ni0|@MnL3z>");
      helpFormatter0.findWrapPos("LZYWc[ni0|@MnL3z>", 335, 335);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      String string0 = "";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) stringWriter1;
      objectArray0[6] = (Object) "\"";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      String string1 = "g";
      Options options0 = new Options();
      String string2 = null;
      helpFormatter0.printHelp(printWriter0, 335, "\"", (String) null, options0, 27, 27, (String) null, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "uxywM7.qC:>0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("arg", objectArray0);
      int int0 = 335;
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1673, options0, 313, 32);
      String string0 = "6G]\"YNU4yq3>;`t";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 335, "6G]\"YNU4yq3>;`t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      options0.addOption("", "\n", true, "\n");
      Options options1 = options0.addOption("yHtd", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "H?n8\"x'xDIn{!", "y X8Cl^-A~fiX", options1, "6%ES>G<mZ{t`4=@:", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j&D@U{5x|C8_&1XfbT");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "5\"";
      objectArray0[1] = (Object) "5\"";
      objectArray0[2] = (Object) "j&D@U{5x|C8_&1XfbT";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) "j&D@U{5x|C8_&1XfbT";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "5\"";
      PrintWriter printWriter0 = mockPrintWriter0.format("5\"", objectArray0);
      String string0 = "g";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 335, "5y", "org.apache.commons.cli.HelpFormatter$1", options1, (-3631), (-1), "3&S", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 335, "<", "g", options0, 1, 335, "5y", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option("", "N]?");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2833), "RPHNMC\"g$Q41ytRW{&", "", options2, 63, (-1545), "^htg<zYz-'0", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "<");
      int int0 = (-3836);
      int int1 = (-802);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 335, "", "", options0, (-3836), (-802), ".Y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(304);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultOptPrefix = "\n";
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.append((CharSequence) "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 10, "", "-", options0, 2, 2, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "?|ITMiY}QJC+xi!g'", "eq^5<", (Options) null, "y X8Cl^-A~fiX", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1462, (-1139), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 13, options1, 9, 1);
      MockFile mockFile0 = new MockFile("\n", " :: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, 9, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 325, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 335, "<", "g", options0, 1, 335, "5y", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", "]", options0, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Fn><$u<MFH*W";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("BN", "--");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 335, "<", "g", options0, 1, 335, "", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 63, "]");
      helpFormatter0.renderOptions(stringBuffer1, 335, options0, 335, 9);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("n4|NmAg5NAZS_MUop-", "n4|NmAg5NAZS_MUop-", options0, "arg", true);
      helpFormatter0.printHelp(26, "n4|NmAg5NAZS_MUop-", "Gk4Z 2r4", options0, "n4|NmAg5NAZS_MUop-", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "TIRXAK#L]x_`vMa K<W", "TIRXAK#L]x_`vMa K<W", options0, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(34);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "arg", options1, "arg");
      options0.addOption("arg", "--", false, "");
      helpFormatter0.printHelp("?JVpK!(}<{zV", "", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(9);
      String string0 = "Illegal option name '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      Options options0 = null;
      helpFormatter0.setDescPadding(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1439, "8D--", "8D--", (Options) null, "8D--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2282, "p", "p", options0, 9, 9, "");
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      helpFormatter0.setDescPadding(45);
      Options options0 = new Options();
      helpFormatter0.printHelp("y X8Cl^-A~fiX", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp(12, "   ", "y X8Cl^-A~fiX", options0, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "\n");
      helpFormatter0.printHelp("}]WyCLG_\u0000&n/|4z~", "", options1, "}]WyCLG_\u0000&n/|4z~");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("arg", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 33;
      helpFormatter0.createPadding(33);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 33, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Xu>\">!C2hV]I";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2126), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "y\\ X8Cl^-A~fiX";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "y X8Cl^-A~fiX", "y X8Cl^-A~fiX", options0, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "}~MniO*UwU.d1r", false, (String) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("-");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M*|23A", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M*|23A";
      helpFormatter0.defaultArgName = "M*|23A";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "M*|23A", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2330);
      String string0 = null;
      Options options0 = null;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 787, "(8_k", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(33, "M*|23A", "   ", options0, "M*|23A");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.setDescPadding(29);
      Options options0 = new Options();
      helpFormatter0.printHelp(33, "y X8Cl^-A~fiX", "--", options0, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      MockFile mockFile0 = new MockFile("c1k@yV+c2}HGn92q+h", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer(29);
      Options options0 = new Options();
      options0.getOptions();
      stringBuffer0.trimToSize();
      Options options1 = options0.addOption("", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, (-1086), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.printHelp(51, "8V", "8V", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2330);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1352, 65, "");
      helpFormatter0.setNewLine(", ");
      helpFormatter0.rtrim(", ");
      helpFormatter0.rtrim(", ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "arg", options1, "arg");
      helpFormatter0.defaultWidth = 34;
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.findWrapPos("", 9, 9);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      options0.addOption("", "\n", true, "\n");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "y X8Cl^-A~fiX", options0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1147, 14);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 61, "3!H!Su,>4v&=d^p", "3!H!Su,>4v&=d^p", options1, (-910), 44, "3!H!Su,>4v&=d^p");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("OXj+9Xp,QaP#f");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(95);
      helpFormatter0.renderWrappedText(stringBuffer0, 1352, (-3177), ", ");
      helpFormatter0.setNewLine("OXj+9Xp,QaP#f");
      helpFormatter0.rtrim("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 95, ", ");
      helpFormatter0.setArgName("OXj+9Xp,QaP#f");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 105, ", ", options0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "arg";
      helpFormatter0.defaultDescPad = (-2330);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.setLeftPadding((-1673));
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("y X8Cl^-A~fiX");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.setLongOptSeparator("Gik");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(29);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null, 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(" [ARG]", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 10, options0, 29, 10);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2132);
      String string0 = "@a v*";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2132), (-565), "@a v*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("M*|23A", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.close();
      mockPrintWriter0.println((long) 3);
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, 8, 8, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "Xu>\">!C2hV]I", "", options0, "Xu>\">!C2hV]I", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException");
      int int0 = 13;
      helpFormatter0.createPadding(13);
      String string0 = "usage: ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "LESRN95 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      int int0 = (-3040);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, "R -4S.hST5|X2F.(TvD", (Options) null, (-3040), 0, "R -4S.hST5|X2F.(TvD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(51, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2093);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "d6PrFt5=fKT_q~o";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) comparator0;
      mockPrintWriter1.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "", "d6PrFt5=fKT_q~o", options0, (-2093), (-506), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("OXj+9Xp,QaP#f");
      helpFormatter0.setLeftPadding(0);
      int int0 = 95;
      StringBuffer stringBuffer0 = new StringBuffer(95);
      int int1 = (-3177);
      helpFormatter0.renderWrappedText(stringBuffer0, 1352, (-3177), ", ");
      helpFormatter0.setNewLine("OXj+9Xp,QaP#f");
      helpFormatter0.rtrim("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 95, ", ");
      helpFormatter0.setArgName("OXj+9Xp,QaP#f");
      PrintWriter printWriter0 = null;
      String string0 = "Gv?";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(", ", true, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("", 0, 0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.close();
      mockPrintWriter0.println((long) 3);
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`A)UWj&dHP{q";
      helpFormatter0.defaultDescPad = 2265;
      helpFormatter0.defaultSyntaxPrefix = "`A)UWj&dHP{q";
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1624;
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1624, options0, 1624, 2649);
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setWidth(2649);
      options1.addOption((String) null, "has already been selected: '", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = null;
      try {
        option1 = new Option("q^XGc", "", true, "/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'q^XGc' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "y X8Cl^-A~fiX", options0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, (String) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "\n", "\n", options1, "usage: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(43, (String) null, " ", options1, "K!uM", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "\n", true, (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "arg", " ", options1, "   ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("y X8Cl^-A~fiX");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "\n");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-207), options1, 10, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = 9;
      String string0 = "Xu>\">!C2hV]I";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "Xu>\">!C2hV]I", "", options0, "Xu>\">!C2hV]I", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "Xu>\">!C2hV]I";
      String string1 = "";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "Xu>\">!C2hV]I", "", options0, "Xu>\">!C2hV]I", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator((String) null);
      File file0 = MockFile.createTempFile("NO_ARGS_ALLOWED", "' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-2093);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2093), (Options) null, (-2093), (-2093));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string0 = "RGQ^O uYc4S>#h/Fj";
      Locale locale0 = new Locale("]", "RGQ^O uYc4S>#h/Fj", "]");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append(']');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 543, options1, (-1), 543);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      int int0 = 44;
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      option0.setOptionalArg(false);
      // Undeclared exception!
      try { 
        options2.addOption("--", "", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2270));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-920));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "M*|23A";
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("[");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2915);
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "C&0i^aQD&|<<>\"f";
      helpFormatter0.createPadding(0);
      Option option0 = null;
      try {
        option0 = new Option("C&0i^aQD&|<<>\"f", "oWLkcM{!", false, "_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'C&0i^aQD&|<<>\"f' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/U7y$sf/E!*Nbg";
      Options options0 = new Options();
      helpFormatter0.printHelp("/U7y$sf/E!*Nbg", options0, true);
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M*|23A";
      helpFormatter0.defaultArgName = "M*|23A";
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "M*|23A", (String) null, (Options) null, 0, (-2093), "M*|23A");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M*|23A";
      helpFormatter0.defaultArgName = "M*|23A";
      helpFormatter0.defaultDescPad = (-2330);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "M*|23A";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      String string2 = "cmdLineSyntax not provided";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = (-2089);
      int int1 = 97;
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 'o';
      charArray0[2] = 'T';
      charArray0[3] = '+';
      charArray0[4] = 'A';
      charArray0[5] = '<';
      charArray0[6] = 'y';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 97, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("ax`[]a T9q`l- 'xRu");
      helpFormatter0.setNewLine("ax`[]a T9q`l- 'xRu");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "zP+Y]_|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      String string0 = "p0yl";
      helpFormatter0.setSyntaxPrefix("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "p0yl");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // p0yl
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "sD^nL`B>Dn8gRH");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
