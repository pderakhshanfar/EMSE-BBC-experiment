/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:56:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "k);.>vYp7Dau.bSSp\"N", true, "FV2)r~U6xu7U[65");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("S?NOXl\u0006b$q/@!`Kb", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2), options1, 19, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "arg");
      option0.setArgName("-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-5163));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.defaultSyntaxPrefix = "@5(?2$2xhylCZ|$'k9";
      helpFormatter0.setDescPadding((-1131));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", " ", options0, (-1131), 74, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.defaultSyntaxPrefix = "arg";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", " ", options0, 3, 74, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("-");
      helpFormatter0.getSyntaxPrefix();
      optionGroup0.setRequired(true);
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("M?9ubr<", "usage: ", options0, "M?9ubr<", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("&}&^:Z?<B&&M|", "", options2, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      options1.getOption("usage: ");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(838);
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("-");
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      helpFormatter0.setWidth((-2));
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "-", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-69));
      helpFormatter0.defaultWidth = (-69);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2161;
      String string0 = "]";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "rt\"#.AVW0]Y");
      options1.helpOptions();
      helpFormatter0.printHelp(2158, "7x4S", "]", options1, "rt\"#.AVW0]Y", false);
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.ParseException";
      String string1 = "";
      helpFormatter0.printHelp("GFvZ{[:\"#? ", "", options1, "' contains an illegal character : '", false);
      helpFormatter0.findWrapPos("7x4S", 2134, 2134);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp("]", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.ensureCapacity(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-108), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("q`N9\")EtCG][^{%@E");
      int int0 = 0;
      String string0 = " ";
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bufferedOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) pipedOutputStream0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) stringBuffer0;
      objectArray0[7] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "=@:rZr");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.defaultSyntaxPrefix = "@5(?2$2h^ylCZ|$-'k9";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", " ", options0, 3, 2174, "usage: ", false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "arg", options0, 33, 33, (String) null, false);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "usage: ", (String) null, options0, 381, 117, "l{v}jV6", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1739), "h'tJ}+HC@Rw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write(0);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("4", true, "16!>|6xc;KX~Q/+lD?q");
      Options options2 = options1.addOption("3MJ7f", "arg", true, "-");
      Option option0 = new Option("arg", "x");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("sd5:wTXQB", options4);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      helpFormatter1.printHelp(0, "--", "' contains an illegal character : '", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("O>k6Bwy-4vN--'^ `X@", "O>k6Bwy-4vN--'^ `X@", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = new Locale("\"", "\n", "\"tB<YV3PN<3ci");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "0O4Y0?^0BBnP1u", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 61, "rD'X\"]_jeB", options1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Locale locale0 = new Locale("z");
      Options options2 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "'", "", options0, 1901, 2, "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "uGKk-)f)u(", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      objectArray0[2] = (Object) "";
      Options options1 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2778, "O>k6wy-4vN--'^ `X@", "line.separator", (Options) null, "R8h/y Pj", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer(303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string1 = null;
      Options options0 = new Options();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 303, (String) null, "ym]7uPHmAw`knh=", options0, 2752, (-2), ";", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2783;
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption("", "--", true, "usage: ");
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      mockPrintWriter0.print(objectArray0[0]);
      objectArray0[2] = (Object) "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2783, "O>k6wy-4vN--'^ `X@", "", (Options) null, 2783, 2783, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("arg", "-", false, "Z$*{`FX]v*iE");
      options1.addOption((String) null, "-", false, "]8{c+q");
      helpFormatter0.printHelp("]8{c+q", "", options1, "", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(43);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, (byte)52, 10, " ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3186));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1068);
      PrintWriter printWriter0 = null;
      int int0 = 0;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      String string0 = "CMI5|\"AibrnD";
      int int1 = 2753;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1068, "CMI5|\"AibrnD", "Cannot add value, list full.", options1, (-20), (-20), "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ut;i");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 9, "org.apache.commons.cli.Options", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      String string0 = "O>k6Bwy-4vN--'^ `X@";
      Options options1 = options0.addOption("", "--", true, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2783, "O>k6Bwy-4vN--'^ `X@", "-", options1, 2783, 2783, "", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "Jg}|");
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "1DxN`6>1IN", "Jg}|", options1, "QcFb5c3G,IERaJ;", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Option option0 = new Option("", "O>k6Bwy-4vN--'^ `X@", false, "\n");
      options0.addOption(option0);
      String string0 = "_0\\({";
      String string1 = "";
      String string2 = "y5fs3\\A-.t";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "y5fs3A-.t", "Jg}|", options0, 10, 2783, "Q9@2ZJBEOXK", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2783;
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Options options1 = options0.addOption("", "--", true, "usage: ");
      Locale locale0 = new Locale("-");
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[2] = (Object) "";
      int int1 = (-1059);
      int int2 = 10;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 97, "", "O>k6wy-4vN--'^ `X@", options1, (-1059), (-1059), "O>k6wy-4vN--'^ `X@", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(53);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'y';
      charArray0[2] = 'v';
      charArray0[3] = 'Z';
      charArray0[4] = 'N';
      mockPrintWriter0.println(charArray0);
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printHelp(printWriter0, 314, "lYn!I_Fv|B'7", "", options0, 94, 2, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 53, 3, "#mPje00&s@F[@hR!aJ^");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      String string0 = ">";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      String string1 = " ";
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(1519, " ", "_0({", options1, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter1.getNewLine();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "_0({";
      objectArray1[1] = (Object) "\n";
      objectArray1[2] = (Object) options0;
      objectArray1[3] = (Object) option0;
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2), options2, 74, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      options1.addOption(option0);
      String string0 = "_0\\({";
      String string1 = "-";
      String string2 = "";
      boolean boolean0 = true;
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1519, "usage:", "", options0, (-1059), 10, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (-661), 753);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      options1.addOption(option0);
      String string0 = "arg";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 849, "arg", (String) null, options0, (-132), 849, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 1238, options0, 1265, 577);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 1265, options0, 34, 2011);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultSyntaxPrefix = "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "has already been selected: '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      options0.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "", options0, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(54);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) options0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options1 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3156, "NO_ARGS_ALLOWED", "U{%pCbzk0Uh=cK]n", options0, 5, 1051, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("Cr!(_iF!?*@UF", (-2049), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Jg}|";
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "line.separator";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "O>k6wy-4vN--'^ `X@";
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(":_nf/b3iJ8}", objectArray0);
      helpFormatter0.printHelp(printWriter0, 855, "~=~B/l[5nNZ~p", "*cw.", options0, 2738, 1258, "", true);
      Options options1 = options0.addOption("", "--", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2783, "O>k6wy-4vN--'^ `X@", "-", options1, 2783, 2783, "", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5b<OA8Gf;1FUX9&w");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}f0N(,$L'iG<d!");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "pAS |8'?Gg{m=>U";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "pAS |8'?Gg{m=>U", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 1250;
      String string0 = "J";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("^0", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^0' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Options options1 = options0.addOption("", "--", true, "usage: ");
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O>k6wy-4vN--'^ `X@";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) options0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options2 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "Cr!(_iF!?*@UF", "", options1, 1, 1, "U{%pCbzk0Uh=cK]n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "usage: ", false, "\n");
      helpFormatter0.printHelp(4514, "%dXz@e", (String) null, options1, "", true);
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 4514, 4514);
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(4514);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      String string0 = "";
      Options options1 = options0.addOptionGroup(optionGroup0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('$');
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, (-1), "");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("p}3wk`1", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-1490);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1490), (String) null, "arg", options0, 2232, 2232, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('$');
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      int int0 = (-2562);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2562), ",o*.S\" 5T>5", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Jg}|";
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Options options1 = options0.addOption("", "--", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2783, "O>k6wy-4vN--'^ `X@", "-", options1, 2783, 2783, "", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("GH)Ib7PgVrvkyR7");
      helpFormatter0.printHelp(1737, "Cvr>D+T3<R", "", options0, "GH)Ib7PgVrvkyR7");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, "TWm2-;@G/X.; cirRp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "Jg}|";
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      Options options1 = options0.addOption("", "--", true, "{cxu%Hx.RVuv9rS}d<v");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2783, "O>k6wy-4vN--'^ `X@", "", options1, 2783, 2783, "", false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.printHelp(13, "o^i}Ip`z)R", "--", options0, "", true);
      String string0 = null;
      int int0 = 2057;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1737, (String) null, "TWm2-;@G/X.; cirRp", options0, "Cvr>D+T3<R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(w;gyS(/o86N~");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(74);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2783, options1, 2783, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2783, "`h*hU]z{acl|3_iIi");
      // Undeclared exception!
      helpFormatter0.createPadding(2783);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "usage: ", " | ", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "NO_ARGS_ALLOWED", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, "1_|a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("'FLU)eP", (-1983), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(w;gyS(/o86N~");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)99;
      mockPrintStream0.write(byteArray0);
      mockPrintWriter0.append('$');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)82, ", ", options1);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      String string0 = "H";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-406), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("'", options0, false);
      helpFormatter0.setDescPadding(12);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", "org.apache.commons.cli.AlreadySelectedException", options2, "-");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "Jg}|");
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "Jg}|");
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("Jg}|", "", options2, "tKBl5", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.insert(0, 'q');
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "zZP");
      helpFormatter0.setNewLine("zZP");
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2413, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.Options";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1921));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "CC-HhJJ-tyGJ fAh");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.insert(0, 'q');
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "zZP");
      helpFormatter0.setNewLine("zZP");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 10, options0, 32, 10);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.printHelp("/", options0);
      helpFormatter0.setDescPadding((-749));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "/", options0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, (-2), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      String string0 = "";
      String string1 = null;
      Options options1 = options0.addOption("", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-591), options1, 1666, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-667), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-144);
      helpFormatter0.setDescPadding((-144));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "pFCxZ(x1%";
      PrintWriter printWriter0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(3710);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1475), options0, (-1475), (-1475));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.Options";
      helpFormatter0.setArgName("+T3WJ@f>Wy#*$o X%");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("2As", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options2, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1146);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 3907, options0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(w;gyS(/o86N~");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)99;
      mockPrintStream0.write(byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "(w;gyS(/o86N~", options1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.printHelp(13, "o^i}Ip`z)R", "--", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 167, 167);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 0;
      boolean boolean0 = true;
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, " :: ", " :: ", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.findWrapPos("arg", 1, 580);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 74, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1068);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 32, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", true, "NO_ARGS_ALLOWED");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3186));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("egq.2Hl2|/lUSR,7");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 27, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      optionGroup0.addOption(option0);
      String string0 = "JgAU%}|";
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 2783);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "?]I", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "?]I", " ", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp(",nd;} YH#[@2:-'G", options0);
      helpFormatter0.setOptPrefix(",nd;} YH#[@2:-'G");
      int int0 = 0;
      String string0 = " :: ";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, " :: ", "Pp49y+", options0, ",nd;} YH#[@2:-'G", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "7qc";
      helpFormatter0.setLongOptPrefix("7qc");
      String string0 = "VpQPr)[a,x&of[TREJ";
      helpFormatter0.rtrim("VpQPr)[a,x&of[TREJ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VpQPr)[a,x&of[TREJ");
      int int0 = 0;
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("VpQPr)[a,x&of[TREJ", " ", true, "Gh*G: 6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'VpQPr)[a,x&of[TREJ' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",s!74i`'qY*TKH";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(",s!74i`'qY*TKH", options0);
      boolean boolean0 = true;
      optionGroup0.setRequired(true);
      helpFormatter0.getWidth();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Sm}s/*06!e)z", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultSyntaxPrefix = "kU'rK=3NEmUT";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      assertEquals("kU'rK=3NEmUT", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.setSyntaxPrefix("arg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1316);
      helpFormatter0.defaultWidth = (-1316);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int1 = 0;
      String string0 = "{eyU3?JjAI";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "'e!", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("Ya  DO");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "<K9n{-&YdtM";
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Ya  DO");
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "ATV&wF\"|:4^&F+HByn";
      // Undeclared exception!
      try { 
        options0.addOption("ATV&wF\"|:4^&F+HByn", "<K9n{-&YdtM", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ATV&wF\"|:4^&F+HByn' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}e &D<7I|\\;E];o";
      helpFormatter0.setOptPrefix("}e &D<7I|;E];o");
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultOptPrefix = null;
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName((String) null);
      int int0 = helpFormatter0.findWrapPos("A/^|", 1803, 1803);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = (-3114);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3114), "*X.#CaOQk5K9R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultSyntaxPrefix = "kU'rK=3NEmUT";
      helpFormatter0.defaultLongOptPrefix = null;
      options0.getOption("-");
      helpFormatter0.printHelp("kU'rK=3NEmUT", options0, false);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.JAPAN;
      locale0.stripExtensions();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3676, " ] [ long ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "The option '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "}\"40.Ji+Kvm;yWNf|n9";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "org.apache.commons.cli.Options";
      options1.helpOptions();
      Option option0 = null;
      try {
        option0 = new Option("-", "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "E-%";
      String string1 = "U";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "", false, "p#a|]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
