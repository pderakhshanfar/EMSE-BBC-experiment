/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:28:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultSyntaxPrefix = "\n";
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, "\n", true, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals(10, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals(10, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals(10, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals(10, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getArgName());
      assertEquals("\n", option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(options1, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLeftPadding((-466));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-466), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-466), helpFormatter0.getLeftPadding());
      
      helpFormatter0.setNewLine("lf.Wlfn&n0go");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-466), helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("lf.Wlfn&n0go", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-466), helpFormatter0.getLeftPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(28, "lf.Wlfn&n0go", "wg%.^ACI~fa+z", (Options) null, "dS1O0AMzlT");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-72);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte)44, (byte)120, (byte)13, (byte)61, (byte)84, (byte)91, (byte) (-72)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer((byte)44);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", false, "-");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      
      Option option0 = new Option("arg", "usage: ", true, "--");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      
      Options options3 = options2.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals(1, option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (byte)0, options3, 3845, (byte)44);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      int int0 = 37;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ",9]fKk!!wQ('UDV9XJ-", ",9]fKk!!wQ('UDV9XJ-", options1, 63, 37, "", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "\n", true, "--");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("\n", options0, true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertSame(options0, options1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-4949), options0, 36, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter0.createPadding(59);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("                                                           ", string1);
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNull(string2);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, int0);
      
      String string3 = "SPUam,ZXU'=Y(uzUMt";
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        options0.addOption("-", ">", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, 437, 38);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNull(stringBuffer0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 38, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = "The option '";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultLeftPad = 0;
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "57u|M!50n(..jT;0";
      MockFile mockFile0 = new MockFile((File) null, "57u|M!50n(..jT;0");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 643;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 643, "57u|M!50n(..jT;0", "57u|M!50n(..jT;0", options0, (-654), 643, "57u|M!50n(..jT;0");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("SBW", "arg", true, "usage: ");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp(74, "arg", "SBW", options1, "SBW", true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter1, 4277, options0, 4277, 4277);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(122, "SBW", "  ", options0, "6", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.OptionGroup", "6GD-pYPx>>dTOpyu4", options0, "  ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      int int0 = 0;
      String string0 = helpFormatter0.createPadding(0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", string1);
      
      int int1 = (-335);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-335));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "g<1~0qA^.+d");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string2 = "";
      Option option1 = options1.getOption("org.apache.commons.cli.ParseException");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean1 = options2.hasOption("\n");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(boolean1 == boolean0);
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      helpFormatter0.printHelp("Cs[h", options2, true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", options2, (String) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.setLongOptSeparator("!9&\"we<gQl{|Fva+sEF");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("!9&\"we<gQl{|Fva+sEF", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 258, 1, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = "<t9?<rh9*<xj/oLklE)";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<t9?<rh9*<xj/oLklE)", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println('<');
      int int0 = 0;
      Options options0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)42;
      mockFileOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)10, (byte)42}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "#kBY, jg1r@", (String) null, (Options) null, 4277, 1453, "#kBY, jg1r@");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOption("", "I", true, "-");
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Options options3 = options2.addOption("I", true, "9's-V{H6");
      assertNotNull(options3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      
      helpFormatter0.printHelp("cmdLineSyntax not provided", options3, false);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      helpFormatter1.setNewLine("-");
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      String string0 = helpFormatter1.rtrim(" ");
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(string0);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultDescPad = 43;
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(43, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 43, ".B`KW", "&:6}@K97c9%94N=G", (Options) null, 43, (-2383), "&:6}@K97c9%94N=G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockFile mockFile0 = new MockFile("\n", "");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", false, " ]ux,w.6)f\"Q!");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals(" ]ux,w.6)f\"Q!", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options1);
      assertEquals(" ]ux,w.6)f\"Q!", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertEquals(" ]ux,w.6)f\"Q!", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup1.setRequired(true);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals(" ]ux,w.6)f\"Q!", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertTrue(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertEquals(" ]ux,w.6)f\"Q!", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertTrue(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasLongOption((String) null);
      assertFalse(boolean0);
      
      helpFormatter0.setLeftPadding((-877));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-877), helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-877), helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "org.apache.commons.cli.OptionGroup", "arg", options0, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 2830;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(21, "Il!-9!,^I J J0a|Jq9", "Illegal option name '", (Options) null, "Il!-9!,^I J J0a|Jq9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      assertFalse(boolean0);
      
      helpFormatter0.setOptPrefix(" ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 74, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      String string0 = helpFormatter0.defaultLongOptPrefix;
      assertNotNull(string0);
      assertEquals("--", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", string1);
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "line.seprator", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 42, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      helpFormatter0.setArgName("--");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("--", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotSame(helpFormatter0, helpFormatter1);
      
      helpFormatter0.printHelp("\n", options0, true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(options0.equals((Object)options1));
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("--", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(options0, options1);
      
      helpFormatter1.printHelp(1, "   ", "usage: ", options0, " ", true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(options0.equals((Object)options1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 3, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "-");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertNotNull(options2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Collection collection0 = options2.getOptionGroups();
      assertNotNull(collection0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      OptionGroup optionGroup1 = new OptionGroup();
      assertNotNull(optionGroup1);
      assertFalse(optionGroup1.equals((Object)optionGroup0));
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      
      OptionGroup optionGroup2 = new OptionGroup();
      assertNotNull(optionGroup2);
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      
      Option option0 = new Option("arg", "cLe5{k7D-6zAmE");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("cLe5{k7D-6zAmE", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup3);
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("cLe5{k7D-6zAmE", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertNotSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup3);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup1);
      
      Options options3 = options2.addOptionGroup(optionGroup3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertFalse(optionGroup0.equals((Object)optionGroup1));
      assertFalse(optionGroup0.equals((Object)optionGroup3));
      assertFalse(optionGroup0.equals((Object)optionGroup2));
      assertFalse(optionGroup2.equals((Object)optionGroup0));
      assertFalse(optionGroup2.equals((Object)optionGroup1));
      assertFalse(optionGroup3.equals((Object)optionGroup0));
      assertFalse(optionGroup3.equals((Object)optionGroup1));
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("cLe5{k7D-6zAmE", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(optionGroup3.isRequired());
      assertNull(optionGroup3.getSelected());
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotSame(optionGroup0, optionGroup1);
      assertNotSame(optionGroup0, optionGroup3);
      assertNotSame(optionGroup0, optionGroup2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertNotSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup3);
      assertNotSame(optionGroup2, optionGroup1);
      assertSame(optionGroup3, optionGroup2);
      assertNotSame(optionGroup3, optionGroup0);
      assertNotSame(optionGroup3, optionGroup1);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options3, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2136, "cLe5{k7D-6zAmE", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", string1);
      
      Collection collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
      assertFalse(options0.equals((Object)options1));
      assertNotSame(options0, options1);
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "-", "", options1, 63, 13, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultLeftPad = (-1402);
      assertEquals((-1402), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1402), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals((-1402), helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "arg", true, "74p=F@zifTW=)AwN.6+");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option("", true, "");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Collection collection0 = options2.getOptions();
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(collection0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2144), "74p=F@zifTW=)AwN.6+", "74p=F@zifTW=)AwN.6+", options2, 6, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup1.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options1.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option1.isRequired());
      assertNull(option1.getValue());
      assertEquals("", option1.getOpt());
      assertFalse(option1.hasArgs());
      assertFalse(option1.hasValueSeparator());
      assertEquals('\u0000', option1.getValueSeparator());
      assertNull(option1.getDescription());
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasOptionalArg());
      assertFalse(option1.hasArg());
      assertNull(option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("arg", option1.getArgName());
      assertSame(option0, option1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(option1, option0);
      
      helpFormatter0.printHelp("wL", options1, false);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertSame(option0, option1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "", options1, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options0.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertFalse(option1.hasArg());
      assertNull(option1.getLongOpt());
      assertEquals("", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertEquals("arg", option1.getArgName());
      assertEquals("", option1.getOpt());
      assertFalse(option1.isRequired());
      assertNull(option1.getValue());
      assertFalse(option1.hasArgs());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasOptionalArg());
      assertSame(options0, options1);
      assertSame(option1, option0);
      
      helpFormatter0.printHelp("--", options0, false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertSame(options0, options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      helpFormatter1.setArgName("-Jy;%{P}*\"PX");
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-Jy;%{P}*\"PX", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter2);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      
      int int0 = helpFormatter2.findWrapPos("usage: ", 0, 1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals(6, int0);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string0);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      assertEquals(" ", string0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("`w)I[7'a[*u3tX\u0005I", (-2042), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", true, "\n");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.defaultSyntaxPrefix = "b%$3w&e";
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("b%$3w&e", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.printHelp("_Jyd%{P}*\"PX", "", options0, "{)'{(1*OG_ezT1y97A]");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("b%$3w&e", helpFormatter0.getSyntaxPrefix());
      assertSame(options0, options1);
      
      helpFormatter0.setArgName("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("b%$3w&e", helpFormatter0.getSyntaxPrefix());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "_Jyd%{P}*\"PX";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) "ygEN9wU'";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "{)'{(1*OG_ezT1y97A]";
      objectArray0[6] = (Object) options1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("ygEN9wU'", objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      assertEquals(8, objectArray0.length);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, "b%$3w&e", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("   ", options0, true);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "x@bB/v}\"", "x@bB/v}\"", options0, "x@bB/v}\"", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      List list0 = new LinkedList<Object>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-91)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("B[:WW'Ix.\"", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.write((int) (byte) (-91));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("B[:WW'Ix.\"", mockFile0.getName());
      assertEquals("/experiment/B[:WW'Ix.\"", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("B[:WW'Ix.\"", mockFile0.getName());
      assertEquals("/experiment/B[:WW'Ix.\"", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(5L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      assertNotNull(printWriter0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("B[:WW'Ix.\"", mockFile0.getName());
      assertEquals("/experiment/B[:WW'Ix.\"", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(5L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter2.equals((Object)printWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", (String) null, options0, 3, 1, " ", false);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("B[:WW'Ix.\"", mockFile0.getName());
      assertEquals("/experiment/B[:WW'Ix.\"", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(5L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      
      List list0 = options0.getMatchingOptions("arg");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("--", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options0, 3, 1, "arg", false);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "--", "", options1, 3, 68, "arg");
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter2));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter2);
      assertSame(options1, options0);
      
      helpFormatter1.printOptions(mockPrintWriter1, 3, options0, 3765, 3765);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter2));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/--", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (int) (byte) (-91), "arg", "", options1, 838, 2, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", true, "Xm]Et$`iG09_");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("_Jyd%{P}*\"PX", "&?&SR{+pu+2p#[@z", options1, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.setArgName("Xm]Et$`iG09_");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Xm]Et$`iG09_", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(63);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 26, options1, 26, 26);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Xm]Et$`iG09_", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(47, stringBuffer0.length());
      assertEquals(47, stringBuffer1.length());
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(sA)");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 63, "(sA)");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Xm]Et$`iG09_", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Xm]Et$`iG09_", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      List list0 = options0.getMatchingOptions("arg");
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertNotNull(helpFormatter2);
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter2, 2975, "-", "q|7-q$:cVWzVAe\")", options0, 74, (-2389), " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.rtrim("arg");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 7, "arg", (String) null, options0, 13, 2, (String) null, false);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(13L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("usage: ", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter2);
      assertNotSame(mockPrintWriter2, mockPrintWriter1);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "line.separator", "   ", options0, ";&3VR}g/k@~=U-1;L", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "Ao~{4^*(4]9xQ,<)fhg", (String) null, options0, "Ao~{4^*(4]9xQ,<)fhg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setOptPrefix("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = 2347;
      helpFormatter0.defaultLongOptPrefix = "r";
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("r", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setArgName("z;GnX*9Nav+^1pX2]e#");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("r", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("z;GnX*9Nav+^1pX2]e#", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setSyntaxPrefix("NO_ARGS_ALLOWED");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("NO_ARGS_ALLOWED", helpFormatter0.getSyntaxPrefix());
      assertEquals("r", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("z;GnX*9Nav+^1pX2]e#", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = null;
      int int1 = 3626;
      helpFormatter0.setWidth(3626);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3626, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3626, helpFormatter0.getWidth());
      assertEquals("NO_ARGS_ALLOWED", helpFormatter0.getSyntaxPrefix());
      assertEquals("r", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("z;GnX*9Nav+^1pX2]e#", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2347, "[", "[", (Options) null, "[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      helpFormatter1.setLeftPadding((-1212));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1212), helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals((-1212), helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertNotNull(helpFormatter2);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      
      int int0 = helpFormatter2.getLeftPadding();
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertEquals(1, int0);
      
      int int1 = helpFormatter1.getLeftPadding();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1212), helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter2));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int1 == int0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals((-1212), helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertNotSame(helpFormatter1, helpFormatter2);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals((-1212), int1);
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(helpFormatter3);
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      
      String string0 = helpFormatter3.rtrim("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter3.defaultWidth);
      assertNotNull(string0);
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertNotSame(helpFormatter3, helpFormatter1);
      assertNotSame(helpFormatter3, helpFormatter0);
      assertNotSame(helpFormatter3, helpFormatter2);
      assertEquals("", string0);
      
      PrintWriter printWriter0 = null;
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      assertFalse(boolean0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = null;
      try {
        option0 = new Option("jXuub4,#;So0`VO$T", "", false, "NR&c0H\"raaW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jXuub4,#;So0`VO$T' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultArgName = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setArgName("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2, "");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      Options options0 = new Options();
      assertNotNull(options0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      helpFormatter1.defaultArgName = "usage: ";
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      helpFormatter1.setLeftPadding(3);
      assertEquals(3, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter1.getLeftPadding();
      assertEquals(3, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, int0);
      
      int int1 = helpFormatter1.getLeftPadding();
      assertEquals(3, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertTrue(int1 == int0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(3, int1);
      
      String string0 = helpFormatter0.rtrim("o9Z#?i#d");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("o9Z#?i#d", string0);
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      assertFalse(boolean0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", "usage: ", true, "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArg());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("usage: ", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "o9Z#?i#d", "o9Z#?i#d", options1, 3, 10, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      List list0 = options0.getMatchingOptions(" | ");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("NUEl.0(dFG\"hRM`T,T", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 112, "V(%eL6),UcW", "usage: ", options0, (int) (byte)0, 3, "`QsZ", false);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/NUEl.0(dFG\"hRM`T,T", mockFile0.toString());
      assertEquals("NUEl.0(dFG\"hRM`T,T", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("NUEl.0(dFG\"hRM`T,T", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "-", "", options0, 9, 10, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)88;
      byte byte0 = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)108;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-13), (byte)46, (byte) (-13), (byte)76, (byte)88, (byte)112, (byte)117, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      String string0 = helpFormatter0.createPadding(1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", string0);
      
      String string1 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Il!-9!,^I J J0a|Jq9", "", options0, "line.separator", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("NUEl.0(dFG\"hRM`T,T", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, (-3687), "--", "--", options0, 3, (-1825), "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-12), (byte) (-12), (byte)3, (byte)41, (byte) (-127), (byte)7, (byte) (-16), (byte)34}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 764, "X9JQ>(w]g", options0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.defaultOptPrefix = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.setLeftPadding(10);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(10, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(10, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(10, int0);
      
      int int1 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(10, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertTrue(int1 == int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(10, int1);
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(10, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, "P@Od7_a:q4", true, "--");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("P@Od7_a:q4", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals(80, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("P@Od7_a:q4", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals(80, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("P@Od7_a:q4", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals(80, option0.getId());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2410), "\"I`SGSK)e", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      assertNotNull(string0);
      assertEquals("usage: ", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, 1421, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      assertNotNull(string0);
      assertEquals("usage: ", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-1935), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2, (-1935), "-");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(stringBuffer1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, stringBuffer0.length());
      assertEquals("-", stringBuffer0.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("-", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      helpFormatter0.printHelp("]", "Tgn", options1, "Tgn");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      helpFormatter1.setLongOptSeparator("arg");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getLongOptSeparator());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter0.printHelp(39, "}=4W\"M", "-", options1, "Tgn", false);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      StringBuffer stringBuffer2 = new StringBuffer();
      assertNotNull(stringBuffer2);
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      
      StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer2, 3, (-2106), "");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(stringBuffer3);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer3.length());
      assertEquals("", stringBuffer3.toString());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(stringBuffer2, stringBuffer0);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer3, stringBuffer2);
      assertNotSame(stringBuffer3, stringBuffer0);
      assertNotSame(stringBuffer3, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string0 = "5\"ZlXd-p>x2";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, 79, "5\"ZlXd-p>x2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) uRI0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) uRI0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-736), "$gs_ P(J4y%CZ*^W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", string1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 72, options0, 31, 63);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(35, stringBuffer0.length());
      assertEquals(35, stringBuffer1.length());
      assertSame(options0, options1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      String string2 = helpFormatter0.rtrim("\n");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2402), 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", false, "");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options1);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string2 = "";
      Option option1 = options0.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("arg", option1.getArgName());
      assertNull(option1.getLongOpt());
      assertFalse(option1.hasArg());
      assertFalse(option1.hasArgs());
      assertFalse(option1.hasLongOpt());
      assertNull(option1.getValue());
      assertFalse(option1.hasOptionalArg());
      assertFalse(option1.isRequired());
      assertEquals("", option1.getOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(option1, option0);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      assertSame(option0, option1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean0 = options2.hasOption("r<ad1<&");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      assertSame(option0, option1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp("tq", options2, true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      assertSame(option0, option1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionGroup", options2, "vA7!EoeOL[gZi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("\n", "&", options1, "");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasArgName());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      
      helpFormatter0.setLongOptSeparator("' was specified but an option from this group ");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("' was specified but an option from this group ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNotSame(helpFormatter0, helpFormatter1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1564), "\n", (String) null, options1, "&", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", string1);
      
      int int0 = 72;
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasShortOption("arg");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options0.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option1);
      assertNull(option1.getValue());
      assertEquals("", option1.getOpt());
      assertFalse(option1.isRequired());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasValueSeparator());
      assertFalse(option1.hasOptionalArg());
      assertEquals("", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasArg());
      assertNull(option1.getLongOpt());
      assertEquals('\u0000', option1.getValueSeparator());
      assertEquals("arg", option1.getArgName());
      assertFalse(option1.hasArgs());
      assertSame(options0, options1);
      assertSame(option1, option0);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertSame(optionGroup0, optionGroup1);
      assertSame(option0, option1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      String string2 = helpFormatter0.rtrim("\n");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", string2);
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertFalse(int1 == int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, int1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", false, "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup1.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertEquals("arg", optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options1.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertEquals("arg", optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter0.setArgName("e~dL?$iTrzS!foC");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("e~dL?$iTrzS!foC", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer1 = new StringBuffer(304);
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 1702, 304);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      helpFormatter1.printHelp(" ", options1, true);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(options1.equals((Object)options0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotSame(options1, options0);
      
      helpFormatter0.printHelp("arg", "arg", options1, "--");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(options1.equals((Object)options0));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(options1, options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter2);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      
      helpFormatter0.setLongOptSeparator("-");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      
      Options options2 = options1.addOption("", "", true, "");
      assertNotNull(options2);
      assertFalse(options1.equals((Object)options0));
      assertFalse(options2.equals((Object)options0));
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(options2, options0);
      assertSame(options2, options1);
      
      helpFormatter2.printHelp(83, "'", "", options1, "", true);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(options1.equals((Object)options0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertNotSame(options1, options0);
      assertSame(options1, options2);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "arg", true, "");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options0.addOption("", "", true, "usage: ");
      assertNotNull(options2);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter0.printHelp("_Jyd%{P}*\"PX", "&?&SR{+pu+2p#[@z", options2, "");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter0.setArgName("usage: ");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      Options options3 = new Options();
      assertNotNull(options3);
      assertFalse(options3.equals((Object)options2));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      
      helpFormatter0.printHelp("AXDbSN", "", options3, "");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertFalse(options3.equals((Object)options2));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotSame(options3, options2);
      assertNotSame(options3, options1);
      assertNotSame(options3, options0);
      
      helpFormatter0.setLongOptSeparator("Pg./#$Sd");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("Pg./#$Sd", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLeftPadding((-1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setArgName("--");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getArgName());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", "", (Options) null, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, false, "usage: ");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      List list0 = options1.getMatchingOptions("W\u0000M6D0vxqh^R@)");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option((String) null, false, "1[~n%G");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      boolean boolean0 = options2.hasLongOption("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertFalse(boolean0);
      
      Collection collection0 = options2.getOptions();
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(collection0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options3);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string1 = optionGroup0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("[]", string1);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup2);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      
      List list1 = options3.getMatchingOptions("usage: ");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertNotSame(list1, list0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      
      Option option1 = options2.getOption("has already been selected: '");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNull(option1);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Options options4 = options3.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options4);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(options4, options0);
      assertSame(options4, options1);
      assertSame(options4, options2);
      assertSame(options4, options3);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options2, options4);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options4);
      assertSame(options3, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      
      boolean boolean1 = options0.hasOption((String) null);
      assertFalse(boolean1 == boolean0);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertTrue(boolean1);
      
      String string2 = helpFormatter0.rtrim((String) null);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNull(string2);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string3 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", string3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2412), (Options) null, 47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", true, "g<1~0qA^.+d");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options1.getOption("org.apache.commons.cli.ParseException");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean0 = options2.hasOption("\n");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp("Cs[h", options2, true);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", options2, (String) null);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(optionGroup0.isRequired());
      assertEquals("arg", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArgs());
      assertEquals("g<1~0qA^.+d", option0.getDescription());
      assertNull(option0.getValue());
      assertSame(optionGroup0, optionGroup1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      
      helpFormatter1.setLongOptSeparator("!9&\"we<gQl{|Fva+sEF");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("!9&\"we<gQl{|Fva+sEF", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotSame(helpFormatter1, helpFormatter0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "", "", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setDescPadding(31);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      
      boolean boolean0 = options0.hasLongOption("--");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "--", options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string2 = "org.apache.commons.cli.HelpFormatter$1";
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("arg", false, "usage: ");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup1.setSelected(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      String string3 = "has already been selected: '";
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options1);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string4 = "";
      Option option1 = options1.getOption("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNull(option1);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertEquals("arg", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertEquals("arg", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean0 = options1.hasOption("usage: ");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option("", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(optionGroup0, optionGroup1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options0.getOption("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option1);
      assertFalse(option1.hasOptionalArg());
      assertNull(option1.getValue());
      assertFalse(option1.hasValueSeparator());
      assertEquals("", option1.getOpt());
      assertFalse(option1.isRequired());
      assertEquals((-1), option1.getArgs());
      assertEquals("arg", option1.getArgName());
      assertFalse(option1.hasArg());
      assertEquals("", option1.getDescription());
      assertFalse(option1.hasArgs());
      assertTrue(option1.hasArgName());
      assertNull(option1.getLongOpt());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertSame(options0, options1);
      assertSame(option1, option0);
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(option0, option1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean0 = options0.hasOption("' contains an illegal character : '");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp("75N+u[6%n^K", options0, false);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertSame(options0, options2);
      assertSame(options0, options1);
      
      helpFormatter0.setArgName("usage: ");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.rtrim("o]8F u");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("o]8F u", string1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, int0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(63, "--", "-", options0, "|n93aFe");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 759, 759);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(stringBuffer1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      Options options1 = options0.addOption("arg", false, "0EF+O`");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option("", "-", false, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("-", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      // Undeclared exception!
      try { 
        options2.addOption("-", "arg", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.rtrim("o]8F u");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("o]8F u", string1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, int0);
      
      String string2 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "org.apache.commons.cli.OptionValidator", options0, "|n93aFe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1577, options1, 10, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", true, "");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("_Jyd%{P}*\"PX", "&?&SR{+pu+2p#[@z", options1, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.setArgName("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer(63);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 26, options1, 26, 26);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(stringBuffer1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(35, stringBuffer0.length());
      assertEquals(35, stringBuffer1.length());
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(" ", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(72);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, false, "usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      optionGroup1.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option1 = options1.getOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      boolean boolean0 = options1.hasOption("usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp(" | ", options0, false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertSame(options0, options2);
      assertSame(options0, options1);
      
      helpFormatter0.printHelp("has already been selected: '", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.OptionGroup");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertSame(options0, options2);
      assertSame(options0, options1);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", (String) null, options0, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, false, "arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      option0.setArgs(74);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertTrue(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertTrue(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertTrue(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertTrue(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      Options options3 = options2.addOption("", "usage: ", false, " ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertTrue(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasOptionalArg());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-12), (byte)12, (byte)3, (byte)17, (byte) (-127), (byte)7, (byte) (-16), (byte)34}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 764, "", "", options1, 764, (-2), "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Options options1 = options0.addOption("J", "J", true, "");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("_Jyd%{P}*\"PX", "&?&SR{+pu+2p#[@z", options1, "");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.setArgName("");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", string0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.createPadding(793);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEqualsstring0);
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = (-1753);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1938, options0, (-1753), 1938);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setDescPadding(31);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options1);
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("has already been selected: '", "U&TO[l/4?W", options1, "", true);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options3 = options2.addOptionGroup(optionGroup0);
      assertNotNull(options3);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotSame(options2, options0);
      assertSame(options2, options3);
      assertNotSame(options2, options1);
      assertNotSame(options3, options1);
      assertSame(options3, options2);
      assertNotSame(options3, options0);
      
      boolean boolean0 = options2.hasLongOption("\n");
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertNotSame(options2, options0);
      assertSame(options2, options3);
      assertNotSame(options2, options1);
      assertFalse(boolean0);
      
      Options options4 = options2.addOption((String) null, "--", true, "");
      assertNotNull(options4);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertFalse(options4.equals((Object)options0));
      assertFalse(options4.equals((Object)options1));
      assertSame(options2, options4);
      assertNotSame(options2, options0);
      assertSame(options2, options3);
      assertNotSame(options2, options1);
      assertNotSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options2);
      assertNotSame(options4, options1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "has already been selected: '", "", options1, 2052, 64, (String) null);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertFalse(options0.equals((Object)options4));
      assertFalse(options0.equals((Object)options3));
      assertFalse(options0.equals((Object)options2));
      assertFalse(options1.equals((Object)options2));
      assertFalse(options1.equals((Object)options4));
      assertFalse(options1.equals((Object)options3));
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertSame(options0, options1);
      assertNotSame(options0, options4);
      assertNotSame(options0, options3);
      assertNotSame(options0, options2);
      assertSame(options1, options0);
      assertNotSame(options1, options2);
      assertNotSame(options1, options4);
      assertNotSame(options1, options3);
      
      int int0 = helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 1228, 64);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setDescPadding(31);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("has already been selected: '", "U&TO[l/4?W", options1, "", true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      
      boolean boolean0 = options2.hasLongOption("\n");
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertNotSame(options2, options0);
      assertNotSame(options2, options1);
      assertFalse(boolean0);
      
      Options options3 = options2.addOption((String) null, "--", true, "");
      assertNotNull(options3);
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      assertNotSame(options2, options0);
      assertNotSame(options2, options1);
      assertSame(options2, options3);
      assertNotSame(options3, options1);
      assertNotSame(options3, options0);
      assertSame(options3, options2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "has already been selected: '", "", options1, 2052, 64, (String) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(options0.equals((Object)options3));
      assertFalse(options0.equals((Object)options2));
      assertFalse(options1.equals((Object)options2));
      assertFalse(options1.equals((Object)options3));
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(option0.hasArgs());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotSame(options0, options3);
      assertNotSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotSame(options1, options2);
      assertNotSame(options1, options3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string1 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, false, "usage: ");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      List list0 = options1.getMatchingOptions("W\u0000M6D0vxqh^R@)");
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option((String) null, false, "1[~n%G");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options2);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      boolean boolean1 = options2.hasLongOption("");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertFalse(boolean1);
      
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(options3);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      String string2 = optionGroup0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("[]", string2);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup1);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(optionGroup2);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup2, optionGroup0);
      assertSame(optionGroup2, optionGroup1);
      
      List list1 = options3.getMatchingOptions("usage: ");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertNotSame(list1, list0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      
      Option option1 = options2.getOption("has already been selected: '");
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertNull(option1);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options2, options3);
      
      optionGroup1.setRequired(false);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "4]7mG@p]zp9;D4<}MP|", "W\u0000M6D0vxqh^R@)", options0, "[ Options: [ short ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setDescPadding(31);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(31, helpFormatter0.getDescPadding());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("has already been selected: '", "U&TO[l/4?W", options1, "", true);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("arg", option0.getArgName());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      
      boolean boolean0 = options2.hasLongOption("\n");
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      assertFalse(boolean0);
      
      helpFormatter0.printHelp("Rl+,_M0kwv'iqe/u8", (String) null, options2, "Rl+,_M0kwv'iqe/u8");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(74, int0);
      
      helpFormatter0.setOptPrefix(" ");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      
      helpFormatter0.setArgName("");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotNull(helpFormatter1);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, false, "usage: ");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      List list0 = options1.getMatchingOptions("W\u0000M6D0vxqh^R@)");
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option((String) null, false, "1[~n%G");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      String string1 = "";
      boolean boolean0 = options2.hasLongOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertFalse(boolean0);
      
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string2 = optionGroup0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("[]", string2);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertNull(optionGroup2.getSelected());
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      
      List list1 = options3.getMatchingOptions("usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertNotSame(list1, list0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      
      Option option1 = options2.getOption("has already been selected: '");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Options options4 = options3.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options4);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertEquals("1[~n%G", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertSame(options4, options0);
      assertSame(options0, options4);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options1);
      assertSame(options3, options4);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup2);
      assertSame(optionGroup1, optionGroup0);
      
      boolean boolean1 = options0.hasOption((String) null);
      assertFalse(boolean1 == boolean0);
      assertSame(options0, options4);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_f2MwLcHVs:\"$>hT+", "", options1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.createPadding(793);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEqualsstring0);
      
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string2 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", string2);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, int0);
      
      int int1 = helpFormatter0.getWidth();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertTrue(int1 == int0);
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, int1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      assertNotNull(printStream0);
      assertEquals("-", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      assertNotNull(printWriter0);
      assertEquals("-", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = false;
      Options options1 = options0.addOption("T", "-", false, "O");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      String string0 = "A CloneNotSupportedException was thrown: ";
      MockFile mockFile0 = new MockFile("\n", "A CloneNotSupportedException was thrown: ");
      assertNotNull(mockFile0);
      
      String string1 = "DRY}Y=}~t2#o4=x5q";
      MockFile mockFile1 = new MockFile(mockFile0, "DRY}Y=}~t2#o4=x5q");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URI uRI0 = mockFile1.toURI();
      assertNotNull(uRI0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/\n/A CloneNotSupportedException was thrown: ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("A CloneNotSupportedException was thrown: ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/\n", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canExecute());
      assertEquals("DRY}Y=}~t2#o4=x5q", mockFile1.getName());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/\n/A CloneNotSupportedException was thrown: ", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/\n/A CloneNotSupportedException was thrown: /DRY}Y=}~t2#o4=x5q", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:/experiment/%0A/A%20CloneNotSupportedException%20was%20thrown:%20/DRY%7DY=%7D~t2%23o4=x5q", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/experiment/%0A/A%20CloneNotSupportedException%20was%20thrown:%20/DRY%7DY=%7D~t2%23o4=x5q", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = (-1608);
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1608), (-1608), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "", true, "");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2453, (String) null, (String) null, options1, 452, 452, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setDescPadding(31);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, true, "-");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      Options options1 = options0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options1);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp("has already been selected: '", "U&TO[l/4?W", options1, "", true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertNotNull(options2);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      
      helpFormatter0.printHelp("Rl+,_M0kwv'iqe/u8", (String) null, options2, "Rl+,_M0kwv'iqe/u8");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, int0);
      
      helpFormatter0.setOptPrefix(" ");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", string0);
      
      List list0 = options1.getMatchingOptions("arg");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(list0);
      assertFalse(options0.equals((Object)options2));
      assertFalse(options1.equals((Object)options2));
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgs());
      assertEquals("-", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(options1, options2);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      helpFormatter0.printHelp(" ", options2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      
      helpFormatter0.setLeftPadding(74);
      assertEquals(74, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      int int1 = helpFormatter0.getWidth();
      assertEquals(74, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertTrue(int1 == int0);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, int1);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(31, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(31, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.rtrim("-");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("-", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "arg");
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      Options options3 = options0.addOption((String) null, false, "arg");
      assertNotNull(options3);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      
      Option option0 = new Option("", true, "<jb*565[0 h=~\"'C{");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("<jb*565[0 h=~\"'C{", option0.getDescription());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      
      Options options4 = options2.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options4);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("<jb*565[0 h=~\"'C{", option0.getDescription());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options2, options1);
      assertSame(options2, options4);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options1);
      
      Options options5 = options4.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options5);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals("<jb*565[0 h=~\"'C{", option0.getDescription());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options5);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options4);
      assertSame(options1, options5);
      assertSame(options2, options1);
      assertSame(options2, options4);
      assertSame(options2, options0);
      assertSame(options2, options5);
      assertSame(options2, options3);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options1);
      assertSame(options4, options5);
      assertSame(options5, options2);
      assertSame(options5, options0);
      assertSame(options5, options3);
      assertSame(options5, options4);
      assertSame(options5, options1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      assertNotNull(bufferedOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "E?/", options5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, false, "usage: ");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string1 = null;
      List list0 = options1.getMatchingOptions("W\u0000M6D0vxqh^R@)");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option((String) null, false, "1[~n%G");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(option0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      
      Options options2 = options1.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options2);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      String string2 = "";
      boolean boolean0 = options2.hasLongOption("");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertFalse(boolean0);
      
      String string3 = "";
      Options options3 = options2.addOption("arg", "", false, (String) null);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options3);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      String string4 = optionGroup0.toString();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals("[]", string4);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup1);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(optionGroup2);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup2.getSelected());
      assertFalse(optionGroup2.isRequired());
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup2, optionGroup1);
      assertSame(optionGroup2, optionGroup0);
      
      List list1 = options3.getMatchingOptions("usage: ");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertNotSame(list1, list0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      
      optionGroup0.setSelected(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      
      String string5 = "has already been selected: '";
      Option option1 = options2.getOption("has already been selected: '");
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNull(option1);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      
      Options options4 = options3.addOptionGroup(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotNull(options4);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertEquals("1[~n%G", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options1, options4);
      assertSame(options4, options0);
      assertSame(options4, options2);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertSame(options2, options4);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options4);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(optionGroup0, optionGroup2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup1, optionGroup2);
      
      boolean boolean1 = options0.hasOption((String) null);
      assertFalse(boolean1 == boolean0);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      
      String string0 = "oL`52V^XR#g4RY__66";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("oL`52V^XR#g4RY__66", "oL`52V^XR#g4RY__66", (Options) null, "oL`52V^XR#g4RY__66", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = 1326;
      helpFormatter0.setWidth(1326);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1326, helpFormatter0.defaultWidth);
      assertEquals(1326, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      boolean boolean0 = options0.hasShortOption("-");
      assertFalse(boolean0);
      
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1326, helpFormatter0.defaultWidth);
      assertEquals(1326, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1326, helpFormatter0.defaultWidth);
      assertEquals(1326, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setWidth(0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLeftPadding(0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(0, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotNull(comparator0);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(0, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V:I,L5zqtkI`eY");
      assertNotNull(mockPrintWriter0);
      
      int int0 = 0;
      String string1 = "!uxH}1SxVz;eM,jbaZ";
      String string2 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("\n", true, "c!}SVZf-pH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultWidth = (-185);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-185), helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-185), helpFormatter0.defaultWidth);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-185), helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals((-185), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = "";
      helpFormatter0.setNewLine("");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", string1);
      
      String string2 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", string2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultNewLine = "Cannot add value, list full.";
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("Cannot add value, list full.", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("Cannot add value, list full.", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", string0);
      
      int int0 = 0;
      String string1 = "8P";
      String string2 = "]";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string3 = "3Eze'@::tQ}";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("3Eze'@::tQ}", "", false, "Py@?+-SaD_IZS7|0O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3Eze'@::tQ}' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = " | ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1250, 1250, " | ");
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(" |\n", stringWriter0.toString());
      
      String string1 = helpFormatter0.createPadding(1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(" ", string1);
      
      String string2 = "kasr";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(" | ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.createPadding(800);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEqualsstring0);
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", string1);
      
      String string2 = "Bd";
      String string3 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string4 = "";
      Options options1 = options0.addOption("", false, "");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, int0);
      
      helpFormatter0.setArgName("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      
      String string0 = " ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = "zD4=Xr`ia:i";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string1 = options0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setWidth(1613);
      assertEquals(1613, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1613, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1613, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1613, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertEquals(1613, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertNotNull(comparator1);
      assertEquals(1613, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1613, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1613, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1613, int0);
      
      String string0 = "";
      String string1 = "1L_67i/sw*{,[pW|";
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string2 = "qbo:uO^SW3$g6HHmP";
      boolean boolean0 = true;
      boolean boolean1 = options0.hasLongOption("vVBw@onq_oayLQ/R4");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "org.apache.commons.cli.ParseException";
      boolean boolean2 = options0.hasShortOption("org.apache.commons.cli.ParseException");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = options0.hasShortOption("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        options0.addOption("-", "qbo:uO^SW3$g6HHmP", true, "VqU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(comparator0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("--", string0);
      
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string1 = helpFormatter0.rtrim("]");
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("]", string1);
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("--", string2);
      
      String string3 = helpFormatter0.getLongOptSeparator();
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", string3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3333;
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      String string1 = " :: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options1, " :: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1942);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("has already been selected: '", "U&TO[l/4?W", options1, "", true);
      Options options2 = new Options();
      options2.hasLongOption("\n");
      helpFormatter0.printHelp("Rl+,_M0kwv'iqe/u8", (String) null, options2, "Rl+,_M0kwv'iqe/u8");
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp(">", "", options2, "fV6&edgA");
      helpFormatter0.setLongOptSeparator("'z#yONY=,E7");
      assertEquals(31, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.createPadding(1);
      String string0 = "S[3a)J[*[";
      helpFormatter0.setLongOptPrefix("S[3a)J[*[");
      helpFormatter0.rtrim("T");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "S[3a)J[*[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.append((CharSequence) "T");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "S[3a)J[*[", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(72);
      helpFormatter0.renderWrappedText(stringBuffer0, 98, 0, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-1233));
      assertEquals((-1233), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eM(5";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("eM(5", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
