* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 16329
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-31/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1153
* Using seed 2855679129
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 401 / 1153
[MASTER] 08:26:55.838 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 219 generations, 84969 statements, best individual has fitness: 135.0
* Minimizing test suite
[MASTER] 08:38:10.404 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 205
* Number of covered goals: 203
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 154
* Number of covered goals: 137
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 514
* Number of covered goals: 476
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 78%
* Total number of goals: 46
* Number of covered goals: 36
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 154
* Number of covered goals: 137
* Generated 115 tests with total length 1775
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:38:56.126 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7269666666666666% of time used, but only 29/115 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 08:39:31.290 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.468 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.526 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.739 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.844 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:31.915 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:50.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_219_tmp__ESTest.test0(HelpFormatter_219_tmp__ESTest.java:254)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:39:50.082 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertNotNull(helpFormatter0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int0 = 63;
String string0 = helpFormatter0.createPadding(63);
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("                                                               ", string0);
assertNotNull(string0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string1 = helpFormatter0.getLongOptPrefix();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(string1.equals((Object)string0));
assertEquals("--", string1);
assertNotNull(string1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

Comparator comparator0 = helpFormatter0.getOptionComparator();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertNotNull(comparator0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

helpFormatter0.defaultLongOptPrefix = "line.separator";
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());

int int1 = helpFormatter0.findWrapPos("", 9, 8);
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(int1 == int0);
assertEquals((-1), int1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int2 = helpFormatter0.getDescPadding();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertEquals(3, int2);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int3 = helpFormatter0.getLeftPadding();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(int3 == int2);
assertFalse(int3 == int1);
assertFalse(int3 == int0);
assertEquals(1, int3);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string2 = helpFormatter0.getLongOptSeparator();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertEquals(" ", string2);
assertNotNull(string2);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string3 = helpFormatter0.getSyntaxPrefix();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string1));
assertEquals("usage: ", string3);
assertNotNull(string3);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string4 = helpFormatter0.getArgName();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("line.separator", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(string4.equals((Object)string3));
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string2));
assertEquals("arg", string4);
assertNotNull(string4);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

int int4 = (-2743);
Options options0 = new Options();
assertNotNull(options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertNotNull(optionGroup0);

Options options1 = options0.addOptionGroup(optionGroup0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options0, options1);
assertSame(options1, options0);
assertNotNull(options1);

Options options2 = options1.addOption("", "(m9", false, "-");
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options1, options2);
assertSame(options1, options0);
assertSame(options2, options0);
assertSame(options2, options1);
assertNotNull(options2);

Option option0 = new Option((String) null, "                                                               ", false, "--");
assertFalse(option0.isRequired());
assertNull(option0.getOpt());
assertEquals("                                                               ", option0.getLongOpt());
assertEquals(32, option0.getId());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasArgs());
assertEquals("arg", option0.getArgName());
assertNull(option0.getValue());
assertFalse(option0.hasArg());
assertFalse(option0.hasValueSeparator());
assertEquals('\u0000', option0.getValueSeparator());
assertTrue(option0.hasArgName());
assertEquals("--", option0.getDescription());
assertTrue(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNotNull(option0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

Options options3 = options2.addOption(option0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertFalse(option0.isRequired());
assertNull(option0.getOpt());
assertEquals("                                                               ", option0.getLongOpt());
assertEquals(32, option0.getId());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasArgs());
assertEquals("arg", option0.getArgName());
assertNull(option0.getValue());
assertFalse(option0.hasArg());
assertFalse(option0.hasValueSeparator());
assertEquals('\u0000', option0.getValueSeparator());
assertTrue(option0.hasArgName());
assertEquals("--", option0.getDescription());
assertTrue(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options2);
assertSame(options1, options3);
assertSame(options1, options2);
assertSame(options1, options0);
assertSame(options2, options0);
assertSame(options2, options3);
assertSame(options2, options1);
assertSame(options3, options0);
assertSame(options3, options1);
assertSame(options3, options2);
assertNotNull(options3);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

helpFormatter0.printOptions(mockPrintWriter0, (-2743), options3, 63, 42);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-31/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-60/tests/7
* Done!

* Computation finished
