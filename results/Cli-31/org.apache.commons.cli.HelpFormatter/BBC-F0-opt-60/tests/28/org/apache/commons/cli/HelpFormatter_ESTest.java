/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:43:55 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("CjrNO0d1CC", "CjrNO0d1CC", options0, "CjrNO0d1CC");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(109);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4b");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter2.format("", objectArray0);
      Options options0 = new Options();
      mockPrintWriter1.format(" ", objectArray0);
      Options options1 = options0.addOption("arg", true, ". V?");
      helpFormatter0.printUsage(printWriter0, 2537, " 1^`C).[v]MR", options1);
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter1, 0, options1, 120, 3885);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile((String) null, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      int int0 = 770;
      helpFormatter0.setWidth(770);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int1 = 3196;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append(stringBuffer1);
      int int2 = 10;
      helpFormatter0.defaultSyntaxPrefix = "arg";
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer0, 770, options0, 3196, 10);
      stringBuffer0.appendCodePoint(3);
      int int3 = 843;
      // Undeclared exception!
      try { 
        stringBuffer2.insert(843, ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.setLongOptPrefix("");
      Option option0 = new Option("arg", "--", true, "");
      options0.getOptionGroups();
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(74, "\n", "\n", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[GVmUJ34wKS?r";
      helpFormatter0.setNewLine("[GVmUJ34wKS?r");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[GVmUJ34wKS?r");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.createPadding(2);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 278);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2308);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      stringWriter0.write(2094);
      stringWriter0.write("usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options1, 117, 74);
      helpFormatter0.renderOptions(stringBuffer1, 2308, options1, 3, 0);
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("arg", "--", options1, "OAq75=N,]o6M$h(");
      MockFile mockFile0 = new MockFile("", "N:sh^aLUZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      helpFormatter0.getOptionComparator();
      helpFormatter1.findWrapPos("arg", 117, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "P-/f?NoB}", "--", options1, 1650, 117, "*,#@gZaL^_)r09Sp4;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, (String) null);
      option0.setArgName("");
      options0.hasOption("--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "xSy>", (String) null, options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 3301, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Un", "q", options0, 0, 0, "oNLC7", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-639));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "arg", "arg", options0, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim("jH");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-697));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-796));
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("KRT8<:UBDoQv%:i.MpL", "KRT8<:UBDoQv%:i.MpL", (Options) null, "KRT8<:UBDoQv%:i.MpL");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gn x6Af@D");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-2893), "gn x6Af@D");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp(1271, "CBHX`r", "CBHX`r", options0, "'", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.createPadding(67);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 67, options0, 5928, 8);
      helpFormatter0.renderOptions(stringBuffer1, 1271, options0, 1323, 1);
      // Undeclared exception!
      helpFormatter0.createPadding(5928);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-357));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$*1WgjS\"WM?@", "$*1WgjS\"WM?@", options0, "$*1WgjS\"WM?@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      int int0 = (-1888);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1051);
      helpFormatter0.setArgName("][WG0g9Ic^f");
      helpFormatter0.setWidth(10);
      helpFormatter0.setWidth(10);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.hasOption("x/K9?)~q:mY");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h4wPYtM5~aU=Pi", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ] [ long ", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 2968, (-1085), "od|E Uc2]EJ[UC");
      helpFormatter0.findWrapPos("]aVE2$8>b2=:", 3, 2309);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.setNewLine(" ");
      Options options1 = options0.addOption("", "WDq~", false, "--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 2, 2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 2163;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2163, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", " ", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]WhodfAP9P=", "]WhodfAP9P=", options0, " | ", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("g5#a0M8|$M|", "O@Q+If$l", (Options) null, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ARG...]", (String) null, options0, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":[hV#*@{/$;'7E");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "R", (String) null, options0, 7, 7, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 650, " ", "KAA#UeT~n1", options0, 702, 3, "T^:", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printOptions(printWriter0, (-1612), options0, 650, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3208, "% *{2usZ?^V", (String) null, options0, 7, 7, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "\n", options0, "-", false);
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1508, "usage: ", "usage: ", (Options) null, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.setDescPadding((-2277));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "org.apache.commons.cli.Options", options0, "org.apache.commons.cli.Options", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 6, (String) null, "T{Y)pnWP", options0, 1, 1, "&R~L", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(121);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1020), 1, "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "Q;");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "Q;", options1, "Q;", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      String string0 = "";
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "]");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WYc:UoG");
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter0.printHelp("RK5`C>H+", "klw3H6Nwu&U9u", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 449, "--", " ", options1, (-98), 70, "#)8WP_.Bpf<+Acl9Y", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1692, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WYc:UoG");
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter0.printHelp("WYc:UoG", "RK5`C>H+", options0, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " :: ", "", options0, 74, 32, "", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      helpFormatter1.findWrapPos(".c%F@H", 0, 74);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "Q;");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal option name '");
      mockPrintWriter0.append((CharSequence) "Illegal option name '");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 120, "--", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter1.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("RK5`C>H+", ", ", options0, "7'<S%v", false);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1136, ";'AZCc|E", "-", options0, 3, 32, "A", false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("D-:b,I", 32, 32);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      helpFormatter0.printHelp("RK5`C>H+", ", ", options1, "7'<S%v", false);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(false);
      helpFormatter0.setSyntaxPrefix("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2725, "arg");
      helpFormatter1.renderWrappedText(stringBuffer1, 1268, 3, "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1136, ";'AZCc|E", "-", options1, 3, 32, "A", false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("D-:b,I", 32, 32);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      helpFormatter0.printHelp("RK5q>H+", ", ", options1, "7'<S%v", false);
      Options options3 = options0.addOption((String) null, true, "RK5q>H+");
      options3.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "K@N?=K1#hD?u8zI;~]p", "#,:PI(PWJ+o:zRew", (Options) null, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "M\"z7$m6aWqh");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "usage: ", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1921), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UsTN3_9'W2UN=Pm.sZ";
      helpFormatter0.defaultNewLine = "UsTN3_9'W2UN=Pm.sZ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("]", "]", options1, "\n", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", "usage: ", options0, 80, 1, "U+uAP", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1417, "", "", options1, (-707), 781, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      helpFormatter0.printHelp("|EUYc", ", ", options1, "7G0S%v", true);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3490, "J{FI$>Tw%GnHhJ", "-", options0, 0, 814, (String) null);
      helpFormatter1.printHelp("A36 a/P0Ln", "usage: ", options2, "\n", true);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      helpFormatter0.printHelp(9, "]WhodfAP9P=", "arg", options0, "Q;", true);
      helpFormatter0.setOptPrefix("Q;");
      helpFormatter0.findWrapPos(" ", 9, 63);
      MockFile mockFile0 = new MockFile("!T?h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, (-2714), options0, 63, 62);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 62, "Xj&'6zEKns");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("T|C", "T|C", options0, " | ");
      helpFormatter0.rtrim("TzbMxb:Z");
      helpFormatter0.getDescPadding();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 666, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-65), (-65), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "AM?9)4PaBM[", true, "arg");
      options1.addOption("", true, "5,la&!@viBG,");
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Option option0 = new Option("", false, "p5%F)(FU{n)");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 77, "", options2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("^t4A1M7y,d)wgxsi1qp", " ", options0, "   ", false);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("WYv", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "pdW*H.J@zL;0", options2, "WYv", true);
      helpFormatter0.getNewLine();
      Options options3 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|EUYc", ", ", options1, "7G0S%v", true);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2725, "arg");
      helpFormatter2.renderWrappedText(stringBuffer1, 1268, 3, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "arg", options3, 1, 97, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("WYv", "/5'%, l7\"t<rG\"Y!a4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "pdW*H.J@zL;0", options2, "/5'%, l7\"t<rG\"Y!a4", true);
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      helpFormatter0.printHelp("|EUYc", ", ", options1, "7G0S%v", false);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2725, "arg");
      helpFormatter2.renderWrappedText(stringBuffer1, 1268, 3, "--");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "arg", options3, 1, 97, "\n", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("9B>|5zNSMFy:_RpAORv").when(comparator0).toString();
      doReturn((-2242)).when(comparator0).compare(any() , any());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultArgName = "*\"=$]}DTr)fA";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "*\"=$]}DTr)fA");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "usage: ");
      helpFormatter0.printHelp(415, " ", "*\"=$]}DTr)fA", options2, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options2, (-1), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(1133.0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 7, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 7, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.rtrim(">");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
      int int0 = 2;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringBuffer0.append((-647.972660409));
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "><$=~Sw(n1')@|u+=NO", true, ".z+7;^GO2Rp6(h6");
      options1.addOption(option0);
      int int1 = 856;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options1, 856, 856);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", "TIMdzqr@4dzC4c8J+,", false, "TIMdzqr@4dzC4c8J+,");
      Option option0 = new Option("fo", false, "fo");
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options1.getOptions();
      helpFormatter0.printHelp("]", "]", options1, "\n", false);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("bc,$6l~w>+T!>0", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "@A", true, "[ option: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("6", "[ option: ", true, "-");
      helpFormatter0.printHelp("ty", "6", options2, "6");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("-");
      helpFormatter0.setNewLine("-");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLongOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";mQ@NJp<$}Pt1");
      mockPrintWriter0.append('s');
      options0.addOption("", false, "usage: ");
      helpFormatter0.findWrapPos("$~%b59)$TY _IwR", 3, 3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("WYv", "/5'%, l7\"t<rG\"Y!a4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "pdW*H.J@zL;0", options2, "/5'%, l7\"t<rG\"Y!a4", true);
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      helpFormatter0.printHelp("|EUYc", ", ", options1, "7G0S%v", true);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2725, "arg");
      helpFormatter2.renderWrappedText(stringBuffer1, 1268, 3, "--");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "arg", options3, 1, 97, "\n", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("v~%J+qchUO$d%");
      helpFormatter0.rtrim("v~%J+qchUO$d%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "Q;", options1, "Q;", true);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("Q;");
      Options options2 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2274, 2274, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iw0WJ]o|Fhk(o");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "JE#_Gb^!7Y~lE~&Ru0^");
      File file0 = MockFile.createTempFile("JE#_Gb^!7Y~lE~&Ru0^", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string1 = ";myMH*OVw";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, ";myMH*OVw", options0);
      helpFormatter0.getLeftPadding();
      options0.toString();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";mQ@NJp<$}Pt1");
      mockPrintWriter0.append('i');
      Options options2 = new Options();
      options2.addOption("arg", true, (String) null);
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, options2, "", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter1.append('-');
      helpFormatter1.printHelp(")-|Pa98- ", "\n", options0, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), ")-|Pa98- ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "[";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "usage: ", objectArray0);
      int int0 = 1908;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 971, (Options) null, 971, 1908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "Q;", options1, "Q;", true);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("Q;");
      Options options2 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.printHelp("--", ", ", options2, "--", true);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 536, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A;^eI*");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('0');
      helpFormatter0.printHelp("--", " [ARG]", options0, "8<69p)U`ad>1;>(Th", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1157), "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "* j~v c){b;8=~01{I>";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("[", "* j~v c){b;8=~01{I>", (Options) null, "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("WYv", "/5'%, l7\"t<rG\"Y!a4");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "pdW*H.J@zL;0", options2, "/5'%, l7\"t<rG\"Y!a4", true);
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      helpFormatter0.printHelp("|EUYc", ", ", options1, "7G0S%v", false);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.append(true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2725, "arg");
      helpFormatter2.renderWrappedText(stringBuffer1, 1268, 3, "--");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "arg", options3, 1, 97, "\n", false);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "Q;", options1, "Q;", true);
      String string0 = "";
      MockFile mockFile0 = new MockFile(" ", ")zQ#>jQ7<");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "Q;", options1, "Q;", true);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("Q;");
      Options options2 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setSyntaxPrefix("aLTMb#J:t(P^v/ x!");
      helpFormatter0.rtrim("--");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("AM?9)4PaBM[");
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";mQ@NJp<$}Pt1");
      mockPrintWriter0.append('s');
      Options options2 = options0.addOption("", false, "usage: ");
      helpFormatter1.printHelp("usage: ", "", options2, (String) null, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2439);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "GT3*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LHmS3");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('n');
      helpFormatter0.printUsage(printWriter0, 3, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      Options options2 = new Options();
      helpFormatter0.printHelp(23, "!x;H(32MSGdG$T_f-", "-", options2, "", false);
      helpFormatter0.setSyntaxPrefix("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 9, options1, 9, 4211);
      File file0 = MockFile.createTempFile("arg", "arg");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.createNewFile();
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("", 4211, 23);
      helpFormatter0.setLongOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "");
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "", options0, "arg", true);
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setWidth(3111);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.defaultLongOptPrefix = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("kGoXzr*S", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      Options options2 = new Options();
      helpFormatter0.printHelp(23, "!x;H(32MSGdG$T_f-", "-", options2, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 34, 23);
      helpFormatter0.printHelp("9", "-", options0, "!x;H(32MSGdG$T_f-");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", false, "org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      options0.helpOptions();
      Options options2 = new Options();
      String string0 = "{NVzeoM&HNp3tnA8B";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(23, "{NVzeoM&HNp3tnA8B", "!x;H(32MSGdG$T_f-", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 10, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~h`=vO!");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('~');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1183), "w>B0kW<Sw:(u]eIY$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 3, 73);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "x";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "}:Ekd@/<@IF@c{", options1, "}:Ekd@/<@IF@c{", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "~h`=vO!";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~h`=vO!");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(74, "~h`=vO!", "~h`=vO!", options0, "org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("cmdLineSyntax not provided", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "pxbDa0~!1<;_DEL~*@w";
      MockFile mockFile0 = new MockFile("pxbDa0~!1<;_DEL~*@w", "aLTMb#J:t(P^v/ x!");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = null;
      String string1 = "yU_2!|";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "hbL K#K", "y12/e", (Options) null, 3024, (-464), "y12/e");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      String string1 = "-";
      Options options2 = new Options();
      helpFormatter0.printHelp(23, "!x;H(32MSGdG$T_f-", "-", options2, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("9", 34, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("9", options2);
      // Undeclared exception!
      try { 
        MockURI.create("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: 
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">^";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      mockPrintWriter0.append('\'');
      String string0 = "9";
      MockFile mockFile0 = new MockFile("9", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 9, ">^");
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(">^", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>^' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~h`=vO!");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.defaultLongOptPrefix = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.rtrim(" ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("", 848, 810);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth(1028);
      helpFormatter0.setLongOptPrefix("");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos(" ", 285, 64);
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2688, 2688, "S|jh6`&2?:!a(Pj");
      helpFormatter0.renderWrappedText(stringBuffer1, 2688, 2705, "+z1)9:D3)&Kld|d[");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">^";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 23;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      helpFormatter0.printHelp(23, "]WhodfAP9P=", "]WhodfAP9P=", options1, "-", false);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix("$P[G<~m");
      helpFormatter0.setLongOptSeparator("$P[G<~m");
      options1.addOptionGroup(optionGroup0);
      int int1 = (-1248);
      optionGroup0.setRequired(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 23, "$P[G<~m", "-", options0, 23, (-1248), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("Q;", "aLTMb#J:t(P^v/ x!");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "t<b_[MEDD)Cksenk[", "usage: ", (Options) null, 1, 0, "yU_2!|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "aLTMb#J:t(P^v/ x!";
      MockFile mockFile0 = new MockFile("usage: ");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      printWriter0.checkError();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 59, (Options) null, 2067, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";li-ZI";
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";li-ZI", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "&?BZs=Rod=f?";
      helpFormatter0.renderOptions(stringBuffer0, (-3148), options0, 3, 2732);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      stringBuffer0.insert(1, (long) 1);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2732, options1, 3, (-3148));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)57;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringBuffer0.append(0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1");
      file0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      stringBuffer0.append("");
      helpFormatter0.setSyntaxPrefix("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1787, options0, (-1884), 1787);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      helpFormatter0.rtrim(";XmHv!_w");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("%1a!NnftYMg");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("Cannot add value, list full.");
      int int0 = 115;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 115, 906, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">^";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 9;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      String string0 = "-";
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer("]WhodfAP9P=");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("C1&:R?]/");
      Option option0 = new Option("", "");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "%1a!NnftYMg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "Tp%rP[{M", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";li-ZI";
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasShortOption("");
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      Options options1 = options0.addOption((String) null, "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "#s )Wn:p?GV", options1, "S>Z8(.p~Bp5#V'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}:Ekd@/<@IF@c{";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, false);
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-231), " ", ")$?Pm@4$OZLvj_", (Options) null, 3, 117, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "AM?9)4PaBM[", true, "arg");
      Options options2 = options1.addOption("", true, "5,la&!@viBG,");
      helpFormatter0.printHelp("@", "", options2, "NO_ARGS_ALLOWED", true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "X";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("_,NX0", "--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '_,NX0' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1296);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1296));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(9);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("Q;", "aLTMb#J:t(P^v/ x!");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = null;
      int int0 = (-231);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "t<b_[MEDD)Cksenk[", "usage: ", (Options) null, (-231), 0, "yU_2!|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1787;
      stringBuffer0.append(0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      String string0 = "";
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$4x#Icq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("", "Cannot add value, list full.", true, "KCWjq4Tc55fOs");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOption("arg", "arg", true, "o|");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1263, "Cannot add value, list full.", options1);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1787;
      stringBuffer0.append(0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      file0.toPath();
      file0.setReadable(false);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 402, "", "line.separator", options0, 0, 12, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-2358);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1787;
      stringBuffer0.append(0);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      String string0 = "";
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(")-E>xQs9@Da~)}N");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2108, 1773, "");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptPrefix("Y\"HlDVzEBm");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-1044));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Y\"HlDVzEBm", 3, (-30));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v=OQ{;q6$!lJ[$ChoHw";
      helpFormatter0.findWrapPos("v=OQ{;q6$!lJ[$ChoHw", 10, 31);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("Pu<|d|nZ%", true, "ld&3#aP0)y6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Pu<|d|nZ%' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4b");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter2.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, ". V?");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 0, options1, 120, (-1975));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m\"$v=]n'jG5\"";
      helpFormatter0.setLongOptSeparator("m\"$v=]n'jG5\"");
      String string1 = "[ Options: [ short ";
      helpFormatter0.setLongOptPrefix("[ Options: [ short ");
      helpFormatter0.setLeftPadding(0);
      int int0 = (-1134);
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "$V");
      Options options1 = options0.addOption(option0);
      String string3 = "";
      // Undeclared exception!
      try { 
        options1.addOption("\n", "", true, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      String string2 = " | ";
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "[ Options: [ short ";
      Options options1 = options0.addOption("", "arg", false, "[ Options: [ short ");
      boolean boolean0 = false;
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "D(H<", "", options1, "}<:", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.append('-');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options0);
      String string0 = "[";
      Options options2 = options1.addOption("sBVt", "[", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "--", "sBVt", options2, "cQHg=Gjy7EBS9DL7ke", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      Options options2 = new Options();
      helpFormatter0.printHelp(23, "!x;H(32MSGdG$T_f-", "-", options2, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("9", 34, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(651);
      helpFormatter1.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";li-ZI";
      Options options0 = new Options();
      options0.hasShortOption("");
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(";li-ZI", options0, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printHelp("\n", "arg", options1, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter2.createPadding(119);
      assertEquals("                                                                                                                       ", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-912);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "sJG~Ql;t:Fg1:%NoU9");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-912), "}:Ekd@/<@IF@c{", "}:Ekd@/<@IF@c{", options1, "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      helpFormatter0.printHelp("arg", "%1a!NnftYMg", options1, (String) null, false);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">^";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 9;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "]WhodfAP9P=", "]WhodfAP9P=", options1, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",0if5s";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(",0if5s", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kASq9oNr*");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Locale locale0 = new Locale("", "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "kASq9oNr*";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "-";
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      options1.hasOption("");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
