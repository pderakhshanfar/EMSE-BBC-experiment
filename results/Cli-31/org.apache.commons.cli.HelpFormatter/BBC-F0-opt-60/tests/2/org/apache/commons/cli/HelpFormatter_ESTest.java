/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:17:32 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-638);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ] [ long ", 3, 1821);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "%'++*F\"y7f@9");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", "arg", true, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "aiI6[R@WE*$q?`3<+Fq";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultLeftPad = (-899);
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "' was specified but an option from this group ", "lKhKleHQQ?", options0, "' was specified but an option from this group ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      File file0 = MockFile.createTempFile("usage: ", "L9pccOnR`+o{j", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockFile0.getCanonicalPath();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) file0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "|a)GU;nAuPx!  ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1545;
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", "usage: ", false, " | ");
      optionGroup0.addOption(option1);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("r=5.A4$n", options0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "b [!N&3J/PH~zZ>=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("clwLOa", "", false, "");
      optionGroup0.addOption(option1);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("arg", 32, 32);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 3;
      options0.addOption("arg", "usage: ", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", " ", false, "-");
      helpFormatter0.setDescPadding((-1933));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-3d@j]ym#", "|2g#y:})6o:U.fW", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.optionComparator = null;
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.findWrapPos("arg", 7, 7);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("arg");
      helpFormatter0.defaultLongOptPrefix = "--";
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim(" ET4(%v=Tq#4");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "arg";
      helpFormatter0.setDescPadding((-2943));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("& Ymm=@(- KjMt/", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "@FIscV:Y^b/q! 'Q", "@FIscV:Y^b/q! 'Q", options0, 9, 946, "J)JIvTl@gdB76ERo9P_", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      String string0 = "usage: ";
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding(943);
      helpFormatter0.setDescPadding((-533));
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("'k>Vn9uYQ$", options1, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("fU", "arg", options1, "fU");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      int int0 = 45;
      helpFormatter0.defaultWidth = 45;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 45, (-2), "");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "kD%3;#esZhN d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 8;
      helpFormatter0.printHelp(8, "--", "--", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", (String) null, options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(4021, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "pn ", true);
      helpFormatter0.setSyntaxPrefix("pn ");
      int int0 = 1;
      String string0 = "aiI6[R@WE*$q?`3<+Fq";
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      String string1 = "q_Gn(m#%f5 W#";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 1, "q_Gn(m#%f5 W#");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      option0.setArgName("");
      option0.setType(helpFormatter0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "   ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[)=u?'1krGM.:&k>";
      Options options1 = options0.addOption("arg", true, "[)=u?'1krGM.:&k>");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "b3!N&_3J/CPH\\~zZO=";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = 1392;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 1392);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IDlbOgj~7qf\"[)zB";
      helpFormatter0.setOptPrefix("IDlbOgj~7qf\"[)zB");
      helpFormatter0.defaultSyntaxPrefix = "IDlbOgj~7qf\"[)zB";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultDescPad = 19;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format(" ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-658), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.defaultLeftPad = (-1);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 10;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "r*!^>!khv:";
      PrintWriter printWriter0 = null;
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "r*!^>!khv:");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%H7n2LnNb1`F;6a,";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("%H7n2LnNb1`F;6a,", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 157, (Options) null, 157, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-607);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 3816;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("2Exe%0", "[", options0, ".:T5X", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 536, "mMZ2?", (String) null, options1, (-1715), (-2), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) option0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) stringWriter1;
      mockPrintWriter0.printf(locale0, "org.apache.commons.cli.Options", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1971, "`0(V1>/NGVW^]q", "-", options0, 1971, 10, (String) null, true);
      helpFormatter1.rtrim("kTbL{r(*~{iEl");
      helpFormatter1.getArgName();
      helpFormatter1.printHelp("--", "YcWuW,~<G&.k6", options0, "_#wLgEy#6fijj.y)", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) option0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.Options", objectArray0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(printWriter0, 8, " [ARG]", " ", options0, 701, 1, "arg", true);
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      mockPrintWriter0.print((float) 3);
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) stringWriter1;
      mockPrintWriter0.printf(locale0, "org.apache.commons.cli.Options", objectArray0);
      helpFormatter1.setArgName("");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 35, "usage: ", "k?idmn?J5K<p$RH", options0, 74, 1647, "", true);
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "arg", "", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1572);
      helpFormatter0.setLeftPadding((-1572));
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) option0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.Options", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 9, "arg", "-", options0, 1971, 36, "Y0-{P$E\u0005wrlaL?H", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7{");
      helpFormatter0.renderOptions((StringBuffer) null, 372, options0, 372, 372);
      helpFormatter0.renderOptions((StringBuffer) null, 372, options0, 372, 372);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getLongOptSeparator());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 14, "R");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("arg");
      options0.addOption("", "-", false, "org.apache.commons.cli.Options");
      helpFormatter0.setOptPrefix("");
      MockFile mockFile0 = new MockFile("Illegal option name '", "");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "4!@Z$^[mG");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "iAK2^+v]k";
      helpFormatter0.rtrim("iAK2^+v]k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "iAK2^+v]k";
      PrintWriter printWriter0 = mockPrintWriter0.printf(", ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, (-2320), "\"i|?r");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("bela[", 149, 31);
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append('.');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "usage: ", 74, 149);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      mockPrintWriter0.print((long) 3);
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      String string0 = "|2g#y:})6o:\\U.fW";
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.setLeftPadding((-3655));
      helpFormatter0.setLeftPadding((-3655));
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3655), options1, 'X', 'X');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.printHelp("--", "|2g#y:})6o:U.fW", options1, "--", true);
      Options options2 = options1.addOption("4Ei9LIqW", "-", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2140, (Options) null, 74, 2140);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Nld2YSQ'U");
      mockPrintWriter0.print((long) 74);
      Object[] objectArray0 = new Object[6];
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, "n;x84%{");
      Option option0 = new Option("", "arg", false, "-");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(31, "n;x84%{", "%&2f9}$Z", options3, "n;x84%{");
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) "Nld2YSQ'U";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(">", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 54, ">");
      helpFormatter0.setLongOptPrefix("");
      Options options4 = new Options();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("--");
      String string0 = "org.apache.commons.cli.Option";
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp("Ay`Vd,4,f0>_T", options1);
      Options options2 = new Options();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1471), options3, 25, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 9;
      helpFormatter0.createPadding(9);
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.setDescPadding((-4571));
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int1 = 1647;
      String string0 = " ";
      String string1 = "|b)Z>b%+R~E|`";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "The option '";
      Option option0 = null;
      try {
        option0 = new Option("The option '", "-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "--");
      options1.addOption("", false, "[ Options: [ short ");
      helpFormatter1.printHelp("[ Options: [ short ", options1);
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(834);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 834, "9}[ki_{", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 13, (-3972));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 570, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-3655));
      mockPrintWriter0.print('\'');
      helpFormatter0.setLeftPadding((-3655));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|2g#y:})6o:U.fW", (String) null, options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 100, "usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, ";KQNJ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("arg", options0, true);
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setLongOptSeparator(" L9./JCeonG!");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" L9./JCeonG!", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "pn ", true);
      helpFormatter0.setSyntaxPrefix("pn ");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 0, " ] R long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 100, "usage: ");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3535, 64, "");
      helpFormatter1.renderWrappedText(stringBuffer2, 100, 67, "-");
      helpFormatter1.rtrim("NO_ARGS_ALLOWED");
      helpFormatter1.printHelp("whpT(f", "rgy7% F", options0, "1qYuK1&)[0", false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W");
      helpFormatter0.printOptions(mockPrintWriter0, 219, options0, 601, 74);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = "tYT39+RvYG'dW(";
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.flush();
      stringWriter1.write(40);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "", "HK:Nfz5%", options0, 63, (-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = true;
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "pn ", true);
      helpFormatter0.setSyntaxPrefix("pn ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "#M(", "has already been selected: '", options0, "' was specified but an option from this group ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(21, " ", "<", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("--");
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(":GTx*&E~R&+r>pa");
      helpFormatter2.renderOptions(stringBuffer0, 1, options0, 2252, 115);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(")j=\"c}mY|)Q*ws", "j*ed@oX$-tvBYEpD", options0, ")j=\"c}mY|)Q*ws", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3803;
      String string0 = "]";
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "y_aD57?r";
      Options options0 = null;
      boolean boolean0 = true;
      String string2 = "IxF\\06a`";
      int int1 = (-2138);
      int int2 = 58;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3803, "y_aD57?r", "", (Options) null, 58, (-2138), "IxF\u0006a`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-607);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("!%82S!vmlFk|PKz*");
      options0.getOption("--");
      Options options1 = options0.addOption("", true, "F$p487i8F+]Y");
      options0.toString();
      options1.hasShortOption("[");
      options1.hasOption("-");
      options1.getOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3816, options1, 3816, (-451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("-3d@j]ym#", "|2g#y:})6o:U.fW", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = "pn ";
      options0.helpOptions();
      boolean boolean0 = true;
      int int0 = 50;
      String string1 = "&0czF^'>n";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 23, "]", "]", options0, (-439), (-1), "&0czF^'>n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      boolean boolean0 = true;
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, "-", "-", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      Options options0 = new Options();
      Option option0 = new Option("", true, "j*ed@oX$-tvBYEpD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("4!@Z$^[mG", options2, true);
      helpFormatter0.printHelp("H,V6UawS", options0);
      Options options3 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "4!@Z$^[mG");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4!@Z$^[mG
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, ";KQNJ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOption("arg", "arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("4!@Z$^[mG", options2, false);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      Options options3 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1305;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1305;
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "Pc(c93Z2]", options0, "APO[\"1vT:kT>GYJ", true);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.createPadding(1349);
      String string0 = "";
      MockFile mockFile0 = new MockFile(" ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "-", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Y`^Bf7<_y=r", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Y`^Bf7<_y=r' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("4!@Z$^[mG", options2, false);
      helpFormatter0.setLeftPadding(133);
      helpFormatter0.setLeftPadding(0);
      options1.addOption("", (String) null, false, "K4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "--");
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('X');
      String string0 = "+";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, ".xxfD");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 85, (String) null, "+", options1, 2851, 44, "hq15]|F{nxF b??", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      String string0 = "4!@Z$^[mG";
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("4!@Z$^[mG", options2, false);
      helpFormatter0.setLeftPadding(133);
      helpFormatter0.setLeftPadding(0);
      options1.addOption("", (String) null, false, "K4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 71, 71, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("_b, @3eWT");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getDescPadding();
      helpFormatter0.setSyntaxPrefix("i;IA;<67K");
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1140), 3, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")j=\"c}mY|)Q*ws";
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, ")j=\"c}mY|)Q*ws", "[ARG...]", options0, 1773, 32, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "WUgS0)w^IGfi", "WUgS0)w^IGfi", options1, 2, 32, "[ARG...]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("WH28WUb=s/WB");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-32);
      byteArray0[8] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter");
      File file0 = MockFile.createTempFile("WH28WUb=s/WB", "WH28WUb=s/WB", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print((float) 1);
      mockPrintWriter0.println(74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "WH28WUb=s/WB");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("JTo;~", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = null;
      helpFormatter0.setDescPadding(194);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 1, 1716);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = (-2138);
      String string0 = "WUgS0)w^IGfi";
      String string1 = "[ARG...]";
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2138), "WUgS0)w^IGfi", "[ARG...]", options0, (-1), 2, "WUgS0)w^IGfi");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "_aD]5'7?r";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "_aD]5'7?r", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "", true, "N");
      helpFormatter0.printHelp("`f>,^]", options3, false);
      helpFormatter0.setOptPrefix("`f>,^]");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.Option", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("arg", options1);
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      String string0 = "4!@Z$^[mG";
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.printHelp("%?4E9LIqW@", "", options0, "", false);
      options1.addOption("", "4!@Z$^[mG", true, "org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        options0.addOption("%?4E9LIqW@", false, "|2g#y:})6o:U.fW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%?4E9LIqW@' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "_aD]5'7?r";
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.Option";
      Options options0 = null;
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", "sz|*sD!", options1, "\n", true);
      // Undeclared exception!
      try { 
        options1.addOption("'", "usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("%'GLtQyUdjR");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "gJw%)+X", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(" | ", "4!@Z$^[mG", options0, "JEJS]9%6VFYH+K<T~7o", false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('X');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 103, "^+");
      Options options0 = new Options();
      options0.addOption("", "\n", false, "");
      options0.addOption((String) null, false, "--");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-768), "-", (String) null, options1, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('X');
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding(863);
      Options options2 = options1.addOption((String) null, (String) null, true, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "NO_ARGS_ALLOWED", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = true;
      helpFormatter0.printHelp(4021, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "pn ", false);
      helpFormatter0.setSyntaxPrefix("pn ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "' was specified but an option from this group ", "", options0, "pn ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      int int0 = 34;
      helpFormatter0.printHelp(34, "' was specified but an option from this group ", "lKhKleHQQ?", options0, "' was specified but an option from this group ", true);
      helpFormatter0.setArgName("aiI6[R@WE*$q?`3<+Fq");
      helpFormatter0.getNewLine();
      Option option0 = new Option("", (String) null, true, ",<QKaf+Nrvb");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=]!O(");
      // Undeclared exception!
      try { 
        options1.addOption("aiI6[R@WE*$q?`3<+Fq", "aiI6[R@WE*$q?`3<+Fq", false, ".bDW@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'aiI6[R@WE*$q?`3<+Fq' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("%')LtQyUdjR");
      helpFormatter0.defaultSyntaxPrefix = "mSKcG4jh~'vEO";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(194);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 4055;
      int int1 = 750;
      String string0 = "bVWY=C\\!Aku;}3DY)";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4055, 750, "bVWY=C!Aku;}3DY)");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 750, (-2058), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(116, (String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "]";
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "_aD]5'7?r";
      Options options0 = null;
      boolean boolean0 = true;
      String string2 = "IxF\\06a`";
      int int0 = (-2138);
      int int1 = 58;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "_aD]5'7?r", "", (Options) null, 58, (-2138), "IxF\u0006a`");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "_aD]5'7?r";
      helpFormatter0.defaultNewLine = "_aD]5'7?r";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "_aD]5'7?r", "IxF\u0006a`", (Options) null, (-2138), 0, "_aD]5'7?r");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Locale> comparator0 = (Comparator<Locale>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "_aD]5'7?r";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 100, "M<;\"mbUf_fYa1u%h", "", (Options) null, (-1865), 100, "]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption("MLY", "-", false, "X:MK6;qk1+;Nx<7<|");
      Options options3 = options1.addOption("MLY", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MLY";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) options3;
      objectArray0[4] = (Object) "-";
      PrintWriter printWriter1 = printWriter0.printf(" ", objectArray0);
      helpFormatter1.printUsage(printWriter1, 74, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.setLeftPadding((-3655));
      helpFormatter0.setLeftPadding((-3655));
      Options options2 = options1.addOption("", "|2g#y:})6o:U.fW", false, "B):B5#E4b]j ?o");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "B):B5#E4b]j ?o", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('X');
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "iGs#$f6QLv^Mc.)");
      optionGroup0.setSelected(option0);
      options2.getMatchingOptions("1\"%dbQM,");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "qt6w[KN,0Ob?1'*";
      helpFormatter0.defaultWidth = 1305;
      helpFormatter0.defaultLeftPad = 1305;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption("", true, "");
      options0.addOption((String) null, " | ", false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      helpFormatter0.printHelp("4!@Z$^[mG", options0, false);
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.setLeftPadding((-3655));
      helpFormatter0.setLeftPadding((-3655));
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3655), options1, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1305;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("qt6w[KN,0Ob?1'*", options0, false);
      helpFormatter0.setOptPrefix("qt6w[KN,0Ob?1'*");
      helpFormatter0.setLeftPadding(1305);
      helpFormatter0.setLeftPadding(1305);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1305;
      helpFormatter0.defaultLeftPad = 1305;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("qt6w[KN,0Ob?1'*", options0, false);
      helpFormatter0.setOptPrefix("qt6w[KN,0Ob?1'*");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1305, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("%')LtQyUdjR");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3325), "%1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "pn ";
      options0.helpOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4021, "", "", options0, "pn ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("5PC*^3z");
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1286), options0, 58, 58);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "qt6w[KN,0Ob?1'*";
      helpFormatter0.defaultWidth = 1305;
      helpFormatter0.defaultLeftPad = 1305;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("qt6w[KN,0Ob?1'*", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("qt6w[KN,0Ob?1'*");
      helpFormatter0.setLeftPadding(1305);
      helpFormatter0.setLeftPadding(1305);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "qr~m='r(rmf", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "k(oOa>/5MA}OsV+Mzu", "k(oOa>/5MA}OsV+Mzu", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      String string1 = " I";
      helpFormatter0.setNewLine(" I");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "t+z{:yY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      helpFormatter0.printHelp("Cannot add value, list full.", "<", options0, "4!@Z$^[mG");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3265, "-", "-", options1, (-1), 31, "Cannot add value, list full.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3655), "", "^+", options1, (-3655), (-2092), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "_aD]5'7?r";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "]", "]", (Options) null, 0, 0, "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-81), "!>LvIer`l=Z;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      String string1 = "!>LvIer`l=Z;";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-81), "!>LvIer`l=Z;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1305;
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.defaultLeftPad = 1305;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("qt6w[KN,0Ob?1'*", options0, false);
      helpFormatter0.setOptPrefix("qt6w[KN,0Ob?1'*");
      helpFormatter0.setLeftPadding(1305);
      helpFormatter0.setLeftPadding(1305);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("", 0, 0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6|hlL.c";
      helpFormatter0.setOptPrefix("6|hlL.c");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("K", "D5,f%de", true, "arg");
      options1.addOption((String) null, true, "Vlm9M,%L%ON_o~}]S ");
      Option option0 = null;
      try {
        option0 = new Option("--", "-", true, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 750;
      helpFormatter0.setDescPadding(750);
      String string0 = null;
      String string1 = "kf0DsXt!@^?XaMc";
      try { 
        MockURI.URI((String) null, "kf0DsXt!@^?XaMc", "&|;YS-XAMGTO[9", 750, (String) null, "\"^Ud3=jS9oVMqvP", "arg");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 2: //kf0DsXt!%40%5E%3FXaMc@&|;YS-XAMGTO[9:750?%22%5EUd3=jS9oVMqvP#arg
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.getLongOptPrefix();
      int int0 = 32;
      helpFormatter0.findWrapPos("usage: ", 32, 32);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals("", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      options0.addOption("", " ", false, "-");
      helpFormatter0.setOptPrefix("|2g#y:})6o:U.fW");
      helpFormatter0.printHelp("%?4E9LIqW@", "", options0, "", false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("|2g#y:})6o:U.fW", 74, (-2465));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")j=\"c}mY|)Q*ws");
      Options options0 = new Options();
      Option option0 = new Option("", false, "j*ed@oX$-tvBYEpD");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-1376), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      String string0 = "%')Lt\\QyUdjR\\";
      helpFormatter0.setLongOptSeparator("%')LtQyUdjR");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 793;
      helpFormatter0.createPadding(793);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object
      objectArray0[4] = (Object
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("!", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.setArgName("");
      helpFormatter0.findWrapPos("", 0, 0);
      String string0 = "sN^X/{CVy\"0=Z";
      MockFile mockFile0 = new MockFile("-", "sN^X/{CVy\"0=Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string1 = helpFormatter0.defaultArgName;
      mockPrintWriter0.append((CharSequence) "");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", "--", false, "FX|D#t%Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = (-1779);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1779), (-1779));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(4021, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "pn ", true);
      helpFormatter0.setSyntaxPrefix("pn ");
      int int0 = 1;
      String string0 = "aiI6[R@WE*$q?`3<+Fq";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "' was specified but an option from this group ", "aiI6[R@WE*$q?`3<+Fq", options0, "pn ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = "`Y6[";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`Y6[", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G>DZT7fgcL*X";
      helpFormatter0.defaultLongOptPrefix = "G>DZT7fgcL*X";
      helpFormatter0.setNewLine("00=w");
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("WD*Gb<+*wA6C8D+9i[", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'WD*Gb<+*wA6C8D+9i[' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.rtrim("[ARG...]");
      String string1 = "";
      Options options0 = new Options();
      String string2 = "zg>#0s%;u{hLz6sm7/";
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("%')LtQyUdjR");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
