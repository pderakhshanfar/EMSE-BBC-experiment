/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:39:27 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("<9");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1404, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-703);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "Cannot add value, list full.", options0, "Cannot add value, list full.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("C>9", "--", options0, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ~SMDgN", "-", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options0.addOption(option0);
      helpFormatter0.printHelp(" ", options1, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options1, 3, 1379);
      Option option0 = new Option("arg", false, "usage: ");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("E/+V+<8e9fq6d={i1g1", "E/+V+<8e9fq6d={i1g1", options2, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("9o");
      Options options0 = new Options();
      helpFormatter0.printHelp("9o", options0);
      options0.getOptions();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "9o", (Options) null, "w/r?D1 pz\"'bWaI\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1562);
      helpFormatter0.setSyntaxPrefix("'");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      helpFormatter0.setLongOptPrefix("'");
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "", (Options) null, "");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption("", true, "--");
      helpFormatter0.printHelp(" ", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 73, options2, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      helpFormatter0.printHelp(", ", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 32, "e&#PJyeg6N`kmQi", "", options0, 10, 32, "", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('=');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 18, "[ Options: [ short ", (String) null, options0, 54, 54, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[1];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('l');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "DVxW?J!+z0y)9+zU");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.format("DVxW?J!+z0y)9+zU", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, " | ", "", options0, 2, 2, "8xy(-Xy", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("80,klM=5=fwC3s", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 8, "80,klM=5=fwC3s", "", options0, 137, 8, "80,klM=5=fwC3s", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption("", true, "--");
      helpFormatter0.printHelp(" ", options1, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1394, "'", "'", options2, (-215), (-1), "v%|p{&V1keLF2^\"q4.v", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "tL{@7OKn'E*:X?`oq_");
      Options options1 = options0.addOption(option0);
      options1.addOption("u", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1711), "u", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      options1.hasOption("usage: ");
      helpFormatter0.printOptions(mockPrintWriter0, 2158, options1, 2158, 68);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("DpY", "1Z< !]T", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption("", false, "1~s4p>2<&Gj");
      helpFormatter0.printHelp("1~s4p>2<&Gj", options1, false);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1548), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Illegal option name '";
      File file0 = MockFile.createTempFile("arg", "--");
      String string1 = "x.[ViUT7AjsfM4P";
      MockFile mockFile0 = new MockFile("x.[ViUT7AjsfM4P", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "Illegal option name '";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("cD1SZ7gA", "", options1, "cD1SZ7gA", false);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "i?PnLL;[m3uZ&rN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.getNewLine();
      String string0 = "LA[>";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "\n", " ", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", false, "FyD'zBABE`M/%IC");
      Options options3 = options2.addOption("", false, "XnKK@BP+@ht;NfeJw");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1199, "CHA}GLR%i", "30zcoo", options3, 1199, 1199, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 60, 60, "");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(97, "", "tRum`pdyo y", options0, "tRum`pdyo y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "3uV{'", "m*bD*f;C]", options0, "3uV{'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "3uV{'", (String) null, options1, (-2461), 452, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-11);
      helpFormatter0.createPadding(3);
      Options options0 = new Options();
      options0.addOption("", false, "_x^rF4jhnhi");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "o{W##ntxa1Lmf9o", "]", options0, "o{W##ntxa1Lmf9o");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("TI-g2^teg>y#6{V,G", "TI-g2^teg>y#6{V,G", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
      stringBuffer1.append((Object) "");
      // Undeclared exception!
      try { 
        stringBuffer1.insert(74, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3601, (String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, 23, 3601, " A|PgLu)B3f", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultWidth = (-944);
      String string0 = " A|PgLu)B3f";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, " A|PgLu)B3f");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.getNewLine();
      String string0 = "_x^rF4hnhi";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "_x^rF4hnhi");
      helpFormatter0.printHelp("\n", options1, true);
      PrintWriter printWriter0 = null;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, ",`\"b|n?$Iu>7!:.", "_x^rF4hnhi", options1, 0, 32, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "LA[>", (Options) null, "LA[>");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "_x^rF4hnhi");
      helpFormatter0.printHelp("\n", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "", "_x^rF4hnhi", options1, 0, 32, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("80,klM=5=fwC3s", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "80,klM=5=fwC3s";
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "80,klM=5=fwC3s";
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) "arg";
      objectArray0[7] = (Object) "arg";
      objectArray0[8] = (Object) "80,klM=5=fwC3s";
      mockPrintWriter1.format("", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 0, "80,klM=5=fwC3s", "", options0, 82, 1394, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("", "@G/<},)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "gnJJ", "gnJJ", options2, 32, 2, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Q4oXAv/ZTPkUg8.");
      Options options1 = options0.addOption("", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1, false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", (String) null, options0, "org.apache.commons.cli.Util", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      options0.addOption("NO_ARGS_ALLOWED", "/7Ye Gj^Q8\"", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      options0.getOptions();
      helpFormatter0.printHelp(74, "--", "arg", options0, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "cmdLineSyntax not provided", "4L&s)-", options1, 0, 10, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2&*x+Jo4c9l");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 122, "2&*x+Jo4c9l");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[";
      Options options1 = options0.addOption("", "arg", true, "[");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options1, true);
      options1.addOption("NO_ARGS_ALLOWED", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      int int0 = (-1387);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1387), "NO_ARGS_ALLOWED", "", options2, "[ option: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(")VU,Y");
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append('(');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options2 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options2, 1, 3);
      helpFormatter1.renderWrappedText(stringBuffer1, 337, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "~v7V]BV)0", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ", ", true, "usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, true);
      Options options2 = options0.addOption("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        options2.addOption("\n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("7", false, "_x^rF4jhnhi");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_x^rF4jhnhi");
      mockPrintWriter0.print("*xhI04");
      options1.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("n-5&j(", options1, true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, (String) null);
      helpFormatter0.printHelp("1aB5(I!V)Dv", "2*", options1, "y!!Iy8X`", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.setSyntaxPrefix("q|6ikU^");
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(")VU,Y");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.setDescPadding(74);
      options0.addOption((String) null, true, "");
      helpFormatter1.printHelp(3528, "-", "--", options0, "");
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options1);
      helpFormatter1.printHelp(16, "&M3{B{C<|+%'H", "/Y7-I%S:", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(")VU,Y");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 495, options0, 3, (-2441));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "]", "--", (Options) null, "T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockFile mockFile1 = new MockFile(mockFile0, "MFuYM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "--", true, "");
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.printHelp(3836, "NO_ARGS_ALLOWED", "S_pQGNfR hZAl~[BHH", options0, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "&sA", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1006, "\n", "", options0, 74, 2, "\n");
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("w[}G`j", options0, false);
      options0.addOption((String) null, false, "w[}G`j");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("w[}G`j", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")VU,Y";
      helpFormatter1.setSyntaxPrefix(")VU,Y");
      Options options0 = new Options();
      Options options1 = new Options();
      List list0 = options1.getMatchingOptions(")VU,Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|>?N/f+^J%eCkNg8");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ")VU,Y";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) list0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "!RduB3<;q", objectArray0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "org.apache.commons.cli.HelpFormatter", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("' contains an illegal character : '");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1689), 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1161), "\n", "DVxW?J!+z0y)9+zU", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ky&@@&", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[0];
      Options options0 = new Options();
      options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0, true);
      helpFormatter0.findWrapPos("", 1053, 1053);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options0.getOption("\n");
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.setLeftPadding(32);
      String string0 = "+3c5jzdGw#Dm";
      MockPrintStream mockPrintStream0 = new MockPrintStream("+3c5jzdGw#Dm");
      mockPrintStream0.print((-41.97F));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print("cmdLineSyntax not provided");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2505;
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2505, "]?u,]a", options1);
      helpFormatter1.setDescPadding(1);
      helpFormatter1.setNewLine("arg");
      helpFormatter1.printHelp("\n", options1, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-969), "-", "-", options0, (-1), (-1), (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.getOption("arg");
      helpFormatter0.printHelp(":RkF:/r8v$L", options1, false);
      helpFormatter0.setDescPadding((-3314));
      helpFormatter0.setNewLine(",Uf<cO2}U");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("]", options0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getNewLine();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "arg", options0, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "%[[G5v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format("SI<<:*a.1Q~YA1tZ}r", objectArray0);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      helpFormatter0.printUsage(printWriter0, 74, "-", options0);
      helpFormatter0.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "/Y7-I%S:", "/Y7-I%S:", options0, "2bUd(?7Mz|8@?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options0.getOption("\n");
      helpFormatter0.printHelp("usage: ", options0, false);
      options0.hasShortOption("w6|RkvD13f%iL3r");
      helpFormatter0.setLeftPadding(32);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+3c5jzdGw#Dm");
      mockPrintStream0.print((-41.97F));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = new Options();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp(32, "cmdLineSyntax not provided", "kSO-Jg6#3!P/", options1, "-");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(63, "J{S~Rl", "", options0, " ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setSyntaxPrefix("]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W]$'YJ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.forLanguageTag("{u");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "RO_<D_LuctEB@p$U|";
      objectArray0[2] = (Object) "W]$'YJ";
      mockPrintWriter0.format(locale0, "RO_<D_LuctEB@p$U|", objectArray0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setNewLine("4lH>");
      helpFormatter0.printHelp("W]$'YJ", "W]$'YJ", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Options", false, "_x^rF4jhnhi");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", false, "arg");
      helpFormatter0.printHelp("mHhX:Nj )=jBT", options1, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      options0.getOption("\n");
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.setLeftPadding(32);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+3c5jzdGw#Dm");
      mockPrintStream0.print((-41.97F));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      helpFormatter0.printHelp("usage: ", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-629), (-629));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "rx";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "}~XgJa;,E9?!>cs^", "rx", options0, "gvuD$43");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[p=5*=.<@]zrm");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "EERsj+P]dy-i3}0e>P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("9o");
      Options options0 = new Options();
      helpFormatter0.printHelp("9o", options0);
      options0.getOptions();
      helpFormatter0.getLeftPadding();
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 24, 1, "9o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(32, " ", "", options0, " ");
      helpFormatter1.getOptPrefix();
      try { 
        MockURI.URI("", "r^@H&J'y;st}Ak", "", "-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://r^@H&J'y;st}Ak#-
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      mockPrintWriter1.format("SI<<:*a.iQHYA1tZ}r", objectArray0);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.format("SI<<:*a.1Q~YA1tZ}r", objectArray0);
      helpFormatter0.setDescPadding(2527);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'A';
      charArray0[2] = 'Q';
      charArray0[3] = '{';
      charArray0[4] = 'N';
      charArray0[5] = '6';
      charArray0[6] = '+';
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 73, "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '6';
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.printf("", objectArray0);
      charArray0[7] = '#';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) 'N', 0, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("$4UzB}eq*/S42P");
      helpFormatter0.setArgName("$4UzB}eq*/S42P");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOption("$4UzB}eq*/S42P");
      options0.getOptions();
      String string0 = "bL-aA";
      helpFormatter0.printHelp("R", "", options0, "bL-aA");
      helpFormatter0.createPadding(74);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format("SI<<:*a.1Q~YA1tZ}r", objectArray0);
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("", "--", true, (String) null);
      printWriter0.print("--");
      options0.getMatchingOptions("");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(134);
      helpFormatter0.rtrim((String) null);
      String string0 = "";
      MockPrintWriter mockPrintWriter2 = null;
      try {
        mockPrintWriter2 = new MockPrintWriter((String) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string0 = "GO2W";
      // Undeclared exception!
      helpFormatter0.printHelp("GO2W", options0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "-", options1, "0pDAb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "arg").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1285, "", "T", options0, "_AKWK81OKBXI^OnJ>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "7d++'di]WBm");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, true, (String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption(option0);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 187, (String) null, (String) null, options1, 297, (-2), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nCh`n";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-314), "88@t3yX\"", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3766;
      stringBuffer0.ensureCapacity(0);
      String string0 = " :: ";
      helpFormatter0.renderWrappedText(stringBuffer0, 3766, (-1287), " :: ");
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      // Undeclared exception!
      try { 
        stringBuffer0.insert(0, charArray0, 10, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // offset 10, len 74, str.length 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("LP8'D>k[2ogw");
      Options options1 = new Options();
      String string0 = " ]";
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("");
      int int0 = 364;
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string1 = "yHw}%)^=0e6J&hN";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "yHw}%)^=0e6J&hN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // yHw}%)^=0e6J&hN
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'A';
      charArray0[2] = 'Q';
      charArray0[3] = '{';
      charArray0[4] = 'N';
      charArray0[5] = '6';
      charArray0[6] = '+';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '6';
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.printf("", objectArray0);
      charArray0[7] = '#';
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1618), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile(">=cuN?c.n");
      String string0 = "/Am Y";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "/Am Y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // /Am Y
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding(1);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-3027), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 2078;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "Ni^?no";
      Option option0 = null;
      try {
        option0 = new Option("--", false, "Ni^?no");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultWidth = 0;
      String string0 = "-";
      helpFormatter0.defaultSyntaxPrefix = "-";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-495));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      options0.addOption("", false, "_x^rF4jhnhi");
      helpFormatter0.printHelp("arg", options0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setSyntaxPrefix("]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]", options1);
      helpFormatter0.getLeftPadding();
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "]", "f>p_BJ2d^0Bg0", options0, "T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 740;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 740, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.getOption("arg");
      helpFormatter0.printHelp(":RkF:/r8v$L", options1, false);
      helpFormatter0.setLeftPadding(31);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Oo/");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "", "Oo/", options0, 1006, (-2), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("$4UzB}eq*/S42P");
      helpFormatter0.setArgName("$4UzB}eq*/S42P");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOption("$4UzB}eq*/S42P");
      options0.getOptions();
      String string0 = "bL-aA";
      helpFormatter0.printHelp("R", "", options0, "bL-aA");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-102));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "7d++'di]WBm");
      options1.toString();
      helpFormatter0.printHelp(" | ", options0, false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.printHelp(3, "]", "arg", options0, "T");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]", options2, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2568);
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.setReadable(true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      String string0 = "w6|RkvD13f%iL3r";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(740, "org.apache.commons.cli.OptionValidator", "88@t3yX\"", options0, "org.apache.commons.cli.OptionValidator", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options0, true);
      options1.getOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 759, options1, 0, (-2355));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format("SI<<:*a.1Q~YA1tZ}r", objectArray0);
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      options0.getMatchingOptions("");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Pv-|e H6pI_lh\\0(j^";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Pv-|e H6pI_lh\u0000(j^", "", (Options) null, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getSyntaxPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp("w6|RkvD13f%iL3r", options0);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.getOption("");
      helpFormatter0.printHelp(":RkF:/r8v$L", options1, false);
      helpFormatter0.setLeftPadding(31);
      assertEquals("", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=ptj;+\"e46&~l?";
      helpFormatter0.setLongOptSeparator("=ptj;+\"e46&~l?");
      int int0 = 3293;
      helpFormatter0.setLeftPadding(3293);
      String string1 = "has already been selected: '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "e;h~Z";
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "e;h~Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.setNewLine("s.dj&V\"6D]Nj8m/5G0G");
      assertEquals("s.dj&V\"6D]Nj8m/5G0G", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 4331;
      helpFormatter0.setArgName("");
      String string0 = "ur()'ax=,J";
      try { 
        MockURI.URI("ur()'ax=,J", ">", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: ur()'ax=,J:%3E#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "   ";
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.hasLongOption("Nx=e G9a&Lr|e&4?a");
      Option option0 = null;
      try {
        option0 = new Option("s>U&TG&)DHa6", "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 's>U&TG&)DHa6' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("");
      int int0 = (-870);
      helpFormatter0.setDescPadding((-870));
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("$4UzB}eq*/S42P");
      helpFormatter0.setArgName("$4UzB}eq*/S42P");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOption("$4UzB}eq*/S42P");
      options0.getOptions();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      assertEquals("$4UzB}eq*/S42P", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("zI7Rqf'k9n>1!q3");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      assertEquals("zI7Rqf'k9n>1!q3", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLongOptSeparator("0)v 1Y.jol");
      helpFormatter0.setSyntaxPrefix("0)v 1Y.jol");
      int int0 = 9;
      helpFormatter0.findWrapPos("*73e@>B", (-1), 9);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
