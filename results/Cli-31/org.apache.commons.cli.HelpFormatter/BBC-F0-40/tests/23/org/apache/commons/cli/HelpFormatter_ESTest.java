/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:50:05 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultLongOptPrefix = "uYzmKGY/bv";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-2251));
      helpFormatter0.findWrapPos("", 1222, (-906));
      int int0 = (-3373);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("t$q~ZCx8\"", "arg", options0, "--");
      helpFormatter1.findWrapPos("usage: ", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t$q~ZCx8\"");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", " ", options0, 3, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2153, "", (String) null, options0, "v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 1910, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "uage: ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, "W n<`y5~/!0nsX");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options2, 64, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      int int0 = 487;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "-", 487, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("arg", "\n", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "Y!_Z{}MeA]AM_wCyW");
      Option option0 = new Option("_", "iBz;'V;XmV4^3(7XN#");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "-", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 15, 909, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3505, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 74;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", (String) null, options0, "--");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "\n", options0, "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      Options options0 = null;
      String string0 = ">S}%";
      String string1 = "N=RjU]G*rnsj&";
      int int0 = 1;
      String string2 = "QzHA!\"VZwWWi f%dZg";
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'s^#u", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      helpFormatter0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 575);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1572, 3, "LSIf^r-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", "", false, " ");
      Option option0 = new Option("", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, " :: ", (String) null, options0, 1, 3, "", false);
      helpFormatter0.rtrim("");
      helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 74, 1482);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "", false, " ");
      Option option0 = new Option("", "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp("<", options1, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 211;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, " ");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 713, "");
      Options options3 = options2.addOption("arg", false, "arg");
      helpFormatter0.printHelp("<", options3, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "<", "<", options3, 10, 0, "", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getOptions();
      Option option0 = new Option("arg", "-", true, " ");
      options1.addOption(option0);
      options1.addOption("", true, "usage: ");
      int int0 = 69;
      helpFormatter0.printHelp(69, " ", "@ru0[;JG7Yso]Q~^^", options1, "@ru0[;JG7Yso]Q~^^", true);
      helpFormatter0.rtrim("@ru0[;JG7Yso]Q~^^");
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "@ru0[;JG7Yso]Q~^^");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "arg");
      String string0 = "@ru0[;JG7Yso\\]Q~^^";
      options0.getOptions();
      Options options1 = new Options();
      String string1 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 42, "@ru0[;JG7Yso]Q~^^", (String) null, options1, 34, (-479), "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 44, ";0`E;QQ\"o*^c6", "rl}@Ip|vPS]LBLK'", (Options) null, 1580, 1, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((long) 3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 31, 31);
      helpFormatter0.findWrapPos("", 31, 31);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "usage: ", options0, "b=d,+>2hd}GqI=S;*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getOptions();
      Options options2 = options1.addOption("", true, "usage: ");
      helpFormatter0.printHelp(69, "c%,*n-lg')", "Sru0[;JG7Yso]Q~^^", options1, "Sru0[;JG7Yso]Q~^^", true);
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      helpFormatter0.printOptions(printWriter0, 241, options2, 69, 13);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "FUz=K MF;";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 30, 40, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.getOptions();
      options1.addOption("", true, "usage: ");
      helpFormatter0.printHelp(69, " ", "Sru0[;JG7Yso]Q~^^", options1, "Sru0[;JG7Yso]Q~^^", true);
      helpFormatter0.rtrim("Sru0[;JG7Yso]Q~^^");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.codePoints();
      helpFormatter0.renderWrappedText(stringBuffer0, 1617, 1, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("q", "|LK(F5qi!txj&Kj", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options1);
      helpFormatter0.printHelp(" ] [ long ", "8ZL~C{.4g.~pv<", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 2478, 1);
      stringBuffer1.codePoints();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3138, 63, "-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuffer1.append(stringBuffer0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2858, "usage: ", "", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.codePoints();
      helpFormatter0.renderWrappedText(stringBuffer0, 1617, 1, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "|LK(F5qi!txj&Kj";
      Option option0 = new Option("q", "|LK(F5qi!txj&Kj", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options1);
      int int0 = (-4158);
      String string1 = "";
      String string2 = "d8vno";
      // Undeclared exception!
      try { 
        options0.addOption("8ZL~C{.4g.~pv<", "#@|hROt*TCbLg@DQJ+{", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8ZL~C{.4g.~pv<' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2882);
      helpFormatter0.defaultLeftPad = (-2882);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      options0.hasLongOption("cmdLineSyntax not provided");
      options0.addOption("", (String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2882), "\n", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "1Fz";
      helpFormatter0.setOptPrefix("1Fz");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 28;
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt(245, 'a');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 13;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1617, 1, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuffer1.append((CharSequence) "--");
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 1617, "");
      helpFormatter0.findWrapPos("!e$AjFEb8mq{g'?", 13, 13);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      int int1 = 63;
      String string0 = " ";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", false, "Be=*)@>4F/b|OHZN9h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "", options0, (-3154), 74, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1417, "=]ti;ZaiTSU=v{kObDK", "=]ti;ZaiTSU=v{kObDK", options0, 1417, 13, "org.apache.commons.cli.OptionValidator", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setSyntaxPrefix("G&k]X;>3xlu)");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(7, "usage: ", (String) null, options0, "--");
      helpFormatter1.getWidth();
      helpFormatter1.setWidth(74);
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 69, "Sru0[;JG7Yso]Q~^^", "!U_'/ q", options0, (-233), 1645, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setLeftPadding(3);
      Options options0 = null;
      String string0 = "' contains an illgal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "' contains an illgal character : '", "usage: ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1417, "Cannot add value, list full.", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options0, "|6%KC2K)085;*O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 46, "\n", (String) null, options0, 37, 1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "--", "", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "' contains an illegal character : '", options0, "O}YK7R<Q}1vP,\"yJ", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "0(l x'UU&>6B J1^ca", (Options) null, 4, 7, "$mD?]|Z0os8%cU ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ".bN48";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp(69, ".bN48", " ", options1, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 69, ".bN48", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4h}$X(<Ws");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "=", options0, "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 92, 1, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, (-1031), "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      int int0 = 61;
      String string0 = "W";
      helpFormatter0.printHelp(61, "W", "has already been selected: '", options1, "org.apache.commons.cli.Util", true);
      helpFormatter0.setDescPadding(31);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      String string1 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "org.apache.commons.cli.Option");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.Option
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "usage: ", options2, "ZVFU.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ".bN48";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp(69, ".bN48", " ", options1, "", false);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1843), ";^M%e)qQv", "line.separator", options0, 110, (-859), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "D6!:6?HFdJ-M!", "usage: ", options0, "D6!:6?HFdJ-M!");
      helpFormatter1.setSyntaxPrefix("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 74;
      int int1 = 7;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "-", options0, 7, 74, (String) null, false);
      // Undeclared exception!
      try { 
        options0.addOption("-", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp(69, "line.separator", " ", options1, "", true);
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1764), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp(69, "line.separator", " ", options1, "", true);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      helpFormatter1.printHelp("\n", "", options0, "-");
      helpFormatter1.printHelp("M@W:\"=#\"',>o", options0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(0);
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 116, (Options) null, 63, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9/.A_L";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9/.A_L", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setArgName("arg");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(276);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5622), 276, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append('+');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1843), "org.apache.commons.cli.Options", ")?!23B<;~", options0, (-1843), (-1843), ")?!23B<;~", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", "", options0, "");
      StringWriter stringWriter0 = new StringWriter(4);
      options0.addOption("", true, "--");
      Options options1 = new Options();
      options1.hasLongOption("usage: ");
      helpFormatter0.printHelp(17, "line.separator", " ", options1, "", true);
      helpFormatter0.setDescPadding(69);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-19);
      helpFormatter0.setArgName("arg");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding((-19));
      helpFormatter0.getLeftPadding();
      String string0 = "$";
      String string1 = "0wTph@I`\"I-/5'5";
      MockFile mockFile0 = new MockFile("0wTph@I`\"I-/5'5", "\n");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("$", " ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L8pNXfu0o%+Jc3+XW";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setArgName("L8pNXfu0o%+Jc3+XW");
      helpFormatter0.setSyntaxPrefix("B\"=)W\"Y)$$bl");
      helpFormatter0.defaultOptPrefix = "L8pNXfu0o%+Jc3+XW";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A CloneNotSupportedException was thrown: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", "", options0, "");
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = stringWriter0.append('%');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, (String) null, "line.separator", options0, (-1843), 4, "cmdLineSyntax not provided", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp(69, "line.separator", " ", options1, "", true);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("`|\"lW");
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("`|\"lW", 1, (-2720));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("^Z5M-eg,w_<yLaA", "^Z5M-eg,w_<yLaA", options0, "^Z5M-eg,w_<yLaA", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("2g7:rEoEy)?%[\"", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(17);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Options options0 = new Options();
      String string0 = "G+>@7 VzzwNZ+{S7E?";
      helpFormatter0.printHelp("G+>@7 VzzwNZ+{S7E?", "]", options0, "");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 17, (-2790));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rpI,OfYh<:#U;", "-", (Options) null, "line.separator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(17);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2169, "");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2112, (-396), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(17);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 17, "--", "ALka", options1, (-3810), (-1338), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(17);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      locale0.getExtensionKeys();
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "--";
      int int0 = 0;
      printWriter0.format(locale0, "ZDz]]zC'aC#UL*qK", objectArray0);
      int int1 = 117;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "vXG) -W:cWbmwg9", "", options0, 117, 0, "--");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.setArgName("arg");
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.setLeftPadding((-758));
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(888, "$sxd(Db+[<6?DW", "arg", (Options) null, "?:|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("B:V?o(9pSOasrJ");
      helpFormatter0.setSyntaxPrefix("c>\"F:8m?@|6]s");
      int int0 = 1427;
      helpFormatter0.setLeftPadding(1427);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1427, "B:V?o(9pSOasrJ", "!(u`$uO<?Y[", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("--", "line.separator", options0, "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-693));
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 17;
      StringWriter stringWriter0 = new StringWriter(17);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = new Options();
      String string1 = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1338), "", "", options1, (-1338), 17, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "\n", objectArray0);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "$_J", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.setWidth(1028);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "0", (Options) null, "$_J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      Locale locale1 = Locale.CHINESE;
      mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      helpFormatter1.printUsage(printWriter0, 3, "", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-136), "F?)W6|", "", options0, 24, (-33), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L8pNXfu0o%+Jc3+XW";
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setArgName("L8pNXfu0o%+Jc3+XW");
      String string1 = "B\"=)W\"Y\\)$$bl";
      helpFormatter0.defaultOptPrefix = "L8pNXfu0o%+Jc3+XW";
      helpFormatter0.setLeftPadding(0);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "L8pNXfu0o%+Jc3+XW", "L8pNXfu0o%+Jc3+XW", (Options) null, "$sxd(Db+[<6?DW");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3622, "FUz=K MF;", "e", options0, "_H-F,Fz>!_ I");
      helpFormatter0.setWidth(888);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_H-F,Fz>!_ I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append('=');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 888, "'9sG^!^^r\";%OuV2=", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Options options0 = null;
      helpFormatter0.setSyntaxPrefix("/5Q)Aw=");
      int int0 = 518;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(518, "", "/5Q)Aw=", (Options) null, "has already been selected: '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "K\\}qtD<.y%gy8_?";
      helpFormatter0.createPadding(9);
      Options options0 = null;
      String string1 = "has already been selected: '";
      boolean boolean0 = false;
      helpFormatter0.setSyntaxPrefix(",YQ");
      int int0 = 3622;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3622, "org.apache.commons.cli.HelpFormatter$1", "K}qtD<.y%gy8_?", (Options) null, "         ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1423, (String) null, "$sxd(Db+[<6?DW", (Options) null, "$sxd(Db+[<6?DW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "Illegal option name '", "-", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      int int0 = (-1053);
      printWriter0.print(objectArray0[0]);
      int int1 = 687;
      String string0 = "A?yM^'Y-Pz.{z9oFF3|";
      helpFormatter0.printWrapped(printWriter0, 687, 687, "A?yM^'Y-Pz.{z9oFF3|");
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("", "zd:}5*BubON7y", true, "zd:}5*BubON7y");
      // Undeclared exception!
      try { 
        options0.addOption("A?yM^'Y-Pz.{z9oFF3|", "zd:}5*BubON7y", false, "zd:}5*BubON7y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A?yM^'Y-Pz.{z9oFF3|' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 81;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 63, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ]");
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3488);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(25);
      helpFormatter0.getLongOptSeparator();
      String string0 = "/sR`DC1&D5,T3>Xo0";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("/sR`DC1&D5,T3>Xo0", " ]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  ]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2937), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("j");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1999);
      helpFormatter0.setLeftPadding((-1999));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('m');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 66, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "jAkk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3161);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3288));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      String string0 = "a";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("Pu>l#UNGVmPR^!;", "arg", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Pu>l#UNGVmPR^!;' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      String string0 = "<,CHB &jK";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "<,CHB &jK";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<,CHB &jK", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2108), (-2108), "<,CHB &jK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1842);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1842), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[4] = (Object) helpFormatter0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = '~';
      charArray0[2] = ':';
      charArray0[3] = 'M';
      charArray0[4] = 'k';
      charArray0[5] = '1';
      charArray0[6] = '.';
      charArray0[7] = '{';
      charArray0[8] = 'i';
      mockPrintWriter0.print(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "9i''-5.*eg");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-11));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(485, "+g4", "usage: ", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ">";
      PrintWriter printWriter0 = null;
      int int0 = (-3945);
      helpFormatter0.setDescPadding((-4278));
      helpFormatter0.defaultArgName = ">";
      helpFormatter0.setNewLine("wb(A!}i");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-4278), (-3945), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3622, "usage: ", "e", options0, "_H-F,Fz>!_ I");
      helpFormatter0.setWidth(888);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3622, "FUz=K MF;", "e", options0, "_H-F,Fz>!_ I");
      helpFormatter0.setWidth(888);
      helpFormatter0.setNewLine(";6Xp}l}5;zJ LB&W1r");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      int int0 = 44;
      helpFormatter0.findWrapPos("", 44, 44);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3622, "e", "e", options0, "e");
      helpFormatter0.setWidth(3622);
      helpFormatter0.setNewLine("e");
      helpFormatter0.getLeftPadding();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      String string1 = "jcBy]h ZV";
      String string2 = "";
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("jcBy]h ZV", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "*Wu1xc&/M");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *Wu1xc&/M
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setArgName("\n");
      String string1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1999);
      helpFormatter0.setLeftPadding((-1999));
      helpFormatter0.rtrim("}[ve \"H#");
      StringBuffer stringBuffer0 = null;
      int int1 = 0;
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("m&&3v&:wyB +09 gq!R", "m&&3v&:wyB +09 gq!R", false, "}[ve \"H#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'm&&3v&:wyB +09 gq!R' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptPrefix();
      int int0 = 3;
      String string0 = " ]";
      String string1 = "Et_1wclB_";
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      Locale locale1 = Locale.CHINESE;
      mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      helpFormatter1.printUsage(printWriter0, 3, "", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-11));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-11), "usage: ", "usage: ", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.defaultLeftPad = 13;
      String string0 = ">-H25'^~R\"";
      helpFormatter0.setSyntaxPrefix(">-H25'^~R\"");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(0);
      int int0 = 1;
      String string0 = "' contains an illgal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "' contains an illgal character : '", "<(6h7-#q*o2", (Options) null, "<(6h7-#q*o2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      String string0 = "K\\}qtD<.y%gy8_?";
      String string1 = ",YQ";
      helpFormatter0.createPadding(0);
      Options options0 = null;
      String string2 = "has already been selected: '";
      helpFormatter0.defaultOptPrefix = "has already been selected: '";
      helpFormatter0.setSyntaxPrefix("/5Q)Aw=");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "K}qtD<.y%gy8_?", ",YQ", (Options) null, "K}qtD<.y%gy8_?", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "}.9", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      String string0 = ">";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      String string1 = " ]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption(" ", " ]", false, "XEBvhFhAD474/[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("k");
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(" ", true, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      String string1 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", ":4NC-`S'b1rCtZcM+WH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "<,CHB &jK";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<,CHB &jK", objectArray0);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2108), (-2108), "<,CHB &jK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1), (float) 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ]");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3488);
      Options options0 = new Options();
      helpFormatter0.printHelp("@+(H", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 0, 3);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        mockPrintWriter0.println((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L8pNXfu0o%+Jc3+XW";
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setArgName("L8pNXfu0o%+Jc3+XW");
      String string1 = "B\"=)W\"Y\\)$$bl";
      helpFormatter0.setSyntaxPrefix("B\"=)W\"Y)$$bl");
      String string2 = "!(u`$uO<?Y[";
      helpFormatter0.defaultOptPrefix = "!(u`$uO<?Y[";
      helpFormatter0.setLeftPadding(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "L8pNXfu0o%+Jc3+XW", "!(u`$uO<?Y[", (Options) null, "$sxd(Db+[<6?DW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = " ";
      helpFormatter0.setArgName(" ");
      PrintWriter printWriter0 = null;
      int int0 = 9;
      Options options0 = new Options();
      options0.getOption("' was specified but an option from this group ");
      Option option0 = null;
      try {
        option0 = new Option("-", "\n", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
