/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:47:13 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-872));
      helpFormatter0.defaultNewLine = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", false, "The option '");
      options1.helpOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      String string0 = "Z`1R4?DE@5xI";
      helpFormatter0.defaultLongOptPrefix = "Z`1R4?DE@5xI";
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1169);
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(604);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 604
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "' was specified but an option from this group ", "", options0, (-1), 4701, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, "~<DgK@=iusD8]");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-804);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 63, (-804), "~<DgK@=iusD8]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "--", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-804), options2, 64, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", " ");
      File file0 = MockFile.createTempFile("/1w9Z}*Uobs", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, " ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3750);
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "--", "\n", options0, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", ">", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      Option option0 = null;
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")", "org.apache.commons.cli.OptionValidator", options1, ")Z+-", false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-53));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "--", "\n", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Cannot add value, list full.", "V@`\"'!d^OS~+W\"5v", options1, "V@`\"'!d^OS~+W\"5v");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, (-2155), "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options1 = options0.addOption("", "", true, (String) null);
      Option option0 = new Option("Hl", "usage: ", true, "Y8j");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(10, "Hl", (String) null, options2, "Y8j");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "[ Options: [ short ", "[ Options: [ short ", (Options) null, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 2446, 1, "m");
      String string0 = "";
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer2, 31, 31, "");
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "arg", "-", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      helpFormatter0.defaultLeftPad = (-2);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options2, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.defaultArgName = "";
      byte[] byteArray0 = new byte[8];
      helpFormatter0.setOptPrefix("");
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)56;
      helpFormatter0.setWidth((byte) (-77));
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)27;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 628, options0, 2, (byte)12);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setSyntaxPrefix("Uzu.9");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding((byte)0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      Options options2 = options1.addOption("", true, "z'7%");
      helpFormatter1.printHelp("arg", options2);
      helpFormatter1.setDescPadding(1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.addOption("", true, "org.apache.commons.cli.ParseException");
      mockPrintWriter0.println((long) 1);
      options0.addOption("arg", true, "xD8");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "xD8", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "HtQ<q(T|rp5'E1R1R", true, "");
      Option option0 = new Option("arg", "-");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      helpFormatter0.printHelp("HtQ<q(T|rp5'E1R1R", "HtQ<q(T|rp5'E1R1R", options2, "NO_ARGS_ALLOWED", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("org.apache.commons.cli.HelpFormatter", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 97, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, 702, options1, 2033, 97);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "-", "", options0, "|An", false);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 5, (-2890));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-274));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("#]fuI$m)f.YD}%<5ORS", options0);
      helpFormatter0.setDescPadding((-564));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#]fuI$m)f.YD}%<5ORS", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "--", (String) null, options0, 2650, 2650, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 138, "");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", false, "8jn\"oA##Rc-OX0M>");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setArgName("8jn\"oA##Rc-OX0M>");
      helpFormatter0.printHelp("8jn\"oA##Rc-OX0M>", (String) null, options0, "", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "\n");
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 525;
      String string0 = "";
      String string1 = "I]";
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      Options options1 = options0.addOption("", false, "-");
      String string2 = "?.";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("?.", "-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?.' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 138, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "'", "[ option: ", options1, 2, 1922, "[ option: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2162);
      int int0 = 0;
      int int1 = 983;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 983, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setWidth((-739));
      String string0 = "P{|*uOO";
      helpFormatter0.printHelp(8, "\n", "Qv?W%", options0, "P{|*uOO");
      helpFormatter0.getDescPadding();
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Qv?W%", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "I-J2Q.W<SNyS>");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setArgName("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\"w?2<>");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(8, "\n", "Qv?W%", options0, "P(|*uOO");
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("P(|*uOO", options0);
      helpFormatter0.setDescPadding(13);
      helpFormatter0.setSyntaxPrefix("P(|*uOO");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1342, "e[d[SR`HV8EIw-m}9|^", options0);
      helpFormatter0.findWrapPos("I-J2Q.W<SNyS>", 3, 3890);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1342, "e[d[SR`HV8EIw-m}9|^", "o6C`^}T}&KUQ%;<AOx", options0, 3890, (-3800), "e[d[SR`HV8EIw-m}9|^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-8));
      helpFormatter0.getSyntaxPrefix();
      Options options0 = null;
      int int0 = 35;
      helpFormatter0.setWidth(35);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(35, " ", "usage: ", (Options) null, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "S";
      boolean boolean0 = true;
      Options options1 = options0.addOption("S", "", true, "");
      Options options2 = options1.addOption("S", true, "");
      String string1 = null;
      boolean boolean1 = true;
      options2.addOption((String) null, "usage: ", true, "-");
      helpFormatter0.printHelp("--", options0);
      int int0 = 64;
      helpFormatter0.setDescPadding(64);
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getSyntaxPrefix();
      int int1 = 3216;
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 3216, "k?.v`Mo0*f-f56;e+");
      String string2 = "cV\\d0*L";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "cVd0*L");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cVd0*L
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" :: ");
      Options options0 = new Options();
      options0.getOption("usage: ");
      Options options1 = options0.addOption("", false, " | ");
      helpFormatter0.printHelp(37, "usage: ", (String) null, options1, "");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "-", true, "I-J2Q.W<SNyS>");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setArgName("arg");
      helpFormatter0.printHelp("C<kfTB:&(l,y", "-", options0, "e[d[SR`HV8EIw-m}9|^", true);
      helpFormatter0.printHelp("C<kfTB:&(l,y", options1, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "NpgVd;72ch}-<iaGb";
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter2;
      objectArray0[1] = (Object) mockPrintWriter2;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter2.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter2, 3, "-", "arg", options0, (-2), (-3368), "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("+O0aSBE^_LZhDyU");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, "arg", " :: ", options0, 608, 74, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix("usage: ");
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options0.addOption((String) null, true, "usage: ");
      options1.helpOptions();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "=#qO)'?Wu", options3, 1, 1, "");
      helpFormatter2.getSyntaxPrefix();
      helpFormatter3.getOptionComparator();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("gI`#*", (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("+O0aSBE^_LZhDyU");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("Uvrf7g", "fzlRajB[$4H+qB ", true, "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setArgName("'");
      helpFormatter0.printHelp("--", "Uvrf7g", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding(34);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option("", "-", true, "I-J2Q.W<SNyS>");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setArgName("arg");
      helpFormatter0.printHelp("usage: ", "-", options0, "e[d[SR`HV8EIw-m}9|^", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b|N:ewM[':");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 627;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 627, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "b|N:ewM[':", options0, 3, 1, (String) null, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix("usage: ");
      Options options1 = new Options();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        options2.addOption(" 1)|cVYlF3Aq9$", false, "Ag*o,t*,%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' 1)|cVYlF3Aq9$' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.addOption("", false, "");
      helpFormatter0.defaultOptPrefix = ">";
      helpFormatter0.printHelp(452, ".ER&-`", "--", options0, (String) null);
      helpFormatter0.findWrapPos("kRah", 1345, 452);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter2.printUsage(printWriter0, 452, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("lTXq;", (-1174), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Util");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("P$/@%W9<)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) "[ARG...]";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 44, "", "P$/@%W9<)", options0, 3, 402, ",XDb<UFJzTI", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "");
      helpFormatter0.setLongOptPrefix("");
      stringBuffer1.ensureCapacity((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1147, (Options) null, 1342, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("gI`#*").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("+O0aSBE^_LZhDyU");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "+O0aSBE^_LZhDyU";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "gI`#*";
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "A CloneNotSupportedException was thrown: ";
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter1.printHelp(printWriter0, 74, "-", "usage: ", options0, 1, 1, ">", true);
      helpFormatter1.setArgName("A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1529);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      helpFormatter0.printWrapped(printWriter0, 2, 3234, "usage: ");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 804, "{%Kw%f]0%&?\"", "", options0, 1529, 3234, "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2814;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2814, "arg", "", options1, 3, 74, " 1)|cVYlF3Aq9$", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix(" ");
      helpFormatter2.setDescPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "arg", (Options) null, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1350, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer(64);
      int int0 = 1338;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1401, options0, 1401, 1338);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), 1350, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer1 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4680, (Options) null, 0, 4680);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "t*BBrFhV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "Cannot add value, list full.", true, "28-q<8{:r/xGD");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options2 = new Options();
      helpFormatter0.printHelp("28-q<8{:r/xGD", "28-q<8{:r/xGD", options2, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), (String) null, "[ Options: [ short ", options1, (-1), (-3025), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("F%o!XO2,~Qu;I[ %d");
      MockFile mockFile1 = new MockFile(mockFile0, "F%o!XO2,~Qu;I[ %d");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      options0.helpOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2814, "arg", "", options0, 3, 74, " 1)|cVYlF3Aq9$", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix(" ");
      helpFormatter2.setDescPadding(74);
      helpFormatter3.findWrapPos("x(WD<Lv", 346, 4309);
      helpFormatter0.setDescPadding(3);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions(mockPrintWriter0, (-352), (Options) null, 74, 2814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      options0.helpOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2161, options0, 31, (-1668));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      Options options0 = new Options();
      helpFormatter0.printHelp("e[d[SR`HV8EIw-m}9|^", options0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "e[d[SR`HV8EIw-m}9|^";
      objectArray0[5] = (Object) "e[d[SR`HV8EIw-m}9|^";
      mockPrintWriter0.format(locale0, "--", objectArray0);
      locale0.getExtensionKeys();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("3`", false, "?,52");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3`' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      helpFormatter0.defaultNewLine = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "", false, " ]");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup1);
      Option option0 = new Option("", " ]", false, "usage: ");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup2);
      options2.toString();
      option0.setRequired(false);
      optionGroup0.setSelected(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1350, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        options0.addOption("[ARG...]", " ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      option0.setRequired(true);
      Options options2 = options1.addOption(option0);
      String string0 = "Fs";
      Options options3 = options2.addOption("Fs", "--", true, "usage: ");
      options3.getOptions();
      option0.addValueForProcessing("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1365, "", "pB~v'``c='r; ", options3, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("+O0aSBE^_LZhDyU");
      helpFormatter0.getOptionComparator();
      int int0 = 1378;
      String string0 = helpFormatter0.createPadding(1378);
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      int int1 = 0;
      Options options0 = new Options();
      String string1 = "z}By:94|kZ^";
      stringBuffer0.replace(3, 34, "usage: ");
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "z}By:94|kZ^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1345);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = new Locale("--");
      Object[] objectArray0 = new Object[0];
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      int int0 = 4250;
      helpFormatter0.printWrapped(printWriter0, 74, 4250, "D*!");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int1 = (-4349);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options0.addOption("C^c\"w3", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'C^c\"w3' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 117, 25, "Rh$;1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1529;
      StringWriter stringWriter0 = new StringWriter(1529);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      int int1 = 3234;
      String string0 = "D*!";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 2, 3234, "D*!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      options0.helpOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.HelpFormatter$1", "]", options0, (-1), 29, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "NpgVd;72ch}-<iaGb";
      Options options1 = options0.addOption("", true, "-");
      Options options2 = options1.addOption("", " ", true, "-");
      helpFormatter0.printHelp("/3map,1", options2);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("a~t`K eKE@O");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I:IE_%y,Ro";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "I:IE_%y,Ro";
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 783, "", "hUm5", options0, (-2850), 783, "I:IE_%y,Ro");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("  ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      helpFormatter0.printHelp(971, "t*BBrFhV", "  ", options1, "t*BBrFhV");
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 971, 2180);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "B,ufkUj", "PvTIV*~[M_0JWx<fp/_", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]");
      helpFormatter0.defaultNewLine = "]";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, "", false, " ]");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("N", options1);
      helpFormatter0.setDescPadding(3);
      helpFormatter0.findWrapPos("", 33, 74);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "e[d[SR`HV8EIw-m}9|^";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[d[SR`HV8EIw-m}9|^");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("=%8F");
      Options options0 = new Options();
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      options0.hasLongOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("oqYWP*rV.u_gD~^", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "", true);
      helpFormatter1.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-8));
      helpFormatter0.getSyntaxPrefix();
      Options options0 = null;
      int int0 = 35;
      helpFormatter0.setWidth(35);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "s^+l2p$Y";
      helpFormatter0.defaultOptPrefix = "s^+l2p$Y";
      helpFormatter0.setLeftPadding(10);
      String string1 = "/)6p4";
      File file0 = MockFile.createTempFile("/)6p4", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "cWxUI7xWO");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "s^+l2p$Y");
      String string2 = "K.]N";
      String string3 = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("w3(HbUvRC", true, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'w3(HbUvRC' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      helpFormatter0.printHelp(1007, "t*BBrFhV", " | ", options1, "t*BBrFhV");
      options0.hasLongOption((String) null);
      String string0 = "oqYWP*rV.u_gD~^";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 446, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "s^+l2p$Y";
      helpFormatter0.setLeftPadding(10);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2656, "", "has already been selected: '", options0, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "NpgVd;72ch}-<iaGb";
      Options options1 = options0.addOption("", true, "-");
      Options options2 = options1.addOption("", " ", true, "-");
      helpFormatter0.printHelp("/3map,1", options2);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.findWrapPos("T[s^I89ei6jG@2KU", 1336, 729);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "oC_MR^qRvM", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "s^+l2p$Y";
      helpFormatter0.setLeftPadding(10);
      String string0 = "/)6p4";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "has already been selected: '", "\"", options0, "");
      helpFormatter0.getDescPadding();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "/)6p4", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.printHelp(10, "has already been selected: '", "-", options0, "-");
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      options0.getOptions();
      String string1 = "3S^s4";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "3S^s4", "has already been selected: '", options0, 10, 3, "has already been selected: '", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]");
      helpFormatter0.defaultNewLine = "=9_5l^5";
      MockFile mockFile1 = new MockFile(mockFile0, "=9_5l^5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "I-J2Q.W<SNyS>";
      boolean boolean0 = true;
      Option option0 = new Option("", "I-J2Q.W<SNyS>", true, "has already been selected: '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5_4sh t$G4bVJ5";
      Options options0 = new Options();
      options0.helpOptions();
      options0.helpOptions();
      helpFormatter0.printHelp(", ", "5_4sh t$G4bVJ5", options0, "Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 8, options0, (-1), (-2453));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      String string0 = "has already been selected: '";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "I:IE_%y,Ro";
      helpFormatter0.printHelp(10, "has already been selected: '", "I:IE_%y,Ro", options0, "I:IE_%y,Ro");
      helpFormatter0.getDescPadding();
      String string1 = "3){`spy\"dF@4[~";
      helpFormatter0.rtrim("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "3){`spy\"dF@4[~", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "s^+l2p$Y";
      helpFormatter0.setLeftPadding(10);
      String string0 = "/)6p4";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "has already been selected: '", "\"", options0, "");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "/)6p4", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.helpOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.printHelp(", ", "5_4sh t$G4bVJ5", options0, "Cannot add value, list full.");
      helpFormatter0.setOptPrefix("%");
      helpFormatter0.createPadding(62);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      options1.getOptionGroups();
      helpFormatter0.printHelp(1007, "t*BBrFhV", " | ", options1, "t*BBrFhV");
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 1007, 2180);
      Options options2 = new Options();
      Options options3 = new Options();
      options3.helpOptions();
      options3.helpOptions();
      helpFormatter0.printHelp("Cannot add value, list full.", " | ", options2, "t*BBrFhV");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "--";
      helpFormatter0.defaultArgName = "";
      objectArray0[1] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getDescPadding();
      String string0 = "?AXo88?&*yb2K`e";
      Options options0 = new Options();
      options0.hasShortOption("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--", options0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I:IE_%y,Ro";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "I:IE_%y,Ro";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "has already been selected: '", "I:IE_%y,Ro", options0, "I:IE_%y,Ro");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]");
      helpFormatter0.defaultNewLine = "=9_5l^5";
      MockFile mockFile1 = new MockFile(mockFile0, "=9_5l^5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "I-J2Q.W<SNyS>", true, "has already been selected: '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1332), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("XdH~vsSl;");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 460;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, (String) null);
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "-", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("  ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      helpFormatter0.printHelp(971, "t*BBrFhV", "  ", options1, "t*BBrFhV");
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 971, 2180);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("axCO8TACycFRADU[", "B,ufkUj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B,ufkUj
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = null;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("   ");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "\"T44!k?yB", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("b", true, "");
      helpFormatter0.printHelp("]", options4);
      helpFormatter0.setDescPadding(1631);
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "arg");
      options1.getOptionGroups();
      helpFormatter0.printHelp(1007, "t*BBrFhV", " | ", options1, "t*BBrFhV");
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 1007, 2180);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("axCO8TACycFRADU[", "B,ufkUj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B,ufkUj
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      helpFormatter0.printHelp(1007, "t*BBrFhV", " | ", options1, "t*BBrFhV");
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 1007, 2180);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("axCO8TACycFRADU[", "B,ufkUj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B,ufkUj
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t*BBrFhV";
      String string1 = " | ";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption(" | ");
      Options options1 = options0.addOption("arg", true, "g2:(#PMn");
      options1.getOptionGroups();
      helpFormatter0.printHelp(1007, "t*BBrFhV", " | ", options1, "t*BBrFhV");
      String string2 = "oqYWP*rV.u_gD~^";
      helpFormatter0.findWrapPos("oqYWP*rV.u_gD~^", 1007, 2180);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("axCO8TACycFRADU[", "B,ufkUj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B,ufkUj
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "I:IE_%y,Ro";
      helpFormatter0.printHelp(10, "has already been selected: '", "I:IE_%y,Ro", options0, "I:IE_%y,Ro");
      helpFormatter0.getDescPadding();
      String string1 = "3){`spy\"dF@4[~";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "3){`spy\"dF@4[~", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      String string0 = "o|";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("E#dIt3^Qg", "o|", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'E#dIt3^Qg' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 586, 74);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]");
      helpFormatter0.defaultNewLine = "=9_5l^5";
      MockFile mockFile1 = new MockFile(mockFile0, "=9_5l^5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "I-J2Q.W<SNyS>", true, "has already been selected: '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-L(69T'j", "", options1, (-728), (-1), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setLongOptPrefix("The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, (Options) null, 0, 1342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "--";
      helpFormatter0.defaultArgName = "";
      objectArray0[1] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasShortOption("-");
      String string1 = "WDb";
      helpFormatter0.printHelp("?AXo88?&*yb2K`e", "?AXo88?&*yb2K`e", options0, "WDb");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "?AXo88?&*yb2K`e");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.defaultOptPrefix = "s^+l2p$Y";
      helpFormatter0.setLeftPadding(10);
      File file0 = MockFile.createTempFile("/)6p4", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "cWxUI7xWO");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "gactG*?5V\"u ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.helpOptions();
      helpFormatter0.printHelp(", ", "5_4sh t$G4bVJ5", options0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.setDescPadding(44);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "E1=A'n/4cc");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "D;]", "D;]", options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 1;
      helpFormatter0.setDescPadding(1);
      String string1 = "r`GP&m&hg2T;";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      String string2 = "%:R#-";
      options1.hasLongOption(" ");
      // Undeclared exception!
      try { 
        options1.addOption("%:R#-", false, "%:R#-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%:R#-' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      int int0 = 0;
      String string0 = "FC+;";
      Options options0 = new Options();
      String string1 = "Qw";
      Option option0 = new Option("Qw", "", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "ZKI-r`", "FC+;", options1, 0, (-2), "}Qp7t2Z!jw>!Z!}qWd", false);
  }
}
