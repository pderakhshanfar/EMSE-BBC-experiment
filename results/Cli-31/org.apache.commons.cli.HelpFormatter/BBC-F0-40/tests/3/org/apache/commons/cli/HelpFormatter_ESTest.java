/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:38:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("line.separator", "?\nGA0i.LC)?oku[5v");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "*6:;qX!o7.s,)", false, " ");
      Option option0 = new Option("arg", "&Bt");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "&Bt", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("arg", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-522), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(15, "!&4b2RX?nBwc", "", options0, "arg");
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter1.printHelp(3, "--", "usage: ", options1, "--");
      helpFormatter0.rtrim("4'K\">.Q'");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "jh>fL(mY^!u8uF", "jh>fL(mY^!u8uF", options0, (-1278), 56, "BM:{2~$ey6IwjE(n|b");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOption("N8Xku$/[H&*oZpN4Ly");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#SO-VE,");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 880, "/F%X{T [ef");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1626);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOption("N8Xku$/[H&*oZpN4Ly");
      helpFormatter0.setSyntaxPrefix("CNl$3T{W8");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp("Io.jlp(N9AGmJ+", "-", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptions();
      helpFormatter0.createPadding(0);
      options0.addOption("", true, " ");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      String string0 = ")s";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")s");
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")s", "", options1, "z'b,Kn", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      int int0 = 2;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "TP1eb(cguWZZ#O|YZP", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2530), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("kC", "kC", false, "");
      Options options2 = options1.addOption("", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1FKn@~vW:hH-mM");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options2, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q!~]p8E@NjkE1qw#c)j");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 0, "q!~]p8E@NjkE1qw#c)j");
      helpFormatter0.printHelp(9, "Z7Ev707", "", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Z7Ev707", "Z7Ev707", options0, 32, 53, "#[AU03Mo]5A<'OSX");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.KOREAN;
      options0.addOption("arg", "", true, "__f-vYakL3;");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "zc", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-4877), options0, 99, 99);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(115);
      String string0 = "org.apache.commons.cli.Options";
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.Options", "", (Options) null, 10, 108, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "z!03/_Ro2<;J|.(o8P";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z!03/_Ro2<;J|.(o8P");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((Object) "z!03/_Ro2<;J|.(o8P");
      int int0 = 10;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 10, (Options) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "\n", true, "");
      options2.addOption("arg", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6AK`C# ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(106, "Mn7},W7(s.0S5(|0", "R", options0, "arg");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "/_5'*QS");
      helpFormatter0.printHelp(259, " ", "-", options0, "|X&t9^f");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 112, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "' contains an illegal character : '", " ", options0, "usage: ");
      helpFormatter1.printHelp(74, "E,m(Gh2rr[)Usz4", "usage: ", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "' contains an illegal character : '", " ", options0, "usage: ");
      helpFormatter0.printHelp(115, "--", "arg", options0, "' contains an illegal character : '");
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 3, 3);
      helpFormatter1.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(15, "!&4b2RX?nBwc", "", options0, "arg");
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 3, options1, 3, 3352);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      mockPrintWriter0.format(" | ", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", false, "T-^MxX,N)x");
      helpFormatter0.setSyntaxPrefix(",(DVW3+m0i%P");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 97;
      Options options1 = options0.addOption("bHmX", true, "usage: ");
      String string0 = "has already been selected: '";
      String string1 = null;
      int int1 = (-1777);
      int int2 = (-69);
      helpFormatter2.printHelp("`7AM,3w{$2-T", "org.apache.commons.cli.HelpFormatter$1", options1, "qup$t,ee*D}", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("9X!\"`0)&>,Q=LcF", "usage: ", options1, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3352, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "`5", "`5", options0, "G'P,W[:57pv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.setOptPrefix("");
      String string0 = "-n";
      helpFormatter0.setLongOptPrefix("-n");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("~('wy+Hu3[O<C");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.addOption("", true, "S-#5jpJ)V$U^|CFix");
      options0.toString();
      helpFormatter0.printHelp(">Ol=k@@qK~KQ0=Lk$", "~('wy+Hu3[O<C", options0, "");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, (String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "~('wy+Hu3[O<C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(42, "Y K%NbyAvAf[N*o~", "", options0, "Y K%NbyAvAf[N*o~");
      MockFile mockFile0 = new MockFile("\n", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 42, ", xI*vDuBtj=gzS@Ke", ", xI*vDuBtj=gzS@Ke", options0, 42, 42, "' contains an illegal character : '", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "Y K%NbyAvAf[N*o~", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      int int0 = helpFormatter1.defaultLeftPad;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", false, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(74, "[", "--", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = objectArray0[0];
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      HelpFormatter helpFormatter6 = new HelpFormatter();
      helpFormatter6.getOptPrefix();
      helpFormatter2.renderOptions((StringBuffer) null, 2241, options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("Kb1XDSV{$P.<0", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "");
      HelpFormatter helpFormatter5 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, (-1012), options0, 3, 3);
      mockPrintWriter0.append((CharSequence) stringBuffer1);
      int int0 = (-2206);
      String string0 = "8.;tu";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", true, "xI7'2q%[hn}rs-MSn ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("LZoDGTJo8O1r", "arg", true, ",");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(31, "org.apache.commons.cli.ParseException", (String) null, options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "' contains an illegal character : '", " ", options0, "");
      Option option0 = new Option("", (String) null);
      option0.setArgName("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-612), (String) null, "", options0, 73, 34, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y K%NbyAvAf[N*o~";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y K%NbyAvAf[N*o~", (String) null, (Options) null, "Y K%NbyAvAf[N*o~", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "' contains an illegal character : '", " ", options0, "--");
      helpFormatter0.printHelp(42, "[ Options: [ short ", "qup$t,ee*D}", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2958, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "CNl3T{W";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "CNl3T{W", "CNl3T{W", options0, 32, 108, "OS]^Fh<P!Lke", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format(" | ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "T-^MxX,N)x");
      helpFormatter0.setSyntaxPrefix(",(DVW3+m0i%P");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 97, "has already been selected: '", (String) null, options1, (-1777), (-69), "usage:", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Ss7!85+;~mvh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 68, "}R2v&Vp#VF!y-!o", (String) null, (Options) null, 68, (-247), ">", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.optionComparator = comparator0;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 23, options0, 74, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 664, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 189, 189, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "{vE8knU/)", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "LZoDGTJo8O1r");
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.setWidth(74);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "", "qup$t,ee*D}", options1, 3, 1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("&-}'LFx+di3fpvws<2,");
      stringBuffer0.ensureCapacity((-1));
      int int0 = 21;
      int int1 = 9;
      int int2 = 38;
      StringWriter stringWriter0 = new StringWriter(38);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "usage: ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      printWriter0.format("-", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.printWrapped(printWriter0, 74, 4375, "$_ms%5d|5");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 86, "arg", "qAEb S3LK]8/%t}Rn,7", options0, 9, 39, "", false);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ji^%MZop");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "\n");
      HelpFormatter helpFormatter5 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter5.printHelp((PrintWriter) mockPrintWriter0, 5, "F`V|hYD(]", "", options0, 1, 39, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("r3p5h3~EA!+y$G(i", (-2074), (-2074));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "qup$t,ee*D}";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commons.cli.Options", " ] [ long ", (Options) null, "eS#AYn_9k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      Object object0 = new Object();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      Object object1 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      Option option0 = new Option("arg", "bHmX", false, (String) null);
      option0.getValues();
      Options options1 = options0.addOption("i", "Illegal option name '", false, "");
      options1.addOption(option0);
      helpFormatter2.printHelp(74, "--", "--", options0, "");
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      PrintWriter printWriter0 = mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ji^%MZop");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.printUsage(printWriter0, 74, "");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "\n", "<", options0, "org.apache.commons.cli.Util", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      PrintWriter printWriter0 = mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "LZoDGTJo8O1r");
      options1.getOptionGroups();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "arg", "LZoDGTJo8O1r", options1, (-2653), (-3585), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "usage: ", "--", options0, 3, 923, "usage: ");
      int int0 = 1414;
      // Undeclared exception!
      try { 
        options0.addOption("--", "--", true, "pfUcaOq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1042));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setLongOptPrefix(";");
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptPrefix();
      int int0 = 14;
      helpFormatter0.createPadding(14);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1042));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, 3, "", (String) null, options0, 2167, 4, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4477));
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "line.separator";
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("lyl02g^| rc*K", ".aBwh0M", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "bHmX";
      objectArray0[1] = (Object) "qup$t,ee*D}";
      objectArray0[2] = (Object) "qup$t,ee*D}";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "bHmX";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = 86;
      // Undeclared exception!
      try { 
        helpFormatter3.printWrapped(printWriter0, 86, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ] [ long ";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-4648);
      helpFormatter2.defaultDescPad = 3;
      helpFormatter2.defaultWidth = 74;
      String string0 = "om#Q^$0+q~}ZZ^Hh";
      String string1 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1986), "org.apache.commons.cli.Util", "Xg:$wVN", options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.setSyntaxPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Option option0 = new Option("arg", "-");
      Options options2 = options0.addOption(option0);
      option0.setValueSeparator('W');
      helpFormatter0.printHelp(3366, "-", "arg", options2, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "?K^v%FDm", options3, " ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "zfs6f`l5.xj=RXT", "mCC+XiBBMb`J,A^", options3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "qup$t,ee*D}";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "bHmX";
      objectArray0[4] = (Object) "=+N";
      objectArray0[5] = (Object) "qup$t,ee*D}";
      objectArray0[6] = (Object) "LZoDGTJo8O1r";
      objectArray0[7] = (Object) "=+N";
      objectArray0[8] = (Object) "=+N";
      PrintWriter printWriter0 = mockPrintWriter0.format("=+N", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("Nks7iJ&~K]|");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("arg");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setWidth(3);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "WTkzQ0Q0jBj/lh3#7", "Wb7JW|S", options0, 1, (-2573), "]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter1.printHelp(25, "\n", "", options0, "lV\"PuZzDK?j;_87@&");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("%~A45ftk,H}}7i!", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, ">Ol=k@@qK~KQ0=Lk$");
      options1.toString();
      helpFormatter0.printHelp("usage: ", "org.apache.commons.cli.HelpFormatter", options1, "-");
      String string1 = "";
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 46, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, 74, 83, (String) null, true);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-4648);
      helpFormatter2.defaultDescPad = 3;
      helpFormatter2.defaultWidth = 74;
      String string0 = "om#Q^$0+q~}ZZ^Hh";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided", " ", options0, (-1185), (-1185), "Z'g91j\"V~'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "bHmX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      PrintWriter printWriter0 = mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printWrapped(printWriter0, 58, (-413), "-");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 74, "bHmX", "usage: ", options0, 3, 3, "j.+gK:", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "' contains an illegal character : '", " ", options0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ", (Options) null, ":Na");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u~]WDBO+J~ibn");
      mockPrintWriter0.print(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "b");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1076), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bHmX");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, false, "-");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "NO_ARGS_ALLOWED", "E7numb502`CXt8*V", options1, "T");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" |UF3H");
      mockPrintWriter0.write(74);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "C(WgM~W*|5/|W^?Mvd";
      mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp(279, "]", " ", options0, "arg");
      helpFormatter2.printHelp(40, "arg", "a^+d", options0, "'U&MgKFz.9W[NHc<^0", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "LZoDGTJo8O1r");
      options1.getOptionGroups();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter0.setWidth(1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1143, "arg", "org.apache.commons.cli.ParseException", options1, 1, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bHmX");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "");
      helpFormatter0.setLongOptSeparator("SE)9QCT{pxD$4.D9");
      helpFormatter0.createPadding(1150);
      helpFormatter0.setOptPrefix("SE)9QCT{pxD$4.D9");
      Options options0 = new Options();
      options0.getOption(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(63, "--", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y K%NbyAvAf[N*o~";
      Options options0 = null;
      int int0 = 105;
      Options options1 = new Options();
      Options options2 = options1.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 105, options2, (-916), 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      mockPrintWriter0.format("bHmX", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-4648), "\n", "om#Q^$0+q~}ZZ^Hh", options0, "~ j{_@@Q0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      String string0 = "--";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ">Ol=k@@qK~KQ0=Lk$");
      helpFormatter0.printHelp("--", "", options1, "-");
      File file0 = MockFile.createTempFile("arg", "");
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      helpFormatter0.setLongOptPrefix("bHmX");
      helpFormatter0.setSyntaxPrefix("LZoDGTJo8O1r");
      Options options0 = new Options();
      helpFormatter0.printHelp("bHmX", "Illegal option name '", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("AF+W.{1g", " j4kN", options0, "WzN", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      StringBuffer stringBuffer0 = new StringBuffer("0'[~nTF{e~)*o7Q'O");
      Options options0 = new Options();
      options0.getOption("(w}zw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(996, "0kYgvgdSg)", "Ez8@gY*C", options0, "");
      helpFormatter0.printHelp("(w}zw", options0, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "bHmX";
      objectArray0[5] = (Object) "LZoDGTJo8O1r";
      mockPrintWriter0.format("LZoDGTJo8O1r", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "LZoDGTJo8O1r");
      options1.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-867);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-867), options1, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y K%NbyAvAf[N*o~";
      Options options0 = null;
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-250), "\"K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "qup$t,ee*D}";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1164, 1164, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qup$t,ee*D}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bHmX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LZoDGTJo8O1r";
      objectArray0[3] = (Object) helpFormatter0;
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1868), "", "bHmX", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("6Z`rJ0Fle6.Z$Et");
      helpFormatter0.renderWrappedText(stringBuffer0, 576, (-2516), "");
      helpFormatter0.setLongOptPrefix("6Z`rJ0Fle6.Z$Et");
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      helpFormatter1.setWidth(44);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = new Locale("ob\"nJ");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "6Z`rJ0Fle6.Z$Et";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 44, 1164, "--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-940), "", "6Z`rJ0Fle6.Z$Et", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bHmX");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("oO7.x9");
      helpFormatter0.setWidth(0);
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, helpFormatter0.defaultWidth);
      
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2139), "a?E0/bC3DeGOQ9w@U&o", "a?E0/bC3DeGOQ9w@U&o", options0, "a?E0/bC3DeGOQ9w@U&o");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.setOptPrefix("line.separator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "e*~pc";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-241), options0, 31, (-241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bHmX");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("oO7.x9");
      helpFormatter0.setWidth(0);
      helpFormatter1.printHelp("]", options1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "C(WgM~W*|5/|W^?Mvd";
      String string0 = "T4NXiH>RcrjNN";
      StringBuffer stringBuffer0 = new StringBuffer("0'[~nTF{e~)*o7Q'O");
      helpFormatter0.renderWrappedText(stringBuffer0, 2479, 2479, "");
      helpFormatter0.setLongOptPrefix("T4NXiH>RcrjNN");
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "T4NXiH>RcrjNN", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y K%NbyAvAf[N*o~", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", true, "arg");
      options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("52gPL=b|%g[aa+Bh");
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("x2<LN:~Gv(b<;K0:h", "`/t;db=Mo)rR");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // `/t;db=Mo)rR
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine("ldekEp.){pV");
      helpFormatter0.setOptPrefix("                               ");
      int int0 = 2722;
      helpFormatter0.createPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y K%NbyAvAf[N*o~";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "0_BrWnwaEs", "Y K%NbyAvAf[N*o~", (Options) null, "Y K%NbyAvAf[N*o~");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y K%NbyAvAf[N*o~", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=Lcx,b6PLy?0[+ds+";
      helpFormatter0.setNewLine("=Lcx,b6PLy?0[+ds+");
      helpFormatter0.setLongOptPrefix("=Lcx,b6PLy?0[+ds+");
      int int0 = (-5389);
      String string1 = "TPCEyc5mu5b";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1693), (-5389), "TPCEyc5mu5b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "=Lcx,b6PLy?0[+ds+";
      helpFormatter0.setNewLine("=Lcx,b6PLy?0[+ds+");
      helpFormatter0.setLongOptPrefix("=Lcx,b6PLy?0[+ds+");
      int int0 = (-1693);
      String string1 = "TPCEyc5mu5b";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1693), (-5389), "TPCEyc5mu5b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("BY7W]^MC:!jK9or<!z^");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("BY7W]^MC:!jK9or<!z^", helpFormatter0.getArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine("ldekEp.){pV");
      helpFormatter0.setOptPrefix("                               ");
      int int0 = 2722;
      Options options0 = null;
      helpFormatter0.createPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      helpFormatter0.getOptionComparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "52gPL=b|%g[aa+Bh", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      option0.setDescription("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, (String) null, "usage: ", options3, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "C(WgM~W*|5/|W^?Mvd";
      StringBuffer stringBuffer0 = new StringBuffer("0'[~nTF{e~)*o7Q'O");
      helpFormatter0.renderWrappedText(stringBuffer0, 2479, 2479, "");
      helpFormatter0.setLongOptPrefix("T4NXiH>RcrjNN");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setWidth(0);
      assertEquals("T4NXiH>RcrjNN", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("6Z`rJ0Fle6.Z$Et");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2516), 1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), (-2), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("", 13, 74);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("--", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptPrefix("|%v\"a@j4");
      helpFormatter0.setWidth(3753);
      helpFormatter0.setSyntaxPrefix("T]8-B/y");
      assertEquals("T]8-B/y", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ORPmYQ\"q[";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "ORPmYQ\"q[", "Pi0LO^8apa&", (Options) null, "Pi0LO^8apa&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options1.addOption(" ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PrintWriter printWriter0 = null;
      int int0 = 4049;
      String string0 = "dAF%?S+";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bHmX");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "-");
      Option option0 = new Option("arg", "org.apache.commons.cli.ParseException", false, "bHmX");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "&\"W", "", options3, 3014, (-1), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "|\"W`uNe";
      helpFormatter0.setLongOptSeparator("rIb5#Vj\"O");
      assertEquals("rIb5#Vj\"O", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w*.";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w*.");
      int int0 = 44;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.setLeftPadding(1);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 916;
      helpFormatter0.createPadding(916);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "C(WgM~W*|5/|W^?Mvd";
      StringBuffer stringBuffer0 = new StringBuffer("0'[~nTF{e~)*o7Q'O");
      helpFormatter0.renderWrappedText(stringBuffer0, 2479, 2479, "");
      helpFormatter0.setLongOptPrefix("C(WgM~W*|5/|W^?Mvd");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setDescPadding(2479);
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(2479, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setNewLine((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = "kvA/-Go/x=J7<R\\/^";
      helpFormatter0.defaultNewLine = "kvA/-Go/x=J7<R/^";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasLongOption(" ");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("JeS0,Q{}yW09XFZ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'JeS0,Q{}yW09XFZ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.setLongOptPrefix("usage: ");
      String string1 = "[ARG...]";
      String string2 = "G)?bms";
      Options options0 = new Options();
      String string3 = "ofX17Els2=,b}";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("ofX17Els2=,b}", "-", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ofX17Els2=,b}' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("YiRl");
      try { 
        MockURI.URI("--", "--", "=i3S11wk51yf^$'kc:", "YiRl");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: --://--=i3S11wk51yf%5E$'kc:#YiRl
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\D-?";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
