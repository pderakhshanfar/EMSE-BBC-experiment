/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setOptPrefix("o ih<x/Djm!pO%Po");
      helpFormatter0.renderWrappedText(stringBuffer0, 55, 55, "o ih<x/Djm!pO%Po");
      helpFormatter0.findWrapPos("o ih<x/Djm!pO%Po", 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^3|LVU.[qB S8!K)";
      MockPrintStream mockPrintStream0 = new MockPrintStream("^3|LVU.[qB S8!K)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "^3|LVU.[qB S8!K)");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "^w(} ", false, " ");
      optionGroup0.addOption(option1);
      optionGroup1.setRequired(false);
      options0.addOptionGroup(optionGroup1);
      Option option2 = new Option("", false, "");
      options0.addOption(option2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(1506);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1506, "arg", "URG!kl{", options0, 1506, 1966, "URG!kl{");
      helpFormatter0.rtrim("URG!kl{");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("L(Jl;)uiA/@]D->S2(", "arg", options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 73, 1966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", false, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 92, "4tWAv", "D", options2, 0, 92, "--", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 92, "--");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 92, (-792), "o h<x/Dj}!wO%Po");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "4tWAv", "o h<x/Dj}!wO%Po", options0, "o h<x/Dj}!wO%Po", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MBz i12_[";
      helpFormatter0.setWidth(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("-", "MBz i12_[", "--");
      mockPrintWriter0.checkError();
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      Options options0 = null;
      int int0 = 10;
      locale0.getUnicodeLocaleKeys();
      String string1 = "GW";
      String string2 = "";
      String string3 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "MBz i12_[", (Options) null, "GW", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1011);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R+J", "R+J", options0, "U1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MBz i12_[";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("-", "MBz i12_[", "--");
      mockPrintWriter0.checkError();
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      Options options0 = null;
      int int1 = 10;
      locale0.getUnicodeLocaleKeys();
      String string1 = "GW";
      String string2 = "";
      String string3 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      helpFormatter0.printHelp("--", "MBz i12_[", (Options) null, "GW", false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getNewLine();
      helpFormatter0.defaultSyntaxPrefix = "\n";
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1145), (-1145), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "X|Bs(", (String) null, (Options) null, 64, 64, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1865);
      helpFormatter0.getLeftPadding();
      MockFile.createTempFile("usage: ", "Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 118, 1, "Q");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(641, "f", "Q", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2944);
      String string0 = "Kw";
      String string1 = ";~}Hw407J2f";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2944), "Kw", ";~}Hw407J2f", (Options) null, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setNewLine("MBz i12_[");
      helpFormatter0.defaultWidth = (-1927);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.setWritable(false, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "jL8HWa[cqgpa%^afR1P", true, "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "jL8HWa[cqgpa%^afR1P", "Cannot add value, list full.", options2, 51, 332, "", true);
      helpFormatter0.printHelp("Cannot add value, list full.", (String) null, options2, "jL8HWa[cqgpa%^afR1P");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.setWritable(true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "jL8HWa[cqgpa%^afR1P", true, "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "jL8HWa[cqgpa%^afR1P", "Cannot add value, list full.", options2, 51, 332, "", false);
      helpFormatter0.printHelp("Cannot add value, list full.", (String) null, options2, "u`");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.toURI();
      mockFile0.setWritable(true, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-332);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-332), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options2.addOption("arg", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 51, "4tWAv", "", options0, 0, 332, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 1742;
      helpFormatter0.defaultLeftPad = 1742;
      helpFormatter0.setLongOptPrefix("iE\"Fz@ky(&TIE?c.-w");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      int int1 = 4;
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt(16, '-');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("S", false, "S");
      options0.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("M%B", "`4p?95-g", options1, "yr$RE*8i#O 5:>&'y");
      helpFormatter0.rtrim("S9^12BitJSVc?");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "--";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "+AT";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, (String) null, options0, 0, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1865);
      helpFormatter0.getLeftPadding();
      MockFile.createTempFile("usage: ", "Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 118, 1, "Q");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options2.addOption("arg", false, "");
      int int0 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 51, "4tWAv", "", options2, 0, 332, " | ", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 51, "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 13);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", false, "");
      options0.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("x B", "`4p?95-g", options1, "yr$RE*8i#O 5:>&'y");
      helpFormatter0.rtrim("S9^12BitJSVc?");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-824), "ejzLyS <`p}NjzG,:hH");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      mockFile0.setWritable(false, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", false, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options2.addOption("arg", false, "");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options3, 332, 44);
      helpFormatter0.renderWrappedText(stringBuffer1, 332, 19, "+$_Hh*e@KP4]Rr1Yj(");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 11, options0, 2, 1723);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding((-2732));
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`Sw6#^F_6@f");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`Sw6#^F_6@f", "nVL/ykfv6Q_", options2, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      PrintWriter printWriter0 = null;
      int int0 = 331;
      String string0 = "T D^]UF86:gq47@";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      String string1 = null;
      mockFile0.delete();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 331, "T D^]UF86:gq47@", "T D^]UF86:gq47@", options1, 331, 1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(43, "&1{h%CM]U", "&1{h%CM]U", (Options) null, "QC)5ef_2^*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setWidth(19);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.rtrim(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = new Options();
      options1.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      mockPrintStream0.println((long) 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2244, "\n");
      helpFormatter1.getLongOptPrefix();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "--", false, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 13, " ", "~ku:X,!#^ac}", options3, 1283, 325, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("Cannot add value, list full.", "~ku:X,!#^ac}", options0, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      Options options0 = null;
      String string0 = "4tWAv";
      int int0 = (-1265);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "4tWAv", "MBz i12_[", (Options) null, 0, (-1265), "", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 331, "T D^]UF86:gq47@", "T D^]UF86:gq47@", options1, 331, 1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("MBz i12_[", (Object[]) null);
      helpFormatter1.rtrim(" ");
      helpFormatter0.printWrapped(printWriter0, 74, ";sI\"/[");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1986, "-", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1076, options1, 0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "-");
      option0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      mockPrintWriter0.println("arg");
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.printWrapped(printWriter0, 2, " ");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      mockPrintWriter0.printf(locale0, "A CloneNotSupportedException was thrown: ", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.rtrim(" \"CJ=xx+NLf700|gV");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2244, "\n");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(323);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options1 = options0.addOption("", "arg", true, (String) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      String string1 = "RP~Cd";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "<", "RP~Cd", options1, (-800), 3, "UfmC-8pS/pi9(Ce2}3", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", true, "-");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 51, "4tWAv", "", options1, 0, 332, " | ", false);
      helpFormatter0.printHelp(" | ", (String) null, options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(51, (String) null, "", options0, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "--";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      String string1 = "+AT";
      Options options2 = options1.addOption("", "+AT", false, "arg");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2244, "4tWAv", "@5-tM5ZBL", options2, (-800), 332, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      helpFormatter0.getOptPrefix();
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-2947), "MBz i12_[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      mockPrintWriter0.printf("i-;[E#", (Object[]) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 301, "|3\"y5y$[");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " [ARG]");
      helpFormatter0.defaultOptPrefix = "HhNCoa(";
      Options options0 = new Options();
      helpFormatter0.printHelp("HhNCoa(", "ivS>519O!", options0, "ivS>519O!", false);
      helpFormatter0.defaultSyntaxPrefix = "]";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "";
      int int0 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 51, "4tWAv", "", options2, 0, 332, " | ", false);
      String string1 = null;
      helpFormatter0.printHelp(" | ", (String) null, options2, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(51, (String) null, "", options0, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", " ");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      mockPrintStream0.write(3);
      Options options0 = new Options();
      options0.addOption("arg", "", false, "*XoO4;1!:");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.printHelp("]oFe9vJCH|2T", "jL8HWa[cqgpa%^afR1P", options0, "${>b}R(kn<7");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 1039, 74, "MBz i12_[");
      Options options1 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", " ");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      mockPrintStream0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.write(3);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String string0 = "AU(FZ_*{'G";
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      mockFile0.setWritable(false, true);
      Options options0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Cannot add value, list full.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d#y");
      StringBuffer stringBuffer0 = new StringBuffer(44);
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "Cannot add value, list full.");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "d8=", "cmdLineSyntax not provided", (Options) null, "}E=eslf?BI%QG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "jL8HWa[cqgpa%^afR1P", true, "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "jL8HWa[cqgpa%^afR1P", "Cannot add value, list full.", options2, 51, 332, "4tWAv", false);
      helpFormatter0.printHelp("Cannot add value, list full.", (String) null, options2, "X|Bs(");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("i-;[E#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Cannot add value, list full.", "", (Options) null, 442, 442, "8<d/$?>U\"YyRQG%?");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", " ");
      mockFile0.getAbsoluteFile();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.printf("Y>zj5FS<lcphIp", (Object[]) null);
      helpFormatter0.rtrim("XiA");
      mockPrintWriter0.println();
      helpFormatter0.printWrapped(printWriter0, 1149, "Y>zj5FS<lcphIp");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "cmdLineSyntax not provided", options0, "XiA", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setWidth(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("i-;[E#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      Locale.forLanguageTag("*8EMY(P]*R");
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      MockFile mockFile0 = new MockFile("Illegal option name '", "--");
      mockFile0.setWritable(false, true);
      helpFormatter0.setSyntaxPrefix("ZBxd");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "Cannot add value, list full.", (Options) null, "ZBxd");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "jL8HWa[cqgpa%^afR1P", true, "");
      helpFormatter0.printHelp(13, "Cannot add value, list full.", (String) null, options2, "AU(FZ_*{'G");
      helpFormatter0.setSyntaxPrefix("o*.`,${CIPN8*;*");
      helpFormatter0.printHelp("bjF8&O#", (String) null, options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "jL8HWa[cqgpa%^afR1P";
      objectArray0[2] = (Object) "Cannot add value, list full.";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "jL8HWa[cqgpa%^afR1P";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 13, (-1380), "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(323);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "                                                                                                                                                                                                                                                                                                                                   ";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf((Locale) null, "                                                                                                                                                                                                                                                                                                                                   ", objectArray0);
      Options options0 = new Options();
      MockFile mockFile1 = new MockFile("-", "\n");
      mockFile0.setWritable(false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "Cannot add value, list full.", "XHGJh&&yCP", options0, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      MockFile mockFile0 = new MockFile("--", "Cannot add value, list full.");
      mockFile0.setWritable(false, true);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ")QhR", (Options) null, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("i-;[E#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      MockFile mockFile0 = new MockFile("Illegal option name '", "--");
      mockFile0.setWritable(false, true);
      helpFormatter0.setSyntaxPrefix("ZBxd");
      // Undeclared exception!
      helpFormatter0.printHelp("   ", "Cannot add value, list full.", (Options) null, "ZBxd");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      Options options0 = null;
      printWriter0.write(74);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "\n", (Object[]) null);
      String string0 = null;
      Options options1 = null;
      int int0 = 4;
      String string1 = "Trth70";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 16, (String) null, "Trth70", (Options) null, 0, 3585, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "AUFZ_*{'G";
      PrintWriter printWriter0 = mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      Options options0 = null;
      String string1 = "UaI:;rE";
      int int0 = (-360);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4384, "UaI:;rE", "AUFZ_*{'G", (Options) null, 1366, (-360), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 323;
      helpFormatter0.createPadding(323);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "                                                                                                                                                                                                                                                                                                                                   ";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "                                                                                                                                                                                                                                                                                                                                   ", objectArray0);
      Options options0 = new Options();
      String string0 = "On)Fa";
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "On)Fa", false, ">^tN");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption(option0);
      String string1 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 323, "                                                                                                                                                                                                                                                                                                                                   ", "usage: ", options2, (-1), (-1640), "@l#N77]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      MockFile mockFile0 = new MockFile("--", "Cannot add value, list full.");
      mockFile0.setWritable(false, true);
      helpFormatter0.setSyntaxPrefix("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+6GUw'e]Xcf(=1", "arg", (Options) null, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = null;
      int int0 = 44;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">nqx", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&62");
      mockPrintWriter0.printf("-", (Object[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options0 = null;
      int int0 = 64;
      int int1 = 54;
      String string1 = "lq,D)t7By.'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MBz i12_[";
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("-", "MBz i12_[", "--");
      mockPrintWriter0.checkError();
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      Options options0 = null;
      int int0 = 10;
      String string1 = "GW";
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.Option", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.createNewFile();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", false, "");
      Options options1 = options0.addOption(option1);
      String string0 = "{vL?\"w";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3223), "{vL?\"w", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4126), "org.apache.commons.cli.HelpFormatter$1", (String) null, options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 77;
      helpFormatter0.setNewLine("_\"yDcag)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.rtrim(":j:-p*PJ6&m]<%");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, "]Aa*:/g^1Hnqj)!FA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("i-;[E#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      locale0.getDisplayScript();
      Locale.getISOCountries();
      helpFormatter0.printWrapped(printWriter0, 56, 0, "*H4&");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"d", "\"d", (Options) null, "f#~", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      Options options0 = null;
      MockFile mockFile0 = new MockFile(" ", "V-sw/bL$pX?@e");
      mockFile0.setWritable(false, false);
      String string0 = "";
      String string1 = "|";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "|", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.createNewFile();
      mockFile0.setWritable(true, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "", "", options0, 51, (-1091), "6b60d", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("ddQ2cE~M8[!A^>", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false);
      mockFile0.setReadable(false, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "", "", options0, 3, (-103), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      String string0 = "AU(FZ_*{'G";
      mockPrintWriter0.format("AU(FZ_*{'G", (Object[]) null);
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "Cannot add value, list full.");
      mockFile0.setWritable(false, true);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "d8w=", "cmdLineSyntax not provided", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(323);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "                                                                                                                                                                                                                                                                                                                                   ";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "                                                                                                                                                                                                                                                                                                                                   ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "On)Fa", false, ">^tN");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printOptions(printWriter0, 323, options2, 74, 1);
      StringWriter stringWriter0 = new StringWriter(2167);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3306), options2, 1460, 313);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      String string0 = "f(7obsM?[J_Ey";
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f(7obsM?[J_Ey", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.write("");
      mockPrintWriter0.println("usage: ");
      stringWriter0.flush();
      mockPrintWriter0.format("usage: ", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, (Options) null, 2326, 6177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("XH.B5y=[jJ", "");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2864, "");
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("x!UZD8[%?_%2~{&|e'5");
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "@@znkXzAQ,%/s_", "\n", options0, 3, 1, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "AUFZ_*{'G", " | ", (Options) null, 0, 332, "X|Bs(", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MBz i12_[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("arg");
      locale0.getDisplayVariant();
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      helpFormatter0.getOptPrefix();
      Locale.getISOCountries();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2947), " &8g)i+", "", (Options) null, (-484), (-2947), " &8g)i+", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      String string0 = "[{>69:GEQ <$fqV%";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setArgName("[{>69:GEQ <$fqV%");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, "oYMz&rAMk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 77;
      helpFormatter0.setNewLine("_\"yDcag)");
      String string0 = "The option '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      helpFormatter0.rtrim("=");
      helpFormatter0.getDescPadding();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "XH.B5y=[jJ";
      String string1 = "";
      MockFile mockFile0 = new MockFile("XH.B5y=[jJ", "");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockFile0.setWritable(true, true);
      mockPrintWriter0.write(3);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6179, "usage: ", "XH.B5y=[jJ", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 429, 429, "org.apache.commons.cli.ParseException");
      helpFormatter0.setLongOptSeparator("10|Vc?dwq");
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.defaultWidth = 1385;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "");
      helpFormatter0.setLeftPadding(1385);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      String string1 = null;
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "{6y", false, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      String string0 = "The option '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      mockPrintWriter0.print('B');
      mockPrintWriter0.printf(" ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "The option '");
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 31, options2, 322, (-2152));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.defaultOptPrefix = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp(" a<)Ssq\"|", options0);
      // Undeclared exception!
      try { 
        options0.addOption("@||v1@", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@||v1@' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 26, "AUFZ_*{'G", " | ", (Options) null, 0, 332, "X|Bs(", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "XH.B5y=[jJ");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockFile0.setWritable(true, true);
      mockPrintStream0.write(3);
      mockPrintWriter0.write(2);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "arg", (Object[]) null);
      String string0 = null;
      Options options0 = null;
      String string1 = "";
      int int0 = 7;
      String string2 = "8<d/$?>U\"YyRQG%?";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 6179, "XH.B5y=[jJ", "", (Options) null, 7, 6179, "8<d/$?>U\"YyRQG%?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      String string0 = "ddQ2cE~M8[!A^>";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string1 = " :: ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " :: ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("%[;Vj{j=~:_pC%b-A");
      String string0 = "The option '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.printf("--", (Object[]) null);
      int int0 = 0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = " [ARG]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "line.separator";
      String string2 = "NO_ARGS_ALLOWED";
      Option option0 = new Option("NO_ARGS_ALLOWED", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.toString();
      String string3 = "cmdLineSyntax not provided";
      options0.hasLongOption("{bA7`[");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", " [ARG]", options0, "{bA7`[");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G+R;:JM~nY59FqY?w";
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "rgAzX:`IEt>mq7";
      String string1 = "GCK-n[S^L?[+\"pq~h,4";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("rgAzX:`IEt>mq7", "GCK-n[S^L?[+\"pq~h,4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // GCK-n[S^L?[+\"pq~h,4
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1865);
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("usage: ", "Q");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-3826);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3826), (-3826), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.format("AUFZ_*{'G", (Object[]) null);
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "Cannot add value, list full.");
      mockFile0.setWritable(false, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("AUFZ_*{'G");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("arg", "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A CloneNotSupportedException was thrown: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", " ] [ long ", false, "--");
      Option option0 = null;
      try {
        option0 = new Option(" ] [ long ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-1473);
      helpFormatter0.setLeftPadding((-1473));
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1473));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-23);
      byteArrayOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      options2.addOption("", false, (String) null);
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 0, options2, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "HhNCoa(";
      helpFormatter0.defaultSyntaxPrefix = "]";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "org.apache.commons.cli.ParseException";
      helpFormatter0.renderWrappedText(stringBuffer0, 429, 429, "org.apache.commons.cli.ParseException");
      helpFormatter0.setLongOptSeparator("10|Vc?dwq");
      String string1 = "";
      File file0 = MockFile.createTempFile("usage: ", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", " ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      String string0 = "The option '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      String string0 = "[{>69:GEQ <$fqV%";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setArgName("[{>69:GEQ <$fqV%");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "oYMz&rAMk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("ddQ2cE~M8[!A^>", options0, true);
      helpFormatter0.setSyntaxPrefix("f(7obsM?[J_Ey");
      helpFormatter0.printHelp("il=}v", options0);
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 2864;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2864, "f(7obsM?[J_Ey");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{{t+%m`Br3?6");
      mockPrintWriter0.print((float) 74);
      String string0 = "";
      Options options0 = new Options();
      int int0 = 4495;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1874, "", "", options0, 4495, 1874, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      String string1 = "";
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ] [ long ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-436);
      Options options0 = new Options();
      int int1 = 2158;
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "arg", 2603, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2603, end 74, s.length() 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("I,$ab8JGrNc:MpD-", (-2429), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3296;
      helpFormatter0.setDescPadding(3296);
      String string0 = ":@";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('1');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "-", 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "]", " | ", (Options) null, 0, 2077, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "#[g#6tZ.}58G?_@";
      helpFormatter0.setLeftPadding((-1022));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix((String) null);
      assertEquals((-1022), helpFormatter0.defaultLeftPad);
  }
}
