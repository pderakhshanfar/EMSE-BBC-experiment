/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:31:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("0K", "", true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("h", "arg");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "h", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("-", 1, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("W");
      helpFormatter1.printHelp("usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding((-1125));
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("--", "\n", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 3116;
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'q';
      charArray0[2] = '\"';
      charArray0[3] = 'b';
      charArray0[4] = '3';
      charArray0[5] = 's';
      charArray0[6] = 'G';
      charArray0[7] = '*';
      charArray0[8] = '6';
      stringBuffer0.append(charArray0);
      helpFormatter0.createPadding(4762);
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 3116, options0, 4762, 4762);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Option option1 = new Option("", "[ARG...]");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "`{k c");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("PQ!3n6ca|:zx|P|XX^");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option((String) null, false, "\n");
      options0.addOption(option0);
      int int0 = (-2495);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.Util");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (-2495), options0, 5352, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, "PDy", (Options) null, "`#^V1m7us");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 3116, 2195);
      // Undeclared exception!
      helpFormatter0.createPadding(2195);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2230);
      helpFormatter0.defaultNewLine = "OTGN}|2D";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("OTGN}|2D");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("[ARG...]");
      helpFormatter0.rtrim("[ARG...]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("qx3o=arg5L&e");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 33, 33, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(30, "lEGpDK-K!/m,,l2j", "lEGpDK-K!/m,,l2j", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setLeftPadding((-1686));
      helpFormatter0.setOptPrefix("CdW> _M");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-971);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      String string0 = "org.apache.commons.cli.Util";
      options1.addOption("xKdr6PtDm4JB", false, "org.apache.commons.cli.Util");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(" ] [ long ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      options1.addOption("", "|:l]v!C&}*y<wPx0L", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-124), "|:l]v!C&}*y<wPx0L", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(32);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 32, (-1893), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.setLeftPadding((-215));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#lW?]E/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#lW?]E/", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "\n", false, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Cannot add value, list full.", options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2320, "[>!J\"c", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "' contains an illegal character : '";
      helpFormatter0.setDescPadding((-52));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.findWrapPos(" ", 0, 0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, " ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, " ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("{2'q", options1, true);
      MockFile mockFile0 = new MockFile("dP5yhfvCK|r+7!IJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('*');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.write(931);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 132, "dP5yhfvCK|r+7!IJ", options1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "~5CH");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.hasOption("-");
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("{2'q", options0, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("'", "usage: ", options0, "usage: ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      boolean boolean0 = false;
      options0.addOption((String) null, false, "\n");
      int int0 = 9;
      String string0 = " :: ";
      // Undeclared exception!
      try { 
        helpFormatter4.printOptions(mockPrintWriter0, (-1), options0, 186, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 73, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1401), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.rtrim(";4og");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "   ";
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, ">ey)^h4B|z~)g26W-@");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", false, "p+'<$?,th>%");
      helpFormatter0.printHelp("   ", options0, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "lEGpDK-K!/m,,l2j", "lEGpDK-K!/m,,l2j", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 74, (-49));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "   ";
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, ">ey)^h4B|z~)g26W-@");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("   ", options0, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "org.apache.commons.cli.HelpFormatter", false, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "17";
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 2692);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "#<'Tf=C", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      helpFormatter0.printHelp("/8lu,,^", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1005), 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 1, options0, 74, 1);
      // Undeclared exception!
      try { 
        options0.addOption("-", "Y", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(786, "", "./c[c*iWPM", options1, "R1T\"lHNtp(yT=3x=V", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(948, " ", "-", options0, "");
      helpFormatter1.printHelp("--", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2834, 1122);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 3;
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Qt4.dVg+gO*zhM`tR.", options1, "Qt4.dVg+gO*zhM`tR.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1563, "4s9jc", "usage: ", options0, "dK=Ct~qi-{_%k");
      options0.addOption((String) null, "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      helpFormatter1.printHelp("-", options1, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("\n", "", options0, "");
      helpFormatter2.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("0-jy*8fes(d", false, "]YJt$306S0K;oa@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0-jy*8fes(d' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "");
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "w l31j0 xq,N'5'?'");
      String string1 = "";
      // Undeclared exception!
      try { 
        options1.addOption("3!lGZO+\"5NF", "", false, "3!lGZO+\"5NF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3!lGZO+\"5NF' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 17, "A CloneNotSupportedException was thrown: ");
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String string0 = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 17, "");
      helpFormatter0.getDescPadding();
      int int0 = (-1248);
      String string1 = "arg";
      Options options0 = new Options();
      String string2 = "--";
      Option option0 = null;
      try {
        option0 = new Option("\n", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, " ", (String) null, options0, 9, 9, "--", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 223, "r&NBed\"tP@wE@5\"f", "usage: ", options0, 58, (-4519), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "-", options0, "usage: ");
      // Undeclared exception!
      try { 
        options0.addOption(" ", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 11, "\n", "-", options0, 32, 1, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "", options0, 58, 74, "r&NBed\"tP@wE@5\"f", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "Q%[z:i}=g\"Vm2XloPb", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "c:9Jd,F.", options0, 914, 74, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 2418, 1926, "_#r");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "\n", "-", options0, 32, 1, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "", options0, 58, 74, "r&NBed\"tP@wE@5\"f", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.setLongOptPrefix("Lqk<Dw|vhm3@kBQj,0.");
      helpFormatter1.getDescPadding();
      helpFormatter1.getDescPadding();
      Options options1 = options0.addOption("", "", false, "o,5?");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, " ", options1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "Lqk<Dw|vhm3@kBQj,0.");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(948, "Pm075No", "-", options0, "");
      Options options1 = options0.addOption("", "\n", true, "-y;0MKlR0z");
      helpFormatter1.printHelp("v", options1, true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2637;
      String string0 = "6,\"gXRaCre>3Eh";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "_Ibaz&PdH ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp("usage: ", (String) null, options0, "ykI0:", true);
      options1.addOption((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (String) null, options1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "4R\"cL'S:zuY+~ }re");
      Options options3 = options2.addOption("arg", true, "(UzrXj`V-tZl\u0002sN)E");
      Option option0 = new Option("", "f&quo4d85+NrYM)xU", true, " ");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(1268, "4R\"cL'S:zuY+~ }re", "4R\"cL'S:zuY+~ }re", options4, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      options1.addOption((String) null, "[", true, "arg");
      Options options2 = options1.addOption((String) null, " ", false, "");
      helpFormatter2.printHelp("Jujp]T,bp", options2, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("3Q4hi6$G", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("'", "usage: ", options0, "usage: ");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter2.setOptionComparator(comparator0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      options0.addOption((String) null, false, "\n");
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 9, " :: ", "9iQ]%(,", options0, 1, 74, "--", false);
      helpFormatter1.getLeftPadding();
      helpFormatter3.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(64);
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter2.renderOptions(stringBuffer0, 1482, options1, 3, 58);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("3Q4hi6$G", options0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("'", "usage: ", options0, "usage: ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      options0.addOption((String) null, false, "\n");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 9, " :: ", "9iQ]%(,", options0, 1, 74, "--", false);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("%--", options0, true);
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter1.printHelp("f(7obsM?[J_Ey", "J", options0, "--");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4177, "arg", "\n", options1, 1, 21, "o5|Pj,WqqC3[%wH .", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", ">", options1, 74, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("3vnF");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "DEVJP/\"68Cb``MVxu%", "D3=>D%_D:6b,", options0, 8, 74, (String) null, true);
      helpFormatter0.getLeftPadding();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1931);
      helpFormatter0.setSyntaxPrefix("s^OEk3TFHqB1A/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "&edv.GW,@8v";
      String string1 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "L_0c&2i)A-2'`";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 31, options0, (-382), (-1531));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 67, 67, "#qemQh$ +'ciQC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(43);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 43, "a/(YB:j7");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter0.setSyntaxPrefix("1w@Z-q!2iPiQC_AC8Q");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1304, "arg", "-", options0, "hYst$ZYPy9V>\">PEy");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Gz");
      helpFormatter2.printOptions(mockPrintWriter0, 3, options0, 36, 74);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp("~W&n/T(OQHIxY7c{", "a}o", options0, "ykI0:");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?u4Y6V.oXQf5R8;CB");
      Options options2 = options1.addOption("J", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, (String) null, options2, (-311), 343, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("bGZ-]=ZzYSEw(ku9v>0");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("/|G'%@&g6=");
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("\n", 2725, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}Y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, "usage: ", "-", (Options) null, 1, 63, "Sih?R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("-", options0);
      helpFormatter0.printHelp("<", (String) null, options0, "org.apache.commons.cli.ParseException");
      helpFormatter2.getSyntaxPrefix();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options0.addOption("i", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", "--", options0, 1, 74, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&edv.GW,@8v", "", options0, "usage: ");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 59, "has already been selected: '", "usage: ", options0, 36, 59, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.printHelp("HlI>D1T", (String) null, options0, "ykI0:", true);
      helpFormatter0.createPadding(2);
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      boolean boolean0 = false;
      File file0 = MockFile.createTempFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "   ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //    
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5O/S]pNVyv{Fg{Z<e");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 686, "5O/S]pNVyv{Fg{Z<e", "5O/S]pNVyv{Fg{Z<e", options0, 709, (-1931), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "]";
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-901), "", "/,-/;(M%M,kls-C", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = null;
      int int0 = 2077;
      String string0 = "' was specified but an option from this group ";
      MockFile mockFile0 = new MockFile("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1684), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix(" | ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Mbz?q]Uksuees'", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("x&X+/ZT6rN}");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[#@PDW?]E/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "", options0, 58, 12, "r&NBed\"tP@wE@5\"f", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("--", options0, false);
      String string0 = "f(7obsM?[J_Ey";
      helpFormatter0.getLeftPadding();
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "il=}v";
      helpFormatter0.printHelp("!I@zQk]`bp(D8I_", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "mQ", options0, "f(7obsM?[J_Ey");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.printHelp("HlI>D1T", (String) null, options0, "ykI0:", false);
      helpFormatter0.createPadding(2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 5, "The option '");
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", options0, false);
      helpFormatter0.setSyntaxPrefix("f(7obsM?[J_Ey");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, " :: ", "", options0, "%--");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "]";
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1800, " ] [ long ", "t", options0, 582, 257, "Mz%.I=SuR=N2h<~nWm");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "]";
      StringWriter stringWriter0 = new StringWriter(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, false);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 344, "]", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, 344, (-1834), "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp("s!-%", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(64, "IlM_MT&;6:", "", options0, (String) null, false);
      helpFormatter0.printHelp(1470, "-", "H", options0, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("%--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("f(7obsM?[J_Ey");
      helpFormatter0.printHelp("il=}v", options0);
      helpFormatter0.printHelp("&edv.GW,@8v", "od)SK6ep", options0, "");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":O#(lri");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "", "il=}v", options0, 1, 2077, "f(7obsM?[J_Ey", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0, false);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1800, "]", ">", (Options) null, 1800, 582, "Mz%.I=SuR=N2h<~nWm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      int int0 = (-1931);
      helpFormatter0.defaultWidth = (-1931);
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "' was specified but an option from this group ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ' was specified but an option from this group 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("%--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("f(7obsM?[J_Ey");
      helpFormatter0.printHelp("il=}v", options0);
      helpFormatter0.printHelp("&edv.GW,@8v", "od)SK6ep", options0, "");
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 2864;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2864, "f(7obsM?[J_Ey");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "]";
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      String string0 = " | ";
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(" :: ");
      int int0 = 808;
      int int1 = 4330;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 808, (Options) null, 4330, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-301), "-", "#:oSO|D@IN@.Z", (Options) null, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3542, "cmdLineSyntax not provided", "cmdLineSyntax not provided", (Options) null, "2br_GZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      String string0 = " | ";
      Options options0 = null;
      Options options1 = null;
      String string1 = "3>G,";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "o|", "o|", (Options) null, 0, (-3169), "3>G,");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      helpFormatter0.setNewLine("Jqj;J3o1[sG%&:W+'f");
      String string0 = "[{>69:GEQ <$fqV%";
      int int0 = 0;
      helpFormatter0.setArgName("");
      int int1 = 0;
      String string1 = "oYMz&rAMk";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter0.setSyntaxPrefix("7_3, \"&[0B");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", "j|uQ", (Options) null, "Wr%>nQc6GUZ#4@<F,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(10);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "XH.B5y=[jJ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile("XH.B5y=[jJ", "");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      boolean boolean0 = true;
      mockFile0.setWritable(true, true);
      mockPrintStream0.write(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      String string1 = "ScVk OsT2gEX(xaUd*!";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2155), "ScVk OsT2gEX(xaUd*!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = " [ARG]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "line.separator";
      String string2 = "NO_ARGS_ALLOWED";
      Option option0 = new Option("NO_ARGS_ALLOWED", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.toString();
      String string3 = "cmdLineSyntax not provided";
      options0.hasLongOption("{bA7`[");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", " [ARG]", options0, "{bA7`[");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G+R;:JM~nY59FqY?w";
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "rgAzX:`IEt>mq7";
      String string1 = "GCK-n[S^L?[+\"pq~h,4";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("rgAzX:`IEt>mq7", "GCK-n[S^L?[+\"pq~h,4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // GCK-n[S^L?[+\"pq~h,4
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1865);
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("usage: ", "Q");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-3826);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3826), (-3826), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(4313);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", " ] [ long ", false, "--");
      Option option0 = null;
      try {
        option0 = new Option(" ] [ long ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1931);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-1473);
      helpFormatter0.setLeftPadding((-1473));
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1473));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-23);
      byteArrayOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      options2.addOption("", false, (String) null);
      optionGroup0.toString();
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 0, options2, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "HhNCoa(";
      helpFormatter0.defaultSyntaxPrefix = "]";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "org.apache.commons.cli.ParseException";
      helpFormatter0.renderWrappedText(stringBuffer0, 429, 429, "org.apache.commons.cli.ParseException");
      helpFormatter0.setLongOptSeparator("10|Vc?dwq");
      String string1 = "";
      File file0 = MockFile.createTempFile("usage: ", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", " ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_\"yDcag)");
      String string0 = "The option '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      String string0 = "[{>69:GEQ <$fqV%";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setArgName("[{>69:GEQ <$fqV%");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "oYMz&rAMk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("ddQ2cE~M8[!A^>", options0, true);
      helpFormatter0.setSyntaxPrefix("f(7obsM?[J_Ey");
      helpFormatter0.printHelp("il=}v", options0);
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 2864;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2864, "f(7obsM?[J_Ey");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{{t+%m`Br3?6");
      mockPrintWriter0.print((float) 74);
      String string0 = "";
      Options options0 = new Options();
      int int0 = 4495;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1874, "", "", options0, 4495, 1874, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      String string1 = "";
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ] [ long ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-436);
      Options options0 = new Options();
      int int1 = 2158;
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "arg", 2603, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2603, end 74, s.length() 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("I,$ab8JGrNc:MpD-", (-2429), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3296;
      helpFormatter0.setDescPadding(3296);
      String string0 = ":@";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('1');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "-", 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "]", " | ", (Options) null, 0, 2077, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "#[g#6tZ.}58G?_@";
      helpFormatter0.setLeftPadding((-1022));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix((String) null);
      assertEquals((-1022), helpFormatter0.defaultLeftPad);
  }
}
