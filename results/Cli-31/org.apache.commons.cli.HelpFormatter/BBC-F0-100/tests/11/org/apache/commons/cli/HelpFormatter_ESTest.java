/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 74, 3);
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-1), "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Option option1 = new Option("", " ", true, "e<%wOsg<z1m?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "e<%wOsg<z1m?", "", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix("M\"(g-G\"ao?\"3ySfN");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      stringWriter1.getBuffer();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.getLeftPadding();
      helpFormatter1.createPadding(16);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1909), (-1909), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2353);
      String string0 = " ";
      helpFormatter0.defaultDescPad = (-2353);
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "-", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(3, "--", "--", options0, "--", true);
      options0.hasShortOption("-");
      options0.getOptions();
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      option0.setArgName("");
      option0.clearValues();
      options0.addOption(option0);
      options0.addOption((String) null, "\n", true, "JJieEJcULz^$");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "usage: ", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption((String) null, "\n", true, "-");
      helpFormatter0.printHelp(74, "arg", "--", options0, "usage: ", true);
      helpFormatter0.setOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultLeftPad = (-3500);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = (-3500);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 74, (-3205));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      String string0 = "<<V+\"7`3 @";
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      mockPrintWriter0.print(3);
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp("-", "<<V+\"7`3 @", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2847, "<<V+\"7`3 @", "`k8I77", options1, 4349, 0, "!-2ZqD[", true);
      int int0 = (-852);
      String string1 = "";
      int int1 = (-898);
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.createPadding(1547);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-819));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "-";
      String string1 = "_lO1z>n2wP&7";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string2 = "utGdLm8/\",x^R]0ha&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_lO1z>n2wP&7", "Iu0%;+i$+v$", options1, "utGdLm8/\",x^R]0ha&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)74;
      byte byte0 = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)24;
      helpFormatter0.defaultNewLine = "gUH=R{'(RjV/T";
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.defaultNewLine = "gUH=R{'(RjV/T";
      byteArray0[7] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.createPadding(2257);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = helpFormatter0.createPadding(2257);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "gUH=R{'(RjV/T");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) (byte) (-104);
      objectArray0[2] = (Object) "gUH=R{'(RjV/T";
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) (byte)102;
      objectArray0[5] = (Object) (byte) (-6);
      mockPrintWriter1.format(locale0, "--", objectArray0);
      int int0 = 2897;
      Options options0 = new Options();
      String string1 = "Cz6IEf@";
      // Undeclared exception!
      try { 
        options0.addOption("TRN=!ky-", true, "Cz6IEf@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'TRN=!ky-' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(186);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.defaultArgName = "";
      int int0 = 10;
      Options options0 = new Options();
      String string0 = "-";
      Options options1 = options0.addOption("arg", true, "-");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options1, 44, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 267;
      helpFormatter0.printHelp(267, "Am/%,jCCR`RGv", "1&!F<LF/C", options0, "Np1voW", true);
      String string0 = null;
      String string1 = "JJieEJcULz^$";
      options0.addOption((String) null, "\n", true, "zwF{y/@4;R0^J");
      helpFormatter0.printHelp(22, "Am/%,jCCR`RGv", "Am/%,jCCR`RGv", options0, "Np1voW", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 22, options0, 23, 2);
      PrintWriter printWriter0 = null;
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-2014));
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-L+J)11x=%", "-L+J)11x=%", (Options) null, "B)G\"qW&", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(74, "--", "--", options0, "--", true);
      Options options1 = options0.addOption((String) null, "\n", true, "JJieEJcULz^$");
      helpFormatter0.printHelp(74, "arg", "--", options0, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderOptions(stringBuffer0, 178, options1, 3, 178);
      helpFormatter0.printHelp(74, "-", "X#OI~@pids", options1, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1418, (byte)48);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultLongOptPrefix = "E{LCqpLY;u^x";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("dDQN1)qAt}7L", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("4z", true, "arg");
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "vp9(eY1't9`-U%5m", "vp9(eY1't9`-U%5m", options1, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("4z", true, "arg");
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      String string0 = "1Xhi0IX:Pd";
      String string1 = "vp9(eY1't9`-U%5m";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 3061, options0, 3061, 1544);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-553);
      String string0 = "u/;SEbcJf7`bg<0GF@";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " ", "", options0, "u/;SEbcJf7`bg<0GF@");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "has already been selected: '");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "dM!R4Gyr", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1305, " ", "usage: ", options2, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.rtrim("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "--", "--", options0, "--");
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 31, (-2755), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      boolean boolean0 = true;
      mockFile0.setWritable(true, true);
      String string0 = "$$?q^NpNYc2U!Y* ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$$?q^NpNYc2U!Y* ", "$$?q^NpNYc2U!Y* ", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1543, "\n");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      option0.setArgName("X:t#y-KzZ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.addOption(option0);
      Options options3 = options2.addOption("2", true, "[");
      helpFormatter0.printHelp("s!r(?dDV&", "s!r(?dDV&", options3, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-484), "");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(71, "--", "--", options0, "--", false);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(44);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2716), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1184), (Options) null, 1984, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1552, "^0C=E1x!@GK{Q+P2Q", "^0C=E1x!@GK{Q+P2Q", (Options) null, "k}zq43:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1535);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "");
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "5zJXieEJcULz^@";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "5zJXieEJcULz^@";
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, (-2), (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(71, "--", "--", options0, "--", false);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter1.printHelp(34, "[ option: ", "usage: ", options0, "B dEWdD", false);
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("q");
      helpFormatter0.printHelp(71, "q", "q", options0, "'", false);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "!Y6 ;^7ci5");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 103;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "usage: ", options0, "-");
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "%s:ICPX/&s:OB{");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[ option: ", "4z", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.setLeftPadding(74);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 32, "~", (String) null, options0, 32, 112, "", true);
      int int0 = 13;
      StringBuffer stringBuffer0 = new StringBuffer(13);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("&rV", "\n", false, "Lrt%c?=S?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&rV' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 74, 1154);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "--", options1, "/M\"RJ9]o6Dc6uP+$", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "a*.X$";
      String string1 = "";
      String string2 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "", true, "usage: ");
      Options options1 = options0.addOption(option0);
      int int0 = 9;
      options0.hasOption("");
      helpFormatter0.setWidth(9);
      helpFormatter0.printHelp("a*.X$", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = (-2210);
      helpFormatter1.setWidth((-2210));
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-2707), options1, 1, 133);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("jj0|X^z[cn[8yu");
      boolean boolean0 = true;
      helpFormatter0.printHelp("QrD8", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]=nqU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^aaE?N DT6/Jf$l");
      String string0 = "~$R'{rS]+Zf{)na4MI";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1), 3, "^aaE?N DT6/Jf$l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("jj0|X^z[cn[8yu");
      helpFormatter0.printHelp("QrD8", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]=nqU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^aaE?N DT6/Jf$l");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "arg", options0, 1492, 1, "\n", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("2", true, "[");
      helpFormatter0.printHelp("s!r(?dDV&", "s!r(?dDV&", options3, "#EuU5=(.5", true);
      helpFormatter0.createPadding(64);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 1630);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      helpFormatter0.setLeftPadding((-2867));
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QrD8", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      int int0 = 31;
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 31);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 31, 103, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("2", true, "[");
      helpFormatter0.printHelp("s!r(?dDV&", "s!r(?dDV&", options3, "#EuU5=(.5", true);
      helpFormatter0.createPadding(64);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 64, "arg", " :: ", options0, 74, 64, "org.apache.commons.cli.OptionGroup", true);
      helpFormatter1.findWrapPos("\n", 2245, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "");
      option0.clearValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 29, "-", "[AG...]", options0, 2245, 478, "--", true);
      helpFormatter1.findWrapPos("usage: ", 26, 478);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append('G');
      Options options0 = new Options();
      Option option0 = new Option("", "2\"]i/#i&-HJ", false, "");
      helpFormatter0.defaultDescPad = (-1475);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "2\"]i/#i&-HJ", "", options1, "1l;$Sh^7*oj\"", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "arg");
      helpFormatter0.setLongOptPrefix("|");
      options1.hasShortOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 52, "|", "", options1, 32, 3, (String) null, false);
      helpFormatter0.findWrapPos("|", 52, 26);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "QrD8";
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("z2re", false, "arg");
      Options options3 = options2.addOption((String) null, false, "arg");
      options3.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "--", "", options2, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("&F[2Mhl@#OBN");
      Option option0 = new Option("", "org.apache.commons.cli.Util", true, "usage: ");
      Options options1 = options0.addOption((String) null, false, "-");
      options1.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "nD.(6o_=s(ux8~dIx", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 899, 74);
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 31, "V-U", "org.apache.commons.cli.HelpFormatter", options0, 10, 10, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "--", (String) null, options0, (-192), 2, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.getLongOptSeparator();
      Option option0 = new Option("69K8dbjUYy5YP", "x^", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp(" ", options2, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(3, "x^", "$Id? yYm0G(Mq", options0, "x^", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "[");
      helpFormatter0.printHelp("s!r(?dDV&", "s!r(?dDV&", options3, "#EuU5=(.5", true);
      helpFormatter0.createPadding(64);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 144, ")XnV`iRn:[!}@rkXoZ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setWidth(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.printHelp(108, "/aJM", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.Option", false);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Option");
      // Undeclared exception!
      helpFormatter0.printHelp("/aJM", options0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getLongOptSeparator();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ec'|5@ O:o&sT6L5");
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)32;
          byteArray0[1] = (byte)0;
          byteArray0[2] = (byte)110;
          FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          Options options0 = new Options();
          OptionGroup optionGroup0 = new OptionGroup();
          options0.addOption("", false, "arg");
          // Undeclared exception!
          helpFormatter0.printHelp((int) (byte)0, "'", "ec'|5@ O:o&sT6L5", options0, "'", false);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "arg", false, "Ov|");
      mockFile0.setWritable(false, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.renderWrappedText(stringBuffer0, 4349, 0, "usage: ");
      Options options0 = new Options();
      helpFormatter1.printOptions(mockPrintWriter0, 2847, options0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ec'|5@ O:o&sT6L5");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", false, "arg");
      options1.getOptions();
      helpFormatter0.printHelp(52, "[", " ", options1, "", false);
      helpFormatter0.printHelp(52, "}Y89xhE)z* >au^ Oq9", "[", options1, "[", true);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-504));
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 19, "--", "--", options0, 74, (-1591), "<GRsf0BsqI[\"]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      mockFile0.toURL();
      File file0 = MockFile.createTempFile(")XnV`iRn:[!}@rkXoZ", "QrD8");
      mockFile0.renameTo(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("SrggC", "Z}BQL+K", true, "^gZms\"0$yn02Vp7");
      options0.addOption(option0);
      helpFormatter0.printHelp("QrD8", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "[ARG...]";
      helpFormatter1.setWidth((-2693));
      helpFormatter0.rtrim("[ARG...]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, (-1212), (-1906));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(mockFile0);
      String string0 = "q{MW";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      String string1 = "";
      Option option0 = new Option("arg", "", false, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp(" ", " ", options1, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2847, "-", "`k8I77", options1, 4349, 0, "!-2ZqD[", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 4349, 0, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer1, 51, options2, 74, 0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "!-2ZqD[", "|7&mgZ%", options1, "QrD8", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter0.printHelp(52, "[", " ", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 775, "-", "", options1, 74, (-898), "{0g");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[");
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      String string0 = ")XnV`iRn:[!}@rkXoZ";
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ")XnV`iRn:[!}@rkXoZ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      Options options0 = new Options();
      Option option0 = new Option("", "2\"]i/#i&-HJ", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      MockFile mockFile0 = new MockFile(" ");
      mockFile0.getAbsolutePath();
      option0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "2\"]i/#i&-HJ", "ec'|5@ O:o&sT6L5", options2, ":T~ ib:L@MQrK ))+&", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a*.X$", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "^}1N";
      helpFormatter0.setNewLine("^}1N");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        stringBuffer0.appendCodePoint((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 836, 1, "");
      String string0 = "q{MW";
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp("-", "<<V+\"7`3 @", options1, "-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(19);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("QrD8", options0, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.createPadding(3);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", "", true, "");
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, "");
      helpFormatter0.printHelp(934, "Qu", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      Option option0 = new Option("", "", true, "");
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printUsage(printWriter0, 29, "", options1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      options0.hasOption("QrD8");
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", false, "Ov|");
      Options options1 = options0.addOption(option0);
      String string0 = "}17P#j\\B<bi_";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", "org.apache.commons.cli.ParseException", options1, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      Option option0 = new Option("", "2\"]i/#i&-HJ", false, "");
      options0.addOption("arg", false, "_N\"Bj");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 34, (-37), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "arg");
      helpFormatter0.printHelp(52, "[", " ", options2, "", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 52, 873, "");
      StringBuffer stringBuffer0 = new StringBuffer(8);
      helpFormatter0.renderOptions(stringBuffer0, 52, options0, 8, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1878));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("N:I", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.rtrim("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp("-", "<<V+\"7`3 @", options1, "-");
      options1.getMatchingOptions("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2847, "<<V+\"7`3 @", "`k8I77", options1, 4349, 0, "!-2ZqD[", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "-", "t^", options0, 117, 31, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      helpFormatter0.setArgName("QrD8");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2210));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("*Yfvr&_k;elF2", (-3217), (-2081));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";!|/nS6$g9}+");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "KzYO;LOSrJR[mh1");
      optionGroup0.setRequired(false);
      option0.clearValues();
      options0.getOptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      String string0 = "";
      helpFormatter0.printHelp("L!T6_$", "", options1, "");
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 31;
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Ov|", "", options0, 31, 31, "", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp("-", "<<V+\"7`3 @", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2847, "<<V+\"7`3 @", "`k8I77", options1, 4349, 0, "!-2ZqD[", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-852), "<<V+\"7`3 @", "", options1, (-2), (-898), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      Options options0 = new Options();
      Option option0 = new Option("", "2\"]i/#i&-HJ", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "_Nj");
      Options options3 = options2.addOption("", "G", true, "usage: ");
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 0, (String) null, (String) null, options3, (-1), (-1), "_F7kJivj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      String string0 = null;
      Options options1 = new Options();
      int int0 = 794;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, (String) null, "N6syOB&_ZJ)", options1, 794, 1, "F1zce1*@=RBMlcU", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", true, "Ov|");
      option0.clone();
      Options options1 = options0.addOption("QrD8", false, "B>e$Qr[A>j.^>");
      Options options2 = options1.addOption("QrD8", "'", false, "--");
      options2.helpOptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "LOD(NA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("N:I", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.getOptions();
      helpFormatter0.printHelp(2372, "\n", " :: ", options0, "FAF7Krz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zRyxX{aV");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-50), options0, 1, (-549));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      mockPrintWriter0.append('G');
      Options options0 = new Options();
      Option option0 = new Option("", "2\"]i/#i&-HJ", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      MockFile mockFile0 = new MockFile(" ");
      mockFile0.getAbsolutePath();
      mockFile0.setWritable(false, false);
      helpFormatter0.printHelp("ec'|5@ O:o&sT6L5", " ", options2, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("oDmA.'L+Z{;qG0t>R", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption("QrD8", false, "B>eYQr>e.^>");
      Options options2 = options1.addOption("QrD8", "'", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null, options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      Options options3 = options1.addOption((String) null, "uttj26V", false, "~cC.[h[&zI_kY|;@on<");
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "org.apache.commons.cli.HelpFormatter", " ] [ long ", options3, 934, 934, ";&?Fs5\"W}aOpeyafcz", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setWidth(9);
      helpFormatter0.printHelp("a*.X$", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2210));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2210), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(71, "--", "--", options0, "--", false);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, "\n", false, "5zJXieEJcULz^@");
      MockFile mockFile0 = new MockFile("arg", "h.lv,z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4, "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      String string0 = "Ov|";
      Option option0 = new Option("arg", "", false, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp(" ", " ", options1, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2847, "-", "`k8I77", options1, 4349, 0, "!-2ZqD[", true);
      String string1 = "";
      options1.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-852), "\n", "", options1, (-2), (-898), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("a*.X$", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2210));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2210), "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED", "usage: ");
      Options options0 = new Options();
      options0.addOption("", "=GOk_", false, "D");
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\"_N3&NF");
      helpFormatter0.renderWrappedText(stringBuffer0, 261, 0, "\"_N3&NF");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "5%{PPxT");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5%{PPxT
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 534, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-980);
      helpFormatter0.setDescPadding(2316);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "usage: ", 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("cmdLineSyntax not provided", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QrD8");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("QrD8", ")XnV`iRn:[!}@rkXoZ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "`k8I77");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.renameTo(file0);
      String string0 = "q{MW";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 0, "q{MW");
      Option option0 = new Option("arg", "", true, "Ov|");
      Options options1 = options0.addOption(option0);
      mockFile0.setWritable(false, true);
      helpFormatter0.printHelp("-", "<<V+\"7`3 @", options1, "-");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D:_V.Zi 2LJl^b&^ ";
      int int0 = 2441;
      helpFormatter0.setWidth(2441);
      helpFormatter0.defaultSyntaxPrefix = "D:_V.Zi 2LJl^b&^ ";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "=GOk_", false, "D");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options1, 0, 0, "Q6rKbLH/O/^=b,rCdk", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 622, 2686);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = (-994);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-994), "[ARG...]", "", options0, (-994), 31, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix("M\"(g-G\"ao?\"3ySfN");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1909), (-1909), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 4488, 1657, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "usage: ");
      Options options3 = options2.addOption((String) null, "", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(934, "", "Qu", options3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.createPadding(32);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2719);
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'X';
      charArray0[2] = '7';
      charArray0[3] = 'L';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = 'b';
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, charArray0, 32, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "\n", true, " ");
      options1.getOptions();
      options1.getMatchingOptions("--");
      String string1 = "T\\QLIt<,btTo2NJ";
      Option option0 = new Option("", "usage: ", true, (String) null);
      options1.addOption(option0);
      Option option1 = null;
      try {
        option1 = new Option("TQLIt<,btTo2NJ", "TQLIt<,btTo2NJ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'TQLIt<,btTo2NJ' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "--", options1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setArgName("[ option: ");
      helpFormatter0.printHelp("[ option: ", options0);
      helpFormatter0.getArgName();
      helpFormatter0.defaultLongOptPrefix = "--";
      int int0 = (-549);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-549), "[ option: ", " :: ", options0, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-1753);
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ec'|5@ O:o&sT6L5");
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      Options options0 = new Options();
      Option option0 = new Option("", "2\"]i/#i&-HJ", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "_Nj");
      Options options3 = options2.addOption("", "G", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " ", options3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3572;
      helpFormatter0.setLeftPadding(3572);
      String string0 = "jmW";
      helpFormatter0.setOptPrefix("jmW");
      helpFormatter0.setOptPrefix("jmW");
      String string1 = "~";
      Options options0 = new Options();
      String string2 = null;
      // Undeclared exception!
      try { 
        options0.addOption("mu%b96<bz&B(usz", false, "q\"?o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'mu%b96<bz&B(usz' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G/$[I}N8 9.OAK";
      helpFormatter0.defaultArgName = "G/$[I}N8 9.OAK";
      int int0 = 1896;
      helpFormatter0.defaultDescPad = 1896;
      helpFormatter0.setWidth(1896);
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "G/$[I}N8 9.OAK";
      String string1 = "f!J\\FW~oINZ].GWnBC";
      String string2 = ")8N%/IuF";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ">");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('\'');
      stringWriter0.close();
      stringWriter1.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3129), (-3129), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      String string2 = ",kV8AF^@6j-!";
      boolean boolean0 = true;
      Option option0 = new Option("", ",kV8AF^@6j-!", true, "");
      option0.clone();
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("--", "q{i", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
