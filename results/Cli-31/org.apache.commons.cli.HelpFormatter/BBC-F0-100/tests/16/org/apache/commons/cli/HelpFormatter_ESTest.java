/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("-", "\n", options0, "\n");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultWidth = 1;
      String string0 = "79U[J";
      Options options0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("79U[J", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ", true, "");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("_8.>LEfY^d", "RDbDx`wZJ(s2", options2, "?A$P){|Lr~V*<C\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[", "arg", options2, "I]-0rW~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "XX)cF|2)U'l#]Q7";
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("XX)cF|2)U'l#]Q7", "XX)cF|2)U'l#]Q7", options0, "XX)cF|2)U'l#]Q7");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("s(a0patkWJ:BW`4Z{Z", options0);
      helpFormatter0.printHelp("                                                                          ", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "                                                                          ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3594, options0, 3594, 3594);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer2, 1947, options0, 1, 3594);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = (-2376);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2376), "n-2/aTsFm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("                                                                          ", "                                                                          ", options0, "_Yg+c2=UW");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3116, 582);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.clone();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.rtrim("ldv$AJvSB7JNQW");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1154), "ldv$AJvSB7JNQW", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "'-2mk\"L@'gv*+_2K-$o");
      helpFormatter0.setWidth((-1286));
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("H`Pyn#uJ/4B~:RXcfl4", (String) null, options2, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding((-2332));
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.rtrim("ldv$AJvSB7JNQW");
      int int0 = (-1154);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1154), "ldv$AJvSB7JNQW", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R6$8|^wK");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "L@E98$BW].{0kw", "", options0, "R6$8|^wK");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "arg", options0, 74, 74, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = (-1);
      Option option0 = new Option("arg", "usage: ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";xAV?=2B", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.defaultLeftPad = (-1557);
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(63);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-246), (-246), "+}i+!!s/&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, ", ");
      Options options2 = options1.addOption("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`UvOpF", "arg", options3, "`UvOpF", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-928), "p!r2lQW8RwumG0WT, ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 101;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 101, (Options) null, 1327, 1327);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Options options0 = new Options();
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "R6$8|^wK";
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
          int int0 = 42;
          boolean boolean0 = true;
          int int1 = 31;
          // Undeclared exception!
          helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "R6$8|^wK", options0, 1035, 31, "", true);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("OJ]W#fC", (String) null, (Options) null, "OJ]W#fC", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\"=e45+j)TI;", "org.apache.commons.cli.Option", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("Uz", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 29, "The option '");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jgAZ", "ZzNp8#");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "ZzNp8#";
      objectArray0[2] = (Object) "jgAZ";
      objectArray0[3] = (Object) "jgAZ";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) option0;
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) options2;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      options0.getOptionGroups();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "t&\"7QcUeC4y!", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.createPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("wWJVU", "", false, "h8*UC)D&Pz~_ ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("b8H$", false, "arg");
      helpFormatter1.printHelp("usage: ", options4, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PrintWriter printWriter0 = null;
      String string0 = "M6K%[?,@^o5)Q|^7?jt";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "l4ce<f";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 370;
      helpFormatter0.renderOptions(stringBuffer0, 1210, options1, 1210, 370);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 370, "':nF6(@N\"", "", options1, 275, 1210, "M6K%[?,@^o5)Q|^7?jt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, "GeZCU;Tr3ZK", (String) null, options0, 34, (-2346), "v-e@'W$*`;Tx!wQ)$x", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("w3NK_8pF", true, "Cannot add value, list full.");
      Options options2 = options0.addOption("", true, "");
      Options options3 = options2.addOption("", "", false, "y;@qN&+dP9UZBN");
      options3.getOptionGroups();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "org.apache.commons.cli.Option", "", options1, "", true);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("6", "-", true, "");
      Options options1 = options0.addOption("", false, "\n");
      helpFormatter0.printHelp("?TZ2gT6AvBbc h", "", options1, "");
      String string0 = helpFormatter0.defaultOptPrefix;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "a3cFC";
      Options options1 = options0.addOption("a3cFC", true, "\n");
      options1.getOptionGroups();
      options0.addOption("arg", "", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "++qea:EGT$PUcxES@4", "", options1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(8);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.defaultNewLine = "14n'sXA$[4hD~\"\"";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 853, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = MockFile.createTempFile("6!49KfI]", "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 807, "++qea:EGT$PUcxES@4");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1152);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 807, "--", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      StringWriter stringWriter0 = new StringWriter(63);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.flush();
      helpFormatter0.renderWrappedText(stringBuffer0, 87, (-2), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Options options0 = new Options();
      String string0 = "}\\u9t ";
      MockFile mockFile0 = new MockFile("-", "Yi#`u4$mCeJ{K");
      MockFile mockFile1 = new MockFile(mockFile0, "^MCBN}N pqRyDM ;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2209, string0, "", options0, 2209, 108, "/#qxC2H@(L\"1SmLZ^D", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "                                                                          ");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.renderOptions((StringBuffer) null, 862, options0, 862, 862);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o9hy4a6C");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Options options0 = new Options();
      options0.addOption("bT", false, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("C>,<KqnIhg", (String) null, options0, (String) null);
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-278));
      Option option0 = new Option((String) null, true, "?&Ebn@Cj@l");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: null  [ARG] :: ?&Ebn@Cj@l ]", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "++qea:EGT$PUcxES@4";
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("M]\"", "{XW!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1186), (String) null, "/#qxC2H@(L\"1SmLZ^D", options0, 8, 1445, "++qea:EGT$PUcxES@4", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("-", "&/O0G-o((");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3065, "/#qxC2H@(L\"1SmLZ^D", "org.apache.commons.cli.Option", options1, 3065, 1044, "", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("a9@2^V~L");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "}\\u9t ";
      MockFile mockFile0 = new MockFile("arg", string0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "%lHT;2j_'", "/#qxC2H@(L\"1SmLZ^D", options0, 1044, 108, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("DcNF6u<7Knh]AlT_");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("[ARG...]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 106, "Omdl");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++qea:EGT$PUcxES@4");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      helpFormatter0.setLeftPadding((-1712));
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "uV<VY%:XMYX");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("uV<VY%:XMYX", "[", options1, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++qea:EGT$PUcxES@4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "uV<VY%:XMYX");
      helpFormatter0.printHelp("uV<VY%:XMYX", "[", options1, (String) null);
      helpFormatter0.rtrim("arg");
      helpFormatter0.printHelp("srPpQkj{,:5g#aVp", "srPpQkj{,:5g#aVp", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 862, "-,<Gp#kju\"[iY|r#", "+3uu", options0, 862, (-1416), "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "S'{Jml4M";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(97, "S'{Jml4M", "S'{Jml4M", (Options) null, "S'{Jml4M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++qea:EGT$PUcxES@4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("a3cFFK", true, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 34, options1, 3, 1);
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 3, "--");
      helpFormatter1.setOptPrefix("a3cFFK");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(9);
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      mockFile1.getAbsolutePath();
      mockFile1.toURI();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1055, "         ");
      helpFormatter0.getOptPrefix();
      int int0 = helpFormatter0.getWidth();
      helpFormatter0.createPadding(44);
      String string0 = "c\\";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Options options2 = options1.addOption("c", "--", true, "");
      helpFormatter0.printHelp(string0, options2);
      helpFormatter0.createPadding(int0);
      String string1 = "";
      int int1 = 2902;
      helpFormatter0.findWrapPos(string1, int1, int1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "%lHT;2j_'", "UlmPbaqri ^~*YZ", options0, 13, 70, "UlmPbaqri ^~*YZ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.print("arg");
      int int0 = 862;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      optionGroup0.setSelected((Option) null);
      optionGroup0.setSelected((Option) null);
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("--");
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 862, "}VY\"Xa)`<c", "%lHT;2j_'", options1, 862, 2125, "-,<Gp#kju\"[iY|r#", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('L');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1020), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++qea:EGT$PUcxES@4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ITX", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("--");
      Options options2 = options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.setOptPrefix("!=cR<<&Bh");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 240, options2, 862, 240);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("Rj:zdVR*'\"");
      Options options2 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3395), "arg", (String) null, options2, 13, 821, "-,<Gp#kju\"[iY|r#", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "++qea:EGT$PUcxES@4");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "ITX";
      objectArray0[6] = (Object) "arg";
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("ITX", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(printWriter0, 4074, "ITX", "arg", options2, 1, 1, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      helpFormatter0.printHelp("gUdu", string0, options0, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "\n", "A CloneNotSupportedException was thrown: ", options1, 63, (-1), "j^c._VgyAC3O:OSzP5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "A`gcK1lH5'< w0&";
      String string1 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "--", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      String string0 = "";
      int int0 = 3180;
      StringBuffer stringBuffer0 = new StringBuffer(3180);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4, 909, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, (Options) null, 4625, 909);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      Options options2 = options1.addOption((String) null, true, "}VY\"Xa)`<c");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1223, "}VY\"Xa)`<c", ",", options2, 32, (-1), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "kO{=oTA");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1610, "?&Ebn@Cj@l", "tA~.Ht~R{e:U", options1, " A~EV~(:c@2iHtJ+I:I");
      helpFormatter0.findWrapPos("", (-2), 1610);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1224, ",", "j^c._VgyAC3O:OSzP5", options1, 32, 1947, "}VY\"Xa)`<c");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "?&Ebn@Cj@l");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ option: null  [ARG] :: ?&Ebn@Cj@l ]", options1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("arg");
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "}VY\"Xa)`<c", "", options1, 862, 2125, "-,<Gp#kju\"[iY|r#", false);
      helpFormatter0.rtrim("arg");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Locale locale0 = new Locale("", "'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1217), options0, (-1215), (-1217));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1210, options1, 1210, 370);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "nm", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(";");
      helpFormatter0.setNewLine(";");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[8];
      charArray0[2] = '.';
      charArray0[1] = 'P';
      mockPrintWriter0.print(charArray0);
      int int0 = 0;
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "[ optiTon ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.println((long) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-380), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "--", " | ", (Options) null, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0p=!w_?vF.S=", (String) null, (Options) null, "0p=!w_?vF.S=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      int int0 = (-1);
      Options options0 = null;
      String string0 = "u=7T$1c%`)|8mhB/s";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(909, (String) null, "u=7T$1c%`)|8mhB/s", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("--");
      String string0 = null;
      options0.hasShortOption((String) null);
      int int0 = (-1);
      Options options1 = null;
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "line.separator", "", (Options) null, "H~^/ +=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      String string0 = "";
      int int0 = 909;
      int int1 = 4;
      Options options1 = null;
      int int2 = 1742;
      String string1 = "GV7AM-l:}C4Qd(}";
      helpFormatter0.printHelp(1742, "GV7AM-l:}C4Qd(}", "", options0, (String) null, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "A`gcK1lH5'< w0&", "org.apache.commons.cli.Options", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2718);
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.setArgName("1F,i3Qrno=OG~A[iVJ");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 2319, "Illegal option name '");
      helpFormatter1.setOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 2739;
      String string0 = "osPU)65dU";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "7";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-887));
      helpFormatter0.setLongOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 34;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "`Aekv$x{=v0]jVg";
      options0.getOption("");
      options0.hasLongOption("`Aekv$x{=v0]jVg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(36);
      stringWriter0.getBuffer();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      options0.hasShortOption((String) null);
      helpFormatter0.defaultNewLine = "7";
      Options options1 = options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(2746);
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setArgName("1F,i3Qrno=OG~A[iVJ");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 4625, string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      options0.hasShortOption((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.PRC;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale1, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "", "", options0, 0, 9, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G(by;^:?4<");
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'p';
      helpFormatter0.setOptPrefix("G(by;^:?4<");
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'p';
      charArray0[6] = 'H';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.println(1678L);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2742, "");
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = null;
      int int0 = (-1985);
      String string0 = "";
      String string1 = "";
      int int1 = 909;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " | ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "<?V9'75dcs8'j'&kOl", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "}VY\"Xa)`<c", "%lHT;2j_'", options1, 862, 2125, "-,<Gp#kju\"[iY|r#", false);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2168), "", "", options0, (-2168), (-3120), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      options0.hasShortOption((String) null);
      helpFormatter0.defaultNewLine = "7";
      options0.addOption("", "-", false, "7");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-265), options0, 973, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'p';
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, 4625, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.createPadding(64);
      StringWriter stringWriter0 = new StringWriter(2965);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 19, 2965, "kCXjM0ZqeS");
      helpFormatter0.setOptPrefix("o9");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(9);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("has already been selected: '", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "has already been selected: '");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-,<Gp#kju\"[iY|r#", options1, true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(9);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1217);
      String string0 = "[ARG...]";
      int int1 = 9;
      String string1 = null;
      String string2 = " | ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("j^c._VgyAC3O:OSzP5", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println(2611L);
      mockPrintWriter0.print("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 862, "j^c._VgyAC3O:OSzP5");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1224);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("\n");
      options1.addOption((String) null, true, "}VY\"Xa)`<c");
      helpFormatter0.printHelp("-,<Gp#kju\"[iY|r#", options1, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'p';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.hasShortOption("--");
      options0.hasShortOption((String) null);
      helpFormatter0.defaultNewLine = "7";
      Options options1 = options0.addOption("7", "usage: ", true, "7");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      int int1 = (-2222);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", 0, (-2222));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2593, "M6K%[?,@^o5)Q|^7?jt", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1217), "[ARG...]", "[ARG...]", (Options) null, (-2114), (-2114), "[ARG...]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      String string0 = "eF1";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "eF1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("ct03vf^}Oig");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append(' ');
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-851));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("`}N}<K9RV,@(", 1133, 1133);
      int int0 = 1561;
      String string0 = null;
      String string1 = "r";
      Options options0 = new Options();
      String string2 = "C`kY9{;9i2Vr";
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "C`kY9{;9i2Vr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-534), (-1), "J2 M^i!XB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">\"nVZX0g$G(H");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.release();
      mockPrintWriter0.print(1.0);
      int int0 = 21;
      int int1 = 1740;
      mockPrintWriter0.print(0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 21, 1740, ".tmspT;q=x*0\"hEnt|)");
      helpFormatter0.createPadding(536);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setOptPrefix
      helpFormatter0.setLongOptSeparator("{ U*.4L3T|'z'uyhkCk");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int2 = (-353);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("0:/O", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0:/O' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2450, (-109), "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringBuffer1;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-109), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o9";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o9", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(2746);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 4625, string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      mockPrintWriter0.append('\'');
      int int0 = 589;
      Options options0 = new Options();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "SH.'~=Qnu1J*eq", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "?&Ebn@Cj@l");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-278), "cmdLineSyntax not provided", " | ", options1, "?&Ebn@Cj@l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
