/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:32:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          CharBuffer.allocate(3);
          StringWriter stringWriter0 = new StringWriter();
          Options options0 = new Options();
          StringBuffer stringBuffer0 = new StringBuffer(74);
          helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
          String string0 = "   ";
          MockPrintStream mockPrintStream0 = new MockPrintStream("-");
          ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "   ", options0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      mockPrintWriter0.print('\\');
      helpFormatter0.defaultWidth = (-1);
      mockPrintWriter0.println((-542.54236F));
      String string0 = "Illegal option name '";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "Illegal option name '");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      options0.addOption((String) null, true, "arg");
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", "U}5>z\"h''-F'VI/ziv", "arg").when(comparator0).toString();
      doReturn(74, 74, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.addOption("", true, "--");
      options0.hasLongOption("arg");
      Option option0 = new Option((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.getLongOptPrefix();
      Option option1 = new Option("", "", false, "-");
      OptionGroup optionGroup3 = optionGroup1.addOption(option1);
      options1.addOptionGroup(optionGroup3);
      helpFormatter0.printHelp("-", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "U}5>z\"h''-F'VI/ziv", (String) null, options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "m";
      boolean boolean0 = true;
      int int0 = (-1490);
      helpFormatter0.defaultWidth = (-1490);
      String string1 = "";
      Option option0 = new Option((String) null, "F8Z9oJx=ph", true, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("m", "m", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2416));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.defaultArgName = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      StringBuffer stringBuffer1 = stringBuffer0.append(751.4);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 975, "   ");
      helpFormatter0.getNewLine();
      stringBuffer0.append('b');
      helpFormatter0.findWrapPos("\n", 34, (-670));
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 9, "   ");
      helpFormatter0.findWrapPos("Z<axJtY]p", 34, 34);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1575));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1374);
      helpFormatter0.setLeftPadding((-1374));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      int int1 = 355;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bufferedOutputStream0.write(byteArray0, 355, 1349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.defaultWidth = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, " ", "arg", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.defaultDescPad = (-1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, " ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "--", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "^z's1lf>J");
      optionGroup0.setSelected(option0);
      optionGroup0.setRequired(true);
      String string0 = "--";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 5277;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 5277, 5277);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 5, (-1866), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.addOption("", true, "--");
      Option option0 = new Option((String) null, true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      Option option0 = new Option((String) null, true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp(">c_7", options1, false);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 63, " | ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 74;
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 74, options0, 74, 74);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 1295);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      stringWriter0.getBuffer();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 708, (-1034));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", (String) null, false, "Te$$2");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2599), options3, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Illegal option name '";
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("Illegal option name '");
      helpFormatter0.defaultDescPad = (-2888);
      options0.getOptions();
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5053, "Illegal option name '", "Illegal option name '", options0, "(W[b}tL/T8s|", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2891;
      helpFormatter0.setDescPadding(2891);
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 209, options0, 63, 1921);
      helpFormatter1.renderWrappedText(stringBuffer0, 1899, 1, "HeclO:6jIF\"$au");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      String string0 = "Quv*a\"";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, (Options) null, 1, 1936);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "z7DX^Gp{%z{s");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "z7DX^Gp{%z{s");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "R!d", (String) null, options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-589), "   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.setSelected(option0);
      optionGroup0.setRequired(true);
      Options options1 = new Options();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(108, "`", "", options1, "npKN7!wd", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "!{`7T53'gO-P", "}`RqYrT.-q@|Ou", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-626);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-626), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      CharBuffer.allocate(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, " ");
      Options options2 = options1.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2568, "B", (String) null, options2, "<}%", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[0];
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "a", false, ", ");
      String string0 = "";
      options1.hasOption("a");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%S:el$-", "", options1, "(x^");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1008, "line.separator", ".Wt=V.}+#6XK7IE", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 36, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 74;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 13;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\"NZ\"I+W)%qI", "--", (Options) null, "^66ko w(7{OSxg/", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%r1k&wZCiK[=F}].^8";
      MockFile mockFile0 = new MockFile("%r1k&wZCiK[=F}].^8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1994, (Options) null, 1994, 889);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "org.apache.commons.cli.Option";
      Options options1 = options0.addOption("XTG", "-", false, "org.apache.commons.cli.Option");
      String string1 = "9<";
      helpFormatter0.printHelp("   ", (String) null, options1, "9<", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setRequired(false);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOptionGroup(optionGroup0);
      options2.helpOptions();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options2);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(611);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "NK#VoSrx", "'", options0, 31, 2, "", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) mockPrintWriter0;
      locale1.getDisplayScript();
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "/8j", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 641, 641, "..yY\"@t!t=]Ncn!");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("..yY\"@t!t=]Ncn!", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      int int0 = 54;
      StringBuffer stringBuffer0 = new StringBuffer(54);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-2336), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(54);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 1, (-1290));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "!$v@s3> M&", "b1<83FV$d%`[Za", options0, 32, 32, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Options options1 = new Options();
      options0.getOptionGroups();
      options0.addOption("U", true, "usage: ");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption((String) null, "U", false, "s4R,B+mq");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.OptionValidator", "[", options0, "[z#%j&", false);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("Cannot add value, list full.");
      helpFormatter0.findWrapPos("`<KK=Y", 26, 22);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      Options options2 = options1.addOption("pe", "pe", false, "Cannot add value, list full.");
      Option option0 = new Option((String) null, "rHqNmY|!:OUv", true, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      String string0 = "Hmae\\uZjkX0)";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, " | ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", true, "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", (String) null).when(comparator0).toString();
      doReturn(9, 0).when(comparator0).compare(any() , any());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("bii", "-", false, "[");
      helpFormatter0.printHelp(74, "arg", "", options0, "", false);
      helpFormatter0.printOptions(mockPrintWriter0, 110, options1, 74, 99);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", true, "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 3923, 3, "WQWeGa?E>l");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 2219, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", true, "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.optionComparator = comparator0;
      options0.addOption("bii", "-", false, "[");
      helpFormatter0.printHelp(74, "arg", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(3);
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("bW8Foa", true, " :: ");
      Options options1 = options0.addOption("arg", "pWw!'", false, "usage: ");
      helpFormatter0.printHelp(74, ">", " :: ", options1, "bW8Foa", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      Option option0 = new Option("", "arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("-", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2164), "usage: ", "[", options0, 53, 1, "g?x>", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      stringWriter0.close();
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ">9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1357));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("m%`Qxf-rV", (String) null, options1, ">9", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", true, "usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      options0.addOption("", "-", false, "[");
      helpFormatter0.printHelp(74, "arg", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdirs();
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      mockFile0.mkdirs();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 90, "--", "yG.A>L", options1, 74, 0, "&yRRiYTX(jnM$", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("-", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 40, "8Ky:,:5z2*%%M", options1);
      helpFormatter0.setSyntaxPrefix("O/rQ-Zw(l;'{js2");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.checkError();
      Locale locale0 = Locale.JAPAN;
      Option option0 = new Option("arg", "/,:X~S$/B", true, "eG8rn3a4|[k.r");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("eG8rn3a4|[k.r", options1, false);
      helpFormatter0.setDescPadding(43);
      helpFormatter0.setSyntaxPrefix("eG8rn3a4|[k.r");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "Ti(zDf|w,8", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      Option option0 = new Option("", "arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("-", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("O/rQ-Zw(l;'{js2");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "org.apache.commons.cli.Options").when(comparator0).toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", false, "QK0\"S/*,ofWi;wP");
      Option option0 = new Option("", "org.apache.commons.cli.Options", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options2, false);
      helpFormatter0.setDescPadding(3035);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "D}?DdOx", options0, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, " ", "", (Options) null, 74, 74, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      stringWriter0.close();
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ">9");
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(">9", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(2);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "", options2, (-1105), (-696), "1IV_\">Eyoe;", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 374, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "_Zl8YY':DrP|^Qftbjf");
      Options options1 = options0.addOption(option0);
      options0.addOption((String) null, "", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "iJttT@}ssjZr", "bZ4I04c", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "LWa.B|DBQf\\D";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4, "LWa.B|DBQfD");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      mockPrintWriter1.checkError();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile1;
      mockPrintWriter1.printf(locale1, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 142, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.createPadding(12);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "            ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
      int int0 = (-1423);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 63, "\n", "", options0, (-1423), 1, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("J5c)>Tw70UVI5J=").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", false, "QK0\"S/*,ofWi;wP");
      Option option0 = new Option("", "[CV,t", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options2, false);
      helpFormatter0.setDescPadding(3035);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.findWrapPos("[CV,t", 3035, 232);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3035, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5759, ",V", ",V", options1, (-1105), 3035, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 120;
      String string0 = "org.apache.commons.cli.Options";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 8, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "QK0\"S/*,ofWi;wP");
      Option option0 = new Option("", "org.apache.commons.cli.Options", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options2, false);
      helpFormatter0.setDescPadding(3035);
      helpFormatter0.setSyntaxPrefix("ww)Xtw-;");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ">9");
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(">9", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(2);
      helpFormatter0.setSyntaxPrefix("O/rQ-Zw(l;'{js2");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "4+dM`;@,&5vd*_v");
      Options options1 = options0.addOption(option0);
      options0.addOption("arg", "Qw$#a", false, "Qw$#a");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(1145, "", "", options1, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 3035;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      String string0 = "P(KJSWm\"/@o";
      Options options2 = options1.addOption("arg", false, "P(KJSWm\"/@o");
      Option option0 = new Option((String) null, "org.apache.commons.cli.Option", false, "x[:~uc5M");
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "5?`]@(.],|IbV~FE", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 31, 31, "5?`]@(.],|IbV~FE");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 985, "", "p>xlT", (Options) null, 31, 1613, "J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "5?`]@(.],|IbV~FE", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 1613, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "5?`]@(.],|IbV~FE", (String) null, (Options) null, 31, 1613, "5?`]@(.],|IbV~FE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "&yRRiYTX(jnM$", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 31, 1613, "&yRRiYTX(jnM$");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1309), "]", "[ARG...]", (Options) null, 13, 1613, "[ARG...]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      String string0 = "f`&4!_}V7>bCW9\"";
      Options options0 = new Options();
      String string1 = "N~@KXzJUSY3JJz#RT";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("@sMQ", "N~@KXzJUSY3JJz#RT", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@sMQ' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      String string0 = "bZ4I04c";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 53;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("Kl~yw[", false, "Qw$#a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Kl~yw[' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 1;
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(31);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2254), options0, 1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-45);
      helpFormatter0.defaultSyntaxPrefix = " | ";
      StringBuffer stringBuffer1 = new StringBuffer(" | ");
      helpFormatter0.getOptPrefix();
      char char0 = 'A';
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt(3, 'A');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">sAV1(/8v 'A2#Tue");
      helpFormatter0.setWidth((-4405));
      helpFormatter0.setNewLine(">sAV1(/8v 'A2#Tue");
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setLeftPadding((-1752));
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("-", (-427), 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("-", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("O/rQ-Zw(l;'{js2");
      helpFormatter0.printHelp("has already been selected: '", "usage: ", options2, "arg");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", false, "QK0\"S/*,ofWi;wP");
      Option option0 = new Option("", "org.apache.commons.cli.Options", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options2, false);
      helpFormatter0.setDescPadding(3035);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(232, "QK0\"S/*,ofWi;wP", "9X>", options1, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      mockPrintWriter1.checkError();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile1;
      mockPrintWriter1.printf(locale1, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 142, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.createPadding(12);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "9X>", false, (String) null);
      helpFormatter0.printHelp(17, "NO_ARGS_ALLOWED", " ]", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "&yRRiYTX(jnM$", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 31, 1613, "&yRRiYTX(jnM$");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "[ARG...]", "[ARG...]", (Options) null, 13, (-1309), "a[afJ.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("LWa.B|DBQfD");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("LWa.B|DBQfD");
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultDescPad = (-437);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 1;
      String string1 = "";
      String string2 = "F5C ";
      Options options0 = new Options();
      String string3 = "sjJ/";
      String string4 = "usage: ";
      options0.getOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1353, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.setLongOptPrefix("[ option: ");
      helpFormatter0.setSyntaxPrefix("~9pjx$ 7Ng");
      helpFormatter0.setLeftPadding((-488));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      dataOutputStream0.flush();
      dataOutputStream0.write(0);
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      mockPrintWriter0.print((-773L));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2976), (-2976), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2891);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "QK0\"S/*,ofWi;wP");
      Option option0 = new Option("", "org.apache.commons.cli.Options", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options2, false);
      helpFormatter0.setDescPadding(3035);
      helpFormatter0.setSyntaxPrefix("ww)Xtw-;");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('c');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "");
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer1, 31, options0, 31, 0);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-230), "8C>>n6XN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-364), (-775), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",,~";
      helpFormatter0.defaultNewLine = ",,~";
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">sAV1(/8v 'A2#Tue");
      helpFormatter0.setWidth((-4405));
      helpFormatter0.setNewLine(">sAV1(/8v 'A2#Tue");
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setLeftPadding((-1752));
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1752), (-1752), "$>y}ViT:;d1eCdc");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'y';
      charArray0[2] = 'v';
      stringWriter1.write(charArray0, 3, 0);
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      stringWriter0.close();
      stringWriter1.append('6');
      char[] charArray1 = new char[0];
      mockPrintWriter0.println(charArray1);
      helpFormatter0.printWrapped(printWriter0, 1077, 0, "'");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'");
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1077, "Y");
      helpFormatter0.setOptPrefix("Y");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "5?`]@(.],|IbV~FE", objectArray0);
      int int0 = 1613;
      helpFormatter0.printWrapped(printWriter0, 31, 1613, "5?`]@(.],|IbV~FE");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, ".{gszC6", "[ARG...]", (Options) null, 31, 31, ".{gszC6");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 2495, "");
      helpFormatter0.setArgName("b@3ldoa}nzH.4g");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("b@3ldoa}nzH.4g");
      helpFormatter0.setNewLine("jDv\"9eiR]D$0!Om-8(");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      URI uRI0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = 0;
      stringWriter1.write("arg");
      String string0 = "ki kJH/J7h^VE!";
      Options options0 = new Options();
      String string1 = null;
      String string2 = "a";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = ")OHwtg&";
      // Undeclared exception!
      try { 
        options0.addOption(")OHwtg&", "5'rH<]I%*t^Wz3)o4", true, "I8Pjm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')OHwtg&' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      String string0 = "Y[>L%wG\"6C";
      helpFormatter0.setLongOptSeparator("Y[>L%wG\"6C");
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("oS$>OlZ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'oS$>OlZ' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
