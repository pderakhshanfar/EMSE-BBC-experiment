/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:32:05 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultWidth = (-925);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "8[Y$unAryyr[`rhO";
      helpFormatter0.setWidth(0);
      helpFormatter0.setArgName("%%J?E&+qU);T");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("%%J?E&+qU);T");
      helpFormatter0.findWrapPos("\n", 0, (-653));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      Options options1 = options0.addOption("", "--", true, "arg");
      options1.hasOption("");
      Options options2 = options1.addOption("arg", true, "arg");
      options2.getMatchingOptions("\n");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      OptionGroup optionGroup2 = new OptionGroup();
      options3.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1170, "", options3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      Options options1 = options0.addOption("", "--", true, "arg");
      options1.hasOption("");
      Options options2 = options1.addOption("arg", true, "arg");
      options2.getMatchingOptions("\n");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      String string0 = "cmdLineSyntax not provided";
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "NO_ARGS_ALLOWED", "cmdLineSyntax not provided", options1, 74, 63, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\"");
      options1.getMatchingOptions("brrb3j5\"");
      options1.getMatchingOptions(".BK_P:^2Aog3[");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "#k>", ".BK_P:^2Aog3[", options0, 32, 15, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      String string1 = "b]}5AUti1 HTNi1";
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "--", "usage: ", options0, 74, (-3665), "b]}5AUti1 HTNi1");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-974), options2, 2, 51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp(7, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.printHelp("Vz)L", "\n", options0, "Vz)L");
      int int0 = 26;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-31), options0, 74, 680);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-121), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1850);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1850, ":", (String) null, options0, (-3103), 0, ":", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      options0.getMatchingOptions((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "+w", "T8-V{K+>JvPH\"l>q:E0", options1, 603, 15, "+w", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ]", " ]", options0, "", false);
      int int0 = 32;
      helpFormatter0.defaultWidth = 32;
      int int1 = (-1078);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding((-1078));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 64, options0, 64, 64);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1078), (-1078), " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1289), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.setLeftPadding((-79));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter0.rtrim("--");
      helpFormatter0.printHelp(2241, " ", "D", options0, "", false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      doReturn(74, 0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.hasOption("");
      options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 53, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, 74, 53, "j$", true);
      helpFormatter0.setSyntaxPrefix("-");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintWriter printWriter1 = mockPrintWriter1.printf("Ss#^W]9v99", (Object[]) null);
      mockPrintStream0.checkError();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-4118), (-4118), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = "";
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", "U", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      doReturn(74).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.printHelp(10, "j$", "j$", options0, "j$");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.hasOption("");
      options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      String string0 = "p";
      int int0 = (-781);
      int int1 = 4;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3433, "J", "", options1, 4, (-4030), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "H!Yq!5)$x", "H!Yq!5)$x", (Options) null, "ZWKLIe{w*=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3096, (Options) null, 1307, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "6.#oif!vn=SDU";
      helpFormatter0.printHelp("ca@?rwEj1AYqo", options0);
      helpFormatter0.printHelp(114, "\n", "   ", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "Av563WE", options0, 2495, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Options options1 = options0.addOption("", "", true, "arg");
      options1.hasOption("");
      options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "p", "--", options0, (-781), 4, "p", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      doReturn(74).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.hasOption("");
      options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "p", "--", options0, (-781), 4, "p", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "6.#oif!vn=SDU";
      helpFormatter0.printHelp("ca@?rwEj1AYqo", options0);
      helpFormatter0.printHelp(114, "G'xY^Q`PTyS%nYAf=WJ", "   ", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "Av563WE", options0, 2495, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "6.#oif!vn=SDU";
      helpFormatter0.printHelp("ca@?rwEj1AYqo", options0);
      helpFormatter0.printHelp(114, "G'xY^Q`PTyS%nYAf=WJ", "   ", options0, (String) null);
      PrintWriter printWriter0 = null;
      int int0 = 3;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "6.#oif!vn=SDU", "G", options0, 43, 64, "ca@?rwEj1AYqo", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "6.#oif!vn=SDU";
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.printHelp(114, "=LXWHN", "]", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3175, "--", "Rh0wm'qdYu8", options0, 1636, 114, "=LXWHN", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">:oH+V@;Oi");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.printf("\n", objectArray0);
      mockPrintWriter2.format("v4v&xdCfn", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 2030, "UZGZl7l:'0z('", "", options0, 2030, 787, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2030, options0, (-1206), 787);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "-";
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      String string0 = "\"";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options2, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      doReturn(74, (-530)).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "org.apache.commons.cli.OptionGroup", false, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options2, 1, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "d)MP");
      helpFormatter0.printHelp(13, "7:r", "v(", options1, "");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('B');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "Q8z!nu#lV{9V$i", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(mockPrintWriter0, 74, options2, 74, 67);
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1822));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1787, "Hp>PuNncTSb");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("   ");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 578, options1, 578, 4002);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = options0.addOption("", "", true, "arg");
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printHelp("--", (String) null, options2, "");
      helpFormatter0.setNewLine("d~;Q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("d~;Q", "d~;Q", options3, "--", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ko");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      int int0 = 3133;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3133, "ko");
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(",i6Mfx", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',i6Mfx' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      doReturn(74, 0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "\"", options0);
      helpFormatter0.printHelp(printWriter0, 63, "j$", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {=[ option:    [ARG] :: arg ]} ]", options1, 74, 63, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2, "[ Options: [ short ", "", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(">");
      MockFile mockFile1 = new MockFile(mockFile0, "}ec9hlAkr|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("gEb3?d&|}'R*s'8QN/", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1359, "9n5ooFS+K gp>n5]@A", " ", (Options) null, (-3170), 110, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 2273, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("?c!C>9", 58, 53);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "?c!C>9");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setArgName("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1286), " ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      helpFormatter1.rtrim("I");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "-";
      Object[] objectArray1 = new Object[8];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-1166), "", "", options0, (-2129), 74, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      Options options0 = null;
      int int0 = 241;
      helpFormatter0.setLeftPadding(241);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-61);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 32, 1, "");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix((String) null);
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1708, "arg", "arg", (Options) null, 1708, 1708, "=?|ym&m[?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setLeftPadding(241);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(241, "xDF5=i;", "[", (Options) null, "[a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9n5ooFS+K gp>n5]@A";
      Options options0 = null;
      String string1 = null;
      MockFile mockFile0 = new MockFile(">");
      MockFile mockFile1 = new MockFile(mockFile0, "}ec9hlAkr|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("gEb3?d&|}'R*s'8QN/", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "}ec9hlAkr|", "}ec9hlAkr|", (Options) null, (-2024), (-2468), "X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      Object[] objectArray1 = new Object[8];
      mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
      helpFormatter1.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setLeftPadding(263);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option((String) null, " ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.addOption(option0);
      Options options2 = options1.addOption("", false, "\n");
      Options options3 = options2.addOption(option0);
      options3.addOption((String) null, false, "org.apache.commons.cli.HelpFormatter");
      String string0 = "j$";
      options3.getMatchingOptions("-");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[ Options: [ short java.util.HashMap@0000000008 ] [ long { =[ option: null    :: arg ]} ]";
      mockPrintWriter0.printf(locale0, "[ Options: [ short java.util.HashMap@0000000008 ] [ long { =[ option: null    :: arg ]} ]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printHelp("--", (String) null, options2, "");
      helpFormatter0.setNewLine("d~;Q");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "arg", true, "X0sVE7+l1,ucfg2?hR");
      int int0 = 64;
      int int1 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 64, (Options) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setArgName("[\"GZcOV");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("PK<vVyr");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      helpFormatter0.printHelp(114, "[a", "+hywt]}JNL#C", options0, "");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      helpFormatter0.printHelp(5056, "\n", "\n", options0, "\n", false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("=;pjCDb.Xltzt@4", "arg", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=;pjCDb.Xltzt@4' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "py] }mN8b+-HS}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultLeftPad = 74;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = 74;
      helpFormatter0.setWidth(74);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(74);
      String string0 = "line.separator";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("line.separator", "[", false, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp(551, "-", "1p1`![+>r+pd", options0, "!'jj6Chi%|e2.~N@Wo");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      helpFormatter0.printHelp(5056, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, "org.apache.commons.cli.OptionGroup", true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("=;pjCDb.Xltzt@4", "arg", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=;pjCDb.Xltzt@4' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray1 = new Object[8];
      mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int0 = (-4274);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1921, (-4274), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('~');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1186, "z#`", "", (Options) null, "7(Zb3xYY^P-`-T", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.createPadding(35);
      helpFormatter0.setArgName("s5g9jj");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 706, 0, "usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2380;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "-";
      Object[] objectArray1 = new Object[8];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Options options2 = options1.addOption("", "-", false, "");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options2, 2189, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "py] }mN8b+-HS}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn(1).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "+hywt]}JNL#C";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options3 = new Options();
      helpFormatter0.printOptions(printWriter0, 74, options1, 0, 74);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      Object[] objectArray1 = new Object[8];
      mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1837), "--", "yi l", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-459), "", "[a", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn(960).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "+hywt]}JNL#C";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null, true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.setSelected(option0);
      options3.addOption(option0);
      helpFormatter0.printHelp("eJ}nP0AR_i", options1, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      Options options2 = options1.addOption("", true, "vkKr%");
      Option option0 = new Option("arg", "-", false, "");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("h=", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('~');
      StringBuffer stringBuffer0 = new StringBuffer(14);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1582), (-1342), "<oKbV8a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      String string1 = "";
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 1087;
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = "k'KJ'|z0-";
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "k'KJ'|z0-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Options options1 = options0.addOption("", "", false, "arg");
      Options options2 = options1.addOption("arg", false, "arg");
      options0.getOption("usage: ");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "hB7ZOb5nWVx\"+;c[", options2);
      helpFormatter0.printHelp(printWriter0, 107, "Yn`$rVE`ZI'IMTQ", "", options2, 63, 107, "");
      helpFormatter0.printHelp("$C{V^Q", options2, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "usage: ");
      options0.getMatchingOptions((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 15, "org.apache.commons.cli.HelpFormatter$1", "+w", options0, 15, 15, "cDw0ZDx;h+d", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(1266, "Cannot add value, list full.", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      Options options1 = options0.addOption("", "--", true, "arg");
      String string0 = "";
      options1.hasOption("");
      Options options2 = options1.addOption("arg", true, "arg");
      options2.getMatchingOptions("\n");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "NO_ARGS_ALLOWED", "cmdLineSyntax not provided", options1, 74, 63, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "--";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      Object[] objectArray1 = new Object[8];
      mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-385), "K?", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      List list0 = options1.getMatchingOptions("usage: ");
      options1.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "F";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) list0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "j$";
      objectArray0[7] = (Object) "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      mockPrintWriter1.printf(locale0, "F", objectArray0);
      int int0 = 1025;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1025, "kxw", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "+hywt]}JNL#C";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "\"", options0);
      helpFormatter0.printUsage(printWriter0, 649, "JGV", options0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      MockFile mockFile0 = new MockFile(" ", "+hywt]}JNL#C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "N`]jha#g*)-:DgNG']");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      Options options2 = options1.addOption("arg", true, "arg");
      options2.hasLongOption("#jb^q");
      helpFormatter0.defaultOptPrefix = "";
      options1.getMatchingOptions("j$");
      options2.toString();
      options2.getMatchingOptions("usage: ");
      Option option0 = null;
      try {
        option0 = new Option("#jb^q", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#jb^q' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("Fj");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-508), "]", "]", (Options) null, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      StringWriter stringWriter2 = stringWriter0.append('G');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "";
      Options options2 = options0.addOption("", "ab", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 327, options2, 568, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      String string0 = "s5g9jj";
      helpFormatter0.setArgName("s5g9jj");
      String string1 = "A CloneNotSupportedException was thrown: ";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "@PR", "A CloneNotSupportedException was thrown: ", (Options) null, "org.apache.commons.cli.OptionGroup", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('b');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 1, 1);
      stringWriter1.write(3);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setOptPrefix((String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 5352, 0, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1542), "", "@PR", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 109, 109, "Wj@^5A\"9@jlbs7");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "usage: ", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 2873, options2, 74, 1);
      helpFormatter1.setLongOptSeparator("q#6gej;e^j?");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0);
      Options options1 = options0.addOption("", "--", true, "");
      options1.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options2 = options0.addOption("", false, "");
      options1.getMatchingOptions("0&MvAE");
      options2.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 74, "j$", options0);
      helpFormatter0.printHelp("Guz#c?V8UniKa_=?wa", options1, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "[ option: ", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      objectArray0[7] = (Object) locale0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "-", true, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%qy^e+";
      helpFormatter0.setLeftPadding(17);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2380, "%qy^e+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string1 = "J?tEN 4[t95m4=C<6S";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("-", "", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "-d_`-$*cL5yic`P-S}", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3681));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%qy^e+";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2380, "%qy^e+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      Object[] objectArray1 = new Object[8];
      mockPrintWriter0.format(locale0, "--", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "-", true, "");
      helpFormatter0.printOptions(mockPrintWriter0, 8, options0, 0, 2818);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1542);
      helpFormatter0.defaultOptPrefix = "`;xh9dM";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      String string0 = "@";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "r2R\"Kg>#tvzCY6^T^k", (Options) null, "@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = (-98);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      String string0 = "+hywt]}JNL#C";
      Options options0 = new Options();
      helpFormatter0.printHelp("+hywt]}JNL#C", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string1 = "";
      Options options1 = options0.addOption("", "", true, "arg");
      options1.toString();
      boolean boolean0 = true;
      Options options2 = options1.addOption("arg", true, "arg");
      options1.getMatchingOptions("j$");
      options2.toString();
      options2.getMatchingOptions("usage: ");
      Option option0 = null;
      try {
        option0 = new Option("#jb^q", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#jb^q' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('b');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 1, 1);
      stringWriter1.write(3);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = 5352;
      helpFormatter0.setOptPrefix((String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      stringBuffer0.append(charArray0);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 5352, 0, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getNewLine();
      String string1 = "F:DKJIGK";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O#<#LX#GHx";
      helpFormatter0.setSyntaxPrefix("O#<#LX#GHx");
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      options0.getOptions();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 941;
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultOptPrefix = "hO";
      helpFormatter0.setNewLine("hO");
      helpFormatter0.setArgName("_lscoaAM46%z");
      helpFormatter0.setLongOptPrefix("line.separator");
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.findWrapPos("line.separator", 941, 941);
      String string1 = "<jQ\\ifYv";
      String string2 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("hO", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      helpFormatter0.setLongOptPrefix("   ");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "*i&Nc", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "8[Y$unAryyr[`rhO";
      helpFormatter0.setWidth(0);
      helpFormatter0.setArgName("%%J?E&+qU);T");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("oDv?xGy=d7HmQ.", 0, (-653));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      objectArray0[6] = (Object) stringWriter1;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "-", true, "");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options2, 2189, 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-98);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9n5ooFS+K gp>n5]@A", "9n5ooFS+K gp>n5]@A", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3244);
      int int1 = (-2060);
      helpFormatter0.setNewLine("a=pB==Pwj\"");
      String string0 = "l,{j8@G#3p5-rwG";
      String string1 = ".e;z;.btJ2";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      StringBuffer stringBuffer0 = new StringBuffer("HD1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setArgName(".BX (]:(^{zdq~)");
      assertEquals(".BX (]:(^{zdq~)", helpFormatter0.getArgName());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultArgName = ".BX (]:(^{zdq~)";
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (byte)117, "");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("\n");
      helpFormatter2.rtrim((String) null);
      helpFormatter1.getLongOptSeparator();
      String string0 = helpFormatter1.getSyntaxPrefix();
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption(" ");
      String string0 = null;
      boolean boolean0 = false;
      Option option0 = new Option("arg", (String) null, false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "0,5L-Nt";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = null;
      try {
        option0 = new Option("0,5L-Nt", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0,5L-Nt' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
