/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:37:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = null;
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      Options options2 = options1.addOption("", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options2, 10, 79);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "cmdLineSyntax not provided";
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setArgName("78e|Gky*]/tx");
      helpFormatter0.findWrapPos("\"7KfBb", 0, 34);
      String string0 = "HFWt";
      helpFormatter0.rtrim("HFWt");
      int int0 = 3;
      String string1 = "CbkK9";
      String string2 = "[kkb1";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("78e|Gky*]/tx", true, "m;Pz[90Uoh`Mm9!)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '78e|Gky*]/tx' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-3120));
      helpFormatter0.printHelp(9, "arg", " ", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hh??VA\"sVWk", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "A CloneNotSupportedException was thrown: ";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string2 = "]L6`nqQ1J$ED=";
      helpFormatter0.defaultDescPad = 10;
      Options options0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FzJPcPEDdH6Mjt5cX~", "]L6`nqQ1J$ED=", (Options) null, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultNewLine = "a-";
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.printHelp("G", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1076));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 589, options0, 589, 589);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"2EaxfksA.7fw");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "", false, (String) null);
      optionGroup0.addOption(option0);
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", "@[h>*lv*is,_", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "?w$L]Gc;6_ eZ=DhTM");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("4", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp("-", "4", options1, "-", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "sM";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = null;
      int int0 = (-550);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("vAw3`Tsf", "uC'G6Sn67e_", true, "DsO^DG\"ms#`b0~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'vAw3`Tsf' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Options options1 = options0.addOption("arg", true, "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      options1.addOption((String) null, "usage: ", true, "");
      helpFormatter0.printHelp(")\"}u6*n-I!@Xt5", ")\"}u6*n-I!@Xt5", options1, (String) null, true);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = "FoQU7I=@Rz[ WPNx";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, "", options0, "X0A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "hP7dPesYb0";
      helpFormatter0.defaultLongOptPrefix = "hP7dPesYb0";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "/D/0$";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "org.apache.commons.cli.HelpFormatter$1", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "/D/0$", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "v3", "' contains an illegal character : '", options0, 0, 3360, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      String string0 = "";
      Options options2 = options1.addOption("", "--", true, (String) null);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 5772, options2, 5772, 5772);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+s=:hU/ H^/([R{", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(13);
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      stringWriter0.write("zOH:;EFIo%;HS'G+");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1450, "' contains an illegal character : '", "' contains an illegal character : '", options0, 1450, 1450, (String) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("' contains an illegal character : '", 3, 3);
      helpFormatter0.rtrim("' contains an illegal character : '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "-", "-", options0, 13, (-1682), "R^Q.MZY");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", "", true, "vF/X/SX[W5}Wi$");
      Options options2 = options1.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.setArgName("");
      option0.setArgs(74);
      option0.setRequired(true);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options2);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, ".V,*wIV", ".V,*wIV", options0, 9, 9, "n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "N5OrMU", "N5OrMU", options0, 74, 74, "-", false);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.defaultWidth = 8;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("p7AOOQ<}~vn:=c", "p7AOOQ<}~vn:=c", options0, "N5OrMU", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "-", "-", (Options) null, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<OptionGroup> linkedList0 = new LinkedList<OptionGroup>();
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      MockFile mockFile0 = new MockFile("arg", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "'", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, 0, 81, "An'Ib ", true);
      LinkedList<Option> linkedList1 = new LinkedList<Option>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-1547), "Cannot add value, list full.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "--");
      int int0 = (-362);
      helpFormatter0.setLeftPadding((-362));
      helpFormatter0.setDescPadding(540);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = null;
      options0.hasShortOption("");
      String string1 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(540, "usage: ", "Q~PE~Ud%>YU|*Mkp-A", options0, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      Options options0 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      int int0 = 2788;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2788, "-", (String) null, options0, 1, 14, "arg", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setArgName("#[");
      int int0 = (-1479);
      helpFormatter0.defaultWidth = (-1479);
      int int1 = 19;
      helpFormatter0.createPadding(19);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[1];
      String string0 = "";
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "                   ", 1, (-1479));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      Options options0 = new Options();
      options0.hasShortOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "usage: ", " ", options0, "\n");
      helpFormatter0.findWrapPos("--", 1768, 74);
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$1", "\n", options0, "--", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "line.separator", "org.apache.commons.cli.HelpFormatter$1", options0, 59, 48, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "N5OrMU", "N5OrMU", options0, 74, 74, "-", false);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, " f8bDy3N\"FE3+zp", " f8bDy3N\"FE3+zp", options0, " f8bDy3N\"FE3+zp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1252);
      helpFormatter0.setOptPrefix("-");
      helpFormatter1.getLongOptPrefix();
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.rtrim("[ option: ");
      StringWriter stringWriter0 = new StringWriter(1244);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1252, "v`ZF.>!W2qz<Ni+/", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("ohqRB'CK", "[G~7", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4158));
      helpFormatter0.setOptPrefix("UH)^c$Q0~4_");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      options0.addOption("arg", "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!;'1R}+;", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option((String) null, false, (String) null);
      option0.clearValues();
      helpFormatter0.createPadding(0);
      option0.setArgs(1);
      Options options1 = options0.addOption(option0);
      options0.toString();
      options1.hasShortOption("000Z3HOAQAD[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(39, " [ARG]", "", options1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", "", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((byte) (-57));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 17, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 12, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option((String) null, false, (String) null);
      option0.clearValues();
      option0.setArgs(1);
      options0.addOption(option0);
      options0.toString();
      options0.hasShortOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.rtrim("N}");
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      options0.hasShortOption("");
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter(64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter1.setWidth(0);
      helpFormatter0.defaultWidth = 3;
      Options options1 = options0.addOption("hP7dPesYb0", "--", true, "");
      // Undeclared exception!
      helpFormatter1.printHelp(", ", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option((String) null, false, (String) null);
      option0.clearValues();
      option0.setArgs(1);
      options0.addOption(option0);
      options0.toString();
      options0.hasShortOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Illegal option name '", options0);
      helpFormatter0.printHelp("]", "uVS", options0, "uVS", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2711);
      helpFormatter0.renderWrappedText(stringBuffer0, 2711, 2711, "");
      int int0 = 13;
      Options options0 = new Options();
      String string0 = "jXQ4@L<oo^(NX1q,e";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("jXQ4@L<oo^(NX1q,e", " ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jXQ4@L<oo^(NX1q,e' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      Options options0 = new Options();
      mockPrintWriter0.append(')');
      String string0 = "Exd:S\\u;W<L%eZ_ Z ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "-", string0, options0, 751, 708, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "g68j";
      String string1 = "PR,z!X4oYX\"1VF4d";
      helpFormatter0.setLeftPadding((-1019));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("PR,z!X4oYX\"1VF4d", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      options2.getOptions();
      helpFormatter0.setArgName("p7AOOQ<}~vn:=c");
      options1.toString();
      options0.hasShortOption("DI7z3r");
      helpFormatter0.rtrim("p7AOOQ<}~vn:=c");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter(1499);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 334, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println(true);
      helpFormatter0.defaultLeftPad = 731;
      mockPrintWriter0.println((double) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2585, 2123, ";0O");
      helpFormatter0.setWidth(2123);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(";0O", 1, 2123);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 3;
      Options options0 = new Options();
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        options0.addOption("^uU2,v6", "cmdLineSyntax not provided", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^uU2,v6' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      Options options0 = new Options();
      mockPrintWriter0.append('v');
      String string0 = "Exd:S\\u;W<L%eZ_ Z ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, (String) null, options0, 751, 1, "Md}XWx.{N)'S?6tV#:y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      helpFormatter0.defaultLeftPad = (-388);
      options0.addOption((String) null, false, "-");
      options0.addOption("arg", "", false, "");
      String string0 = "org.apache.commons.cli.ParseException";
      Options options1 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1960), "Qp?-", "org.apache.commons.cli.ParseException", options1, 658, (-388), "r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("oA7B", "--");
      option0.setDescription(".DA");
      Options options1 = options0.addOption("", true, "5|X");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("5|X", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append(')');
      String string0 = "Exd:S\\u;W<L%eZ_ Z ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 708, string0, "Md}XWx.{N)'S?6tV#:y", options0, 751, 751, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "--";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("9", true, "<))n:ZlI.+");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 32, "", options1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      options0.hasShortOption("--");
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("' was specified but an option from this group ");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "' was specified but an option from this group", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(90);
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "hP7dPesYb0");
      helpFormatter0.printHelp("p", "hl+2dcWN|b", options1, "natGN?gA1B4$", false);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("hl+2dcWN|b", 61, 61);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Option option0 = new Option("", "Dg3z.@6+J+3");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("_|");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options1, 67, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = 2489;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 2489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append(')');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      String string0 = "Md}XWx.{N)'S?6tV#:y";
      String string1 = "";
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      int int0 = (-1569);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "-", "", options1, 8, (-1569), "Md}XWx.{N)'S?6tV#:y", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "--";
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.defaultNewLine;
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("--", " ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      option0.setArgs(1);
      options0.addOption(option0);
      options0.toString();
      options0.hasShortOption("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("Illegal option name '", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\"beX^wuzpE");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (-1), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "Dg3z.@6+J+3");
      Options options1 = options0.addOption(option0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 81;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "", "[ARG...]", options1, 235, (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("");
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter(64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "--";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      options0.getOptionGroups();
      String string0 = "K\"}u6*ndI!B@Xt5";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "K\"}u6*ndI!B@Xt5", "K\"}u6*ndI!B@Xt5", options1, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("<");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object object1 = new Object();
      mockPrintWriter0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)32;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-4029), (Options) null, (byte)3, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      mockPrintWriter0.format(locale0, "z<", (Object[]) null);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 2133, options0, 3, (-1425));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-487);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-487), "hP7dPesYb0", "hP7dPesYb0", options0, 0, 1596, "hP7dPesYb0", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 2549;
      StringBuffer stringBuffer0 = new StringBuffer(2549);
      int int2 = 44;
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 44, options0, 74, 1597);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 72, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "a-";
      printWriter0.printf(" ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printUsage(printWriter1, 4375, "-");
      Option option0 = new Option("9", true, "<))n:ZlI.+");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", "-", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "--");
      helpFormatter0.setLeftPadding((-362));
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(540);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-362), "usage: ", "AV'8u", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "Dg3z.@6+J+3");
      option0.setLongOpt("\n");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(34);
      helpFormatter0.defaultOptPrefix = ";^W-ej/|bQ)o";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3411);
      helpFormatter1.rtrim("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      printWriter0.format(locale0, "z7dJ\"lR1E:t+vYEz", (Object[]) null);
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter0.rtrim("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.hasLongOption("tK]Qq^.! ");
      helpFormatter2.rtrim(" ");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      options0.toString();
      options0.hasShortOption((String) null);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1315, (String) null, "-", options1, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      mockPrintWriter0.format(locale0, "z<", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options0, (-922), (-130), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultWidth = 2645;
      helpFormatter0.setLongOptPrefix("5\u0001");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos(" ", 37, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.defaultOptPrefix = ";^W-ej/|bQ)o";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      helpFormatter0.printHelp(74, "[", "--", options0, "arg", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3249, 1, "-");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "' contains an illegal character : '", "--", options0, "--", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      String string0 = ";^W-ej/|bQ)o";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("[");
      helpFormatter0.rtrim("");
      String string1 = "38l'\\B:j1S]iFTUV9Ku";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-733), "38l'B:j1S]iFTUV9Ku", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("a-");
      mockPrintWriter1.append('o');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter3.format(locale0, "arg", objectArray0);
      int int0 = 2050;
      helpFormatter1.printHelp(printWriter0, 2050, "arg", "arg", options1, 1, 442, "-");
      // Undeclared exception!
      try { 
        options1.addOption(" ", "arg", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding((-2442));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getNewLine();
      Options options1 = new Options();
      options0.getOptionGroups();
      String string0 = "P}Hc{qkI&t5^we}J_";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "P}Hc{qkI&t5^we}J_", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter1 = printWriter0.format(locale0, "z7dJ\"lR1E:t+vYEz", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printOptions(printWriter0, 0, options0, 74, 74);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, 54, "usage: ", ",", options1, (-857), 74, "z<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("a-");
      helpFormatter0.getLongOptPrefix();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "a-";
      printWriter0.printf(" ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printUsage(printWriter1, 4375, "-");
      Option option0 = new Option("9", true, "<))n:ZlI.+");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("9", options1);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "af\"w`sF>wmy>Ft";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("af\"w`sF>wmy>Ft");
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "`xA$3K&";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "af\"w`sF>wmy>Ft", "|T:( 6[q", options0, 0, 0, "`xA$3K&", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "Dg3z.@6+J+3");
      Options options1 = options0.addOption(option0);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1341), "'", "Dg3z.@6+J+3", options1, "cb;&tVrj7", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      List list0 = options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "";
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":+}R17NmId)?+lUj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) list0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) linkedList0;
      objectArray0[8] = (Object) "--";
      mockPrintWriter1.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      helpFormatter0.rtrim("T&");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("2[5s~|", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("rg3R6.~/'UqMHpY)]");
      helpFormatter0.setDescPadding((-2442));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter2.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter1.printHelp(74, "|_UC?i7", (String) null, options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("usage: ");
      options0.toString();
      options0.hasShortOption("");
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "usage: ", options0, "a]~*tU5i");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      Options options1 = options0.addOption(option0);
      options1.toString();
      options1.hasShortOption("");
      helpFormatter0.printHelp("}!uuB2s5+{ZPa1aN;", options1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setDescPadding((-2442));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "3jm?-", false, "usage: ");
      options1.addOption("", (String) null, false, "usage: ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 605, 9, "3jm?-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("-");
      helpFormatter0.getLongOptPrefix();
      String string0 = "org.apache.commons.cli.ParseException";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      options1.getOptions();
      helpFormatter0.setArgName("");
      options0.toString();
      options1.hasShortOption("*DY[9}1>JBz$9u,V<X");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options2 = options1.addOption("arg", false, "<");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "usage: ", options2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.defaultOptPrefix = ";^W-ej/|bQ)o";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("\n");
      helpFormatter1.rtrim("org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "--", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      List list0 = options0.getMatchingOptions("a-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "";
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":+}R17NmId)?+lUj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[0] = (Object) "--";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) list0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) linkedList0;
      objectArray0[8] = (Object) "--";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption(" ");
      helpFormatter0.rtrim("}kZA)iE%tT]s}[`");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 3609, "a6%9=Xq ", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('W');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "[ARG...]";
      mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1332, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("<");
      int int0 = 11;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.defaultOptPrefix = ";^W-ej/|bQ)o";
      helpFormatter0.rtrim("cXB&\"|Y F-c^C");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setDescPadding(3619);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("-");
      helpFormatter0.defaultSyntaxPrefix = "";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.rtrim("U-`z**&");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.printHelp("G", options0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1188), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("FO`A4sFF");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getNewLine();
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("2jo#(K<K.J,Qk", options1);
      helpFormatter0.setSyntaxPrefix("k%");
      String string0 = helpFormatter1.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-373), options0, (-2411), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FO`A4sFF";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "FO`A4sFF", options0, "FO`A4sFF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2517), "cXB &\"?Y Q-c^C", "a-", options0, (-857), 3, "cXB &\"?Y Q-c^C");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("G>Q_dvD!viuP+w8}1|T", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "org.apache.commons.cli.ParseException";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "VGU5&T_g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hP7dPesYb0", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      String string0 = "org.apache.commons.cli.ParseException";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1960), "Qp?-", "org.apache.commons.cli.ParseException", options1, 658, (-388), "r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      String string0 = "&U(";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 592, "&U(");
      StringBuffer stringBuffer0 = new StringBuffer("&U(");
      int int0 = (-1286);
      int int1 = (-444);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1286), (-444), "&U(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("a k%Z");
      helpFormatter0.defaultOptPrefix = "a k%Z";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 0;
      String string0 = "usage: ";
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = 'W';
      charArray0[2] = '%';
      charArray0[3] = 'z';
      charArray0[4] = '.';
      charArray0[5] = 'V';
      mockPrintWriter0.write(charArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "usage: ", "z<", (Options) null, 0, 0, "$c-@u(H~V*-a@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.defaultLongOptPrefix = "-";
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      int int0 = 44;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1380);
      PrintWriter printWriter0 = null;
      int int0 = 1195;
      String string0 = "?";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1195, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hP7dPesYb0", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.setOptPrefix("arg");
      int int0 = (-2913);
      helpFormatter0.setLeftPadding((-2913));
      helpFormatter0.setNewLine("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int1 = (-919);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "KN(";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1721));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = (-1777);
      String string0 = "&= 'fUGMZwkNa|30CP{";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "p7AOOQ<}~vn:=c";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p7AOOQ<}~vn:=c");
      int int0 = (-487);
      Options options0 = new Options();
      int int1 = 0;
      int int2 = 1596;
      int int3 = 8;
      String string1 = "Md}XWx.{N)'S?6tV#:y";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "N5OrMU", "N5OrMU", options0, 1596, 1596, "Md}XWx.{N)'S?6tV#:y", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options0.hasShortOption("");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "a]~*tU5i";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "-", "-", options0, "a]~*tU5i");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1188);
      String string0 = "`tOdI8gd";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1188), (-3401), "`tOdI8gd");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      Options options1 = options0.addOption(option0);
      options1.toString();
      options0.getOptions();
      options0.hasShortOption("");
      helpFormatter0.printHelp("]", options1);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 625, (-1339));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1, 3);
      helpFormatter0.defaultArgName = "mTIN&D:dX)RB`~u";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setDescPadding((-405));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(59, "TJoFLb</5PZ;?o[+N", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = 'W';
      charArray0[2] = '%';
      charArray0[3] = 'z';
      charArray0[4] = '.';
      charArray0[5] = 'V';
      printWriter0.println();
      mockPrintWriter0.write(charArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "z<";
      objectArray0[1] = (Object) 'z';
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) printWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter1 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "$c-@u(H~V*-a@");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter1 = printWriter0.format(locale0, "z7dJ\"lR1E:t+vYEz", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, 54, "usage: ", ",", options1, (-857), 74, "z<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("xTA", false, "\n");
      String string0 = helpFormatter2.rtrim("--");
      assertEquals("--", string0);
      
      String string1 = helpFormatter2.rtrim((String) null);
      assertNull(string1);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(985, "\n", (String) null, options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("hP7dPesYb0");
      helpFormatter0.setDescPadding((-2442));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", (String) null, options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("p#f:uwo-;SE\"##");
      int int0 = (-1696);
      String string0 = "Ru%bFL9_S38VoM";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("uZ:", false, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'uZ:' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1813);
      String string0 = "wd[";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1004, 1004, "wd[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-388), "", "", (Options) null, (-857), (-1), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.renderWrappedText(stringBuffer0, 2834, 2834, "org.apache.commons.cli.Options");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding((-216));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 74, (-490));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("a-");
      options0.getOptions();
      helpFormatter0.setArgName("-");
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("");
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "-", "-", options0, "a]~*tU5i");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      List list0 = options0.getMatchingOptions("a-");
      Collection collection0 = new LinkedList<String>();
      helpFormatter0.setArgName("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "";
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":+}R17NmId)?+lUj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) list0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) collection0;
      objectArray0[8] = (Object) "--";
      mockPrintWriter1.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("GvE\"SK\"03!QPvX,nBM");
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      
      String string0 = "   ";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      Options options1 = options0.addOption("", true, "Gd7VeHf");
      options1.hasLongOption("");
      Option option0 = new Option("Gd7VeHf", true, "[ option: ");
      Options options2 = options1.addOption(option0);
      String string3 = "arg";
      boolean boolean0 = false;
      Options options3 = options2.addOption(string3, helpFormatter0.defaultSyntaxPrefix, boolean0, string2);
      helpFormatter0.printHelp(string0, string1, options3, string2, boolean0);
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FO`A4sFF";
      Options options0 = new Options();
      helpFormatter0.printHelp("&+", "FO`A4sFF", options0, "FO`A4sFF");
      // Undeclared exception!
      try { 
        options0.addOption("v|i?-|", "v|i?-|", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v|i?-|' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 669;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(669);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      String string0 = ":I.-hovjGL_\"%+08KT";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(669, "2Yr.v", ":I.-hovjGL_\"%+08KT", (Options) null, ":I.-hovjGL_\"%+08KT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
