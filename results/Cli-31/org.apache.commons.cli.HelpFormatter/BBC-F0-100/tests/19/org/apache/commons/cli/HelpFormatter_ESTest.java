/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:21:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "--");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", true, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultWidth = (-1);
      Options options3 = options2.addOption("", "", true, "K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!C=$}ZNuf\"", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp("n7\"szTLo$W|G8", options0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   ");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      helpFormatter0.renderOptions((StringBuffer) null, 12, options0, 12, 117);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 117, 117, "kP(C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-821);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2921, "NIa", "^c(DauX7^PAi3.'", options0, "cmdLineSyntax not provided", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultWidth = (-187);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", " ", (Options) null, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^5(]LY", "^5(]LY", options0, "^5(]LY");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.deleteOnExit();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1735);
      helpFormatter0.rtrim(" ");
      helpFormatter0.createPadding(1213);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("qv51^Rw4y0", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2979, "7p0iS75?n bRTi", "qv51^Rw4y0", options0, 2, 3, (String) null, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1661, "-", "-", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setArgName("");
      Option option0 = new Option("arg", "-");
      options0.addOption(option0);
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 2;
      String string0 = "!g%}T,FYVOp";
      Comparator<OptionGroup> comparator0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 73, "!g%}T,FYVOp", (String) null, options0, (-6068), 31, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-1047));
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I^}*W k2", "I^}*W k2", options0, "I^}*W k2", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option((String) null, "\n", true, "\n");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "|~+", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-343));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("dao", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 190, "-", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "--", false, "--");
      helpFormatter0.printHelp("[P[e;[RJ>Op|", options2);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultLeftPad = 3665;
      helpFormatter0.createPadding(13);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "[P[e;[RJ>Op|", "", options1, "j", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2125));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFile mockFile0 = new MockFile((File) null, "653;UIVEm:Jph@D");
      File file0 = MockFile.createTempFile("arg", "-", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = null;
      int int0 = 1;
      mockPrintWriter0.println((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2, (Options) null, 1, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      Options options1 = options0.addOption("arg", false, " ");
      helpFormatter0.printHelp("--", options1, false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      boolean boolean0 = true;
      Option option1 = new Option((String) null, "\n", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "D'sfN", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMAN;
      mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      mockPrintWriter0.println(false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      mockPrintWriter1.print((-328));
      mockPrintWriter1.print('');
      mockPrintWriter1.flush();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "%-d\"", "arg", (Options) null, 10, 10, ">", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options2, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Option option0 = new Option("vr9Zf", "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " Q&,&AEYh4x ]");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "vr9Zf", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      options0.getOptions();
      helpFormatter0.printHelp("C@", options1, true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "C@", "H<)y B", options1, "&*uQd%>tV}PJ~", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "[ARG...]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "6rxa+O(1av04Xp0", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JcS'0`{gO6";
      String string1 = "%1ImgE]AIL2";
      Options options0 = new Options();
      int int0 = (-2748);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 46, "JcS'0`{gO6", "%1ImgE]AIL2", options0, 46, (-2748), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1565));
      options0.addOption("?", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 38, 38);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("coEd53;@Er'GJzWef");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 3, string0);
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", "", options0, 2, (-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Option option1 = new Option("4sKVoa8F84fNveYlt", false, "-");
      OptionGroup optionGroup3 = optionGroup2.addOption(option1);
      options0.addOptionGroup(optionGroup3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("idTvNH", options2, true);
      helpFormatter0.printHelp("--", "$!FVACzx#O_", options2, "-");
      helpFormatter1.getWidth();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(184);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(" ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("arg");
      MockFile mockFile0 = new MockFile("Q~k!", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.println((Object) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.checkError();
      mockPrintWriter1.print("XT+q}");
      mockPrintWriter0.println('r');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter2.printf((Locale) null, "", (Object[]) null);
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      mockPrintWriter1.println(true);
      mockPrintWriter1.flush();
      helpFormatter0.printHelp(printWriter0, 940, "kNH:1eg%YwUcb1r}'", "xwn]HK?s=;ajo", options0, 940, 10, "kNH:1eg%YwUcb1r}'", true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(2359);
      helpFormatter0.setLeftPadding(2359);
      helpFormatter0.createPadding(10);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.rtrim(string0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.write(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.print((Object) helpFormatter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.format(" ", objectArray0);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) " ";
      objectArray1[1] = (Object) "v5^'k3&Y*N:~`B<|8,";
      objectArray1[2] = (Object) mockPrintWriter1;
      objectArray1[3] = (Object) printWriter1;
      objectArray1[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      mockPrintWriter1.format("v5^'k3&Y*N:~`B<|8,", objectArray1);
      helpFormatter0.printWrapped(printWriter1, 3169, "fs1QZAzyW5nu");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(')');
      stringWriter1.getBuffer();
      stringWriter0.write(0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "8'Kve5*&ds1 G.w&9");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      Options options1 = options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp("[", options1, true);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(false);
      mockPrintWriter0.flush();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "", options2, 3860, 0, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("arg");
      MockFile mockFile0 = new MockFile("Q~k!", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.checkError();
      mockPrintWriter1.print("XT+q}");
      mockPrintWriter0.println('r');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter2.printf((Locale) null, "", (Object[]) null);
      int int0 = 10;
      printWriter0.println(true);
      printWriter0.print('r');
      mockPrintWriter0.flush();
      helpFormatter0.printHelp(printWriter0, 10, "%-d\"", "", options0, 940, 0, "", false);
      helpFormatter0.printHelp("%-d\"", "[)1", options0, "");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 51;
      mockPrintWriter0.print(false);
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 51, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", true, "3fFL$=yn");
      Object object0 = new Object();
      option1.setType(object0);
      optionGroup0.addOption(option1);
      helpFormatter0.defaultLeftPad = (-2306);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.getAbsoluteFile();
      mockFile0.setLastModified(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print("");
      mockPrintWriter0.println('r');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFile0);
      mockPrintWriter2.println('v');
      mockPrintWriter3.printf((Locale) null, "i{A1eztf7\"}", (Object[]) null);
      mockPrintWriter0.println(true);
      mockPrintWriter3.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 940, "NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options0, (-28), 1343, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", true, "3fFL$=yn");
      optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasShortOption("--");
      options0.addOption("arg", true, "}V~A(V+'/(");
      helpFormatter0.printHelp("}V~A(V+'/(", options1, true);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption("", false, "");
      Options options2 = options1.addOption("arg", false, "");
      helpFormatter0.printHelp("C@", options2, true);
      helpFormatter0.createPadding(740);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, (Options) null, 32, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "4@3G1BWnB8+N _g");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "h=,2Uff:cI:Bg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "*jS_(=?^]`PEGhM=_2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 932, 932);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-613), "6Hob' G{Tlu");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "org.apache.commons.cli.Options", false, "-{hoS?{~G=4dd&y I$B");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 935, options2, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-2378), "-{hoS?{~G=4dd&y I$B");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp(" L}[QQb=", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ");
      optionGroup0.addOption(option0);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      Options options2 = options1.addOption("", "org.apache.commons.cli.OptionGroup", false, ":kcS}K@|g");
      helpFormatter0.printHelp(59, " | ", "", options2, " | ", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp("C@", options1, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp(" $}[{Qb=", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) stringWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) comparator0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 6628, "org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printHelp("r1wAm<EZX-$T}:BSTR", "r1wAm<EZX-$T}:BSTR", options0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      Option option0 = new Option((String) null, false, "|UHN");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, "--");
      options2.hasShortOption("");
      options2.addOption("arg", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("3fFL$=yn", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.OptionGroup");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, "arg");
      // Undeclared exception!
      try { 
        stringBuffer1.insert((-1525), (-2180));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1525
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter1.printHelp("--", options1, true);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options1, 1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "BB*BO=8YQF'M,tz", (Options) null, "{kfG.(X*$z{", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      Options options1 = options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp("[", options1, true);
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "[", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "M=k=SHZhNVtNU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      String string1 = ";c";
      String string2 = "]J`i~MWRnOF4z:cdr'";
      boolean boolean0 = false;
      String string3 = "F)^897";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-305), ";c", "F)^897", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.setLastModified(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.checkError();
      mockPrintWriter1.print("XT+q}");
      mockPrintWriter0.println('r');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter2.printf((Locale) null, "", (Object[]) null);
      mockPrintWriter0.flush();
      helpFormatter0.printHelp(printWriter0, 10, "%-d\"", "", options0, 941, 0, "", false);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("&", "", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(88, "arg", "arg", options0, "", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("nu yH4-DrU{Y");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "'", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "(wJ4MQ'fA\"-+[>6j,[S", false, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("r1wAm<EZX-$T}:BSTR", "", options0, "(wJ4MQ'fA\"-+[>6j,[S");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp(" $}[{Qb=", options0, false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      int int0 = (-4203);
      Options options0 = new Options();
      options0.hasOption("%S1sCvQ}");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4203), "\n", "\n", options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.setLastModified(74);
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setDescPadding((-1415));
      StringWriter stringWriter0 = new StringWriter(60);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1344), options0, 32, 6759);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.setLastModified(74);
      mockPrintWriter0.print("M8x\"owg");
      mockPrintWriter0.println('');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "M8x\"owg", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.print((Object) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 941, "M8x\"owg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-497), "", "To'^_}0f", options0, 0, 9, "D@Sx~", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "9%bPLv#GG^T<rwT";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1399), "", "9%bPLv#GG^T<rwT", options0, (-1399), 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1303, "", "", options0, "XQ(H\"i0xq aV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 5233, options0, 5233, 5233);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("coEd53;@Er'GJzWef");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 31, string0);
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.setLastModified(74);
      String string0 = "";
      mockPrintWriter0.print(" ");
      mockPrintWriter0.println('Z');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.printf((Locale) null, " ", (Object[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 941, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.Util", "", options0, 9, 3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2125));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      mockPrintWriter0.print("usage: ");
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, ".");
      helpFormatter0.setLongOptSeparator("j");
      helpFormatter0.setLeftPadding(2301);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("ylnL;j&2Sq$Vl\"XM=#", "arg", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ylnL;j&2Sq$Vl\"XM=#' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("coEd53;@Er'GJzWef");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 31, string0);
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "(", "(", options0, 2, (-1), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("]");
      Options options0 = new Options();
      helpFormatter0.printHelp("Fjke:\"p;%[c`(R", options0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("Hkv");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(wJ4MQ'fA\"-+[>6j,[S", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "-");
      Option option0 = new Option("Gg", "!|c#9RJY>,Crz0");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Gg", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp("[", options1, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("Q~k!", "");
      mockFile0.setLastModified(74);
      mockPrintWriter0.print("");
      mockPrintWriter0.println('r');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "-", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 759, " ");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "%-d\"", "", options0, 941, (-59), "%-d\"", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "{kfG.(X*$z{", (Options) null, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 941, options1, 34, (-30));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xz7VrK+S?8";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "wm", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print("coEd53;@Er'GJzWef");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 31, string0);
      printWriter0.print(true);
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      int int1 = 1299;
      helpFormatter0.printOptions(printWriter0, (-2), options0, 1290, 1299);
      String string1 = "f_[S+bC{NLsz~{C";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 284, (-5922));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "--";
      helpFormatter0.printHelp(64, "org.apache.commons.cli.HelpFormatter", "s~", options0, "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "#.Y-3$(DrzR<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #.Y-3$(DrzR<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 20, (-3295), "]03awh\"6`J@8{9<9s%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<~");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('l');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg", 3, 3);
      stringWriter2.write("usage: ");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = (-3123);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3123), (-3123), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 13, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.deleteOnExit();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      options0.addOption("arg", "21#", true, "org.apache.commons.cli.OptionGroup");
      stringWriter0.append('j');
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.write(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.print((Object) helpFormatter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.format(" ", objectArray0);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) " ";
      objectArray1[1] = (Object) "v5^'k3&Y*N:~`B<|8,";
      objectArray1[2] = (Object) mockPrintWriter1;
      objectArray1[3] = (Object) printWriter1;
      objectArray1[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      mockPrintWriter1.format("v5^'k3&Y*N:~`B<|8,", objectArray1);
      helpFormatter0.printWrapped(printWriter1, 3169, "fs1QZAzyW5nu");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(')');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter0.write(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 1019, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">", "(wJ4MQ'fA\"-+[>6j,[S", options0, "(wJ4MQ'fA\"-+[>6j,[S");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1485, (-850), "':5*RMzG3\"1yw_H$");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "bI";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "bI");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("#x.");
      int int0 = (-2309);
      String string0 = " [ARG]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2309), "D9I,,HLT)", " [ARG]", options0, " [ARG]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('l');
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      int int1 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        stringWriter2.write(charArray0, (-1), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("_?>P");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("hL!]{ximwVCrx@D,B");
      helpFormatter0.createPadding(2790);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-2105);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2105), 0, "hL!]{ximwVCrx@D,B");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.forLanguageTag("7");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "7";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1996, 1, "");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1303);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string1 = "coEd53;@Er'GJzWef";
      mockPrintWriter0.print("coEd53;@Er'GJzWef");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 31, string0);
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setLeftPadding((-2));
      int int0 = 2025;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "arg", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "jM5SSvR", (Options) null, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(".xIg&O{C-mF");
      String string0 = ">gc9?-.,{ ";
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      helpFormatter0.setSyntaxPrefix(">gc9?-.,{ ");
      int int1 = 1773;
      helpFormatter0.defaultNewLine = ".xIg&O{C-mF";
      helpFormatter0.defaultLongOptPrefix = "`#Q[=y*9|";
      helpFormatter0.setDescPadding(1773);
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("`#Q[=y*9|");
      helpFormatter0.setLeftPadding(1818);
      String string1 = "ZlOdN^";
      helpFormatter0.setArgName("ZlOdN^");
      helpFormatter0.setWidth(1773);
      helpFormatter0.setDescPadding(1);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("hH_", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 44, (String) null, "h", options2, 34, 3653, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "--";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter", "", options0, "--");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xz7VrK+S?8";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "R,@:!s(U";
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.printHelp("mG8?`cbRc2&v", "xz7VrK+S?8", options0, "xz7VrK+S?8");
      helpFormatter0.printHelp("<! 8FZm]DP@n=3", options0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xz7VrK+S?8";
      helpFormatter0.setNewLine("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 941, "OekH-]AQ -(5P.#", "OekH-]AQ -(5P.#", options1, 941, 0, "(");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "1/,V~d#{R#H~5";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(1);
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("1/,V~d#{R#H~5", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "Sw=vmSxvCNC{";
      MockFile mockFile0 = new MockFile("Sw=vmSxvCNC{");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(45);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 2761;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " | ";
      helpFormatter0.setSyntaxPrefix("J>H]0?|%mVm8#Z+)R");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 74;
      Options options0 = new Options();
      options0.getOptionGroups();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("wfu{fW'MW2wZA3_", "J>H]0?|%mVm8#Z+)R", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'wfu{fW'MW2wZA3_' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
