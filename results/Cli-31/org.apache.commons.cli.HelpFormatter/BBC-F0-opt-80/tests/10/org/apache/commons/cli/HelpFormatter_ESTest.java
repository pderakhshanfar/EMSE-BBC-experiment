/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:16:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("E", true, "--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("has already been selected: '", (-2), 9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$I]x|sCV^!@Yk:zNg");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      MockFile.createTempFile("Kjg", " ");
      options0.addOption("Kjg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", " ", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.defaultWidth = (-481);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("-");
      String string0 = "Kjg";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", options0, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-402), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-937));
      MockFile.createTempFile("Kjg", " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Kjg", "q>f#)E4l@c[H", options0, "-@PD<x;>@:5");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$\"+cZtpuIn#ocPVMkLe");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "$\"+cZtpuIn#ocPVMkLe", "$\"+cZtpuIn#ocPVMkLe", options0, (-3103), (-3103), "org.apache.commons.cli.Option", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 25, "' was specified but an option from this group ", "' contains an illegal character : '", options0, 10, 2, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "et>po<4T";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("et>po<4T");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "et>po<4T";
      objectArray0[2] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "Cannot add value, list full.");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options3 = options2.addOption((String) null, true, "(l?Q vpOL");
      Options options4 = options3.addOption("Vl5", "Cannot add value, list full.", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y9536f", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "-", options0, 74, 74, "-", false);
      helpFormatter0.defaultOptPrefix = "dNN`3pUkg:s'J";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "dNN`3pUkg:s'J", "H*D(SRTs:p &,e{]", options0, 304, (-792), "dNN`3pUkg:s'J");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2875, ">", "0@=j#C!,)1u[pE+", options0, 2875, 2875, "0@=j#C!,)1u[pE+", false);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, (-560), options0, 2875, 2875);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(43, "hO~IhKZ9n~seF/^))", "", options0, "!;.nP7", false);
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "hO~IhKZ9n~seF/^))", "", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x4U?q&1l#Jx.", "x4U?q&1l#Jx.", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-783));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">f]tWZN+ }x", "GY", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      options0.hasOption("--");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "(_Rk2JL!kJ07e#$BV^k", "'", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "line.separator";
      PrintWriter printWriter0 = null;
      int int0 = 1028;
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "line.separator", true, "]`a<qWT");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1028, options2, 1, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-3023), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCV^!@Yk:zNg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", true, "PS>14F.w;YuR_>^/_%");
      option0.addValueForProcessing("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string0 = "i0k3\\0R,Z(EI1L9KqM5";
      MockFile.createTempFile("i0k3\u0000R,Z(EI1L9KqM5", "(\":[&U");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "(\":[&U", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "h-gS)kh";
      options0.addOption((String) null, false, "h-gS)kh");
      int int0 = 1120;
      String string1 = " ]";
      helpFormatter0.setLongOptSeparator(" ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1120, "Jl", (String) null, options0, 5907, 1120, "h-gS)kh", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("pp-gZ&e~C%`M");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, 15, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 46, (-1628), "");
      helpFormatter0.getNewLine();
      int int0 = (-489);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "(_Rk2JL!kJ07e#$BV^k", "'", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCV^!@Yk:zNg");
      Options options0 = new Options();
      MockFile.createTempFile("arg", " ");
      options0.hasLongOption((String) null);
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "7/K&D[IQ6O| ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter2.printOptions(mockPrintWriter0, 1528, options0, 48, 1722);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      options1.getOptionGroups();
      helpFormatter0.printHelp(64, "h-gS)kh", (String) null, options1, (String) null, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h-gS)kh");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 507, 507, "(G tSrmhdkcc,Gb");
      helpFormatter0.createPadding(507);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      String string0 = "arg";
      MockFile.createTempFile("!^a[T", "");
      String string1 = "A?N*NJc~";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 344, "ed.;%/qh*/", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(33, "I~2JO(#6%Ou$", "I~2JO(#6%Ou$", options1, "MEW^u=z9;(?\"$nRfd(", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCV^!@Yk:zNg");
      Options options0 = new Options();
      MockFile.createTempFile("arg", " ");
      options0.hasLongOption((String) null);
      helpFormatter0.printHelp(3, "\n", " ", options0, "--", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp(74, " | ", "", options0, "--", true);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1736, ">", "", options0, 1736, 9, ">", false);
      helpFormatter0.printHelp(26, ", ", "Cannot add value, list full.", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      Options options0 = null;
      String string1 = "l2f)gf9Dd;_@O";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "l2f)gf9Dd;_@O", "l2f)gf9Dd;_@O", (Options) null, "org.apache.commons.cli.Util");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp(1736, "arg", "arg", options0, "arg", false);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1079, ".", options1);
      helpFormatter0.setLongOptSeparator("[");
      helpFormatter0.setLongOptSeparator((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2459, (String) null, "Z", options1, 2459, 17, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "  ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CP!3");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("eFxa", false, "  ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "sn?%9-agwv|PVQEQj", "sn?%9-agwv|PVQEQj", options1, (-2), 468, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCV^!@Yk:zNg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", " ");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      bufferedOutputStream0.write((-2069));
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(1733, "M*(=s", (String) null, options0, "", false);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 403, ">", (String) null, options0, 26, 26, "", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 403, "<5SlPzBK;|xB9$!-b", "<5SlPzBK;|xB9$!-b", options0, 1104, 1086, ">");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(1736, "M*(=s", (String) null, options0, "", false);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 403, ">", (String) null, options0, 26, 26, ".", false);
      helpFormatter0.printHelp(26, "&b(o&ztUM~<s#@Q!: ", ">", options0, "yx)800hP", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      helpFormatter1.printHelp(3, "\"", "-", options0, "", true);
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "cmdLineSyntax not provided", options0, 3, (-489), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setSyntaxPrefix("{5fN)e8-`f/[dW");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.write(3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, (String) null, "{5fN)e8-`f/[dW", options0, 34, (-1), "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2673);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(1736, " ", " ", options0, " ", true);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1361), " ", " ", options0, 0, (-2921), "EV4S1/7Ery}", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp(1736, "arg", "arg", options0, "arg", false);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp(13, "--", ",zQJrCOvo", options0, ">", true);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = '<';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "+=F=H$0D", "org.apache.commons.cli.HelpFormatter$1", options0, 598, 2596, "IIVM;<iv=*+gVG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(1736, " ", " ", options0, " ", true);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1361), " ", " ", options0, 0, (-2921), "EV4S1/7Ery}", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setSyntaxPrefix("'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter1.printHelp("'", "'", options0, "arg");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("--");
      int int0 = 1736;
      helpFormatter0.printHelp(1736, "arg", "arg", options0, "arg", false);
      String string0 = ">";
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1736, ".", ">", options0, (-1361), 1736, ".", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCp^Yk:zNg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$y]x|sCp^Yk:zNg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3883), 114, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("arg", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      String string0 = "";
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 1013, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "k/", true, "Cannot add value, list full.");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption((String) null);
      helpFormatter0.printHelp(1046, "Cannot add value, list full.", "", options0, " [ARG]", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      helpFormatter0.printHelp("-", "-", options0, "|d[|^_ctI");
      helpFormatter0.printHelp(1, " ", "", options1, "]", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.rtrim("   ");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3099);
      helpFormatter0.defaultDescPad = (-3099);
      helpFormatter0.setWidth((-3099));
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 443, "   ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 90, "   ");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCp^Yk:g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter1.printHelp("\n", "uM;x0<Qk)i&r40F$k;", options1, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "line.separator", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = 1398;
      helpFormatter0.setLongOptPrefix(" [ARG]");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1398, 1398, " [ARG]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-155));
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.hasShortOption("arg");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(27, " ", "h-gS)kh", options2, "h-gS)kh", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      String string0 = "The option '";
      Options options0 = new Options();
      helpFormatter0.printHelp("0mN//C/*rd", "0mN//C/*rd", options0, "The option '", false);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setDescPadding(3550);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("  ", options0, false);
      helpFormatter0.getArgName();
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$OptionComparator", "The option '", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "h-gS)kh");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ROZ'ul\".l";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("ROZ'ul\".l");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp(53, "ROZ'ul\".l", "ROZ'ul\".l", options1, "The option '", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 53, options1, 32, 132);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 132, options0, (-5906), (-5906));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("|$+>eKU");
      Options options0 = new Options();
      MockFile.createTempFile("@D*[~", "");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptSeparator("@D*[~");
      helpFormatter0.setLongOptSeparator("/Sc6tz.^Wde}H");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "/Sc6tz.^Wde}H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "09>dmM^0$vq2MqJh58<", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2679), options0, 41, (-439));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("Cannot add value, list full.").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      String string0 = "";
      mockFileOutputStream0.release();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, (-625), (-505));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The option '";
      helpFormatter0.printHelp("arg", "line.separator", options0, "   ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "-", "", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ROZ'ul\".l";
      Options options0 = new Options();
      options0.helpOptions();
      Collection collection0 = options0.getOptionGroups();
      Options options1 = options0.addOption("", true, "ROZ'ul\".l");
      helpFormatter0.printHelp("ROZ'ul\".l", options1, true);
      options1.getOptionGroups();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "ROZ'ul\".l";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) collection0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("uct/GPWIzK,:^M!+.G");
      helpFormatter1.setLongOptSeparator(")4RU<tctmH6y^S");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos("o", (-1697), 592);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption((String) null, true, "h-gS)kh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The option '";
      objectArray0[1] = (Object) options0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printHelp(9, "--", "Nk&", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "oFQ*]+=", options0, "The option '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The option '";
      helpFormatter0.printHelp("arg", "line.separator", options0, "   ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.helpOptions();
      options0.getOptionGroups();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "k%zxbR]b@-*Zn8!xD");
      helpFormatter0.printHelp("Illegal option name '", options0, false);
      String string1 = "&Ylt=FjS`As";
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("");
      helpFormatter1.setLongOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-562), options0, (-1037), (-1037));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "h-gS)kh");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1439, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "M";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", "-").when(comparator0).toString();
      doReturn((-2550)).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "M";
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("arg", "M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "-");
      int int0 = 3;
      String string0 = null;
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("", "' contains an illegal character : '", false, "");
      Option option0 = new Option("n", false, "usage: ");
      options2.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 12;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1700), options2, 12, 1010);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "g+y-]D[:xy]'`H");
      Options options2 = options1.addOption("arg", true, "Fw#X8z82,__jdT");
      helpFormatter0.printHelp("\n", "]", options2, "\n");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      options0.addOption("arg", "Ghflt", false, "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The option '";
      helpFormatter0.printHelp("arg", "line.separator", options0, "   ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      options1.hasShortOption("arg");
      helpFormatter0.printHelp(1120, " ] [ long ", "sx9u1", options0, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1120, options0, 1120, 1410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" [ARG]");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("$y]x|sCV^!@Yk:zNg");
      Options options0 = new Options();
      MockFile.createTempFile("arg", " ");
      options0.getMatchingOptions(" ");
      helpFormatter0.printHelp(3, "\n", " ", options0, "--", true);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "Vd8EnxR6Hi^tK[O?l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ROZ'ul\".l";
      Options options0 = new Options();
      String string0 = "";
      options0.helpOptions();
      Collection collection0 = options0.getOptionGroups();
      Options options1 = options0.addOption("", true, "ROZ'ul\".l");
      helpFormatter0.printHelp("ROZ'ul\".l", options1, true);
      options1.getOptionGroups();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "ROZ'ul\".l";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) collection0;
      objectArray0[6] = (Object) "ROZ'ul\".l";
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, "org.apache.commons.cli.Util");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The option '";
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "   ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator(" ");
      helpFormatter0.setLongOptSeparator("-");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1060), "o&eEP4=62M`w(WA4fS", (String) null, options0, "   ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.helpOptions();
      options0.getOptionGroups();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "k%zxbR]b@-*Zn8!xD");
      helpFormatter0.printHelp("Illegal option name '", options0, false);
      String string0 = "&Ylt=FjS`As";
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      options1.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "arg", true, " ");
      Options options3 = options2.addOption(option0);
      String string1 = null;
      options3.addOption((String) null, " ", false, "\"{f<-(%U");
      helpFormatter0.getArgName();
      String string2 = "R#KdyGI|9\"t_tVs9-^";
      // Undeclared exception!
      try { 
        options2.addOption("{EPR<XFy'Ce", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{EPR<XFy'Ce' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3448), "L!k*", ";@NswU@12x[MI&[A1U", options1, "L!k*", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("0mN//C/*rd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "0mN//C/*rd";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "The option '";
      objectArray0[4] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      mockPrintWriter0.printf("", objectArray0);
      mockPrintStream0.printf("NG!sa!?!1~", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "The option '");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "?(S ", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "d1#_3xO%!+6+v- '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("arg", "?D.Ro-9v", false, "d1#_3xO%!+6+v- '");
      Options options1 = options0.addOption("E", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "E", "E", options1, "E", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", "-").when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("arg", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("", "' contains an illegal character : '", false, "");
      Option option0 = new Option("n", false, "usage: ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, (String) null, options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "UJ-g)\tfO-jZ/ w4");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp(63, "A CloneNotSupportedException was thrown: ", (String) null, options2, "", false);
      helpFormatter0.createPadding(1523);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("uqLcfbmUX}nd$it0>G");
      MockFile mockFile0 = new MockFile((String) null, "L)T#AsO");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("-", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options2 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "", options2);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.renderOptions((StringBuffer) null, (byte) (-126), options2, (byte)1, 11);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("0mN//C/*rd", "0mN//C/*rd", options0, "The option '", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2237), "0mN//C/*rd", "n0", options0, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "RZ'uYl.l";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      options0.helpOptions();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", true, "RZ'uYl.l");
      helpFormatter0.printHelp("RZ'uYl.l", options1, true);
      String string1 = "&Ylt=FjS`As";
      options0.getOptionGroups();
      helpFormatter0.setLongOptPrefix("&Ylt=FjS`As");
      String string2 = "O=t";
      helpFormatter0.setDescPadding(45);
      File file0 = MockFile.createTempFile("&Ylt=FjS`As", "O=t");
      try { 
        MockFile.createTempFile("arg", "&Ylt=FjS`As", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "  ";
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string1 = "--";
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) " ");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream2);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 3;
      Options options1 = new Options();
      options0.addOption("arg", true, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile(".wU");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "rH0 `}dZLru('c{", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("]z{ \"M", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.findWrapPos("", 3914, 3914);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "", (String) null, options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      helpFormatter0.printHelp(63, " ]", "mUk+Jerl", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("0mN//C/*rd", "0mN//C/*rd", options0, "The option '", false);
      int int0 = 0;
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("-");
      mockFile0.setReadable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "0mN//C/*rd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("NV62Lg4#?Uf", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      mockFileOutputStream0.getChannel();
      Option option0 = new Option("arg", "NV62Lg4#?Uf");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      File file0 = MockFile.createTempFile("arg", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("  ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gSO&e!?Y.mG$(<");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      String string1 = "{";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("{", "", options0, "");
      Options options1 = options0.addOption("", true, "\n");
      String string2 = "jY`o]U}b|7~eWya}AAc";
      options1.addOption("arg", "P)C??@bUhVr", false, "P)C??@bUhVr");
      Option option0 = new Option("", "jY`o]U}b|7~eWya}AAc");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("</E,L");
      Options options3 = options2.addOptionGroup(optionGroup1);
      String string3 = "87";
      // Undeclared exception!
      try { 
        options3.addOption("usage: ", "87", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("   ");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "The option '", options0, ":F]B#zomy_dS!", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultLongOptPrefix = null;
      String string1 = "vP*c:2,i-";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "vP*c:2,i-", options0, "vP*c:2,i-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      int int0 = 9;
      stringBuffer0.append((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 262, "G?zN9}T");
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(".6s|0*H}!{m2Pk", 32, 32);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1880);
      int int0 = (-140);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-140), 508, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ROZ'ul\".l";
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", true, "ROZ'ul\".l");
      helpFormatter0.printHelp("ROZ'ul\".l", options1, true);
      String string0 = "&Ylt=FjS`As";
      options0.getOptionGroups();
      helpFormatter0.setLongOptPrefix("&Ylt=FjS`As");
      helpFormatter0.printHelp("O=t", options1);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "h-gS)kh");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "arg", true, " ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption((String) null, " ", false, "\"{f<-(%U");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options4, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string1 = "NO_ARGS_ALLOWED";
      String string2 = "-";
      String string3 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "ROZ'ul\".l";
      Options options0 = new Options();
      String string0 = "";
      options0.helpOptions();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", true, "ROZ'ul\".l");
      helpFormatter0.printHelp("ROZ'ul\".l", options1, true);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uqLcfbmUX}nd$it0>G";
      Options options0 = null;
      helpFormatter0.defaultWidth = (-1143);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("uqLcfbmUX}nd$it0>G", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("hwfY2t&#s");
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getLongOptSeparator();
      try { 
        MockURI.URI("arg", "Fuk///hJ\"d+UiW j", " ", (-223), "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 6: arg://Fuk%2F%2F%2FhJ%22d+UiW%20j@ :-223?#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine("C*cS;$Fg9xiE\"}&>");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-389), options0, 1587, 4474);
      int int0 = 17;
      helpFormatter0.setWidth(17);
      helpFormatter0.setSyntaxPrefix("C*cS;$Fg9xiE\"}&>");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(32);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      filterOutputStream0.write(3);
      int int0 = 6255;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 6255);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)1;
      bufferedOutputStream0.write(byteArray0);
      filterOutputStream0.flush();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }
}
