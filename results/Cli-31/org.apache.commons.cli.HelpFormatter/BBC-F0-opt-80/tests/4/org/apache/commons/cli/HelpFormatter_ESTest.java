/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:14:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3656));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}OLPY,xj&1]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "arg");
      helpFormatter0.printHelp("-", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getArgName();
      int int0 = (-3158);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "XrY";
      helpFormatter0.defaultOptPrefix = "XrY";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/  >I~bxyV|");
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "N7/D}UTmQi!'n&g0b";
      String string2 = "C\"nE)KD{h";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("N7/D}UTmQi!'n&g0b", "C\"nE)KD{h", true, "N7/D}UTmQi!'n&g0b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'N7/D}UTmQi!'n&g0b' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "!\\U[LgW#<W";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "Q>^<I.=H!K'ut'", "!U[LgW#<W", (Options) null, "6zV|L2ba", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ Options: [ short ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "uv=;+3TX@6");
      Options options2 = options1.addOption("", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("sqsVEi", ";CFT\"B>m]NPHcG3vV");
      optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[ Options: [ short ", options3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "T#UxL@=NF#m", options0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-10), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 41, (-1354), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultLeftPad = (-1994);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(17, "org.apache.commons.cli.OptionGroup", "8r0J|7![GH*H", options0, "8r0J|7![GH*H", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l");
      int int0 = (-871);
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "Q");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2411, 212);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("5fO", "5fO", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T5/Cn", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "BJC|Pm>+]O2", true, (String) null);
      helpFormatter0.printHelp("'=", "m1x+=/fn2Wa.", options1, "'=");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "!\\U[LgW#<W";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("5fO", "5fO", false, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 5, options0, 5, 850);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "--", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nG4f`BVs8iN#Z<^oE");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "nG4f`BVs8iN#Z<^oE", (String) null, options0, 0, 436, "", true);
      helpFormatter0.printHelp("nG4f`BVs8iN#Z<^oE", "org.apache.commons.cli.Option", options0, "nG4f`BVs8iN#Z<^oE");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 897, ":1 5; Vi+R8~|*", "{", options0, 0, 1270, (String) null, true);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "@^mA~", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "@^mA~", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "IyV<\\\u0001pE)s4Q\"J[Ha", "|F8", options0, (-1), (-1), "|F8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "`4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.flush();
      mockPrintWriter0.print('c');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "RHVR~CZ[w|\"y9k#*N", options0);
      boolean boolean0 = true;
      String string0 = "Qx?`)`z%qM2cE+0";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2, options0, (-1), (-560));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      options0.addOption("5fO", "5fO", true, "usage: ");
      int int0 = 2;
      String string0 = "RHVR~CZ[w|\"y9k#*N";
      MockFile.createTempFile("RHVR~CZ[w|\"y9k#*N", "arg");
      URI uRI0 = MockURI.aHttpURI;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1392), "RHVR~CZ[w|\"y9k#*N", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2219), "H^_TO7Y$vP{n(%7gg0{", "}", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VE^r~}rt");
      int int0 = 34;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "#", "#", options0, (-1388), (-1388), "XeN~biv6TYEym", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("5fO", "5fO", false, "usage: ");
      File file0 = MockFile.createTempFile("RHVR~CZ[w|\"y9k#*N", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.Options", options1);
      String string0 = null;
      Options options2 = options0.addOption("", false, "5mC$uta>B;l]XbA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options2, "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "IQKv6.I~\"H_W7Kg[b-w");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.printHelp("--", "--", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 2614, options0, 2614, 2614);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "h'k&}2Owy", options1, "rxUrM^4u;j%}bIu?-+", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      helpFormatter0.setNewLine("iB/)Er #3d1MZ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      mockPrintWriter0.print(0L);
      helpFormatter0.printWrapped(printWriter0, 2224, "iB/)Er #3d1MZ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options1 = options0.addOption((String) null, true, "iB/)Er #3d1MZ");
      Options options2 = options1.addOption((String) null, "usage: ", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1857, "[", "Y.d%uL%KG}32 [8>)", options2, 1679, 199, "~i;NJ6SeoD26q", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ", true, "-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "6Q@H1c8G-;tySQ");
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "eKr&{>)>Y-+w53+16+";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "3&#?*q,*";
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "6Q@H1c8G-;tySQ";
      mockPrintWriter0.printf("6Q@H1c8G-;tySQ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      int int0 = 2267;
      helpFormatter0.printWrapped(printWriter0, 2267, 2267, "");
      helpFormatter0.setOptPrefix("");
      String string0 = "usage: ";
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, (Options) null, 2267, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("K3$f");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.format(" | ", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options2 = new Options();
      Options options3 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 914, "DTiI&fvt1Mk{:@]IM", " | ", options3, 2161, 2224, "R*c!#tm-te?x#-B", true);
      helpFormatter0.printHelp("DTiI&fvt1Mk{:@]IM", "K3$f", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      Options options0 = new Options();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options1;
      PrintStream printStream0 = mockPrintStream0.printf("H7&8/:1", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp(printWriter0, 2225, "H7&8/:1", "", options0, 170, 101, "", false);
      helpFormatter0.printHelp("$3.^a{}bpSzE", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", " ", options0, "-");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 3, (-1742), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.findWrapPos("qb", 10, 10);
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<", ", ", options1, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 9;
      int int1 = 2191;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "d`&\"65M'Y;nSEMBsp;", options0, "d`&\"65M'Y;nSEMBsp;", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("q", "q", true, "usage: ");
      Option option0 = new Option("", "3&#?*q,*", true, "\n");
      options0.addOption("", true, "");
      helpFormatter0.printHelp("3&#?*q,*", "", options0, "");
      File file0 = MockFile.createTempFile("usage: ", "eKr&{>)>Y-+w53+16+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "q";
      objectArray0[1] = (Object) "3&#?*q,*";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2, "[m9", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 1, "");
      Options options0 = new Options();
      options0.getOption("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options0, "!U[LgW#<W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 64, 1440, "q");
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer1, 64, 92, "");
      String string1 = "4/,d2qP>q^Jd3";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3208), " ", "", (Options) null, "v3Cp|P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      String string2 = "0,iobfznqr8||g";
      helpFormatter0.printHelp("KT6g={G", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1499, "org.apache.commons.cli.HelpFormatter", ":>", (Options) null, "0,iobfznqr8||g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.UK;
      locale0.getDisplayName(locale1);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.createPadding(37);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("E).xp>!OYT%h", "-", (Options) null, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(2224);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.defaultLongOptPrefix = string0;
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printWrapped(printWriter0, 515, string0);
      int int0 = 737;
      String string1 = "--";
      String string2 = ":Jm@m";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('&');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Options options0 = new Options();
      options0.addOption("", false, "--");
      int int0 = 2225;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1491, "", "JI>B\"n", options0, (-1400), 2225, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.UK;
      locale0.getDisplayName(locale1);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.createPadding(37);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "";
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options1);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.defaultSyntaxPrefix = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "<", "--", options0, "4/,d2qP>q^Jd3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.createPadding(34);
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 3, 4);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 897, "\n");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Options options1 = new Options();
      options0.toString();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) options1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) options1;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.AlreadySelectedException", objectArray0);
      helpFormatter0.printUsage(printWriter0, 34, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 23, "");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getOptionComparator();
      helpFormatter0.printOptions(printWriter0, 34, options1, 31, 74);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = null;
      Options options2 = options0.addOption("FS", false, "\n");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, (String) null, (String) null, options2, 0, 103, "FS", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("1k]=aD7KkA$Ogx 2*");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      String string0 = null;
      String string1 = "";
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, (String) null, "", options1, 170, 114, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "4/,d2qP>q^Jd3";
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3539);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      String string1 = "hEsK/czuM";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "4/,d2qP>q^Jd3", "4/,d2qP>q^Jd3", options0, 3539, 719, "<", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(663, "4/,d2qP>q^Jd3", "4/,d2qP>q^Jd3", options0, "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "4/,d2qP>q^Jd3", "", options0, (-3604), (-507), "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 1491;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1491);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 170, ", ", "<", options1, 2225, (-1400), "<", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 78);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      String string0 = "hEsK/czuM";
      String string1 = "+(v";
      String string2 = ";.KKx0>+W#wRB,Afy";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1721), "+(v", ";.KKx0>+W#wRB,Afy", options1, (-1424), 78, "+(v", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1491);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string0 = "hEsK/czuM";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, false, "usage: ");
      int int0 = 2225;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 170, ", ", "<", options1, 2225, (-1400), "<", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2535, "", "I2j<*C>,?Sx.HrFd:", options0, "I2j<*C>,?Sx.HrFd:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "R";
      Options options0 = new Options();
      String string1 = "4/,d2qP>q^Jd3";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "R", "--", options0, "4/,d2qP>q^Jd3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.toString();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 3, 3);
      helpFormatter0.printWrapped(printWriter0, 2050, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("F|d\"");
      options0.addOption((String) null, "arg", false, "");
      helpFormatter0.printHelp("F|d\"", "--", options0, "WW3!5w");
      StringBuffer stringBuffer0 = new StringBuffer("ttS6(^S6+;DBcBXT");
      helpFormatter0.renderOptions(stringBuffer0, 2908, options0, 2908, 2908);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-*;><G`s_&m$mr(");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("Ry4j:^E'E_", "UI1+M", options0, "<");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-428));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "5fO";
      Options options1 = options0.addOption("5fO", "5fO", false, "usage: ");
      options1.getOptions();
      helpFormatter0.setNewLine("+VG3 ;KUF`i");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", options1, "Mxb1a6^}");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")wRm:<3X2l\"|w>oIf", ")wRm:<3X2l\"|w>oIf", (Options) null, ")wRm:<3X2l\"|w>oIf", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Options options1 = new Options();
      options0.toString();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) options1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) options1;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.AlreadySelectedException", objectArray0);
      helpFormatter0.printUsage(printWriter0, 34, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale1 = Locale.PRC;
      locale0.getDisplayName(locale1);
      helpFormatter1.setOptPrefix("");
      helpFormatter1.createPadding(37);
      helpFormatter0.printUsage(printWriter0, 74, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Options options1 = new Options();
      options0.toString();
      options1.getMatchingOptions("arg");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "5W-", options1, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("5fO", "5fO", true, "usage: ");
      helpFormatter0.printHelp("--", "", options1, "Mxb1aCr}");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3X";
      int int0 = 27;
      helpFormatter0.findWrapPos("3X", 85, 85);
      String string1 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 27, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      options1.addOption("", false, "+VG3 ;KUF`i");
      options0.hasOption("\n");
      options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", "\n", false, "");
      options2.toString();
      helpFormatter0.printHelp("--", "", options2, "");
      helpFormatter0.setDescPadding((-734));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLongOptPrefix((String) null);
      String string0 = "o\"W";
      helpFormatter0.findWrapPos("o\"W", 27, 27);
      PrintWriter printWriter0 = null;
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "l/", false, "/XQX]E\"fV_Y d:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultWidth = 27;
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1751), 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("5fO", "5fO", false, "usage: ");
      helpFormatter0.setNewLine("+VG3 ;KUF`i");
      helpFormatter0.printHelp("--", "", options1, "Mxb1a6^}");
      helpFormatter0.printHelp(4676, "5fO", " ] [ long ", options1, (String) null);
      helpFormatter0.createPadding(4676);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = "3X";
      int int0 = 0;
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.defaultNewLine = "3X";
      helpFormatter0.defaultWidth = 74;
      int int1 = helpFormatter0.defaultWidth;
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1751), 0, "3X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 27;
      String string0 = " | ";
      helpFormatter0.findWrapPos(" | ", 10, 9);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1751), 575, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("<", 3, 0);
      PrintWriter printWriter0 = null;
      int int0 = 4231;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4231, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", options0);
      options1.addOption("", false, "+VG3 ;KUF`i");
      options0.hasOption("\n");
      Options options2 = options0.addOption("arg", "\n", false, "");
      options2.toString();
      helpFormatter0.printHelp("--", "", options2, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 27, (-6776));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-5541), options0, (-5541), 810);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.getLongOptPrefix();
      int int0 = 4245;
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.write((-2));
      options0.hasLongOption("--");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4245, "--", "--", options0, 4245, 4245, "<");
      options0.getMatchingOptions((String) null);
      helpFormatter0.setWidth((-1218));
      helpFormatter0.printHelp(4245, "usage: ", "<", options0, "--", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "A;-mNtJ[", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "+VG3 ;KUF`i");
      options0.hasOption("\n");
      Options options2 = options0.addOption("arg", "\n", false, "");
      options2.toString();
      helpFormatter0.printHelp("--", "", options2, "");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setOptPrefix("d6R%");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "~=\\l{U.1";
      int int0 = 0;
      helpFormatter0.defaultNewLine = "~=l{U.1";
      helpFormatter0.defaultWidth = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("~=l{U.1", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = "+VG3 ;KUF`i";
      Options options2 = options1.addOption("", false, "+VG3 ;KUF`i");
      String string1 = "5fO";
      options2.addOption("5fO", "5fO", false, "usage: ");
      String string2 = "Mxb1a6^}";
      int int0 = 247;
      helpFormatter0.printHelp(247, "Rf_ng-@$DpmUor[]", (String) null, options0, "--", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("arg", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "", false, "usage: ");
      Options options2 = options1.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "usage: ");
      Options options2 = options1.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = "~=\\l{U.1";
      int int0 = 0;
      helpFormatter0.defaultSyntaxPrefix = "~=l{U.1";
      helpFormatter0.defaultNewLine = "~=l{U.1";
      helpFormatter0.defaultWidth = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("~=l{U.1", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("!y[?*[%m}!v<rKex]");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "<";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "I2j<*C>,?]x.HrFd:");
      String string2 = "4/,d2qP>q^Jd3";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "", options0, "4/,d2qP>q^Jd3");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("AI", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(1);
      StringWriter stringWriter0 = new StringWriter(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".f\"Ub");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3518), ".f\"Ub");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.setNewLine("<");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = new MockFile("r<*8zi#1),p]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.write(1);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("JECyr^6i");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 663;
      helpFormatter0.findWrapPos(" | ", 663, 0);
      helpFormatter0.setLongOptSeparator(" | ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-516));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" U,{9aG#%EE(]");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.append((long) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-657), 0, "\"&D_C)vHy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-194);
      helpFormatter0.defaultDescPad = (-194);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "W4lbmU-CN!>qW_IFa");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // W4lbmU-CN!>qW_IFa
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 192;
      helpFormatter0.setWidth(192);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-568));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "<";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      String string3 = "I2j<*C>,?]x.HrFd:";
      options0.addOption("", true, "I2j<*C>,?]x.HrFd:");
      String string4 = "4/,d2qP>q^Jd3";
      helpFormatter0.printHelp("ma1]Hfy6F1", "()Z5vG(?", options0, "<", false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "", options0, "4/,d2qP>q^Jd3");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("3&#?*q,*", "\"", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      helpFormatter0.printHelp("usage: ", " ", options0, "-");
      helpFormatter0.printHelp("\"", options0);
      String string0 = helpFormatter0.rtrim((String) null);
      assertNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "+VG3 ;KUF`i");
      Options options3 = options2.addOption("5fO", "5fO", false, "usage: ");
      helpFormatter0.printHelp("--", "", options3, "Mxb1a6^}");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("q", "q", true, "usage: ");
      Option option0 = new Option("", "3&#?*q,*", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("q", "--", options1, "--");
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.createPadding(9);
      helpFormatter0.defaultArgName = "Qj;TYSdHtMj1_A+&{";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int1 = (-2);
      helpFormatter0.setLeftPadding((-2));
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1805);
      String string0 = "";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "{wb=yu`kS?',N4^ ";
      PrintWriter printWriter0 = mockPrintWriter0.printf("{wb=yu`kS?',N4^ ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.JAPAN;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-1749), "", "", options0, (-1805), (-1749), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = "8eXZV'oIav7T~o";
      int int0 = 838;
      helpFormatter0.createPadding(838);
      helpFormatter0.defaultWidth = 31;
      String string1 = " [ARG]";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.write((-2));
      options0.hasLongOption("--");
      stringWriter0.append((CharSequence) "\n");
      Options options1 = options0.addOption("", false, "+VG3 ;KUF`i");
      options0.hasOption("+VG3 ;KUF`i");
      // Undeclared exception!
      try { 
        options1.addOption("\"", "H[_Cpc_", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 288;
      StringWriter stringWriter0 = new StringWriter(288);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "i|Fj=";
      Options options0 = new Options();
      helpFormatter0.printHelp("i|Fj=", options0, false);
      mockPrintWriter0.println("i|Fj=");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        stringWriter0.write("--", 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setArgName("<");
      helpFormatter0.getLongOptPrefix();
      int int0 = 4245;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "--";
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.write((-2));
      options0.hasLongOption("--");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4245, "--", "--", options0, 4245, 4245, "<");
      options0.getMatchingOptions((String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Gy$M6n;[.MFZ>,EX");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.format("uW;j&^8y(&UHTvja", (Object[]) null);
      int int0 = 0;
      helpFormatter0.printWrapped(printWriter0, 0, 0, "");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3558), "uW;j&^8y(&UHTvja");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ", ";
      String string1 = null;
      try { 
        MockURI.URI("\n", "--", ", ", ", ", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 
         // ://--,%20?,%20
         //
         verifyException("java.net.URI", e);
      }
  }
}
