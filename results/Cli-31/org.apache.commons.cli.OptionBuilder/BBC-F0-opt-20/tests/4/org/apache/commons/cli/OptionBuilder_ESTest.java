/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:38:20 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionBuilder_ESTest extends OptionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionBuilder.isRequired();
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create("");
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionBuilder.withLongOpt("");
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionBuilder.withArgName("");
      Option option0 = OptionBuilder.create((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create((String) null);
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(185);
      Option option0 = OptionBuilder.create("VN");
      assertEquals(185, option0.getArgs());
      assertTrue(option0.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionBuilder.isRequired();
      Option option0 = OptionBuilder.create('N');
      assertTrue(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("N", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionBuilder.hasOptionalArgs((-2992));
      Option option0 = OptionBuilder.create('5');
      assertEquals((-2992), option0.getArgs());
      assertTrue(option0.hasOptionalArg());
      assertEquals("5", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionBuilder.withLongOpt("");
      Option option0 = OptionBuilder.create('v');
      assertEquals("v", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionBuilder.withArgName((String) null);
      Option option0 = OptionBuilder.create('k');
      assertEquals((-1), option0.getArgs());
      assertEquals("k", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionBuilder.hasArgs(1876);
      Option option0 = OptionBuilder.create('5');
      assertEquals(1876, option0.getArgs());
      assertEquals(53, option0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionBuilder.withLongOpt(" ");
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create();
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionBuilder.withLongOpt(" ");
      OptionBuilder.hasArgs();
      Option option0 = OptionBuilder.create();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionBuilder.withLongOpt(" ");
      OptionBuilder.withArgName((String) null);
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionBuilder.withLongOpt("e.mqAV.;.)eZ+");
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create();
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionBuilder.withLongOpt(" ");
      OptionBuilder.hasOptionalArg();
      Option option0 = OptionBuilder.create();
      assertTrue(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        OptionBuilder.create("dj-u)mE&;jK<cKp]e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'dj-u)mE&;jK<cKp]e' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        OptionBuilder.create('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        OptionBuilder.create();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must specify longopt
         //
         verifyException("org.apache.commons.cli.OptionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(true);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withDescription("");
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create('H');
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals(72, option0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.isRequired(true);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator('Z');
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionBuilder.isRequired();
      OptionBuilder.withLongOpt("");
      Option option0 = OptionBuilder.create();
      assertTrue(option0.isRequired());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withLongOpt(" ");
      OptionBuilder optionBuilder1 = OptionBuilder.withType(optionBuilder0);
      assertSame(optionBuilder1, optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create('X');
      assertEquals(0, option0.getArgs());
      assertEquals(88, option0.getId());
  }
}
