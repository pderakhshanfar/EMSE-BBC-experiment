/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:59:41 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("wKQL#gmhZY0F6wl");
      option0.hashCode();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("5E099J", false, "");
      option0.hashCode();
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("5E099J", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.addValueForProcessing("Illegal option name '");
      option0.setValueSeparator('3');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("63+NNQ01~DT'<9Rl?@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-5259));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-5259), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("C", true, "C");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("arg", "o", true, "org.apache.commons.cli.OptionValidator");
      option0.addValueForProcessing("XaonX");
      option0.getValuesList();
      assertEquals("o", option0.getLongOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("q", "");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("9", "0);dqRcAOX");
      option0.setValueSeparator('M');
      char char0 = option0.getValueSeparator();
      assertEquals('M', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      option0.getValue(0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.addValueForProcessing("Illegal option name '");
      String string0 = option0.getValue();
      assertEquals("C", option0.getLongOpt());
      assertEquals("Illegal option name '", option0.getDescription());
      assertNotNull(string0);
      assertEquals(67, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("arg", "o", true, "org.apache.commons.cli.OptionValidator");
      option0.setType("o");
      option0.getType();
      assertEquals("o", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(97, option0.getId());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, "[ option: ");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("zRD", "");
      String string0 = option0.getOpt();
      assertEquals("zRD", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "_Fc#}K", true, "_Fc#}K");
      String string0 = option0.getLongOpt();
      assertEquals("_Fc#}K", string0);
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("_Fc#}K", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "A CloneNotSupportedException was thrown: ");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("5E099J", false, "");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("5E099J", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("5E099J", false, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", string0);
      assertEquals("5E099J", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("Z", "Z", true, "Z");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", (String) null, true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("C", true, "C");
      assertTrue(option0.hasArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "_Fc#}K", true, "_Fc#}K");
      option0.addValueForProcessing("Cannot add value, list full.");
      try { 
        option0.getValue(2285);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2285, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, true, "[ option: ");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs((-2));
      option0.setValueSeparator('Y');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("xP~tO", true, "\"C)%$yx1dt)`:zBS,/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xP~tO' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Z%=L", "The option '", false, "[ option:   [ARG] ::  ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z%=L' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("&jP6;x", "OE-7,izHbH`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&jP6;x' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("Kw$nFzAP1lfX", "Illegal option name '");
      option0.setValueSeparator('\"');
      boolean boolean0 = option0.hasValueSeparator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("5E099J", false, "");
      option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("5E099J", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("5E099J", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("5E099J", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "_Fc#}K", true, "_Fc#}K");
      option0.hasArg();
      assertTrue(option0.hasArgName());
      assertEquals("_Fc#}K", option0.getDescription());
      assertEquals("_Fc#}K", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("q", "");
      option0.getValueSeparator();
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("q", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", (String) null, true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.addValueForProcessing("Illegal option name '");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals("Illegal option name '", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("C", option0.getOpt());
      assertEquals("C", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "0);dqRcAOX");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("0);dqRcAOX", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "", true, "[ARG...]");
      Object object0 = option0.clone();
      assertEquals("", option0.getLongOpt());
      
      option0.setLongOpt("iz<l^dAn[$/");
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("C", true, "C");
      Option option1 = new Option("", "", false, "6,ds");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option1.getOpt());
      assertEquals("6,ds", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "`89'.6,d1CST6:C>");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("`89'.6,d1CST6:C>", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("9", "0);dqRcAOX");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("0);dqRcAOX", option0.getDescription());
      assertTrue(boolean0);
      assertEquals(57, option0.getId());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertEquals(88, option0.getId());
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      option0.setArgs(0);
      option0.toString();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  [ARG...] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      String string0 = option0.toString();
      assertEquals("[ option: Xd E>kJ1OsB~ OM#  [ARG] :: LJE_M|tci|hWQ> ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      String[] stringArray0 = option0.getValues();
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
      assertEquals(88, option0.getId());
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
      assertNull(stringArray0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
      assertNotNull(stringArray0);
      assertEquals(88, option0.getId());
      assertEquals("arg", option0.getArgName());
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "_Fc#}K", true, "_Fc#}K");
      option0.addValueForProcessing("Cannot add value, list full.");
      String string0 = option0.getValue(".w\"EyjCz");
      assertEquals("", option0.getOpt());
      assertEquals("Cannot add value, list full.", string0);
      assertEquals("_Fc#}K", option0.getLongOpt());
      assertEquals("_Fc#}K", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("C", "C");
      option0.getValue((String) null);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("q", "");
      option0.getValue((-1853));
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("q", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("XaonX", "", true, "");
      option0.addValueForProcessing("XaonX");
      String string0 = option0.getValue(0);
      assertEquals("", option0.getLongOpt());
      assertEquals("XaonX", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.setArgs(127);
      option0.setValueSeparator('3');
      option0.addValueForProcessing("63+NNQ01~DT'<9Rl?@`");
      assertEquals(127, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("s8b#f~hk 'E/7bb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(3);
      boolean boolean0 = option0.hasArgs();
      assertEquals(3, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      boolean boolean0 = option0.hasArgName();
      assertEquals(88, option0.getId());
      assertTrue(boolean0);
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", (String) null, true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing((String) null);
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, "A CloneNotSupportedException was thrown: ");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, "[ option: ");
      String string0 = option0.getKey();
      assertNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("Z", "Z", true, "Z");
      int int0 = option0.getArgs();
      assertTrue(option0.hasArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "`89'.6,d1CST6:C>");
      String string0 = option0.getOpt();
      assertEquals("`89'.6,d1CST6:C>", option0.getDescription());
      assertEquals("", string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
      
      option0.setDescription("");
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.getType();
      assertEquals("C", option0.getLongOpt());
      assertEquals("Illegal option name '", option0.getDescription());
      assertEquals(67, option0.getId());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals("LJE_M|tci|hWQ>", option1.getDescription());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
      assertEquals(88, option1.getId());
      assertEquals("E>kJ1OsB~ OM#", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      int int0 = option0.getId();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      option0.getValuesList();
      assertEquals("E>kJ1OsB~ OM#", option0.getLongOpt());
      assertEquals("LJE_M|tci|hWQ>", option0.getDescription());
      assertEquals(88, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("C", true, "C");
      option0.isRequired();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("C", "C", true, "Illegal option name '");
      option0.setValueSeparator('3');
      option0.addValueForProcessing("63+NNQ01~DT'<9Rl?@`");
      assertEquals('3', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("Xd", "E>kJ1OsB~ OM#", true, "LJE_M|tci|hWQ>");
      option0.setType("LJE_M|tci|hWQ>");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option: Xd E>kJ1OsB~ OM#  [ARG] :: LJE_M|tci|hWQ> :: LJE_M|tci|hWQ> ]", string0);
  }
}
