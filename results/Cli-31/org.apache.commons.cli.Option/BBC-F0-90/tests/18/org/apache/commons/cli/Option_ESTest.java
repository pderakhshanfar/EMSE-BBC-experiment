/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:57:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      option0.hashCode();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", true, "L");
      option0.addValueForProcessing("[ option: ");
      option0.setValueSeparator(',');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("F?JPm6k,z%Q$=ws?s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      option0.setArgs((-874));
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("II", "II", false, "/6<9`");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('U');
      char char0 = option0.getValueSeparator();
      assertEquals('U', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("SPW5X");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.addValueForProcessing("fxs;QSo%J!,.j=[{");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setType("");
      option0.getType();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getOpt();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      option0.getKey();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", false, "[ option: ");
      String string0 = option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", string0);
      assertEquals("[ option: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("nnf1", "nnf1", true, "nnf1");
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      assertEquals("[ option: ", option0.getDescription());
      
      option0.setDescription("");
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgName((String) null);
      String string0 = option0.getArgName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "WtRXK?v{8d]?2+Rw");
      assertTrue(option0.hasArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("SPW5X");
      try { 
        option0.getValue((-804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "&9F\"k#ymrzww~Ae#,", false, "o|m'YD");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "w[K,.kA(}!w.1HfP");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('{');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("pHkeliX\"`52h/k}E%", false, "?'=*1Ps");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pHkeliX\"`52h/k}E%' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: nnf1$ nnf1$  [ARG] :: qEzJ!<tuxtV|]' ]", (String) null, true, "7M.%+;`,tR[}.fZ'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: nnf1$ nnf1$  [ARG] :: qEzJ!<tuxtV|]' ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(";", "7w/4i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("mnq5B17l", true, "+z");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertEquals("mnq5B17l", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("+z", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('_');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('_', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(178);
      boolean boolean0 = option0.hasArgs();
      assertEquals(178, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("ORo", "ORo", false, "ORo");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("ORo", "ORo", false, "ORo");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("[ option: ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValueSeparator();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("ORo", "ORo", false, "ORo");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      option0.addValueForProcessing("arg");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("o", true, "o");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      Option option1 = new Option((String) null, "", false, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertTrue(option1.hasArgName());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option("mnq5B17l", (String) null, false, "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals(109, option1.getId());
      assertFalse(option1.hasLongOpt());
      assertEquals("NO_ARGS_ALLOWED", option1.getDescription());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("mnq5B17l", "=G)#~\"eNY#N_T,S");
      boolean boolean0 = option0.equals(option1);
      assertEquals("=G)#~\"eNY#N_T,S", option1.getDescription());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
      assertEquals(109, option1.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      Option option1 = new Option((String) null, true, "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      boolean boolean0 = option0.equals("mnq5B17l");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("II", "II", false, "/6<9`");
      Option option1 = new Option("II", "/6<9`", false, "1");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertEquals("1", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("II", option0.getLongOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals("II", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("arg", "mnq5B17l");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("mnq5B17l", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option:    [ARG] ::  ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("nnf1", "nnf1", true, "nnf1");
      String string0 = option0.toString();
      assertEquals("[ option: nnf1 nnf1  [ARG] :: nnf1 ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "c],hE9M~eeN");
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option:   :: c],hE9M~eeN ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("SPW5X");
      String string0 = option0.getValue("");
      assertFalse(option0.hasValueSeparator());
      assertEquals("SPW5X", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue(44);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValue((String) null);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, true, "wo\"=3");
      option0.setArgs(719);
      option0.setValueSeparator(',');
      option0.addValueForProcessing("F?JPm6k,z%Q$=ws?s");
      assertEquals(',', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("mnq5B17l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", true, "WtRXK?v{8d]?2+Rw");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("ORo", "ORo", false, "ORo");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getKey();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      option0.clearValues();
      assertTrue(option0.hasArgName());
      assertEquals("arg", option0.getOpt());
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getDescription());
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("ORo", "ORo", false, "ORo");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getLongOpt());
      
      option0.setLongOpt("CW9UH]e]{%EY,#wl5");
      assertEquals("arg", option0.getArgName());
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getDescription());
      assertEquals("arg", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("o", true, "o");
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      option0.getType();
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getDescription());
      assertEquals("CW9UH]e]{%EY,#wl5", option0.getLongOpt());
      assertEquals("arg", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setLongOpt("]|3{Lk\"'K!t;Fw");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("mnq5B17l", true, "+z");
      // Undeclared exception!
      try { 
        option0.addValue("Cannot add value, list full.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("1", true, "1");
      option0.getId();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("nnf1$", "nnf1$", true, "nnf1$");
      option0.getLongOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getValuesList();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("mnq5B17l", true, "+z");
      option0.isRequired();
      assertEquals("mnq5B17l", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("+z", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("arg", "CW9UH]e]{%EY,#wl5", true, "CW9UH]e]{%EY,#wl5");
      option0.setArgs((-2));
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", true, "WtRXK?v{8d]?2+Rw");
      String string0 = option0.getArgName();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", string0);
      assertEquals("WtRXK?v{8d]?2+Rw", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option((String) null, true, "wo\"=3");
      option0.setValueSeparator(',');
      option0.addValueForProcessing("F?JPm6k,z%Q$=ws?s");
      assertEquals(',', option0.getValueSeparator());
  }
}
