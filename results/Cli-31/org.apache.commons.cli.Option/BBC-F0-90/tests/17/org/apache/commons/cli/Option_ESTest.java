/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:56:27 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", " ", true, "K\"6#JK+V((");
      option0.hashCode();
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals(" ", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("Rt", "a';q(>eg|j=vy");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("a';q(>eg|j=vy", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("wsf$Vc", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.setValueSeparator('B');
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("K`s {'a5B~`_]$j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-69));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-69), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", true, "\"w[A@9Z.N;6+;Cq|");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("\"w[A@9Z.N;6+;Cq|", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.addValueForProcessing("K\"6#JK+V((");
      option0.getValuesList();
      assertEquals("", option0.getLongOpt());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("f", true, "f");
      option0.setValueSeparator('5');
      char char0 = option0.getValueSeparator();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.setValueSeparator('D');
      char char0 = option0.getValueSeparator();
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValue((String) null);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "Illegal option name '");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertEquals("", option0.getLongOpt());
      assertEquals("Illegal option name '", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", " :: ", true, " :: ");
      option0.setType(" :: ");
      option0.getType();
      assertTrue(option0.hasArgName());
      assertEquals(" :: ", option0.getDescription());
      assertEquals(" :: ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("arg", false, "");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getLongOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "KZ");
      String string0 = option0.getLongOpt();
      assertEquals("KZ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getKey();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("F6y", false, "F6y");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "^]rW%[r", false, "^]rW%[r");
      option0.getKey();
      assertTrue(option0.hasArgName());
      assertEquals("^]rW%[r", option0.getDescription());
      assertEquals("^]rW%[r", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("arg", true, (String) null);
      int int0 = option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals(97, int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", " :: ", true, " :: ");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", false, "J|P{4&_(");
      option0.setArgs(589);
      int int0 = option0.getArgs();
      assertEquals(589, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "(Wny#eyQ=%NeO?");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals("(Wny#eyQ=%NeO?", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", true, "arg");
      option0.acceptsArg();
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.addValueForProcessing("7XE;");
      try { 
        option0.getValue(54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", " ", true, "K\"6#JK+V((");
      option0.addValueForProcessing("7XE;");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setArgs((-2632));
      option0.setValueSeparator('t');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(")f2c*P#Xkx^rqI", false, ")f2c*P#Xkx^rqI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')f2c*P#Xkx^rqI' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("%T.)]z)", "wsf$Vc", true, "' containt an;illegal charwcter : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%T.)]z)' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "^]rW%[r", false, "^]rW%[r");
      option0.hasValueSeparator();
      assertEquals("^]rW%[r", option0.getDescription());
      assertEquals("^]rW%[r", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "y^B7,m\"cVw\"X1-HAOII");
      option0.setArgs((-3027));
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.hasArg();
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("K\"6#JK+V((", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", true, "\"w[A@9Z.N;6+;Cq|");
      option0.hasOptionalArg();
      assertEquals("\"w[A@9Z.N;6+;Cq|", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals("", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", " ", true, "K\"6#JK+V((");
      option0.addValueForProcessing("K\"6#JK+V((");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("o~J{a<;B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", " :: ", true, " :: ");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, "[ARG...]");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("arg", option1.getArgName());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "", true, "The option '");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals("The option '", option1.getDescription());
      assertEquals("", option1.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, "", false, (String) null);
      Option option1 = new Option((String) null, (String) null, true, "Cannot add value, list full.");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option((String) null, (String) null, true, "1Q[ |z +nO'788y~69");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals("I=vv4#mo<39riK]#%");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", true, "\"w[A@9Z.N;6+;Cq|");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("", option0.getOpt());
      assertEquals("\"w[A@9Z.N;6+;Cq|", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.setType("NO_ARGS_ALLOWED");
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED ' contains an illegal character : '  [ARG] :: ' contains an illegal character : ' :: NO_ARGS_ALLOWED ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  [ARG...] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option:   ::  ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("p", true, "p");
      option0.addValueForProcessing("p");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNotNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.addValueForProcessing("K\"6#JK+V((");
      option0.getValue("K\"6#JK+V((");
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("y3", "NO_ARGS_ALLOWED", true, "y3");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals(121, option0.getId());
      assertEquals("y3", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("wsf$Vc", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.getValue(847);
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("wsf$Vc", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("p", true, "p");
      option0.addValueForProcessing("p");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(4806);
      option0.setValueSeparator('K');
      option0.addValueForProcessing("I=vv4#mo<39riK]#%");
      assertEquals(4806, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("wsf$Vc", "' containt an;illegal charwcter : '", true, "' containt an;illegal charwcter : '");
      option0.setValueSeparator('B');
      option0.addValueForProcessing("K`s {'a5B~`_]$j");
      assertEquals('B', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgs(8);
      boolean boolean0 = option0.hasArgs();
      assertEquals(8, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", " ", true, "K\"6#JK+V((");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing((String) null);
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("K\"6#JK+V((");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "^]rW%[r", false, "^]rW%[r");
      int int0 = option0.getArgs();
      assertEquals("^]rW%[r", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
      assertEquals("^]rW%[r", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("wsf$Vc", "' containt an;illegal charwcter : '", true, "' containt an;illegal charwcter : '");
      assertEquals("' containt an;illegal charwcter : '", option0.getLongOpt());
      
      option0.setLongOpt("' containt an;illegal charwcter : '");
      assertEquals("wsf$Vc", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("' containt an;illegal charwcter : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.getValueSeparator();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setDescription("AG]t{g2On5^k|nq");
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, "e6QyY:dtqhUiji`}?^U");
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals("e6QyY:dtqhUiji`}?^U", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals(1, option1.getArgs());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertEquals("", option1.getLongOpt());
      assertEquals("", option1.getOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals("K\"6#JK+V((", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue("#wKyPVj'/b7<?J(t");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", " ", true, "K\"6#JK+V((");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", " :: ", true, " :: ");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals(" :: ", string0);
      assertTrue(option0.hasArgName());
      assertEquals(" :: ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.getValuesList();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("K\"6#JK+V((", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.isRequired();
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals(78, option0.getId());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", " :: ", true, " :: ");
      String string0 = option0.getArgName();
      assertEquals(" :: ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("arg", string0);
      assertEquals(1, option0.getArgs());
      assertEquals(" :: ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", true, "arg");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", string0);
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("", "", true, "K\"6#JK+V((");
      option0.setValueSeparator('D');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('D', option0.getValueSeparator());
      assertTrue(boolean0);
  }
}
