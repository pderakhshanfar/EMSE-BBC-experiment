/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:26:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "");
      option0.setArgs((-1483));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1483), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "");
      option0.setArgs((-1483));
      option0.setValueSeparator('N');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("[ option:  \"%AW)nNe!pw,F_rFyc  ::  ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2009));
      option0.toString();
      assertEquals((-2009), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0r4/R");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("\"%AW)nNe!pw,F_rFyc", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("FWh0r4/R", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("FWh0rx/R", option0.getDescription());
      assertEquals("\"%AW)nNe!pw,F_rFyc", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setValueSeparator('4');
      char char0 = option0.getValueSeparator();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      option0.setValueSeparator('N');
      char char0 = option0.getValueSeparator();
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option((String) null, true, "'");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", true, "FWh0rx/R");
      option0.addValueForProcessing("jd|la/iaU(~2!o");
      String string0 = option0.getValue(0);
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertEquals("FWh0rx/R", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setType("d9Q");
      option0.getType();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("s", "", false, "");
      String string0 = option0.getOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "y/zx*q#+m");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("y/zx*q#+m", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, "FWh0rx/R");
      String string0 = option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("FWh0rx/R", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("' contains an illegal character : '", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, "org.apache.commons.cli.Option", true, "");
      String string0 = option0.getKey();
      assertEquals("org.apache.commons.cli.Option", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, "FWh0rx/R");
      String string0 = option0.getKey();
      assertEquals("", string0);
      assertEquals("FWh0rx/R", option0.getDescription());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.setDescription((String) null);
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("NO_ARS_ALOWED", "y/zx*q#+m");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals(78, option0.getId());
      assertEquals("y/zx*q#+m", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("G", "G");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", true, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0r4/R");
      option0.acceptsArg();
      assertEquals("FWh0r4/R", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("\"%AW)nNe!pw,F_rFyc", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.addValueForProcessing("ISbjNhMk7nc9v+Vmt");
      try { 
        option0.getValue(2418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2418, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0r4/R");
      option0.addValueForProcessing("RvXJy");
      try { 
        option0.getValue((-2003));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, " ");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      option0.setValueSeparator('N');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("/4/[=vWD*j#", true, "/4/[=vWD*j#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/4/[=vWD*j#' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" ]", "DXKAT#", true, "DXKAT#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("3R#!ShXMlPbOucD)c&v", "3R#!ShXMlPbOucD)c&v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3R#!ShXMlPbOucD)c&v' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", false, "[ option: ");
      option0.getValue();
      assertEquals("[ option: ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setValueSeparator('4');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('4', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, true, "Syf+KN$I]?w");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(3359);
      boolean boolean0 = option0.hasArgs();
      assertEquals(3359, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option((String) null, " ");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, " ");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option((String) null, "org.apache.commns.cli.Option", true, "org.apache.commns.cli.Option");
      option0.hasArg();
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0r4/R");
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("\"%AW)nNe!pw,F_rFyc", option0.getLongOpt());
      assertEquals("FWh0r4/R", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "d`gs_", true, "HP");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals("d`gs_", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("HP", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("Illegal option name '");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("j");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "y/zx*q#+m");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("s50jw&68D[!kW0`t]");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("G", "G");
      Option option1 = new Option("G", "C", false, "C");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("C", option1.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("G", option1.getOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, " ");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(option1.hasArgName());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "0", true, "2(/q~");
      Option option1 = new Option("0", true, "2(/q~");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals("2(/q~", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      Option option1 = new Option("", "<l<C~5AG!6w", true, "[ option: null  [ARG] ::  ]");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("[ option: null  [ARG] ::  ]", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("<l<C~5AG!6w", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals("", option1.getLongOpt());
      assertEquals("", option1.getOpt());
      assertEquals("2(/q~", option1.getDescription());
      assertNotSame(option1, option0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      boolean boolean0 = option0.equals(option0);
      assertEquals("", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals("2(/q~", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.equals("NO_ARGS_ALLOWED");
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] :: 2(/q~ ::  ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.addValueForProcessing("SLIuKMxT2G*3{");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      option0.addValueForProcessing("wT8m|0fyf");
      String string0 = option0.getValue("");
      assertEquals("wT8m|0fyf", string0);
      assertEquals("2(/q~", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      option0.getValue((-1));
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      String string0 = option0.getValue("");
      assertEquals("2(/q~", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "0", true, "2(/q~");
      option0.addValueForProcessing("NO_ARGS_ALLOWED");
      String string0 = option0.getValue();
      assertEquals("0", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertEquals("2(/q~", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0r4/R");
      option0.setValueSeparator('N');
      option0.setArgs(2147483645);
      option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
      assertEquals('N', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      option0.setValueSeparator('N');
      option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
      assertEquals('N', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("s", "", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, " ");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(96);
      option0.toString();
      assertEquals(96, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", ";q", false, "y/zx*q#+m");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      option0.getValue(0);
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, "org.apache.commons.cli.Option", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("org.apache.commons.cli.Option", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, true, "'");
      String string0 = option0.getKey();
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      option0.clearValues();
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "d`gs_", true, "HP");
      String string0 = option0.getOpt();
      assertTrue(option0.hasArg());
      assertEquals("", string0);
      assertEquals("HP", option0.getDescription());
      assertEquals("d`gs_", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertEquals(78, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "2(/q~");
      String string0 = option0.getLongOpt();
      assertEquals("2(/q~", option0.getDescription());
      assertEquals("", string0);
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "\"%AW)nNe!pw,F_rFyc", true, "FWh0rx/R");
      option0.getValuesList();
      assertEquals("\"%AW)nNe!pw,F_rFyc", option0.getLongOpt());
      assertEquals("FWh0rx/R", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "R");
      option0.isRequired();
      assertEquals("R", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, "R");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      String string0 = option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }
}
