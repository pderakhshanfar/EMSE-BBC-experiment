/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:48:52 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "&pXZm$ne$");
      option0.setArgs((-1318));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1318), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.setArgs((-1116));
      option0.setValueSeparator('9');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("HllAA),13ThwOJL=9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.setArgs((-1116));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("HllAA),13ThwOJL=9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "NO_ARGS_ALLOWED");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "|1.w+");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("|1.w+", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("V", "V", true, "V");
      option0.setValueSeparator('F');
      char char0 = option0.getValueSeparator();
      assertEquals('F', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValue((String) null);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("V", "V", true, "V");
      option0.addValueForProcessing("V");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.addValueForProcessing("HllAA),13ThwOJL=9");
      String string0 = option0.getValue();
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "&pXZm$ne$");
      option0.setType("");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("&pXZm$ne$", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getOpt();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("arg", false, "arg");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, "uw2", true, "");
      assertEquals("uw2", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals(117, int0);
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      String string0 = option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertEquals("Z]1?)=Y'lyD:", option0.getLongOpt());
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs((-2));
      int int0 = option0.getArgs();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      option0.addValueForProcessing("J");
      try { 
        option0.getValue(1091);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1091, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.addValueForProcessing("HllAA),13ThwOJL=9");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.setValueSeparator('9');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("zTL,Vtg#b#.l", true, "zTL,Vtg#b#.l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'zTL,Vtg#b#.l' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("|1.w+", "[ option: J \"W1wdk^o&k[|=>?$  [ARG] :: |1.w+ ]", true, "J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|1.w+' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("Z]1?)=Y'lyD:", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("arg", false, "arg");
      option0.setValueSeparator('Z');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('Z', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgs();
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", true, "NO_ARGS_ALLOWED");
      option0.setArgs(2364);
      boolean boolean0 = option0.hasArgs();
      assertEquals(2364, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("arg", false, "arg");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
      assertEquals("J", option0.getOpt());
      assertEquals("\"W1wdk^o&k[|=>?$", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("|1.w+", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("V", "V", true, "V");
      option0.getValueSeparator();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "&pXZm$ne$");
      option0.hasOptionalArg();
      assertEquals("&pXZm$ne$", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      option0.addValueForProcessing("J");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals("\"W1wdk^o&k[|=>?$", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("|1.w+", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("J", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgName());
      assertEquals("|1.w+", option0.getDescription());
      assertEquals("\"W1wdk^o&k[|=>?$", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals(74, option0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("[ option:   [ARG] ::  ]");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, "uw2", true, "");
      option0.hashCode();
      assertEquals("uw2", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("J", "AT7UNCxR6Y1eq?]eF");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getId());
      assertEquals("AT7UNCxR6Y1eq?]eF", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("J", "AT7UNCxR6Y1eq?]eF");
      Option option1 = new Option("J", "AT7UNCxR6Y1eq?]eF", false, "arg");
      boolean boolean0 = option0.equals(option1);
      assertEquals("AT7UNCxR6Y1eq?]eF", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals(74, option1.getId());
      assertEquals("arg", option1.getDescription());
      assertEquals("arg", option1.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("[ option: ");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option((String) null, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      Option option1 = new Option("arg", false, "AJT7<UNCxR6Y1eq?]eF");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("AJT7<UNCxR6Y1eq?]eF", option1.getDescription());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option("", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.equals((Object)option0));
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("N", "N", true, "N");
      Option option1 = new Option("N", "J", true, "N");
      boolean boolean0 = option0.equals(option1);
      assertEquals("N", option1.getOpt());
      assertEquals("N", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      boolean boolean0 = option0.equals("B\"`HI1XS");
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals(79, option0.getId());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertEquals("AJT7<UNCxR6Y1eq?]eF", option0.getDescription());
      assertEquals(74, option0.getId());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("OH", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("B\"`HI1XS", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.setArgs(0);
      option0.toString();
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      String[] stringArray0 = option0.getValues();
      assertEquals("Z]1?)=Y'lyD:", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("[ option:   [ARG] ::  ]");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      String string0 = option0.getValue("J");
      assertEquals("\"W1wdk^o&k[|=>?$", option0.getLongOpt());
      assertEquals("|1.w+", option0.getDescription());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getId());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.getValue(2166);
      assertFalse(option0.hasLongOpt());
      assertEquals("OH", option0.getOpt());
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("AJT7<UNCxR6Y1eq?]eF", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals(74, option0.getId());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("J", "\"W1wdk^o&k[|=>?$", true, "|1.w+");
      option0.addValueForProcessing("J");
      String string0 = option0.getValue("[ option: J \"W1wdk^o&k[|=>?$  [ARG] :: |1.w+ ]");
      assertEquals("J", string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("|1.w+", option0.getDescription());
      assertEquals("\"W1wdk^o&k[|=>?$", option0.getLongOpt());
      assertEquals("J", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("V", true, "V");
      option0.setArgs(57);
      option0.setValueSeparator('7');
      option0.addValueForProcessing("pm7b-(A");
      assertEquals(57, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("V", true, "V");
      option0.setValueSeparator('7');
      option0.addValueForProcessing("pm7b-(A");
      assertEquals('7', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "f+W");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("N", "N", true, "N");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("V", true, "V");
      option0.setArgs(57);
      option0.toString();
      assertEquals(57, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertEquals(79, option0.getId());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      option0.setArgs((-2));
      option0.addValueForProcessing("HllAA),13ThwOJL=9");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "Z]1?)=Y'lyD:", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("Z]1?)=Y'lyD:", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getKey();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals("OH", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("B\"`HI1XS");
      String string0 = option0.toString();
      assertEquals("[ option: OH B\"`HI1XS  [ARG] :: B\"`HI1XS ]", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("J", string0);
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertEquals("AJT7<UNCxR6Y1eq?]eF", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("V", true, "V");
      option0.setDescription("zAtw(piHyI7k");
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.getType();
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertEquals(79, option0.getId());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      Object object0 = option0.clone();
      option0.setType(object0);
      assertNotSame(object0, option0);
      
      String string0 = option0.toString();
      assertEquals("[ option: OH  [ARG] :: B\"`HI1XS :: [ option: OH  [ARG] :: B\"`HI1XS ] ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("J", "AJT7<UNCxR6Y1eq?]eF");
      // Undeclared exception!
      try { 
        option0.addValue("J");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "&pXZm$ne$");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertEquals("&pXZm$ne$", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals("B\"`HI1XS", option0.getDescription());
      assertEquals(79, option0.getId());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("OH", true, "B\"`HI1XS");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("J", "AT7UNCxR6Y1eq?]eF");
      String string0 = option0.getDescription();
      assertEquals("AT7UNCxR6Y1eq?]eF", string0);
      assertEquals("J", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }
}
