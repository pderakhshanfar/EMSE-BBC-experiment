/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:25:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("v", "~%AvP5&T8X|&-Qp[");
      option0.hashCode();
      assertEquals("~%AvP5&T8X|&-Qp[", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("v", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.addValueForProcessing((String) null);
      option0.setValueSeparator('.');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("HkhT&1tuoGm(.}HdO3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs((-3361));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-3361), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option((String) null, "at53(cwO(Qzr");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.setValueSeparator('4');
      char char0 = option0.getValueSeparator();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setValueSeparator('Z');
      char char0 = option0.getValueSeparator();
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "arg", true, "arg");
      String string0 = option0.getValue("");
      assertEquals("arg", option0.getLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(771);
      option0.addValueForProcessing("");
      option0.getValue(0);
      assertEquals(771, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      option0.setType("");
      option0.getType();
      assertEquals("H&`O^+", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("arg", "arg", false, "arg");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, "W-0Dj|[+Gd}K^.qJ");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      String string0 = option0.getLongOpt();
      assertEquals("H&`O^+", option0.getDescription());
      assertEquals("", string0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, "/qLNa]#");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("Wu", true, "Wu");
      option0.getKey();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "2]z?HP=eIqz/$6", false, "");
      String string0 = option0.getDescription();
      assertEquals("", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("2]z?HP=eIqz/$6", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("v", true, "EN9XM5{$s");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("EN9XM5{$s", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("v", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals("B>xym1uL", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("v", "B");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("v", true, "' contains an illegal character : '");
      option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals(118, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, "/qLNa]#");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "arg", true, (String) null);
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "/3G|g%#sSvZ");
      option0.addValueForProcessing("/3G|g%#sSvZ");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "arg", true, "arg");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.setValueSeparator('w');
      option0.setArgs(64);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" ]", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("s|&Ku3{S", (String) null, false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 's|&Ku3{S' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("LZ ", "jEb=r!E8D&a'J.|bg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'LZ ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("v", true, "' contains an illegal character : '");
      option0.setValueSeparator('{');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('{', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals("B>xym1uL", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("XFVf", false, "XFVf");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      option0.hasArg();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("H&`O^+", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("XFVf", false, "XFVf");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("[ option: XFVf [ARG...] :: XFVf ]");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("XFVf", false, "XFVf");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals("H&`O^+", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("6)`p");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("B>xym1uL", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      Option option1 = new Option((String) null, "The option '", true, "z/ pka");
      boolean boolean0 = option0.equals(option1);
      assertEquals("z/ pka", option1.getDescription());
      assertEquals(84, option1.getId());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("n", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertEquals("B>xym1uL", option1.getDescription());
      assertEquals("n", option1.getOpt());
      assertEquals("A CloneNotSupportedException was thrown: ", option1.getLongOpt());
      assertNotSame(option1, option0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, true, "EN9XM5{$s");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      Option option1 = new Option("v", true, "EN9XM5{$s");
      Option option2 = (Option)option1.clone();
      boolean boolean0 = option0.equals(option2);
      assertNotSame(option2, option1);
      assertEquals("B>xym1uL", option0.getDescription());
      assertFalse(option2.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option2.hasArgName());
      assertTrue(option2.equals((Object)option1));
      assertEquals("v", option2.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", false, "B>xym1uL");
      Option option1 = new Option("", true, "lfhX}82");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option0.getLongOpt());
      assertEquals("B>xym1uL", option0.getDescription());
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      Option option1 = new Option("pU", true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(option0.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
      assertFalse(option1.equals((Object)option0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("v", true, "' contains an illegal character : '");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("v", option0.getOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, true, "EN9XM5{$s");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertEquals(85, option0.getId());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String string0 = option0.toString();
      assertEquals("[ option: null  :: null ]", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      option0.addValueForProcessing("U");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("U", option0.getOpt());
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("F", "arg", true, "arg");
      option0.addValueForProcessing("8kpuP/B,#tn,^G!'F");
      String string0 = option0.getValue("[ option: F arg [ARG...] :: arg ]");
      assertEquals("arg", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertEquals(70, option0.getId());
      assertTrue(option0.hasArgName());
      assertEquals("8kpuP/B,#tn,^G!'F", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("v", true, "' contains an illegal character : '");
      option0.getValue(1);
      assertFalse(option0.hasLongOpt());
      assertEquals("v", option0.getOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("n", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      option0.getValue();
      assertEquals("B>xym1uL", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(110, option0.getId());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "/3G|g%#sSvZ");
      option0.addValueForProcessing("/3G|g%#sSvZ");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("[ option:   :: A6aU^B=1cY ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      option0.addValueForProcessing("U");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertEquals("U", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("XFVf", false, "XFVf");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("XFVf", false, "XFVf");
      option0.setArgs(31);
      boolean boolean0 = option0.hasArgs();
      assertEquals(31, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("Wu", true, "Wu");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      boolean boolean0 = option0.hasArgName();
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("U", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("n", "n");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("H&`O^+", option0.getDescription());
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "/3G|g%#sSvZ");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("M", "M", true, "H<gx>_-\"P");
      option0.clearValues();
      assertEquals("M", option0.getLongOpt());
      assertEquals(77, option0.getId());
      assertTrue(option0.hasArgName());
      assertEquals("H<gx>_-\"P", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      int int0 = option0.getArgs();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("M", "M", true, "H<gx>_-\"P");
      assertEquals("M", option0.getLongOpt());
      
      option0.setLongOpt((String) null);
      assertEquals("M", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("H<gx>_-\"P", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("v", true, "' contains an illegal character : '");
      assertEquals("' contains an illegal character : '", option0.getDescription());
      
      option0.setDescription("xL-H2");
      assertEquals("v", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertEquals(85, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "H&`O^+");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      int int0 = option0.getId();
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertEquals(85, int0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("gxT5B8", "gxT5B8", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("gxT5B8", string0);
      assertEquals("gxT5B8", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "a");
      option0.isRequired();
      assertEquals("a", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("U", true, "dv])Q>%`81{cdl-p");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("dv])Q>%`81{cdl-p", option0.getDescription());
      assertEquals("U", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("M", "M", true, "H<gx>_-\"P");
      option0.setArgs(436);
      option0.setValueSeparator('_');
      option0.addValueForProcessing("H<gx>_-\"P");
      option0.setArgs(1);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("[ option: M  [ARG] :: H<gx>_-\"P :: M ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("v", "B");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertEquals("B", option0.getDescription());
      assertEquals("v", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", false, "B>xym1uL");
      String string0 = option0.getDescription();
      assertEquals("", option0.getOpt());
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("B>xym1uL", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("M", "M", true, "H<gx>_-\"P");
      option0.setValueSeparator('_');
      option0.addValueForProcessing("H<gx>_-\"P");
      assertEquals('_', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("M", "M", true, "H<gx>_-\"P");
      option0.setType("M");
      String string0 = option0.toString();
      assertEquals("[ option: M M  [ARG] :: H<gx>_-\"P :: M ]", string0);
      assertTrue(option0.hasArgName());
  }
}
