/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:36:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      option0.hashCode();
      assertEquals("x`h", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(100, option0.getId());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", true, "A CloneNotSupportedException was thrown: ");
      option0.setValueSeparator(':');
      option0.addValueForProcessing("[ option: ");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("[ option: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "x`h");
      option0.setArgs((-2170));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2170), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("e", "[ARG...]", true, "Xca");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertEquals("[ARG...]", option0.getLongOpt());
      assertEquals(101, option0.getId());
      assertEquals("Xca", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('G');
      char char0 = option0.getValueSeparator();
      assertEquals('G', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getValue("");
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("x+'2O:z");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setType(",");
      option0.getType();
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("d", true, "d");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("&`m/{^4hf;-!odF", string0);
      assertTrue(option0.hasArgName());
      assertEquals("}zCQ,16CD`", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("arg", true, "oKtf_@{\"5p1W");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("oKtf_@{\"5p1W", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      String string0 = option0.getKey();
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setDescription("8b5%]OKJ2ol");
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", false, "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgName("");
      String string0 = option0.getArgName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.acceptsArg();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("GL", "GL", true, "A CloneNotSupportedException was thrown: ");
      option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
      try { 
        option0.getValue(745);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 745, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "J", true, "d");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator(']');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(".\"", true, "ol9y`{4E-XX/Dd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.\"' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", false, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("nQd{", "nQd{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'nQd{' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('H');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('H', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("SGkiSmC$5", (String) null, false, "J");
      boolean boolean0 = option0.hasArgs();
      assertEquals("J", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setArgs(1852);
      boolean boolean0 = option0.hasArgs();
      assertEquals(1852, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("d", true, "d");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("J", "q$(");
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgName());
      assertEquals("q$(", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      option0.hasArg();
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("}zCQ,16CD`", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("a", true, "");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.hasOptionalArg();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("a", true, "");
      option0.addValueForProcessing("2#TFBX#]8t:5");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hashCode();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, "3v'~ uc91M8SM)Q38{n");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "=Ali8");
      Option option1 = new Option("", "[ option: ", true, "_VVWhgx\"Q~");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option1.getOpt());
      assertEquals("[ option: ", option1.getLongOpt());
      assertTrue(option1.hasArgName());
      assertEquals("_VVWhgx\"Q~", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, "3v'~ uc91M8SM)Q38{n");
      Option option1 = new Option("J", "J");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option((String) null, "arg", false, "arg");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option1.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "3v'~ uc91M8SM)Q38{n");
      Option option1 = new Option((String) null, "P7XRL`&vRz)=VC0,j.", true, (String) null);
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option1.getArgName());
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      boolean boolean0 = option0.equals("[ARG...]");
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setType(",");
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option:  &`m/{^4hf;-!odF  [ARG] :: }zCQ,16CD` :: , ]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("GL", "GL", true, "A CloneNotSupportedException was thrown: ");
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option: GL GL  [ARG] :: A CloneNotSupportedException was thrown:  ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option:   ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      assertFalse(option0.hasValueSeparator());
      
      option0.addValueForProcessing((String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals("arg", option0.getArgName());
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertNotNull(stringArray0);
      assertEquals("", option0.getOpt());
      assertEquals("}zCQ,16CD`", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.addValueForProcessing(",ac!dvpJc3\"cU!Qa|Ao");
      String string0 = option0.getValue(":u@-LZV");
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals(",ac!dvpJc3\"cU!Qa|Ao", string0);
      assertEquals("", option0.getOpt());
      assertEquals("&`m/{^4hf;-!odF", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      option0.getValue(64);
      assertEquals("", option0.getLongOpt());
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      option0.getValue();
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("}zCQ,16CD`", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("x+'2O:z");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(685);
      option0.setValueSeparator('d');
      option0.addValueForProcessing("d");
      assertEquals(685, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "&`m/{^4hf;-!odF", true, "}zCQ,16CD`");
      option0.setArgs(1852);
      option0.toString();
      assertEquals(1852, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "`tE5#JH", false, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("`tE5#JH", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, "3v'~ uc91M8SM)Q38{n");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertTrue(option0.hasArgName());
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      option0.getOpt();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("QYR", "QYR");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("QYR");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(option1.hasArgName());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArg());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      int int0 = option0.getId();
      assertEquals("d", option0.getOpt());
      assertEquals("x`h", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals(100, int0);
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "}zCQ,16CD`");
      option0.getValuesList();
      assertEquals("}zCQ,16CD`", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("SGkiSmC$5", (String) null, false, "J");
      option0.isRequired();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("SGkiSmC$5", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("J", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("d");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("SGkiSmC$5", (String) null, false, "J");
      String string0 = option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", string0);
      assertEquals("SGkiSmC$5", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("J", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("d", "x`h", true, "");
      String string0 = option0.getDescription();
      assertEquals("d", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("x`h", option0.getLongOpt());
      assertEquals("", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("a", true, "");
      option0.setValueSeparator('2');
      char char0 = option0.getValueSeparator();
      assertEquals('2', char0);
  }
}
