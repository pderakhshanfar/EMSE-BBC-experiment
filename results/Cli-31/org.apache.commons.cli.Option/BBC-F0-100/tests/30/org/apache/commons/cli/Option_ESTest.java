/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:36:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-", true, "");
      option0.setArgs((-1725));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1725), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("3k", false, "3k");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.addValueForProcessing("NO_ARGS_ALLOWED");
      option0.setValueSeparator(':');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Pk\"NG{b6>:D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, ")e.dzjKn\"(db&L!u");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("X.", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('I');
      char char0 = option0.getValueSeparator();
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("bjbVVaorFMOSK", "bjbVVaorFMOSK", true, "khh`Nhn");
      option0.getValue((String) null);
      assertEquals("khh`Nhn", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("bjbVVaorFMOSK", option0.getLongOpt());
      assertEquals(98, option0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("gT", true, "dose&&\"D");
      String string0 = option0.getValue("");
      assertEquals("dose&&\"D", option0.getDescription());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("gT", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("bjbVVaorFMOSK", "bjbVVaorFMOSK", true, "khh`Nhn");
      option0.addValueForProcessing("N+;oe");
      String string0 = option0.getValue();
      assertEquals("bjbVVaorFMOSK", option0.getLongOpt());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals("khh`Nhn", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals("bjbVVaorFMOSK", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setType(option0);
      Option option1 = (Option)option0.getType();
      assertFalse(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("5", "5", true, "5");
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, " ]", true, "VA%>0Q2");
      String string0 = option0.getLongOpt();
      assertNotNull(string0);
      assertEquals(32, option0.getId());
      assertEquals("arg", option0.getArgName());
      assertEquals("VA%>0Q2", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, true, "62QZ3!x+~L");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", (String) null, true, "");
      option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("3k", false, "3k");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "%3xIv`");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("u", "arg", true, "arg");
      option0.addValueForProcessing("u");
      try { 
        option0.getValue(2697);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2697, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.addValueForProcessing("[ option:  vQ`-_?Bo<*   [ARG] ::  ]");
      try { 
        option0.getValue((-1725));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, true, "62QZ3!x+~L");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "[ option:   :: Q|Pnf$]ZJ',Be2- ]");
      option0.setValueSeparator('{');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("2gBrRTNw?4J>=A\u0000", false, "2gBrRTNw?4J>=A\u0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '2gBrRTNw?4J>=A\u0000' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("uxKW2Pqp]^\",#t,^", "uxKW2Pqp]^\",#t,^", false, "uxKW2Pqp]^\",#t,^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'uxKW2Pqp]^\",#t,^' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("LN+a;oe", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'LN+a;oe' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-");
      option0.setValueSeparator('^');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('^', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "%3xIv`", true, "%3xIv`");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("", option0.getOpt());
      assertEquals("%3xIv`", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("%3xIv`", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("bjbVVaorFMOSK", "bjbVVaorFMOSK", true, "khh`Nhn");
      boolean boolean0 = option0.hasArgs();
      assertEquals("arg", option0.getArgName());
      assertEquals("bjbVVaorFMOSK", option0.getOpt());
      assertEquals("khh`Nhn", option0.getDescription());
      assertEquals("bjbVVaorFMOSK", option0.getLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("ngk", "%%x", false, "%%x");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("X.", option0.getDescription());
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("bjbVVaorFMOSK", "bjbVVaorFMOSK", true, "khh`Nhn");
      option0.setArgs(0);
      boolean boolean0 = option0.hasArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-", true, "");
      option0.hasArg();
      assertEquals("Q|Pnf$]ZJ',Be2-", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValueSeparator();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option((String) null, ")e.dzjKn\"(db&L!u");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("ngk", "ngk");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "%3xI", true, "%3xI");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("ngk", "ngk");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, "\"w!Xj?eh7Ou'RBy", true, "[ option: ");
      option0.hashCode();
      assertEquals(34, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("[ option: ", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", "%3xIv`", false, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option1.getLongOpt());
      assertEquals("X.", option1.getDescription());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertTrue(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("sar", "b4[dEjX2.%|Ku!N");
      Option option1 = new Option((String) null, "f");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertEquals("sar", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("b4[dEjX2.%|Ku!N", option0.getDescription());
      assertEquals("arg", option1.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-", true, "");
      Option option1 = new Option((String) null, "'@", true, "The option '");
      boolean boolean0 = option0.equals(option1);
      assertEquals("The option '", option1.getDescription());
      assertEquals("Q|Pnf$]ZJ',Be2-", option0.getLongOpt());
      assertEquals(39, option1.getId());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, ")e.dzjKn\"(db&L!u");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertEquals("arg", option1.getArgName());
      assertFalse(option1.hasLongOpt());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("ngk", "%%x", false, "%%x");
      Option option1 = new Option("ngk", "u");
      boolean boolean0 = option0.equals(option1);
      assertEquals("u", option1.getDescription());
      assertEquals("ngk", option1.getOpt());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("[ option: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "%3xIv`", true, "%3xIv`");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals("%3xIv`", option0.getDescription());
      assertEquals("%3xIv`", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      boolean boolean0 = option0.equals("[ option: RUF  :: (NZyIc ]");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("(NZyIc", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("RUF", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ::  ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:   [ARG] ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("(NZyIc", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("RUF", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      option0.addValueForProcessing("cyiDAKlq=.B}IvF");
      String[] stringArray0 = option0.getValues();
      assertTrue(option0.hasLongOpt());
      assertEquals("X.", option0.getDescription());
      assertNotNull(stringArray0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      option0.addValueForProcessing("\"PDJ");
      String string0 = option0.getValue((String) null);
      assertNotNull(string0);
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("X.", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-");
      option0.getValue((-1697));
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("Q|Pnf$]ZJ',Be2-", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("u", "arg", true, "arg");
      option0.addValueForProcessing("u");
      String string0 = option0.getValue(0);
      assertEquals("arg", option0.getLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getDescription());
      assertEquals(117, option0.getId());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", false, "%xIv");
      option0.getValue();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("%xIv", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.setArgs(2571);
      option0.setValueSeparator(':');
      option0.addValueForProcessing("Pk\"NG{b6>:D");
      assertEquals(2571, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.setValueSeparator(':');
      option0.addValueForProcessing("Pk_NG{buM6>:D");
      assertEquals(':', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("3k", false, "3k");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("3k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("ngk", "ngk");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option: ngk [ARG...] :: ngk ]", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("bjbVVaorFMOSK", (String) null, true, (String) null);
      option0.setArgs(18);
      boolean boolean0 = option0.hasArgs();
      assertEquals(18, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "Q|Pnf$]ZJ',Be2-");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("(NZyIc", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("RUF", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("ngk", "ngk");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(":,");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "X.");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getLongOpt());
      assertEquals("X.", option0.getDescription());
      assertTrue(boolean0);
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, "\"w!Xj?eh7Ou'RBy", true, "[ option: ");
      String string0 = option0.getKey();
      assertEquals(1, option0.getArgs());
      assertEquals("\"w!Xj?eh7Ou'RBy", string0);
      assertEquals("[ option: ", option0.getDescription());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("(NZyIc", option0.getDescription());
      assertEquals("RUF", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("(NZyIc", option0.getDescription());
      assertEquals("RUF", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("RUF");
      String string0 = option0.toString();
      assertEquals("[ option: RUF RUF  :: (NZyIc ]", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, ")e.dzjKn\"(db&L!u");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals(82, option0.getId());
      assertEquals("(NZyIc", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.setDescription("u");
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", false, "%xIv");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertEquals(82, int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("(NZyIc", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", false, "%xIv");
      String string0 = option0.getLongOpt();
      assertEquals("%xIv", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      option0.getValuesList();
      assertEquals("(NZyIc", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals(82, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("RUF", "(NZyIc");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("u", true, "u");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getArgName();
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      String string0 = option0.getDescription();
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }
}
