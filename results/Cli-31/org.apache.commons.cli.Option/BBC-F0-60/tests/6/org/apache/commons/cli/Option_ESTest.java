/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:48:30 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2547));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2547), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("XZe7BH", "XZe7BH");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "A CloneNotSupportedException was thrown: ");
      option0.setValueSeparator('i');
      option0.setArgs((-1592));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("gyQ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "' contains an illegal character : '");
      option0.addValueForProcessing("gyQ");
      option0.getValuesList();
      assertEquals("", option0.getLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('x');
      char char0 = option0.getValueSeparator();
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "6PS`;8X@)<ur^");
      String string0 = option0.getValue("t-Tw,}w%0A{Nmlg");
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("6PS`;8X@)<ur^", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV");
      option0.setArgs((-1006));
      option0.setOptionalArg(true);
      option0.addValueForProcessing("dQV");
      option0.getValue(0);
      assertEquals((-1006), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.addValueForProcessing("gyQ");
      String string0 = option0.getValue();
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("gyQ", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setType("");
      option0.getType();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("gyQ", "", true, "gyQ");
      option0.getOpt();
      assertEquals("gyQ", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArgName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "Cannot add value, list full.", false, (String) null);
      String string0 = option0.getLongOpt();
      assertEquals("Cannot add value, list full.", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, "dQV", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("dQV", string0);
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      String string0 = option0.getDescription();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("gyQ", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", ">");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.setArgs((-2031));
      int int0 = option0.getArgs();
      assertEquals((-2031), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("");
      String string0 = option0.getArgName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "6PS`;8X@)<ur^");
      option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("6PS`;8X@)<ur^", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(826);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 826, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "6PS`;8X@)<ur^");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "A CloneNotSupportedException was thrown: ");
      option0.setValueSeparator('i');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("7!\"L`Y^nH!<u'y~", true, "Illegal option name '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7!\"L`Y^nH!<u'y~' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("e.w]!6rJfsCY", "e.w]!6rJfsCY", true, "e.w]!6rJfsCY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'e.w]!6rJfsCY' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("O#8R^`zx", "O#8R^`zx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'O#8R^`zx' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "", true, "' contains an illegal character : '");
      option0.setValueSeparator('t');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('t', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("X", "X");
      option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("x$x", "x$x");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "The option '");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "The option '");
      boolean boolean0 = option0.hasArg();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("The option '", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("dQV", (String) null, true, "dQV");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("dQV", "BJ+3DQ_MQ8=b*pO)");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals("BJ+3DQ_MQ8=b*pO)", option0.getDescription());
      assertEquals(100, option0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("gyQ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("X", "X");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "6PS`;8X@)<ur^");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("6PS`;8X@)<ur^", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("X", "X");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.acceptsArg();
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "u", true, "' contains an illegal character : '");
      option0.hashCode();
      assertEquals("u", option0.getLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, "gyQ", true, "gyQ");
      Option option1 = new Option((String) null, false, "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertFalse(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("dQV", (String) null, true, "dQV");
      Option option1 = new Option("", (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      Option option1 = new Option((String) null, false, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals("gyQ", option0.getDescription());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      boolean boolean0 = option0.equals(option0);
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("gyQ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertTrue(option0.hasLongOpt());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-1));
      option0.toString();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      option0.setArgs(31);
      option0.toString();
      assertEquals(31, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      assertFalse(option0.hasValueSeparator());
      
      option0.addValueForProcessing((String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals("arg", option0.getArgName());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("MZxXMZD>f@y )");
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.getValue((String) null);
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("gyQ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      option0.getValue((-1551));
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "u", true, "' contains an illegal character : '");
      option0.getValue();
      assertTrue(option0.hasArgName());
      assertEquals("u", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals("gyQ", option0.getDescription());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-1));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("dQV", "BJ+3DQ_MQ8=b*pO)");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "Ne{o*gNp=Z(4C/a");
      option0.setArgs(31);
      boolean boolean0 = option0.hasArgs();
      assertEquals(31, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("x$x", (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("X", "X");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      assertTrue(option0.hasArgs());
      
      option0.addValueForProcessing("f");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("gyQ", "", true, "gyQ");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("gyQ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      String string0 = option0.getKey();
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.clearValues();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "u", true, "' contains an illegal character : '");
      int int0 = option0.getArgs();
      assertEquals("u", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, int0);
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      assertTrue(option0.hasLongOpt());
      
      option0.setLongOpt((String) null);
      String string0 = option0.toString();
      assertEquals("[ option: dQV  [ARG] :: null ]", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      String string0 = option0.getOpt();
      assertEquals("gyQ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("A", "A");
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgName((String) null);
      String string0 = option0.getArgName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV");
      option0.setDescription("dQV");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      option0.getType();
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      option0.setType(object0);
      assertNotSame(object0, option0);
      
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  :: [ option:    [ARG] ::  ] ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        option0.addValue("[ option:   [ARG] ::  ]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("x$x", "x$x");
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "gyQ");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("gyQ", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, "' contains an illegal character : '");
      option0.getValuesList();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      option0.isRequired();
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(857);
      option0.setValueSeparator('e');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('e', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("dQV", "dQV", true, (String) null);
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("A", "A");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("A");
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('e');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('e', option0.getValueSeparator());
  }
}
