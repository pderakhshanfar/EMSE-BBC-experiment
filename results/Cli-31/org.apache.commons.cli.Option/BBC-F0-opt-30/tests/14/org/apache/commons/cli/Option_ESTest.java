/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:02:11 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      assertTrue(option0.hasArgs());
      
      option0.addValueForProcessing("A CloneNotSupportedException was thrown: ");
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("TX", false, "TX");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("?K{^");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("TX", false, "TX");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      option0.addValueForProcessing("P");
      option0.setValueSeparator('z');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("X-w#Iz`J\"~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-1047));
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("jLE", true, "U:I eh;~*");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      option0.addValueForProcessing("P");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getDescription());
      assertEquals(".^Wf", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("_", "_");
      option0.setValueSeparator('7');
      char char0 = option0.getValueSeparator();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('H');
      char char0 = option0.getValueSeparator();
      assertEquals('H', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("TX", false, "TX");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.addValueForProcessing("_");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.addValueForProcessing("+<ebzDv`\"<)Rd.0y");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setType("");
      option0.getType();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "sre", true, " ");
      option0.getOpt();
      assertEquals(115, option0.getId());
      assertEquals("arg", option0.getArgName());
      assertEquals(" ", option0.getDescription());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("pi", "s)ecG", true, "R?:yBL&Y|XG!sy\"d:Wm");
      String string0 = option0.getKey();
      assertEquals("pi", string0);
      assertEquals("R?:yBL&Y|XG!sy\"d:Wm", option0.getDescription());
      assertEquals("s)ecG", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getKey();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setDescription(":n3GUCi Wi5tz");
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("n", "", true, "n");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, "P");
      option0.acceptsArg();
      assertEquals("P", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.addValueForProcessing("_");
      try { 
        option0.getValue(364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 364, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      option0.addValueForProcessing("P");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("4cVItksxI", "4cVItksxI", true, ".^Wf");
      option0.setValueSeparator('M');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Z^EQ&1yD<*=5tLm", true, ".D{vMZ5kI'`?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z^EQ&1yD<*=5tLm' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("wW)-3", "{zXs='0iXvt.(r@Ur2", false, "ww A&wm<hIGCt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'wW)-3' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(".^Wf", "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.^Wf' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("TX", "TX", false, "?K{^");
      option0.setValueSeparator('0');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('0', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      option0.hasValueSeparator();
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals(".^Wf", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("P", true, "P");
      option0.setArgs(66);
      boolean boolean0 = option0.hasArgs();
      assertEquals(66, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("pi", "s)ecG", true, "R?:yBL&Y|XG!sy\"d:Wm");
      option0.hasArg();
      assertEquals("s)ecG", option0.getLongOpt());
      assertEquals("pi", option0.getOpt());
      assertEquals("R?:yBL&Y|XG!sy\"d:Wm", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("_", "_");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("_", true, "_");
      option0.addValueForProcessing("{zXs='0iXvt.(r@Ur2");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("_", true, "_");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("pi", "V$^Wv", true, "pi");
      Option option1 = new Option("pi", "A&wm<hIGCt");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("pi", option0.getDescription());
      assertEquals("A&wm<hIGCt", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertEquals(112, option1.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("pi", ".^Wf", true, "arg");
      Option option1 = new Option("pi", "A&wm<hIGCt", true, "Me#n\"5!_FvjviPmShJ");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("Me#n\"5!_FvjviPmShJ", option1.getDescription());
      assertEquals("pi", option1.getOpt());
      assertEquals("arg", option1.getArgName());
      assertEquals("A&wm<hIGCt", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("BFSF", "BFSF", false, "AKb8");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals("BFSF", option1.getLongOpt());
      assertEquals("AKb8", option1.getDescription());
      assertEquals(127, option1.getId());
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      Option option1 = new Option("", "", false, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
      assertTrue(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      Option option1 = new Option("pi", "A&wm<hIGCt", true, "Me#n\"5!_FvjviPmShJ");
      boolean boolean0 = option1.equals(option0);
      assertEquals("Me#n\"5!_FvjviPmShJ", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("A&wm<hIGCt", option1.getLongOpt());
      assertFalse(boolean0);
      assertEquals(112, option1.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      boolean boolean0 = option0.equals("V$Wv");
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
      assertEquals("V$Wv", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option:    [ARG] :: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.  ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("TX", false, "TX");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: TX  :: TX ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      String[] stringArray0 = option0.getValues();
      assertEquals("", option0.getDescription());
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
      assertEquals("V$Wv", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      option0.getValue((-1486));
      assertEquals("V$Wv", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getValue("");
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("_", true, "_");
      option0.addValueForProcessing("{zXs='0iXvt.(r@Ur2");
      String string0 = option0.getValue("_");
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("{zXs='0iXvt.(r@Ur2", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.setArgs(1177);
      option0.setValueSeparator('.');
      option0.addValueForProcessing("{zXs='0iXvt.(rUr2");
      assertEquals(1177, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.addValueForProcessing((String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.setArgs(1177);
      option0.toString();
      assertEquals(1177, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("V$Wv", option0.getOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", ".^Wf", true, "arg");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getDescription());
      assertEquals(".^Wf", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", (String) null, true, "z'3");
      int int0 = option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(78, int0);
      assertEquals("z'3", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = option0.getArgs();
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals(1, int0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("pi", "V$^Wv", true, "pi");
      String string0 = option0.getOpt();
      assertEquals("V$^Wv", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("pi", string0);
      assertEquals("pi", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("V$Wv", "");
      boolean boolean0 = option0.acceptsArg();
      assertEquals("V$Wv", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getType();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Object object0 = option0.clone();
      option0.setType(object0);
      assertNotSame(object0, option0);
      
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] :: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.  :: [ option:    [ARG] :: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.  ] ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        option0.addValue("Jp1tDI1r44'");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("pi", "V$^Wv", true, "pi");
      String string0 = option0.getLongOpt();
      assertEquals("V$^Wv", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("pi", option0.getDescription());
      assertEquals(112, option0.getId());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.getValuesList();
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing((String) null);
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.getArgName();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("_", "_", true, "_");
      option0.setValueSeparator('.');
      option0.addValueForProcessing("{zXs='0iXvt.(rUr2");
      assertEquals('.', option0.getValueSeparator());
  }
}
